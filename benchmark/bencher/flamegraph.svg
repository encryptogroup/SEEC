<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1862" onload="init(evt)" viewBox="0 0 1200 1862" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1862" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1845.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1845.00"> </text><svg id="frames" x="10" width="1180" total_samples="74568"><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (8 samples, 0.01%)</title><rect x="0.0094%" y="1765" width="0.0107%" height="15" fill="rgb(227,0,7)" fg:x="7" fg:w="8"/><text x="0.2594%" y="1775.50"></text></g><g><title>&lt;either::Either&lt;L,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 0.06%)</title><rect x="0.0416%" y="1749" width="0.0644%" height="15" fill="rgb(217,0,24)" fg:x="31" fg:w="48"/><text x="0.2916%" y="1759.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (43 samples, 0.06%)</title><rect x="0.1059%" y="1749" width="0.0577%" height="15" fill="rgb(221,193,54)" fg:x="79" fg:w="43"/><text x="0.3559%" y="1759.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (43 samples, 0.06%)</title><rect x="0.1059%" y="1733" width="0.0577%" height="15" fill="rgb(248,212,6)" fg:x="79" fg:w="43"/><text x="0.3559%" y="1743.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (43 samples, 0.06%)</title><rect x="0.1059%" y="1717" width="0.0577%" height="15" fill="rgb(208,68,35)" fg:x="79" fg:w="43"/><text x="0.3559%" y="1727.50"></text></g><g><title>[libc.so.6] (100 samples, 0.13%)</title><rect x="0.0308%" y="1765" width="0.1341%" height="15" fill="rgb(232,128,0)" fg:x="23" fg:w="100"/><text x="0.2808%" y="1775.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (46 samples, 0.06%)</title><rect x="0.1663%" y="1765" width="0.0617%" height="15" fill="rgb(207,160,47)" fg:x="124" fg:w="46"/><text x="0.4163%" y="1775.50"></text></g><g><title>thread_local::thread_id::THREAD::__getit (8 samples, 0.01%)</title><rect x="0.2508%" y="1765" width="0.0107%" height="15" fill="rgb(228,23,34)" fg:x="187" fg:w="8"/><text x="0.5008%" y="1775.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (10 samples, 0.01%)</title><rect x="0.2615%" y="1765" width="0.0134%" height="15" fill="rgb(218,30,26)" fg:x="195" fg:w="10"/><text x="0.5115%" y="1775.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (9 samples, 0.01%)</title><rect x="0.2803%" y="1765" width="0.0121%" height="15" fill="rgb(220,122,19)" fg:x="209" fg:w="9"/><text x="0.5303%" y="1775.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (9 samples, 0.01%)</title><rect x="0.2803%" y="1749" width="0.0121%" height="15" fill="rgb(250,228,42)" fg:x="209" fg:w="9"/><text x="0.5303%" y="1759.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (9 samples, 0.01%)</title><rect x="0.2803%" y="1733" width="0.0121%" height="15" fill="rgb(240,193,28)" fg:x="209" fg:w="9"/><text x="0.5303%" y="1743.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (9 samples, 0.01%)</title><rect x="0.2803%" y="1717" width="0.0121%" height="15" fill="rgb(216,20,37)" fg:x="209" fg:w="9"/><text x="0.5303%" y="1727.50"></text></g><g><title>tokio::runtime::task::raw::schedule (9 samples, 0.01%)</title><rect x="0.2937%" y="1765" width="0.0121%" height="15" fill="rgb(206,188,39)" fg:x="219" fg:w="9"/><text x="0.5437%" y="1775.50"></text></g><g><title>tokio::runtime::task::core::Header::get_scheduler (9 samples, 0.01%)</title><rect x="0.2937%" y="1749" width="0.0121%" height="15" fill="rgb(217,207,13)" fg:x="219" fg:w="9"/><text x="0.5437%" y="1759.50"></text></g><g><title>[[heap]] (233 samples, 0.31%)</title><rect x="0.0094%" y="1781" width="0.3125%" height="15" fill="rgb(231,73,38)" fg:x="7" fg:w="233"/><text x="0.2594%" y="1791.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.01%)</title><rect x="0.3219%" y="1765" width="0.0121%" height="15" fill="rgb(225,20,46)" fg:x="240" fg:w="9"/><text x="0.5719%" y="1775.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.03%)</title><rect x="0.3339%" y="1765" width="0.0255%" height="15" fill="rgb(210,31,41)" fg:x="249" fg:w="19"/><text x="0.5839%" y="1775.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (9 samples, 0.01%)</title><rect x="0.3594%" y="1765" width="0.0121%" height="15" fill="rgb(221,200,47)" fg:x="268" fg:w="9"/><text x="0.6094%" y="1775.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next_back (9 samples, 0.01%)</title><rect x="0.3594%" y="1749" width="0.0121%" height="15" fill="rgb(226,26,5)" fg:x="268" fg:w="9"/><text x="0.6094%" y="1759.50"></text></g><g><title>&lt;bitvec::slice::iter::BitValIter&lt;T,O&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (9 samples, 0.01%)</title><rect x="0.3594%" y="1733" width="0.0121%" height="15" fill="rgb(249,33,26)" fg:x="268" fg:w="9"/><text x="0.6094%" y="1743.50"></text></g><g><title>&lt;bitvec::ptr::range::BitPtrRange&lt;M,T,O&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (9 samples, 0.01%)</title><rect x="0.3594%" y="1717" width="0.0121%" height="15" fill="rgb(235,183,28)" fg:x="268" fg:w="9"/><text x="0.6094%" y="1727.50"></text></g><g><title>&lt;either::Either&lt;L,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (493 samples, 0.66%)</title><rect x="0.3715%" y="1765" width="0.6611%" height="15" fill="rgb(221,5,38)" fg:x="277" fg:w="493"/><text x="0.6215%" y="1775.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.04%)</title><rect x="0.9964%" y="1749" width="0.0362%" height="15" fill="rgb(247,18,42)" fg:x="743" fg:w="27"/><text x="1.2464%" y="1759.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.04%)</title><rect x="0.9964%" y="1733" width="0.0362%" height="15" fill="rgb(241,131,45)" fg:x="743" fg:w="27"/><text x="1.2464%" y="1743.50"></text></g><g><title>&lt;gmw::circuit::static_layers::ScLayerIterator&lt;G,Idx&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.02%)</title><rect x="1.0326%" y="1765" width="0.0188%" height="15" fill="rgb(249,31,29)" fg:x="770" fg:w="14"/><text x="1.2826%" y="1775.50"></text></g><g><title>&lt;gmw::protocols::boolean_gmw::BooleanGmw as gmw::protocols::Protocol&gt;::compute_msg (11 samples, 0.01%)</title><rect x="1.0554%" y="1765" width="0.0148%" height="15" fill="rgb(225,111,53)" fg:x="787" fg:w="11"/><text x="1.3054%" y="1775.50"></text></g><g><title>&lt;gmw::protocols::boolean_gmw::BooleanGmw as gmw::protocols::Protocol&gt;::compute_msg_simd (11 samples, 0.01%)</title><rect x="1.0702%" y="1765" width="0.0148%" height="15" fill="rgb(238,160,17)" fg:x="798" fg:w="11"/><text x="1.3202%" y="1775.50"></text></g><g><title>[libc.so.6] (22 samples, 0.03%)</title><rect x="1.1439%" y="1765" width="0.0295%" height="15" fill="rgb(214,148,48)" fg:x="853" fg:w="22"/><text x="1.3939%" y="1775.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (11 samples, 0.01%)</title><rect x="1.1761%" y="1765" width="0.0148%" height="15" fill="rgb(232,36,49)" fg:x="877" fg:w="11"/><text x="1.4261%" y="1775.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (11 samples, 0.01%)</title><rect x="1.1761%" y="1749" width="0.0148%" height="15" fill="rgb(209,103,24)" fg:x="877" fg:w="11"/><text x="1.4261%" y="1759.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (10 samples, 0.01%)</title><rect x="1.1774%" y="1733" width="0.0134%" height="15" fill="rgb(229,88,8)" fg:x="878" fg:w="10"/><text x="1.4274%" y="1743.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (10 samples, 0.01%)</title><rect x="1.1774%" y="1717" width="0.0134%" height="15" fill="rgb(213,181,19)" fg:x="878" fg:w="10"/><text x="1.4274%" y="1727.50"></text></g><g><title>alloc::raw_vec::finish_grow (15 samples, 0.02%)</title><rect x="1.1909%" y="1765" width="0.0201%" height="15" fill="rgb(254,191,54)" fg:x="888" fg:w="15"/><text x="1.4409%" y="1775.50"></text></g><g><title>bitvec::vec::api::&lt;impl bitvec::vec::BitVec&lt;T,O&gt;&gt;::reserve (50 samples, 0.07%)</title><rect x="1.2110%" y="1765" width="0.0671%" height="15" fill="rgb(241,83,37)" fg:x="903" fg:w="50"/><text x="1.4610%" y="1775.50"></text></g><g><title>bitvec::vec::api::&lt;impl bitvec::vec::BitVec&lt;T,O&gt;&gt;::len (45 samples, 0.06%)</title><rect x="1.2177%" y="1749" width="0.0603%" height="15" fill="rgb(233,36,39)" fg:x="908" fg:w="45"/><text x="1.4677%" y="1759.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::len (45 samples, 0.06%)</title><rect x="1.2177%" y="1733" width="0.0603%" height="15" fill="rgb(226,3,54)" fg:x="908" fg:w="45"/><text x="1.4677%" y="1743.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (235 samples, 0.32%)</title><rect x="1.2861%" y="1765" width="0.3151%" height="15" fill="rgb(245,192,40)" fg:x="959" fg:w="235"/><text x="1.5361%" y="1775.50"></text></g><g><title>core::ops::function::FnOnce::call_once (39 samples, 0.05%)</title><rect x="1.5489%" y="1749" width="0.0523%" height="15" fill="rgb(238,167,29)" fg:x="1155" fg:w="39"/><text x="1.7989%" y="1759.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.05%)</title><rect x="1.5489%" y="1733" width="0.0523%" height="15" fill="rgb(232,182,51)" fg:x="1155" fg:w="39"/><text x="1.7989%" y="1743.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (39 samples, 0.05%)</title><rect x="1.5489%" y="1717" width="0.0523%" height="15" fill="rgb(231,60,39)" fg:x="1155" fg:w="39"/><text x="1.7989%" y="1727.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.05%)</title><rect x="1.5489%" y="1701" width="0.0523%" height="15" fill="rgb(208,69,12)" fg:x="1155" fg:w="39"/><text x="1.7989%" y="1711.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.05%)</title><rect x="1.5489%" y="1685" width="0.0523%" height="15" fill="rgb(235,93,37)" fg:x="1155" fg:w="39"/><text x="1.7989%" y="1695.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (39 samples, 0.05%)</title><rect x="1.5489%" y="1669" width="0.0523%" height="15" fill="rgb(213,116,39)" fg:x="1155" fg:w="39"/><text x="1.7989%" y="1679.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (35 samples, 0.05%)</title><rect x="1.6012%" y="1765" width="0.0469%" height="15" fill="rgb(222,207,29)" fg:x="1194" fg:w="35"/><text x="1.8512%" y="1775.50"></text></g><g><title>gmw::circuit::ExecutableLayer&lt;G,Idx&gt;::interactive_count (11 samples, 0.01%)</title><rect x="1.6549%" y="1765" width="0.0148%" height="15" fill="rgb(206,96,30)" fg:x="1234" fg:w="11"/><text x="1.9049%" y="1775.50"></text></g><g><title>gmw::executor::GateOutputs&lt;Shares&gt;::set (12 samples, 0.02%)</title><rect x="1.6817%" y="1765" width="0.0161%" height="15" fill="rgb(218,138,4)" fg:x="1254" fg:w="12"/><text x="1.9317%" y="1775.50"></text></g><g><title>gmw::mul_triple::boolean::MulTriples::iter (10 samples, 0.01%)</title><rect x="1.6978%" y="1765" width="0.0134%" height="15" fill="rgb(250,191,14)" fg:x="1266" fg:w="10"/><text x="1.9478%" y="1775.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (8 samples, 0.01%)</title><rect x="1.7179%" y="1765" width="0.0107%" height="15" fill="rgb(239,60,40)" fg:x="1281" fg:w="8"/><text x="1.9679%" y="1775.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (16 samples, 0.02%)</title><rect x="1.7648%" y="1765" width="0.0215%" height="15" fill="rgb(206,27,48)" fg:x="1316" fg:w="16"/><text x="2.0148%" y="1775.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (9 samples, 0.01%)</title><rect x="1.7742%" y="1749" width="0.0121%" height="15" fill="rgb(225,35,8)" fg:x="1323" fg:w="9"/><text x="2.0242%" y="1759.50"></text></g><g><title>[[stack]] (1,109 samples, 1.49%)</title><rect x="0.3219%" y="1781" width="1.4872%" height="15" fill="rgb(250,213,24)" fg:x="240" fg:w="1109"/><text x="0.5719%" y="1791.50"></text></g><g><title>tokio::runtime::park::Inner::park (11 samples, 0.01%)</title><rect x="1.8185%" y="1765" width="0.0148%" height="15" fill="rgb(247,123,22)" fg:x="1356" fg:w="11"/><text x="2.0685%" y="1775.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::CURRENT::FOO::__getit (12 samples, 0.02%)</title><rect x="1.8332%" y="1765" width="0.0161%" height="15" fill="rgb(231,138,38)" fg:x="1367" fg:w="12"/><text x="2.0832%" y="1775.50"></text></g><g><title>[aes_cbc] (33 samples, 0.04%)</title><rect x="1.8091%" y="1781" width="0.0443%" height="15" fill="rgb(231,145,46)" fg:x="1349" fg:w="33"/><text x="2.0591%" y="1791.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (63 samples, 0.08%)</title><rect x="1.8533%" y="1765" width="0.0845%" height="15" fill="rgb(251,118,11)" fg:x="1382" fg:w="63"/><text x="2.1033%" y="1775.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (63 samples, 0.08%)</title><rect x="1.8533%" y="1749" width="0.0845%" height="15" fill="rgb(217,147,25)" fg:x="1382" fg:w="63"/><text x="2.1033%" y="1759.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 0.08%)</title><rect x="1.8560%" y="1733" width="0.0818%" height="15" fill="rgb(247,81,37)" fg:x="1384" fg:w="61"/><text x="2.1060%" y="1743.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (61 samples, 0.08%)</title><rect x="1.8560%" y="1717" width="0.0818%" height="15" fill="rgb(209,12,38)" fg:x="1384" fg:w="61"/><text x="2.1060%" y="1727.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 0.08%)</title><rect x="1.8560%" y="1701" width="0.0818%" height="15" fill="rgb(227,1,9)" fg:x="1384" fg:w="61"/><text x="2.1060%" y="1711.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (61 samples, 0.08%)</title><rect x="1.8560%" y="1685" width="0.0818%" height="15" fill="rgb(248,47,43)" fg:x="1384" fg:w="61"/><text x="2.1060%" y="1695.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 0.08%)</title><rect x="1.8560%" y="1669" width="0.0818%" height="15" fill="rgb(221,10,30)" fg:x="1384" fg:w="61"/><text x="2.1060%" y="1679.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (61 samples, 0.08%)</title><rect x="1.8560%" y="1653" width="0.0818%" height="15" fill="rgb(210,229,1)" fg:x="1384" fg:w="61"/><text x="2.1060%" y="1663.50"></text></g><g><title>&lt;bitvec::boxed::iter::IntoIter&lt;T,O&gt; as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 0.08%)</title><rect x="1.8560%" y="1637" width="0.0818%" height="15" fill="rgb(222,148,37)" fg:x="1384" fg:w="61"/><text x="2.1060%" y="1647.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (61 samples, 0.08%)</title><rect x="1.8560%" y="1621" width="0.0818%" height="15" fill="rgb(234,67,33)" fg:x="1384" fg:w="61"/><text x="2.1060%" y="1631.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (61 samples, 0.08%)</title><rect x="1.8560%" y="1605" width="0.0818%" height="15" fill="rgb(247,98,35)" fg:x="1384" fg:w="61"/><text x="2.1060%" y="1615.50"></text></g><g><title>[anon] (84 samples, 0.11%)</title><rect x="1.8533%" y="1781" width="0.1126%" height="15" fill="rgb(247,138,52)" fg:x="1382" fg:w="84"/><text x="2.1033%" y="1791.50"></text></g><g><title>&lt;either::Either&lt;L,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 0.10%)</title><rect x="1.9915%" y="1765" width="0.1033%" height="15" fill="rgb(213,79,30)" fg:x="1485" fg:w="77"/><text x="2.2415%" y="1775.50"></text></g><g><title>[libc.so.6] (13 samples, 0.02%)</title><rect x="2.0974%" y="1765" width="0.0174%" height="15" fill="rgb(246,177,23)" fg:x="1564" fg:w="13"/><text x="2.3474%" y="1775.50"></text></g><g><title>[libc.so.6] (114 samples, 0.15%)</title><rect x="1.9740%" y="1781" width="0.1529%" height="15" fill="rgb(230,62,27)" fg:x="1472" fg:w="114"/><text x="2.2240%" y="1791.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.04%)</title><rect x="2.2570%" y="1717" width="0.0362%" height="15" fill="rgb(216,154,8)" fg:x="1683" fg:w="27"/><text x="2.5070%" y="1727.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (27 samples, 0.04%)</title><rect x="2.2570%" y="1701" width="0.0362%" height="15" fill="rgb(244,35,45)" fg:x="1683" fg:w="27"/><text x="2.5070%" y="1711.50"></text></g><g><title>core::iter::adapters::fuse::and_then_or_clear (27 samples, 0.04%)</title><rect x="2.2570%" y="1685" width="0.0362%" height="15" fill="rgb(251,115,12)" fg:x="1683" fg:w="27"/><text x="2.5070%" y="1695.50"></text></g><g><title>core::ops::function::FnOnce::call_once (14 samples, 0.02%)</title><rect x="2.2744%" y="1669" width="0.0188%" height="15" fill="rgb(240,54,50)" fg:x="1696" fg:w="14"/><text x="2.5244%" y="1679.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.02%)</title><rect x="2.2744%" y="1653" width="0.0188%" height="15" fill="rgb(233,84,52)" fg:x="1696" fg:w="14"/><text x="2.5244%" y="1663.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (152 samples, 0.20%)</title><rect x="2.1269%" y="1765" width="0.2038%" height="15" fill="rgb(207,117,47)" fg:x="1586" fg:w="152"/><text x="2.3769%" y="1775.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 0.10%)</title><rect x="2.2355%" y="1749" width="0.0952%" height="15" fill="rgb(249,43,39)" fg:x="1667" fg:w="71"/><text x="2.4855%" y="1759.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 0.10%)</title><rect x="2.2355%" y="1733" width="0.0952%" height="15" fill="rgb(209,38,44)" fg:x="1667" fg:w="71"/><text x="2.4855%" y="1743.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (28 samples, 0.04%)</title><rect x="2.2932%" y="1717" width="0.0375%" height="15" fill="rgb(236,212,23)" fg:x="1710" fg:w="28"/><text x="2.5432%" y="1727.50"></text></g><g><title>core::ops::function::FnOnce::call_once (28 samples, 0.04%)</title><rect x="2.2932%" y="1701" width="0.0375%" height="15" fill="rgb(242,79,21)" fg:x="1710" fg:w="28"/><text x="2.5432%" y="1711.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.04%)</title><rect x="2.2932%" y="1685" width="0.0375%" height="15" fill="rgb(211,96,35)" fg:x="1710" fg:w="28"/><text x="2.5432%" y="1695.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.02%)</title><rect x="2.3401%" y="1765" width="0.0201%" height="15" fill="rgb(253,215,40)" fg:x="1745" fg:w="15"/><text x="2.5901%" y="1775.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (71 samples, 0.10%)</title><rect x="2.3603%" y="1765" width="0.0952%" height="15" fill="rgb(211,81,21)" fg:x="1760" fg:w="71"/><text x="2.6103%" y="1775.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (51 samples, 0.07%)</title><rect x="2.3871%" y="1749" width="0.0684%" height="15" fill="rgb(208,190,38)" fg:x="1780" fg:w="51"/><text x="2.6371%" y="1759.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 0.07%)</title><rect x="2.3871%" y="1733" width="0.0684%" height="15" fill="rgb(235,213,38)" fg:x="1780" fg:w="51"/><text x="2.6371%" y="1743.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (51 samples, 0.07%)</title><rect x="2.3871%" y="1717" width="0.0684%" height="15" fill="rgb(237,122,38)" fg:x="1780" fg:w="51"/><text x="2.6371%" y="1727.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 0.07%)</title><rect x="2.3871%" y="1701" width="0.0684%" height="15" fill="rgb(244,218,35)" fg:x="1780" fg:w="51"/><text x="2.6371%" y="1711.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 0.07%)</title><rect x="2.3871%" y="1685" width="0.0684%" height="15" fill="rgb(240,68,47)" fg:x="1780" fg:w="51"/><text x="2.6371%" y="1695.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (38 samples, 0.05%)</title><rect x="2.4045%" y="1669" width="0.0510%" height="15" fill="rgb(210,16,53)" fg:x="1793" fg:w="38"/><text x="2.6545%" y="1679.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (38 samples, 0.05%)</title><rect x="2.4045%" y="1653" width="0.0510%" height="15" fill="rgb(235,124,12)" fg:x="1793" fg:w="38"/><text x="2.6545%" y="1663.50"></text></g><g><title>&lt;gmw::protocols::boolean_gmw::BooleanGmw as gmw::protocols::Protocol&gt;::evaluate_interactive::{{closure}} (38 samples, 0.05%)</title><rect x="2.4045%" y="1637" width="0.0510%" height="15" fill="rgb(224,169,11)" fg:x="1793" fg:w="38"/><text x="2.6545%" y="1647.50"></text></g><g><title>gmw::evaluate::and::evaluate (38 samples, 0.05%)</title><rect x="2.4045%" y="1621" width="0.0510%" height="15" fill="rgb(250,166,2)" fg:x="1793" fg:w="38"/><text x="2.6545%" y="1631.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (64 samples, 0.09%)</title><rect x="2.4555%" y="1765" width="0.0858%" height="15" fill="rgb(242,216,29)" fg:x="1831" fg:w="64"/><text x="2.7055%" y="1775.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (17 samples, 0.02%)</title><rect x="2.5185%" y="1749" width="0.0228%" height="15" fill="rgb(230,116,27)" fg:x="1878" fg:w="17"/><text x="2.7685%" y="1759.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (17 samples, 0.02%)</title><rect x="2.5185%" y="1733" width="0.0228%" height="15" fill="rgb(228,99,48)" fg:x="1878" fg:w="17"/><text x="2.7685%" y="1743.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next_back (17 samples, 0.02%)</title><rect x="2.5185%" y="1717" width="0.0228%" height="15" fill="rgb(253,11,6)" fg:x="1878" fg:w="17"/><text x="2.7685%" y="1727.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (40 samples, 0.05%)</title><rect x="2.5413%" y="1765" width="0.0536%" height="15" fill="rgb(247,143,39)" fg:x="1895" fg:w="40"/><text x="2.7913%" y="1775.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next_back (9 samples, 0.01%)</title><rect x="2.5829%" y="1749" width="0.0121%" height="15" fill="rgb(236,97,10)" fg:x="1926" fg:w="9"/><text x="2.8329%" y="1759.50"></text></g><g><title>&lt;bitvec::slice::iter::BitValIter&lt;T,O&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (9 samples, 0.01%)</title><rect x="2.5829%" y="1733" width="0.0121%" height="15" fill="rgb(233,208,19)" fg:x="1926" fg:w="9"/><text x="2.8329%" y="1743.50"></text></g><g><title>&lt;bitvec::ptr::range::BitPtrRange&lt;M,T,O&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (9 samples, 0.01%)</title><rect x="2.5829%" y="1717" width="0.0121%" height="15" fill="rgb(216,164,2)" fg:x="1926" fg:w="9"/><text x="2.8329%" y="1727.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.04%)</title><rect x="2.5949%" y="1765" width="0.0389%" height="15" fill="rgb(220,129,5)" fg:x="1935" fg:w="29"/><text x="2.8449%" y="1775.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (9 samples, 0.01%)</title><rect x="2.6218%" y="1749" width="0.0121%" height="15" fill="rgb(242,17,10)" fg:x="1955" fg:w="9"/><text x="2.8718%" y="1759.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.01%)</title><rect x="2.6218%" y="1733" width="0.0121%" height="15" fill="rgb(242,107,0)" fg:x="1955" fg:w="9"/><text x="2.8718%" y="1743.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (9 samples, 0.01%)</title><rect x="2.6218%" y="1717" width="0.0121%" height="15" fill="rgb(251,28,31)" fg:x="1955" fg:w="9"/><text x="2.8718%" y="1727.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.01%)</title><rect x="2.6218%" y="1701" width="0.0121%" height="15" fill="rgb(233,223,10)" fg:x="1955" fg:w="9"/><text x="2.8718%" y="1711.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (9 samples, 0.01%)</title><rect x="2.6218%" y="1685" width="0.0121%" height="15" fill="rgb(215,21,27)" fg:x="1955" fg:w="9"/><text x="2.8718%" y="1695.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.01%)</title><rect x="2.6218%" y="1669" width="0.0121%" height="15" fill="rgb(232,23,21)" fg:x="1955" fg:w="9"/><text x="2.8718%" y="1679.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (9 samples, 0.01%)</title><rect x="2.6218%" y="1653" width="0.0121%" height="15" fill="rgb(244,5,23)" fg:x="1955" fg:w="9"/><text x="2.8718%" y="1663.50"></text></g><g><title>&lt;bitvec::boxed::iter::IntoIter&lt;T,O&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.01%)</title><rect x="2.6218%" y="1637" width="0.0121%" height="15" fill="rgb(226,81,46)" fg:x="1955" fg:w="9"/><text x="2.8718%" y="1647.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (9 samples, 0.01%)</title><rect x="2.6218%" y="1621" width="0.0121%" height="15" fill="rgb(247,70,30)" fg:x="1955" fg:w="9"/><text x="2.8718%" y="1631.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (9 samples, 0.01%)</title><rect x="2.6218%" y="1605" width="0.0121%" height="15" fill="rgb(212,68,19)" fg:x="1955" fg:w="9"/><text x="2.8718%" y="1615.50"></text></g><g><title>&lt;either::Either&lt;L,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (74 samples, 0.10%)</title><rect x="2.6338%" y="1765" width="0.0992%" height="15" fill="rgb(240,187,13)" fg:x="1964" fg:w="74"/><text x="2.8838%" y="1775.50"></text></g><g><title>&lt;gmw::protocols::boolean_gmw::BooleanGmw as gmw::protocols::Protocol&gt;::evaluate_interactive_simd (13 samples, 0.02%)</title><rect x="2.7411%" y="1765" width="0.0174%" height="15" fill="rgb(223,113,26)" fg:x="2044" fg:w="13"/><text x="2.9911%" y="1775.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (45 samples, 0.06%)</title><rect x="2.7586%" y="1765" width="0.0603%" height="15" fill="rgb(206,192,2)" fg:x="2057" fg:w="45"/><text x="3.0086%" y="1775.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enter (26 samples, 0.03%)</title><rect x="2.8256%" y="1765" width="0.0349%" height="15" fill="rgb(241,108,4)" fg:x="2107" fg:w="26"/><text x="3.0756%" y="1775.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::exit (18 samples, 0.02%)</title><rect x="2.8605%" y="1765" width="0.0241%" height="15" fill="rgb(247,173,49)" fg:x="2133" fg:w="18"/><text x="3.1105%" y="1775.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (19 samples, 0.03%)</title><rect x="2.8846%" y="1765" width="0.0255%" height="15" fill="rgb(224,114,35)" fg:x="2151" fg:w="19"/><text x="3.1346%" y="1775.50"></text></g><g><title>[libc.so.6] (30 samples, 0.04%)</title><rect x="2.9248%" y="1765" width="0.0402%" height="15" fill="rgb(245,159,27)" fg:x="2181" fg:w="30"/><text x="3.1748%" y="1775.50"></text></g><g><title>__rdl_alloc (13 samples, 0.02%)</title><rect x="2.9651%" y="1765" width="0.0174%" height="15" fill="rgb(245,172,44)" fg:x="2211" fg:w="13"/><text x="3.2151%" y="1775.50"></text></g><g><title>bitvec::vec::api::&lt;impl bitvec::vec::BitVec&lt;T,O&gt;&gt;::reserve (44 samples, 0.06%)</title><rect x="3.0174%" y="1765" width="0.0590%" height="15" fill="rgb(236,23,11)" fg:x="2250" fg:w="44"/><text x="3.2674%" y="1775.50"></text></g><g><title>cfree (12 samples, 0.02%)</title><rect x="3.0898%" y="1765" width="0.0161%" height="15" fill="rgb(205,117,38)" fg:x="2304" fg:w="12"/><text x="3.3398%" y="1775.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (23 samples, 0.03%)</title><rect x="3.1126%" y="1765" width="0.0308%" height="15" fill="rgb(237,72,25)" fg:x="2321" fg:w="23"/><text x="3.3626%" y="1775.50"></text></g><g><title>core::iter::traits::collect::Extend::extend_one (65 samples, 0.09%)</title><rect x="3.1434%" y="1765" width="0.0872%" height="15" fill="rgb(244,70,9)" fg:x="2344" fg:w="65"/><text x="3.3934%" y="1775.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="3.2319%" y="1701" width="0.0241%" height="15" fill="rgb(217,125,39)" fg:x="2410" fg:w="18"/><text x="3.4819%" y="1711.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (18 samples, 0.02%)</title><rect x="3.2319%" y="1685" width="0.0241%" height="15" fill="rgb(235,36,10)" fg:x="2410" fg:w="18"/><text x="3.4819%" y="1695.50"></text></g><g><title>&lt;(ExtendA,ExtendB) as core::iter::traits::collect::Extend&lt;(A,B)&gt;&gt;::extend::extend::{{closure}} (21 samples, 0.03%)</title><rect x="3.2561%" y="1685" width="0.0282%" height="15" fill="rgb(251,123,47)" fg:x="2428" fg:w="21"/><text x="3.5061%" y="1695.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.02%)</title><rect x="3.3017%" y="1669" width="0.0161%" height="15" fill="rgb(221,13,13)" fg:x="2462" fg:w="12"/><text x="3.5517%" y="1679.50"></text></g><g><title>&lt;(ExtendA,ExtendB) as core::iter::traits::collect::Extend&lt;(A,B)&gt;&gt;::extend (83 samples, 0.11%)</title><rect x="3.2319%" y="1749" width="0.1113%" height="15" fill="rgb(238,131,9)" fg:x="2410" fg:w="83"/><text x="3.4819%" y="1759.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (83 samples, 0.11%)</title><rect x="3.2319%" y="1733" width="0.1113%" height="15" fill="rgb(211,50,8)" fg:x="2410" fg:w="83"/><text x="3.4819%" y="1743.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (83 samples, 0.11%)</title><rect x="3.2319%" y="1717" width="0.1113%" height="15" fill="rgb(245,182,24)" fg:x="2410" fg:w="83"/><text x="3.4819%" y="1727.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (65 samples, 0.09%)</title><rect x="3.2561%" y="1701" width="0.0872%" height="15" fill="rgb(242,14,37)" fg:x="2428" fg:w="65"/><text x="3.5061%" y="1711.50"></text></g><g><title>&lt;gmw::protocols::boolean_gmw::BooleanGmw as gmw::protocols::Protocol&gt;::compute_msg::{{closure}} (44 samples, 0.06%)</title><rect x="3.2843%" y="1685" width="0.0590%" height="15" fill="rgb(246,228,12)" fg:x="2449" fg:w="44"/><text x="3.5343%" y="1695.50"></text></g><g><title>gmw::evaluate::and::compute_shares (19 samples, 0.03%)</title><rect x="3.3178%" y="1669" width="0.0255%" height="15" fill="rgb(213,55,15)" fg:x="2474" fg:w="19"/><text x="3.5678%" y="1679.50"></text></g><g><title>core::iter::traits::iterator::Iterator::unzip (86 samples, 0.12%)</title><rect x="3.2306%" y="1765" width="0.1153%" height="15" fill="rgb(209,9,3)" fg:x="2409" fg:w="86"/><text x="3.4806%" y="1775.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (104 samples, 0.14%)</title><rect x="3.3459%" y="1765" width="0.1395%" height="15" fill="rgb(230,59,30)" fg:x="2495" fg:w="104"/><text x="3.5959%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::zip::Zip&lt;core::iter::adapters::zip::Zip&lt;core::iter::adapters::zip::Zip&lt;core::iter::adapters::zip::Zip&lt;bitvec::boxed::iter::IntoIter,bitvec::boxed::iter::IntoIter&gt;,bitvec::boxed::iter::IntoIter&gt;,bitvec::boxed::iter::IntoIter&gt;,core::iter::adapters::rev::Rev&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::zip::Zip&lt;core::iter::adapters::zip::Zip&lt;bitvec::slice::iter::BitValIter&lt;usize,bitvec::order::Lsb0&gt;,bitvec::slice::iter::BitValIter&lt;usize,bitvec::order::Lsb0&gt;&gt;,bitvec::slice::iter::BitValIter&lt;usize,bitvec::order::Lsb0&gt;&gt;,gmw::mul_triple::boolean::MulTriplesSlice::iter::{{closure}}&gt;&gt;&gt;&gt; (8 samples, 0.01%)</title><rect x="3.4854%" y="1765" width="0.0107%" height="15" fill="rgb(209,121,21)" fg:x="2599" fg:w="8"/><text x="3.7354%" y="1775.50"></text></g><g><title>sharded_slab::pool::Pool&lt;T,C&gt;::get (19 samples, 0.03%)</title><rect x="3.5846%" y="1445" width="0.0255%" height="15" fill="rgb(220,109,13)" fg:x="2673" fg:w="19"/><text x="3.8346%" y="1455.50"></text></g><g><title>sharded_slab::shard::Shard&lt;T,C&gt;::with_slot (12 samples, 0.02%)</title><rect x="3.5940%" y="1429" width="0.0161%" height="15" fill="rgb(232,18,1)" fg:x="2680" fg:w="12"/><text x="3.8440%" y="1439.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (28 samples, 0.04%)</title><rect x="3.5739%" y="1477" width="0.0375%" height="15" fill="rgb(215,41,42)" fg:x="2665" fg:w="28"/><text x="3.8239%" y="1487.50"></text></g><g><title>tracing_subscriber::registry::sharded::Registry::get (22 samples, 0.03%)</title><rect x="3.5820%" y="1461" width="0.0295%" height="15" fill="rgb(224,123,36)" fg:x="2671" fg:w="22"/><text x="3.8320%" y="1471.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (33 samples, 0.04%)</title><rect x="3.5739%" y="1493" width="0.0443%" height="15" fill="rgb(240,125,3)" fg:x="2665" fg:w="33"/><text x="3.8239%" y="1503.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (42 samples, 0.06%)</title><rect x="3.5726%" y="1509" width="0.0563%" height="15" fill="rgb(205,98,50)" fg:x="2664" fg:w="42"/><text x="3.8226%" y="1519.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit::{{closure}} (48 samples, 0.06%)</title><rect x="3.5726%" y="1525" width="0.0644%" height="15" fill="rgb(205,185,37)" fg:x="2664" fg:w="48"/><text x="3.8226%" y="1535.50"></text></g><g><title>tracing_core::dispatcher::get_default (57 samples, 0.08%)</title><rect x="3.5645%" y="1573" width="0.0764%" height="15" fill="rgb(238,207,15)" fg:x="2658" fg:w="57"/><text x="3.8145%" y="1583.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (57 samples, 0.08%)</title><rect x="3.5645%" y="1557" width="0.0764%" height="15" fill="rgb(213,199,42)" fg:x="2658" fg:w="57"/><text x="3.8145%" y="1567.50"></text></g><g><title>tracing_core::dispatcher::get_default::{{closure}} (54 samples, 0.07%)</title><rect x="3.5686%" y="1541" width="0.0724%" height="15" fill="rgb(235,201,11)" fg:x="2661" fg:w="54"/><text x="3.8186%" y="1551.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (73 samples, 0.10%)</title><rect x="3.5484%" y="1637" width="0.0979%" height="15" fill="rgb(207,46,11)" fg:x="2646" fg:w="73"/><text x="3.7984%" y="1647.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::exit (73 samples, 0.10%)</title><rect x="3.5484%" y="1621" width="0.0979%" height="15" fill="rgb(241,35,35)" fg:x="2646" fg:w="73"/><text x="3.7984%" y="1631.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::exit (71 samples, 0.10%)</title><rect x="3.5511%" y="1605" width="0.0952%" height="15" fill="rgb(243,32,47)" fg:x="2648" fg:w="71"/><text x="3.8011%" y="1615.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (68 samples, 0.09%)</title><rect x="3.5551%" y="1589" width="0.0912%" height="15" fill="rgb(247,202,23)" fg:x="2651" fg:w="68"/><text x="3.8051%" y="1599.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::Entered&gt; (85 samples, 0.11%)</title><rect x="3.5484%" y="1685" width="0.1140%" height="15" fill="rgb(219,102,11)" fg:x="2646" fg:w="85"/><text x="3.7984%" y="1695.50"></text></g><g><title>&lt;tracing::span::Entered as core::ops::drop::Drop&gt;::drop (85 samples, 0.11%)</title><rect x="3.5484%" y="1669" width="0.1140%" height="15" fill="rgb(243,110,44)" fg:x="2646" fg:w="85"/><text x="3.7984%" y="1679.50"></text></g><g><title>tracing::span::Span::do_exit (85 samples, 0.11%)</title><rect x="3.5484%" y="1653" width="0.1140%" height="15" fill="rgb(222,74,54)" fg:x="2646" fg:w="85"/><text x="3.7984%" y="1663.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (8 samples, 0.01%)</title><rect x="4.4376%" y="1653" width="0.0107%" height="15" fill="rgb(216,99,12)" fg:x="3309" fg:w="8"/><text x="4.6876%" y="1663.50"></text></g><g><title>[libc.so.6] (8 samples, 0.01%)</title><rect x="4.4376%" y="1637" width="0.0107%" height="15" fill="rgb(226,22,26)" fg:x="3309" fg:w="8"/><text x="4.6876%" y="1647.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (13 samples, 0.02%)</title><rect x="4.4510%" y="1461" width="0.0174%" height="15" fill="rgb(217,163,10)" fg:x="3319" fg:w="13"/><text x="4.7010%" y="1471.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (13 samples, 0.02%)</title><rect x="4.4510%" y="1445" width="0.0174%" height="15" fill="rgb(213,25,53)" fg:x="3319" fg:w="13"/><text x="4.7010%" y="1455.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (13 samples, 0.02%)</title><rect x="4.4510%" y="1429" width="0.0174%" height="15" fill="rgb(252,105,26)" fg:x="3319" fg:w="13"/><text x="4.7010%" y="1439.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.02%)</title><rect x="4.4510%" y="1413" width="0.0174%" height="15" fill="rgb(220,39,43)" fg:x="3319" fg:w="13"/><text x="4.7010%" y="1423.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.02%)</title><rect x="4.4510%" y="1397" width="0.0174%" height="15" fill="rgb(229,68,48)" fg:x="3319" fg:w="13"/><text x="4.7010%" y="1407.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.02%)</title><rect x="4.4510%" y="1381" width="0.0174%" height="15" fill="rgb(252,8,32)" fg:x="3319" fg:w="13"/><text x="4.7010%" y="1391.50"></text></g><g><title>malloc (12 samples, 0.02%)</title><rect x="4.4523%" y="1365" width="0.0161%" height="15" fill="rgb(223,20,43)" fg:x="3320" fg:w="12"/><text x="4.7023%" y="1375.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (74 samples, 0.10%)</title><rect x="4.4510%" y="1525" width="0.0992%" height="15" fill="rgb(229,81,49)" fg:x="3319" fg:w="74"/><text x="4.7010%" y="1535.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (74 samples, 0.10%)</title><rect x="4.4510%" y="1509" width="0.0992%" height="15" fill="rgb(236,28,36)" fg:x="3319" fg:w="74"/><text x="4.7010%" y="1519.50"></text></g><g><title>alloc::slice::hack::to_vec (74 samples, 0.10%)</title><rect x="4.4510%" y="1493" width="0.0992%" height="15" fill="rgb(249,185,26)" fg:x="3319" fg:w="74"/><text x="4.7010%" y="1503.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (74 samples, 0.10%)</title><rect x="4.4510%" y="1477" width="0.0992%" height="15" fill="rgb(249,174,33)" fg:x="3319" fg:w="74"/><text x="4.7010%" y="1487.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (61 samples, 0.08%)</title><rect x="4.4684%" y="1461" width="0.0818%" height="15" fill="rgb(233,201,37)" fg:x="3332" fg:w="61"/><text x="4.7184%" y="1471.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (61 samples, 0.08%)</title><rect x="4.4684%" y="1445" width="0.0818%" height="15" fill="rgb(221,78,26)" fg:x="3332" fg:w="61"/><text x="4.7184%" y="1455.50"></text></g><g><title>[libc.so.6] (61 samples, 0.08%)</title><rect x="4.4684%" y="1429" width="0.0818%" height="15" fill="rgb(250,127,30)" fg:x="3332" fg:w="61"/><text x="4.7184%" y="1439.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::clone::Clone&gt;::clone (76 samples, 0.10%)</title><rect x="4.4496%" y="1653" width="0.1019%" height="15" fill="rgb(230,49,44)" fg:x="3318" fg:w="76"/><text x="4.6996%" y="1663.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::clone::Clone&gt;::clone (76 samples, 0.10%)</title><rect x="4.4496%" y="1637" width="0.1019%" height="15" fill="rgb(229,67,23)" fg:x="3318" fg:w="76"/><text x="4.6996%" y="1647.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::clone::Clone&gt;::clone (76 samples, 0.10%)</title><rect x="4.4496%" y="1621" width="0.1019%" height="15" fill="rgb(249,83,47)" fg:x="3318" fg:w="76"/><text x="4.6996%" y="1631.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::clone::Clone&gt;::clone (76 samples, 0.10%)</title><rect x="4.4496%" y="1605" width="0.1019%" height="15" fill="rgb(215,43,3)" fg:x="3318" fg:w="76"/><text x="4.6996%" y="1615.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (76 samples, 0.10%)</title><rect x="4.4496%" y="1589" width="0.1019%" height="15" fill="rgb(238,154,13)" fg:x="3318" fg:w="76"/><text x="4.6996%" y="1599.50"></text></g><g><title>&lt;either::Either&lt;L,R&gt; as core::clone::Clone&gt;::clone (76 samples, 0.10%)</title><rect x="4.4496%" y="1573" width="0.1019%" height="15" fill="rgb(219,56,2)" fg:x="3318" fg:w="76"/><text x="4.6996%" y="1583.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::clone::Clone&gt;::clone (75 samples, 0.10%)</title><rect x="4.4510%" y="1557" width="0.1006%" height="15" fill="rgb(233,0,4)" fg:x="3319" fg:w="75"/><text x="4.7010%" y="1567.50"></text></g><g><title>&lt;gmw::circuit::static_layers::ScLayerIterator&lt;G,Idx&gt; as core::clone::Clone&gt;::clone (75 samples, 0.10%)</title><rect x="4.4510%" y="1541" width="0.1006%" height="15" fill="rgb(235,30,7)" fg:x="3319" fg:w="75"/><text x="4.7010%" y="1551.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (10 samples, 0.01%)</title><rect x="4.5516%" y="1653" width="0.0134%" height="15" fill="rgb(250,79,13)" fg:x="3394" fg:w="10"/><text x="4.8016%" y="1663.50"></text></g><g><title>&lt;gmw::protocols::boolean_gmw::SimdMsg as core::clone::Clone&gt;::clone (10 samples, 0.01%)</title><rect x="4.5516%" y="1637" width="0.0134%" height="15" fill="rgb(211,146,34)" fg:x="3394" fg:w="10"/><text x="4.8016%" y="1647.50"></text></g><g><title>&lt;gmw::protocols::boolean_gmw::Msg as core::clone::Clone&gt;::clone (8 samples, 0.01%)</title><rect x="4.5542%" y="1621" width="0.0107%" height="15" fill="rgb(228,22,38)" fg:x="3396" fg:w="8"/><text x="4.8042%" y="1631.50"></text></g><g><title>&lt;gmw::circuit::static_layers::ScLayerIterator&lt;G,Idx&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.02%)</title><rect x="5.0343%" y="1525" width="0.0161%" height="15" fill="rgb(235,168,5)" fg:x="3754" fg:w="12"/><text x="5.2843%" y="1535.50"></text></g><g><title>gmw::circuit::static_layers::Circuit&lt;G,Idx&gt;::get_circ (8 samples, 0.01%)</title><rect x="5.0397%" y="1509" width="0.0107%" height="15" fill="rgb(221,155,16)" fg:x="3758" fg:w="8"/><text x="5.2897%" y="1519.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (8 samples, 0.01%)</title><rect x="5.0397%" y="1493" width="0.0107%" height="15" fill="rgb(215,215,53)" fg:x="3758" fg:w="8"/><text x="5.2897%" y="1503.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (8 samples, 0.01%)</title><rect x="5.0397%" y="1477" width="0.0107%" height="15" fill="rgb(223,4,10)" fg:x="3758" fg:w="8"/><text x="5.2897%" y="1487.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (8 samples, 0.01%)</title><rect x="5.0397%" y="1461" width="0.0107%" height="15" fill="rgb(234,103,6)" fg:x="3758" fg:w="8"/><text x="5.2897%" y="1471.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (8 samples, 0.01%)</title><rect x="5.0397%" y="1445" width="0.0107%" height="15" fill="rgb(227,97,0)" fg:x="3758" fg:w="8"/><text x="5.2897%" y="1455.50"></text></g><g><title>gmw::circuit::static_layers::ExecutableScLayer&lt;G,Idx&gt;::non_interactive_iter (8 samples, 0.01%)</title><rect x="5.0544%" y="1477" width="0.0107%" height="15" fill="rgb(234,150,53)" fg:x="3769" fg:w="8"/><text x="5.3044%" y="1487.50"></text></g><g><title>core::ops::function::FnOnce::call_once (27 samples, 0.04%)</title><rect x="5.0343%" y="1557" width="0.0362%" height="15" fill="rgb(228,201,54)" fg:x="3754" fg:w="27"/><text x="5.2843%" y="1567.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.04%)</title><rect x="5.0343%" y="1541" width="0.0362%" height="15" fill="rgb(222,22,37)" fg:x="3754" fg:w="27"/><text x="5.2843%" y="1551.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (15 samples, 0.02%)</title><rect x="5.0504%" y="1525" width="0.0201%" height="15" fill="rgb(237,53,32)" fg:x="3766" fg:w="15"/><text x="5.3004%" y="1535.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (12 samples, 0.02%)</title><rect x="5.0544%" y="1509" width="0.0161%" height="15" fill="rgb(233,25,53)" fg:x="3769" fg:w="12"/><text x="5.3044%" y="1519.50"></text></g><g><title>gmw::circuit::ExecutableLayer&lt;G,Idx&gt;::non_interactive_with_parents_iter::{{closure}} (12 samples, 0.02%)</title><rect x="5.0544%" y="1493" width="0.0161%" height="15" fill="rgb(210,40,34)" fg:x="3769" fg:w="12"/><text x="5.3044%" y="1503.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (20 samples, 0.03%)</title><rect x="5.0719%" y="1461" width="0.0268%" height="15" fill="rgb(241,220,44)" fg:x="3782" fg:w="20"/><text x="5.3219%" y="1471.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 0.03%)</title><rect x="5.0719%" y="1445" width="0.0268%" height="15" fill="rgb(235,28,35)" fg:x="3782" fg:w="20"/><text x="5.3219%" y="1455.50"></text></g><g><title>cfree (18 samples, 0.02%)</title><rect x="5.0746%" y="1429" width="0.0241%" height="15" fill="rgb(210,56,17)" fg:x="3784" fg:w="18"/><text x="5.3246%" y="1439.50"></text></g><g><title>[libc.so.6] (14 samples, 0.02%)</title><rect x="5.0799%" y="1413" width="0.0188%" height="15" fill="rgb(224,130,29)" fg:x="3788" fg:w="14"/><text x="5.3299%" y="1423.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.07%)</title><rect x="5.0330%" y="1605" width="0.0671%" height="15" fill="rgb(235,212,8)" fg:x="3753" fg:w="50"/><text x="5.2830%" y="1615.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (50 samples, 0.07%)</title><rect x="5.0330%" y="1589" width="0.0671%" height="15" fill="rgb(223,33,50)" fg:x="3753" fg:w="50"/><text x="5.2830%" y="1599.50"></text></g><g><title>core::iter::adapters::fuse::and_then_or_clear (50 samples, 0.07%)</title><rect x="5.0330%" y="1573" width="0.0671%" height="15" fill="rgb(219,149,13)" fg:x="3753" fg:w="50"/><text x="5.2830%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::non_interactive_with_parents_iter::{{closure}}&gt;&gt;&gt; (22 samples, 0.03%)</title><rect x="5.0705%" y="1557" width="0.0295%" height="15" fill="rgb(250,156,29)" fg:x="3781" fg:w="22"/><text x="5.3205%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::non_interactive_with_parents_iter::{{closure}}&gt;&gt; (21 samples, 0.03%)</title><rect x="5.0719%" y="1541" width="0.0282%" height="15" fill="rgb(216,193,19)" fg:x="3782" fg:w="21"/><text x="5.3219%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;&gt; (21 samples, 0.03%)</title><rect x="5.0719%" y="1525" width="0.0282%" height="15" fill="rgb(216,135,14)" fg:x="3782" fg:w="21"/><text x="5.3219%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (21 samples, 0.03%)</title><rect x="5.0719%" y="1509" width="0.0282%" height="15" fill="rgb(241,47,5)" fg:x="3782" fg:w="21"/><text x="5.3219%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (21 samples, 0.03%)</title><rect x="5.0719%" y="1493" width="0.0282%" height="15" fill="rgb(233,42,35)" fg:x="3782" fg:w="21"/><text x="5.3219%" y="1503.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.03%)</title><rect x="5.0719%" y="1477" width="0.0282%" height="15" fill="rgb(231,13,6)" fg:x="3782" fg:w="21"/><text x="5.3219%" y="1487.50"></text></g><g><title>[libc.so.6] (1,112 samples, 1.49%)</title><rect x="5.1000%" y="1605" width="1.4913%" height="15" fill="rgb(207,181,40)" fg:x="3803" fg:w="1112"/><text x="5.3500%" y="1615.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (21 samples, 0.03%)</title><rect x="7.8023%" y="1589" width="0.0282%" height="15" fill="rgb(254,173,49)" fg:x="5818" fg:w="21"/><text x="8.0523%" y="1599.50"></text></g><g><title>bitvec::ptr::range::BitPtrRange&lt;M,T,O&gt;::is_empty (28 samples, 0.04%)</title><rect x="8.0329%" y="1429" width="0.0375%" height="15" fill="rgb(221,1,38)" fg:x="5990" fg:w="28"/><text x="8.2829%" y="1439.50"></text></g><g><title>bitvec::index::BitIdx&lt;R&gt;::offset (57 samples, 0.08%)</title><rect x="8.0986%" y="1381" width="0.0764%" height="15" fill="rgb(206,124,46)" fg:x="6039" fg:w="57"/><text x="8.3486%" y="1391.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_add (14 samples, 0.02%)</title><rect x="8.1563%" y="1365" width="0.0188%" height="15" fill="rgb(249,21,11)" fg:x="6082" fg:w="14"/><text x="8.4063%" y="1375.50"></text></g><g><title>&lt;bitvec::ptr::range::BitPtrRange&lt;M,T,O&gt; as core::iter::traits::iterator::Iterator&gt;::next (124 samples, 0.17%)</title><rect x="8.0168%" y="1445" width="0.1663%" height="15" fill="rgb(222,201,40)" fg:x="5978" fg:w="124"/><text x="8.2668%" y="1455.50"></text></g><g><title>bitvec::ptr::range::BitPtrRange&lt;M,T,O&gt;::take_front (84 samples, 0.11%)</title><rect x="8.0705%" y="1429" width="0.1126%" height="15" fill="rgb(235,61,29)" fg:x="6018" fg:w="84"/><text x="8.3205%" y="1439.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::wrapping_add (63 samples, 0.08%)</title><rect x="8.0986%" y="1413" width="0.0845%" height="15" fill="rgb(219,207,3)" fg:x="6039" fg:w="63"/><text x="8.3486%" y="1423.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::wrapping_offset (63 samples, 0.08%)</title><rect x="8.0986%" y="1397" width="0.0845%" height="15" fill="rgb(222,56,46)" fg:x="6039" fg:w="63"/><text x="8.3486%" y="1407.50"></text></g><g><title>&lt;bitvec::slice::iter::BitValIter&lt;T,O&gt; as core::iter::traits::iterator::Iterator&gt;::next (179 samples, 0.24%)</title><rect x="8.0168%" y="1461" width="0.2400%" height="15" fill="rgb(239,76,54)" fg:x="5978" fg:w="179"/><text x="8.2668%" y="1471.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (55 samples, 0.07%)</title><rect x="8.1831%" y="1445" width="0.0738%" height="15" fill="rgb(231,124,27)" fg:x="6102" fg:w="55"/><text x="8.4331%" y="1455.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (255 samples, 0.34%)</title><rect x="7.9632%" y="1509" width="0.3420%" height="15" fill="rgb(249,195,6)" fg:x="5938" fg:w="255"/><text x="8.2132%" y="1519.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (215 samples, 0.29%)</title><rect x="8.0168%" y="1493" width="0.2883%" height="15" fill="rgb(237,174,47)" fg:x="5978" fg:w="215"/><text x="8.2668%" y="1503.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (215 samples, 0.29%)</title><rect x="8.0168%" y="1477" width="0.2883%" height="15" fill="rgb(206,201,31)" fg:x="5978" fg:w="215"/><text x="8.2668%" y="1487.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.05%)</title><rect x="8.2569%" y="1461" width="0.0483%" height="15" fill="rgb(231,57,52)" fg:x="6157" fg:w="36"/><text x="8.5069%" y="1471.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (17 samples, 0.02%)</title><rect x="8.2824%" y="1445" width="0.0228%" height="15" fill="rgb(248,177,22)" fg:x="6176" fg:w="17"/><text x="8.5324%" y="1455.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (11 samples, 0.01%)</title><rect x="8.2904%" y="1429" width="0.0148%" height="15" fill="rgb(215,211,37)" fg:x="6182" fg:w="11"/><text x="8.5404%" y="1439.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (11 samples, 0.01%)</title><rect x="8.2904%" y="1413" width="0.0148%" height="15" fill="rgb(241,128,51)" fg:x="6182" fg:w="11"/><text x="8.5404%" y="1423.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (51 samples, 0.07%)</title><rect x="12.4088%" y="1461" width="0.0684%" height="15" fill="rgb(227,165,31)" fg:x="9253" fg:w="51"/><text x="12.6588%" y="1471.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (51 samples, 0.07%)</title><rect x="12.4088%" y="1445" width="0.0684%" height="15" fill="rgb(228,167,24)" fg:x="9253" fg:w="51"/><text x="12.6588%" y="1455.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (51 samples, 0.07%)</title><rect x="12.4088%" y="1429" width="0.0684%" height="15" fill="rgb(228,143,12)" fg:x="9253" fg:w="51"/><text x="12.6588%" y="1439.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (13 samples, 0.02%)</title><rect x="12.4598%" y="1413" width="0.0174%" height="15" fill="rgb(249,149,8)" fg:x="9291" fg:w="13"/><text x="12.7098%" y="1423.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (13 samples, 0.02%)</title><rect x="12.4598%" y="1397" width="0.0174%" height="15" fill="rgb(243,35,44)" fg:x="9291" fg:w="13"/><text x="12.7098%" y="1407.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (13 samples, 0.02%)</title><rect x="12.4598%" y="1381" width="0.0174%" height="15" fill="rgb(246,89,9)" fg:x="9291" fg:w="13"/><text x="12.7098%" y="1391.50"></text></g><g><title>[libc.so.6] (12 samples, 0.02%)</title><rect x="12.4772%" y="1461" width="0.0161%" height="15" fill="rgb(233,213,13)" fg:x="9304" fg:w="12"/><text x="12.7272%" y="1471.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (9 samples, 0.01%)</title><rect x="12.4933%" y="1461" width="0.0121%" height="15" fill="rgb(233,141,41)" fg:x="9316" fg:w="9"/><text x="12.7433%" y="1471.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (9 samples, 0.01%)</title><rect x="12.4933%" y="1445" width="0.0121%" height="15" fill="rgb(239,167,4)" fg:x="9316" fg:w="9"/><text x="12.7433%" y="1455.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (9 samples, 0.01%)</title><rect x="12.4933%" y="1429" width="0.0121%" height="15" fill="rgb(209,217,16)" fg:x="9316" fg:w="9"/><text x="12.7433%" y="1439.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (9 samples, 0.01%)</title><rect x="12.4933%" y="1413" width="0.0121%" height="15" fill="rgb(219,88,35)" fg:x="9316" fg:w="9"/><text x="12.7433%" y="1423.50"></text></g><g><title>hashbrown::map::make_hash (11 samples, 0.01%)</title><rect x="12.5161%" y="1365" width="0.0148%" height="15" fill="rgb(220,193,23)" fg:x="9333" fg:w="11"/><text x="12.7661%" y="1375.50"></text></g><g><title>core::hash::BuildHasher::hash_one (11 samples, 0.01%)</title><rect x="12.5161%" y="1349" width="0.0148%" height="15" fill="rgb(230,90,52)" fg:x="9333" fg:w="11"/><text x="12.7661%" y="1359.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,423 samples, 4.59%)</title><rect x="7.9525%" y="1525" width="4.5904%" height="15" fill="rgb(252,106,19)" fg:x="5930" fg:w="3423"/><text x="8.2025%" y="1535.50">&lt;core..</text></g><g><title>core::option::Option&lt;T&gt;::map (3,160 samples, 4.24%)</title><rect x="8.3052%" y="1509" width="4.2377%" height="15" fill="rgb(206,74,20)" fg:x="6193" fg:w="3160"/><text x="8.5552%" y="1519.50">core:..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (397 samples, 0.53%)</title><rect x="12.0105%" y="1493" width="0.5324%" height="15" fill="rgb(230,138,44)" fg:x="8956" fg:w="397"/><text x="12.2605%" y="1503.50"></text></g><g><title>gmw::circuit::static_layers::ExecutableScLayer&lt;G,Idx&gt;::non_interactive_parents_iter::{{closure}} (359 samples, 0.48%)</title><rect x="12.0615%" y="1477" width="0.4814%" height="15" fill="rgb(235,182,43)" fg:x="8994" fg:w="359"/><text x="12.3115%" y="1487.50"></text></g><g><title>gmw::circuit::circuit_connections::CrossCircuitConnections&lt;Idx&gt;::parent_gates (28 samples, 0.04%)</title><rect x="12.5054%" y="1461" width="0.0375%" height="15" fill="rgb(242,16,51)" fg:x="9325" fg:w="28"/><text x="12.7554%" y="1471.50"></text></g><g><title>gmw::circuit::circuit_connections::RangeConnections&lt;Idx&gt;::parent_gates (21 samples, 0.03%)</title><rect x="12.5148%" y="1445" width="0.0282%" height="15" fill="rgb(248,9,4)" fg:x="9332" fg:w="21"/><text x="12.7648%" y="1455.50"></text></g><g><title>gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;Idx&gt;::get_mapped_ranges (21 samples, 0.03%)</title><rect x="12.5148%" y="1429" width="0.0282%" height="15" fill="rgb(210,31,22)" fg:x="9332" fg:w="21"/><text x="12.7648%" y="1439.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (21 samples, 0.03%)</title><rect x="12.5148%" y="1413" width="0.0282%" height="15" fill="rgb(239,54,39)" fg:x="9332" fg:w="21"/><text x="12.7648%" y="1423.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (21 samples, 0.03%)</title><rect x="12.5148%" y="1397" width="0.0282%" height="15" fill="rgb(230,99,41)" fg:x="9332" fg:w="21"/><text x="12.7648%" y="1407.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (21 samples, 0.03%)</title><rect x="12.5148%" y="1381" width="0.0282%" height="15" fill="rgb(253,106,12)" fg:x="9332" fg:w="21"/><text x="12.7648%" y="1391.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (9 samples, 0.01%)</title><rect x="12.5308%" y="1365" width="0.0121%" height="15" fill="rgb(213,46,41)" fg:x="9344" fg:w="9"/><text x="12.7808%" y="1375.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (9 samples, 0.01%)</title><rect x="12.5308%" y="1349" width="0.0121%" height="15" fill="rgb(215,133,35)" fg:x="9344" fg:w="9"/><text x="12.7808%" y="1359.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (9 samples, 0.01%)</title><rect x="12.5308%" y="1333" width="0.0121%" height="15" fill="rgb(213,28,5)" fg:x="9344" fg:w="9"/><text x="12.7808%" y="1343.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (302 samples, 0.40%)</title><rect x="12.5429%" y="1525" width="0.4050%" height="15" fill="rgb(215,77,49)" fg:x="9353" fg:w="302"/><text x="12.7929%" y="1535.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (302 samples, 0.40%)</title><rect x="12.5429%" y="1509" width="0.4050%" height="15" fill="rgb(248,100,22)" fg:x="9353" fg:w="302"/><text x="12.7929%" y="1519.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (177 samples, 0.24%)</title><rect x="12.7105%" y="1493" width="0.2374%" height="15" fill="rgb(208,67,9)" fg:x="9478" fg:w="177"/><text x="12.9605%" y="1503.50"></text></g><g><title>core::iter::adapters::zip::try_get_unchecked (11 samples, 0.01%)</title><rect x="12.9332%" y="1477" width="0.0148%" height="15" fill="rgb(219,133,21)" fg:x="9644" fg:w="11"/><text x="13.1832%" y="1487.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,997 samples, 6.70%)</title><rect x="7.9525%" y="1541" width="6.7013%" height="15" fill="rgb(246,46,29)" fg:x="5930" fg:w="4997"/><text x="8.2025%" y="1551.50">&lt;core::it..</text></g><g><title>core::option::Option&lt;T&gt;::map (1,272 samples, 1.71%)</title><rect x="12.9479%" y="1525" width="1.7058%" height="15" fill="rgb(246,185,52)" fg:x="9655" fg:w="1272"/><text x="13.1979%" y="1535.50"></text></g><g><title>core::ops::function::FnOnce::call_once (5,112 samples, 6.86%)</title><rect x="7.8304%" y="1589" width="6.8555%" height="15" fill="rgb(252,136,11)" fg:x="5839" fg:w="5112"/><text x="8.0804%" y="1599.50">core::ops..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,112 samples, 6.86%)</title><rect x="7.8304%" y="1573" width="6.8555%" height="15" fill="rgb(219,138,53)" fg:x="5839" fg:w="5112"/><text x="8.0804%" y="1583.50">&lt;core::it..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (5,112 samples, 6.86%)</title><rect x="7.8304%" y="1557" width="6.8555%" height="15" fill="rgb(211,51,23)" fg:x="5839" fg:w="5112"/><text x="8.0804%" y="1567.50">&lt;core::it..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (24 samples, 0.03%)</title><rect x="14.6537%" y="1541" width="0.0322%" height="15" fill="rgb(247,221,28)" fg:x="10927" fg:w="24"/><text x="14.9037%" y="1551.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,374 samples, 9.89%)</title><rect x="4.8412%" y="1637" width="9.8890%" height="15" fill="rgb(251,222,45)" fg:x="3610" fg:w="7374"/><text x="5.0912%" y="1647.50">&lt;core::iter::a..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,374 samples, 9.89%)</title><rect x="4.8412%" y="1621" width="9.8890%" height="15" fill="rgb(217,162,53)" fg:x="3610" fg:w="7374"/><text x="5.0912%" y="1631.50">&lt;core::iter::a..</text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (6,069 samples, 8.14%)</title><rect x="6.5913%" y="1605" width="8.1389%" height="15" fill="rgb(229,93,14)" fg:x="4915" fg:w="6069"/><text x="6.8413%" y="1615.50">core::iter:..</text></g><g><title>core::option::Option&lt;T&gt;::as_mut (33 samples, 0.04%)</title><rect x="14.6859%" y="1589" width="0.0443%" height="15" fill="rgb(209,67,49)" fg:x="10951" fg:w="33"/><text x="14.9359%" y="1599.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (9 samples, 0.01%)</title><rect x="14.7396%" y="1605" width="0.0121%" height="15" fill="rgb(213,87,29)" fg:x="10991" fg:w="9"/><text x="14.9896%" y="1615.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (21 samples, 0.03%)</title><rect x="14.7516%" y="1541" width="0.0282%" height="15" fill="rgb(205,151,52)" fg:x="11000" fg:w="21"/><text x="15.0016%" y="1551.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (21 samples, 0.03%)</title><rect x="14.7516%" y="1525" width="0.0282%" height="15" fill="rgb(253,215,39)" fg:x="11000" fg:w="21"/><text x="15.0016%" y="1535.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (21 samples, 0.03%)</title><rect x="14.7516%" y="1509" width="0.0282%" height="15" fill="rgb(221,220,41)" fg:x="11000" fg:w="21"/><text x="15.0016%" y="1519.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20 samples, 0.03%)</title><rect x="14.7530%" y="1493" width="0.0268%" height="15" fill="rgb(218,133,21)" fg:x="11001" fg:w="20"/><text x="15.0030%" y="1503.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.03%)</title><rect x="14.7530%" y="1477" width="0.0268%" height="15" fill="rgb(221,193,43)" fg:x="11001" fg:w="20"/><text x="15.0030%" y="1487.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.03%)</title><rect x="14.7530%" y="1461" width="0.0268%" height="15" fill="rgb(240,128,52)" fg:x="11001" fg:w="20"/><text x="15.0030%" y="1471.50"></text></g><g><title>malloc (19 samples, 0.03%)</title><rect x="14.7543%" y="1445" width="0.0255%" height="15" fill="rgb(253,114,12)" fg:x="11002" fg:w="19"/><text x="15.0043%" y="1455.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (113 samples, 0.15%)</title><rect x="14.7516%" y="1605" width="0.1515%" height="15" fill="rgb(215,223,47)" fg:x="11000" fg:w="113"/><text x="15.0016%" y="1615.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (113 samples, 0.15%)</title><rect x="14.7516%" y="1589" width="0.1515%" height="15" fill="rgb(248,225,23)" fg:x="11000" fg:w="113"/><text x="15.0016%" y="1599.50"></text></g><g><title>alloc::slice::hack::to_vec (113 samples, 0.15%)</title><rect x="14.7516%" y="1573" width="0.1515%" height="15" fill="rgb(250,108,0)" fg:x="11000" fg:w="113"/><text x="15.0016%" y="1583.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (113 samples, 0.15%)</title><rect x="14.7516%" y="1557" width="0.1515%" height="15" fill="rgb(228,208,7)" fg:x="11000" fg:w="113"/><text x="15.0016%" y="1567.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (92 samples, 0.12%)</title><rect x="14.7798%" y="1541" width="0.1234%" height="15" fill="rgb(244,45,10)" fg:x="11021" fg:w="92"/><text x="15.0298%" y="1551.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (92 samples, 0.12%)</title><rect x="14.7798%" y="1525" width="0.1234%" height="15" fill="rgb(207,125,25)" fg:x="11021" fg:w="92"/><text x="15.0298%" y="1535.50"></text></g><g><title>[libc.so.6] (92 samples, 0.12%)</title><rect x="14.7798%" y="1509" width="0.1234%" height="15" fill="rgb(210,195,18)" fg:x="11021" fg:w="92"/><text x="15.0298%" y="1519.50"></text></g><g><title>&lt;gmw::circuit::static_layers::LayerIterator&lt;G,Idx&gt; as core::iter::traits::iterator::Iterator&gt;::next (130 samples, 0.17%)</title><rect x="14.7302%" y="1621" width="0.1743%" height="15" fill="rgb(249,80,12)" fg:x="10984" fg:w="130"/><text x="14.9802%" y="1631.50"></text></g><g><title>&lt;either::Either&lt;L,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,714 samples, 10.34%)</title><rect x="4.5650%" y="1653" width="10.3449%" height="15" fill="rgb(221,65,9)" fg:x="3404" fg:w="7714"/><text x="4.8150%" y="1663.50">&lt;either::Either..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (134 samples, 0.18%)</title><rect x="14.7302%" y="1637" width="0.1797%" height="15" fill="rgb(235,49,36)" fg:x="10984" fg:w="134"/><text x="14.9802%" y="1647.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::find_upper_bound_edge (16 samples, 0.02%)</title><rect x="14.9662%" y="1301" width="0.0215%" height="15" fill="rgb(225,32,20)" fg:x="11160" fg:w="16"/><text x="15.2162%" y="1311.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_upper_bound_index (16 samples, 0.02%)</title><rect x="14.9662%" y="1285" width="0.0215%" height="15" fill="rgb(215,141,46)" fg:x="11160" fg:w="16"/><text x="15.2162%" y="1295.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (15 samples, 0.02%)</title><rect x="14.9675%" y="1269" width="0.0201%" height="15" fill="rgb(250,160,47)" fg:x="11161" fg:w="15"/><text x="15.2175%" y="1279.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::range (65 samples, 0.09%)</title><rect x="14.9233%" y="1349" width="0.0872%" height="15" fill="rgb(216,222,40)" fg:x="11128" fg:w="65"/><text x="15.1733%" y="1359.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::range_search (54 samples, 0.07%)</title><rect x="14.9380%" y="1333" width="0.0724%" height="15" fill="rgb(234,217,39)" fg:x="11139" fg:w="54"/><text x="15.1880%" y="1343.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::find_leaf_edges_spanning_range (45 samples, 0.06%)</title><rect x="14.9501%" y="1317" width="0.0603%" height="15" fill="rgb(207,178,40)" fg:x="11148" fg:w="45"/><text x="15.2001%" y="1327.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree_for_bifurcation (17 samples, 0.02%)</title><rect x="14.9877%" y="1301" width="0.0228%" height="15" fill="rgb(221,136,13)" fg:x="11176" fg:w="17"/><text x="15.2377%" y="1311.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_upper_bound_index (9 samples, 0.01%)</title><rect x="14.9984%" y="1285" width="0.0121%" height="15" fill="rgb(249,199,10)" fg:x="11184" fg:w="9"/><text x="15.2484%" y="1295.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (8 samples, 0.01%)</title><rect x="14.9997%" y="1269" width="0.0107%" height="15" fill="rgb(249,222,13)" fg:x="11185" fg:w="8"/><text x="15.2497%" y="1279.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (68 samples, 0.09%)</title><rect x="14.9206%" y="1413" width="0.0912%" height="15" fill="rgb(244,185,38)" fg:x="11126" fg:w="68"/><text x="15.1706%" y="1423.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (68 samples, 0.09%)</title><rect x="14.9206%" y="1397" width="0.0912%" height="15" fill="rgb(236,202,9)" fg:x="11126" fg:w="68"/><text x="15.1706%" y="1407.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (68 samples, 0.09%)</title><rect x="14.9206%" y="1381" width="0.0912%" height="15" fill="rgb(250,229,37)" fg:x="11126" fg:w="68"/><text x="15.1706%" y="1391.50"></text></g><g><title>gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;Idx&gt;::get_mapped_ranges::{{closure}} (68 samples, 0.09%)</title><rect x="14.9206%" y="1365" width="0.0912%" height="15" fill="rgb(206,174,23)" fg:x="11126" fg:w="68"/><text x="15.1706%" y="1375.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (69 samples, 0.09%)</title><rect x="14.9206%" y="1445" width="0.0925%" height="15" fill="rgb(211,33,43)" fg:x="11126" fg:w="69"/><text x="15.1706%" y="1455.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (69 samples, 0.09%)</title><rect x="14.9206%" y="1429" width="0.0925%" height="15" fill="rgb(245,58,50)" fg:x="11126" fg:w="69"/><text x="15.1706%" y="1439.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.01%)</title><rect x="15.0131%" y="1397" width="0.0121%" height="15" fill="rgb(244,68,36)" fg:x="11195" fg:w="9"/><text x="15.2631%" y="1407.50"></text></g><g><title>core::ops::function::FnOnce::call_once (10 samples, 0.01%)</title><rect x="15.0131%" y="1429" width="0.0134%" height="15" fill="rgb(232,229,15)" fg:x="11195" fg:w="10"/><text x="15.2631%" y="1439.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.01%)</title><rect x="15.0131%" y="1413" width="0.0134%" height="15" fill="rgb(254,30,23)" fg:x="11195" fg:w="10"/><text x="15.2631%" y="1423.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (83 samples, 0.11%)</title><rect x="14.9166%" y="1477" width="0.1113%" height="15" fill="rgb(235,160,14)" fg:x="11123" fg:w="83"/><text x="15.1666%" y="1487.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (83 samples, 0.11%)</title><rect x="14.9166%" y="1461" width="0.1113%" height="15" fill="rgb(212,155,44)" fg:x="11123" fg:w="83"/><text x="15.1666%" y="1471.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (11 samples, 0.01%)</title><rect x="15.0131%" y="1445" width="0.0148%" height="15" fill="rgb(226,2,50)" fg:x="11195" fg:w="11"/><text x="15.2631%" y="1455.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 samples, 0.11%)</title><rect x="14.9166%" y="1493" width="0.1140%" height="15" fill="rgb(234,177,6)" fg:x="11123" fg:w="85"/><text x="15.1666%" y="1503.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (86 samples, 0.12%)</title><rect x="14.9166%" y="1525" width="0.1153%" height="15" fill="rgb(217,24,9)" fg:x="11123" fg:w="86"/><text x="15.1666%" y="1535.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (86 samples, 0.12%)</title><rect x="14.9166%" y="1509" width="0.1153%" height="15" fill="rgb(220,13,46)" fg:x="11123" fg:w="86"/><text x="15.1666%" y="1519.50"></text></g><g><title>&lt;gmw::circuit::base_circuit::BaseGate&lt;T,D&gt; as gmw::protocols::Gate&gt;::evaluate_non_interactive (92 samples, 0.12%)</title><rect x="14.9099%" y="1653" width="0.1234%" height="15" fill="rgb(239,221,27)" fg:x="11118" fg:w="92"/><text x="15.1599%" y="1663.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (92 samples, 0.12%)</title><rect x="14.9099%" y="1637" width="0.1234%" height="15" fill="rgb(222,198,25)" fg:x="11118" fg:w="92"/><text x="15.1599%" y="1647.50"></text></g><g><title>&lt;either::Either&lt;L,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (92 samples, 0.12%)</title><rect x="14.9099%" y="1621" width="0.1234%" height="15" fill="rgb(211,99,13)" fg:x="11118" fg:w="92"/><text x="15.1599%" y="1631.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (91 samples, 0.12%)</title><rect x="14.9112%" y="1605" width="0.1220%" height="15" fill="rgb(232,111,31)" fg:x="11119" fg:w="91"/><text x="15.1612%" y="1615.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (90 samples, 0.12%)</title><rect x="14.9126%" y="1589" width="0.1207%" height="15" fill="rgb(245,82,37)" fg:x="11120" fg:w="90"/><text x="15.1626%" y="1599.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (90 samples, 0.12%)</title><rect x="14.9126%" y="1573" width="0.1207%" height="15" fill="rgb(227,149,46)" fg:x="11120" fg:w="90"/><text x="15.1626%" y="1583.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (90 samples, 0.12%)</title><rect x="14.9126%" y="1557" width="0.1207%" height="15" fill="rgb(218,36,50)" fg:x="11120" fg:w="90"/><text x="15.1626%" y="1567.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (90 samples, 0.12%)</title><rect x="14.9126%" y="1541" width="0.1207%" height="15" fill="rgb(226,80,48)" fg:x="11120" fg:w="90"/><text x="15.1626%" y="1551.50"></text></g><g><title>&lt;gmw::protocols::boolean_gmw::BooleanGate as gmw::protocols::Gate&gt;::as_base_gate (80 samples, 0.11%)</title><rect x="15.0333%" y="1653" width="0.1073%" height="15" fill="rgb(238,224,15)" fg:x="11210" fg:w="80"/><text x="15.2833%" y="1663.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (100 samples, 0.13%)</title><rect x="15.5898%" y="1573" width="0.1341%" height="15" fill="rgb(241,136,10)" fg:x="11625" fg:w="100"/><text x="15.8398%" y="1583.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (62 samples, 0.08%)</title><rect x="15.6408%" y="1557" width="0.0831%" height="15" fill="rgb(208,32,45)" fg:x="11663" fg:w="62"/><text x="15.8908%" y="1567.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (59 samples, 0.08%)</title><rect x="15.6448%" y="1541" width="0.0791%" height="15" fill="rgb(207,135,9)" fg:x="11666" fg:w="59"/><text x="15.8948%" y="1551.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (59 samples, 0.08%)</title><rect x="15.6448%" y="1525" width="0.0791%" height="15" fill="rgb(206,86,44)" fg:x="11666" fg:w="59"/><text x="15.8948%" y="1535.50"></text></g><g><title>&lt;either::Either&lt;L,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (512 samples, 0.69%)</title><rect x="15.4651%" y="1621" width="0.6866%" height="15" fill="rgb(245,177,15)" fg:x="11532" fg:w="512"/><text x="15.7151%" y="1631.50"></text></g><g><title>&lt;either::Either&lt;L,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (464 samples, 0.62%)</title><rect x="15.5294%" y="1605" width="0.6223%" height="15" fill="rgb(206,64,50)" fg:x="11580" fg:w="464"/><text x="15.7794%" y="1615.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (419 samples, 0.56%)</title><rect x="15.5898%" y="1589" width="0.5619%" height="15" fill="rgb(234,36,40)" fg:x="11625" fg:w="419"/><text x="15.8398%" y="1599.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (319 samples, 0.43%)</title><rect x="15.7239%" y="1573" width="0.4278%" height="15" fill="rgb(213,64,8)" fg:x="11725" fg:w="319"/><text x="15.9739%" y="1583.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (102 samples, 0.14%)</title><rect x="16.0149%" y="1557" width="0.1368%" height="15" fill="rgb(210,75,36)" fg:x="11942" fg:w="102"/><text x="16.2649%" y="1567.50"></text></g><g><title>[libc.so.6] (18 samples, 0.02%)</title><rect x="16.1517%" y="1621" width="0.0241%" height="15" fill="rgb(229,88,21)" fg:x="12044" fg:w="18"/><text x="16.4017%" y="1631.50"></text></g><g><title>&lt;either::Either&lt;L,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="16.1517%" y="1605" width="0.0241%" height="15" fill="rgb(252,204,47)" fg:x="12044" fg:w="18"/><text x="16.4017%" y="1615.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (58 samples, 0.08%)</title><rect x="16.8088%" y="1541" width="0.0778%" height="15" fill="rgb(208,77,27)" fg:x="12534" fg:w="58"/><text x="17.0588%" y="1551.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (58 samples, 0.08%)</title><rect x="16.8088%" y="1525" width="0.0778%" height="15" fill="rgb(221,76,26)" fg:x="12534" fg:w="58"/><text x="17.0588%" y="1535.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (58 samples, 0.08%)</title><rect x="16.8088%" y="1509" width="0.0778%" height="15" fill="rgb(225,139,18)" fg:x="12534" fg:w="58"/><text x="17.0588%" y="1519.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::add (98 samples, 0.13%)</title><rect x="16.9885%" y="1445" width="0.1314%" height="15" fill="rgb(230,137,11)" fg:x="12668" fg:w="98"/><text x="17.2385%" y="1455.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::offset (98 samples, 0.13%)</title><rect x="16.9885%" y="1429" width="0.1314%" height="15" fill="rgb(212,28,1)" fg:x="12668" fg:w="98"/><text x="17.2385%" y="1439.50"></text></g><g><title>bitvec::index::BitIdx&lt;R&gt;::offset (98 samples, 0.13%)</title><rect x="16.9885%" y="1413" width="0.1314%" height="15" fill="rgb(248,164,17)" fg:x="12668" fg:w="98"/><text x="17.2385%" y="1423.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_add (42 samples, 0.06%)</title><rect x="17.0636%" y="1397" width="0.0563%" height="15" fill="rgb(222,171,42)" fg:x="12724" fg:w="42"/><text x="17.3136%" y="1407.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::as_ref (96 samples, 0.13%)</title><rect x="17.1199%" y="1445" width="0.1287%" height="15" fill="rgb(243,84,45)" fg:x="12766" fg:w="96"/><text x="17.3699%" y="1455.50"></text></g><g><title>bitvec::ptr::proxy::BitRef&lt;M,T,O&gt;::from_bitptr (96 samples, 0.13%)</title><rect x="17.1199%" y="1429" width="0.1287%" height="15" fill="rgb(252,49,23)" fg:x="12766" fg:w="96"/><text x="17.3699%" y="1439.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::read (96 samples, 0.13%)</title><rect x="17.1199%" y="1413" width="0.1287%" height="15" fill="rgb(215,19,7)" fg:x="12766" fg:w="96"/><text x="17.3699%" y="1423.50"></text></g><g><title>bitvec::store::BitStore::get_bit (66 samples, 0.09%)</title><rect x="17.1602%" y="1397" width="0.0885%" height="15" fill="rgb(238,81,41)" fg:x="12796" fg:w="66"/><text x="17.4102%" y="1407.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::ne (66 samples, 0.09%)</title><rect x="17.1602%" y="1381" width="0.0885%" height="15" fill="rgb(210,199,37)" fg:x="12796" fg:w="66"/><text x="17.4102%" y="1391.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::address (58 samples, 0.08%)</title><rect x="17.2487%" y="1413" width="0.0778%" height="15" fill="rgb(244,192,49)" fg:x="12862" fg:w="58"/><text x="17.4987%" y="1423.50"></text></g><g><title>&lt;usize as bitvec::slice::api::BitSliceIndex&lt;T,O&gt;&gt;::get_unchecked (298 samples, 0.40%)</title><rect x="16.9885%" y="1461" width="0.3996%" height="15" fill="rgb(226,211,11)" fg:x="12668" fg:w="298"/><text x="17.2385%" y="1471.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::as_bitptr (104 samples, 0.14%)</title><rect x="17.2487%" y="1445" width="0.1395%" height="15" fill="rgb(236,162,54)" fg:x="12862" fg:w="104"/><text x="17.4987%" y="1455.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::to_bitptr (104 samples, 0.14%)</title><rect x="17.2487%" y="1429" width="0.1395%" height="15" fill="rgb(220,229,9)" fg:x="12862" fg:w="104"/><text x="17.4987%" y="1439.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::head (46 samples, 0.06%)</title><rect x="17.3265%" y="1413" width="0.0617%" height="15" fill="rgb(250,87,22)" fg:x="12920" fg:w="46"/><text x="17.5765%" y="1423.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,542 samples, 2.07%)</title><rect x="15.3779%" y="1637" width="2.0679%" height="15" fill="rgb(239,43,17)" fg:x="11467" fg:w="1542"/><text x="15.6279%" y="1647.50">&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::map (947 samples, 1.27%)</title><rect x="16.1758%" y="1621" width="1.2700%" height="15" fill="rgb(231,177,25)" fg:x="12062" fg:w="947"/><text x="16.4258%" y="1631.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (711 samples, 0.95%)</title><rect x="16.4923%" y="1605" width="0.9535%" height="15" fill="rgb(219,179,1)" fg:x="12298" fg:w="711"/><text x="16.7423%" y="1615.50"></text></g><g><title>gmw::executor::Executor&lt;P,Idx&gt;::inputs::{{closure}} (709 samples, 0.95%)</title><rect x="16.4950%" y="1589" width="0.9508%" height="15" fill="rgb(238,219,53)" fg:x="12300" fg:w="709"/><text x="16.7450%" y="1599.50"></text></g><g><title>gmw::executor::GateOutputs&lt;Shares&gt;::get (709 samples, 0.95%)</title><rect x="16.4950%" y="1573" width="0.9508%" height="15" fill="rgb(232,167,36)" fg:x="12300" fg:w="709"/><text x="16.7450%" y="1583.50"></text></g><g><title>gmw::executor::GateOutputs&lt;Shares&gt;::get_unchecked (613 samples, 0.82%)</title><rect x="16.6238%" y="1557" width="0.8221%" height="15" fill="rgb(244,19,51)" fg:x="12396" fg:w="613"/><text x="16.8738%" y="1567.50"></text></g><g><title>&lt;bitvec::vec::BitVec&lt;T&gt; as gmw::protocols::ShareStorage&lt;bool&gt;&gt;::get (417 samples, 0.56%)</title><rect x="16.8866%" y="1541" width="0.5592%" height="15" fill="rgb(224,6,22)" fg:x="12592" fg:w="417"/><text x="17.1366%" y="1551.50"></text></g><g><title>bitvec::vec::ops::&lt;impl core::ops::index::Index&lt;Idx&gt; for bitvec::vec::BitVec&lt;T,O&gt;&gt;::index (379 samples, 0.51%)</title><rect x="16.9376%" y="1525" width="0.5083%" height="15" fill="rgb(224,145,5)" fg:x="12630" fg:w="379"/><text x="17.1876%" y="1535.50"></text></g><g><title>bitvec::slice::ops::&lt;impl core::ops::index::Index&lt;usize&gt; for bitvec::slice::BitSlice&lt;T,O&gt;&gt;::index (379 samples, 0.51%)</title><rect x="16.9376%" y="1509" width="0.5083%" height="15" fill="rgb(234,130,49)" fg:x="12630" fg:w="379"/><text x="17.1876%" y="1519.50"></text></g><g><title>&lt;usize as bitvec::slice::api::BitSliceIndex&lt;T,O&gt;&gt;::index (379 samples, 0.51%)</title><rect x="16.9376%" y="1493" width="0.5083%" height="15" fill="rgb(254,6,2)" fg:x="12630" fg:w="379"/><text x="17.1876%" y="1503.50"></text></g><g><title>&lt;usize as bitvec::slice::api::BitSliceIndex&lt;T,O&gt;&gt;::get (379 samples, 0.51%)</title><rect x="16.9376%" y="1477" width="0.5083%" height="15" fill="rgb(208,96,46)" fg:x="12630" fg:w="379"/><text x="17.1876%" y="1487.50"></text></g><g><title>bitvec::slice::api::&lt;impl bitvec::slice::BitSlice&lt;T,O&gt;&gt;::len (43 samples, 0.06%)</title><rect x="17.3882%" y="1461" width="0.0577%" height="15" fill="rgb(239,3,39)" fg:x="12966" fg:w="43"/><text x="17.6382%" y="1471.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::len (43 samples, 0.06%)</title><rect x="17.3882%" y="1445" width="0.0577%" height="15" fill="rgb(233,210,1)" fg:x="12966" fg:w="43"/><text x="17.6382%" y="1455.50"></text></g><g><title>&lt;gmw::circuit::base_circuit::BaseGate&lt;T,D&gt; as gmw::protocols::Gate&gt;::evaluate_non_interactive (8 samples, 0.01%)</title><rect x="17.4458%" y="1637" width="0.0107%" height="15" fill="rgb(244,137,37)" fg:x="13009" fg:w="8"/><text x="17.6958%" y="1647.50"></text></g><g><title>[libc.so.6] (13 samples, 0.02%)</title><rect x="17.4565%" y="1637" width="0.0174%" height="15" fill="rgb(240,136,2)" fg:x="13017" fg:w="13"/><text x="17.7065%" y="1647.50"></text></g><g><title>&lt;gmw::protocols::boolean_gmw::BooleanGate as gmw::protocols::Gate&gt;::evaluate_non_interactive (1,742 samples, 2.34%)</title><rect x="15.1405%" y="1653" width="2.3361%" height="15" fill="rgb(239,18,37)" fg:x="11290" fg:w="1742"/><text x="15.3905%" y="1663.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::rev (8 samples, 0.01%)</title><rect x="17.4834%" y="1637" width="0.0107%" height="15" fill="rgb(218,185,22)" fg:x="13037" fg:w="8"/><text x="17.7334%" y="1647.50"></text></g><g><title>hashbrown::map::make_hash (9 samples, 0.01%)</title><rect x="17.5424%" y="1301" width="0.0121%" height="15" fill="rgb(225,218,4)" fg:x="13081" fg:w="9"/><text x="17.7924%" y="1311.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9 samples, 0.01%)</title><rect x="17.5424%" y="1285" width="0.0121%" height="15" fill="rgb(230,182,32)" fg:x="13081" fg:w="9"/><text x="17.7924%" y="1295.50"></text></g><g><title>core::ops::function::FnOnce::call_once (18 samples, 0.02%)</title><rect x="17.5397%" y="1445" width="0.0241%" height="15" fill="rgb(242,56,43)" fg:x="13079" fg:w="18"/><text x="17.7897%" y="1455.50"></text></g><g><title>&lt;either::Either&lt;L,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="17.5397%" y="1429" width="0.0241%" height="15" fill="rgb(233,99,24)" fg:x="13079" fg:w="18"/><text x="17.7897%" y="1439.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="17.5397%" y="1413" width="0.0241%" height="15" fill="rgb(234,209,42)" fg:x="13079" fg:w="18"/><text x="17.7897%" y="1423.50"></text></g><g><title>&lt;gmw::circuit::static_layers::ScLayerIterator&lt;G,Idx&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="17.5397%" y="1397" width="0.0241%" height="15" fill="rgb(227,7,12)" fg:x="13079" fg:w="18"/><text x="17.7897%" y="1407.50"></text></g><g><title>gmw::circuit::static_layers::Circuit&lt;G,Idx&gt;::get_circ (17 samples, 0.02%)</title><rect x="17.5410%" y="1381" width="0.0228%" height="15" fill="rgb(245,203,43)" fg:x="13080" fg:w="17"/><text x="17.7910%" y="1391.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (16 samples, 0.02%)</title><rect x="17.5424%" y="1365" width="0.0215%" height="15" fill="rgb(238,205,33)" fg:x="13081" fg:w="16"/><text x="17.7924%" y="1375.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (16 samples, 0.02%)</title><rect x="17.5424%" y="1349" width="0.0215%" height="15" fill="rgb(231,56,7)" fg:x="13081" fg:w="16"/><text x="17.7924%" y="1359.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (16 samples, 0.02%)</title><rect x="17.5424%" y="1333" width="0.0215%" height="15" fill="rgb(244,186,29)" fg:x="13081" fg:w="16"/><text x="17.7924%" y="1343.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (16 samples, 0.02%)</title><rect x="17.5424%" y="1317" width="0.0215%" height="15" fill="rgb(234,111,31)" fg:x="13081" fg:w="16"/><text x="17.7924%" y="1327.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.03%)</title><rect x="17.5397%" y="1493" width="0.0349%" height="15" fill="rgb(241,149,10)" fg:x="13079" fg:w="26"/><text x="17.7897%" y="1503.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (26 samples, 0.03%)</title><rect x="17.5397%" y="1477" width="0.0349%" height="15" fill="rgb(249,206,44)" fg:x="13079" fg:w="26"/><text x="17.7897%" y="1487.50"></text></g><g><title>core::iter::adapters::fuse::and_then_or_clear (26 samples, 0.03%)</title><rect x="17.5397%" y="1461" width="0.0349%" height="15" fill="rgb(251,153,30)" fg:x="13079" fg:w="26"/><text x="17.7897%" y="1471.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 0.06%)</title><rect x="17.5397%" y="1525" width="0.0630%" height="15" fill="rgb(239,152,38)" fg:x="13079" fg:w="47"/><text x="17.7897%" y="1535.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 0.06%)</title><rect x="17.5397%" y="1509" width="0.0630%" height="15" fill="rgb(249,139,47)" fg:x="13079" fg:w="47"/><text x="17.7897%" y="1519.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (21 samples, 0.03%)</title><rect x="17.5746%" y="1493" width="0.0282%" height="15" fill="rgb(244,64,35)" fg:x="13105" fg:w="21"/><text x="17.8246%" y="1503.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (12 samples, 0.02%)</title><rect x="17.5866%" y="1477" width="0.0161%" height="15" fill="rgb(216,46,15)" fg:x="13114" fg:w="12"/><text x="17.8366%" y="1487.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (73 samples, 0.10%)</title><rect x="17.5303%" y="1541" width="0.0979%" height="15" fill="rgb(250,74,19)" fg:x="13072" fg:w="73"/><text x="17.7803%" y="1551.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (19 samples, 0.03%)</title><rect x="17.6027%" y="1525" width="0.0255%" height="15" fill="rgb(249,42,33)" fg:x="13126" fg:w="19"/><text x="17.8527%" y="1535.50"></text></g><g><title>bitvec::index::BitIdx&lt;R&gt;::offset (12 samples, 0.02%)</title><rect x="17.6738%" y="1397" width="0.0161%" height="15" fill="rgb(242,149,17)" fg:x="13179" fg:w="12"/><text x="17.9238%" y="1407.50"></text></g><g><title>&lt;bitvec::ptr::range::BitPtrRange&lt;M,T,O&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (28 samples, 0.04%)</title><rect x="17.6537%" y="1461" width="0.0375%" height="15" fill="rgb(244,29,21)" fg:x="13164" fg:w="28"/><text x="17.9037%" y="1471.50"></text></g><g><title>bitvec::ptr::range::BitPtrRange&lt;M,T,O&gt;::take_back (18 samples, 0.02%)</title><rect x="17.6671%" y="1445" width="0.0241%" height="15" fill="rgb(220,130,37)" fg:x="13174" fg:w="18"/><text x="17.9171%" y="1455.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::wrapping_sub (13 samples, 0.02%)</title><rect x="17.6738%" y="1429" width="0.0174%" height="15" fill="rgb(211,67,2)" fg:x="13179" fg:w="13"/><text x="17.9238%" y="1439.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::wrapping_offset (13 samples, 0.02%)</title><rect x="17.6738%" y="1413" width="0.0174%" height="15" fill="rgb(235,68,52)" fg:x="13179" fg:w="13"/><text x="17.9238%" y="1423.50"></text></g><g><title>&lt;bitvec::slice::iter::BitValIter&lt;T,O&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (46 samples, 0.06%)</title><rect x="17.6537%" y="1477" width="0.0617%" height="15" fill="rgb(246,142,3)" fg:x="13164" fg:w="46"/><text x="17.9037%" y="1487.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (18 samples, 0.02%)</title><rect x="17.6912%" y="1461" width="0.0241%" height="15" fill="rgb(241,25,7)" fg:x="13192" fg:w="18"/><text x="17.9412%" y="1471.50"></text></g><g><title>&lt;bitvec::slice::iter::BitValIter&lt;T,O&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back::{{closure}} (18 samples, 0.02%)</title><rect x="17.6912%" y="1445" width="0.0241%" height="15" fill="rgb(242,119,39)" fg:x="13192" fg:w="18"/><text x="17.9412%" y="1455.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::read (18 samples, 0.02%)</title><rect x="17.6912%" y="1429" width="0.0241%" height="15" fill="rgb(241,98,45)" fg:x="13192" fg:w="18"/><text x="17.9412%" y="1439.50"></text></g><g><title>bitvec::store::BitStore::get_bit (8 samples, 0.01%)</title><rect x="17.7046%" y="1413" width="0.0107%" height="15" fill="rgb(254,28,30)" fg:x="13202" fg:w="8"/><text x="17.9546%" y="1423.50"></text></g><g><title>&lt;usize as core::ops::bit::BitAnd&gt;::bitand (8 samples, 0.01%)</title><rect x="17.7046%" y="1397" width="0.0107%" height="15" fill="rgb(241,142,54)" fg:x="13202" fg:w="8"/><text x="17.9546%" y="1407.50"></text></g><g><title>&lt;bitvec::slice::iter::BitValIter&lt;T,O&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (25 samples, 0.03%)</title><rect x="17.7154%" y="1477" width="0.0335%" height="15" fill="rgb(222,85,15)" fg:x="13210" fg:w="25"/><text x="17.9654%" y="1487.50"></text></g><g><title>&lt;bitvec::ptr::range::BitPtrRange&lt;M,T,O&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (25 samples, 0.03%)</title><rect x="17.7154%" y="1461" width="0.0335%" height="15" fill="rgb(210,85,47)" fg:x="13210" fg:w="25"/><text x="17.9654%" y="1471.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::offset_from (17 samples, 0.02%)</title><rect x="17.7261%" y="1445" width="0.0228%" height="15" fill="rgb(224,206,25)" fg:x="13218" fg:w="17"/><text x="17.9761%" y="1455.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::offset_from (10 samples, 0.01%)</title><rect x="17.7355%" y="1429" width="0.0134%" height="15" fill="rgb(243,201,19)" fg:x="13225" fg:w="10"/><text x="17.9855%" y="1439.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset_from (10 samples, 0.01%)</title><rect x="17.7355%" y="1413" width="0.0134%" height="15" fill="rgb(236,59,4)" fg:x="13225" fg:w="10"/><text x="17.9855%" y="1423.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (10 samples, 0.01%)</title><rect x="17.7355%" y="1397" width="0.0134%" height="15" fill="rgb(254,179,45)" fg:x="13225" fg:w="10"/><text x="17.9855%" y="1407.50"></text></g><g><title>bitvec::index::BitIdx&lt;R&gt;::offset (24 samples, 0.03%)</title><rect x="17.7851%" y="1365" width="0.0322%" height="15" fill="rgb(226,14,10)" fg:x="13262" fg:w="24"/><text x="18.0351%" y="1375.50"></text></g><g><title>&lt;bitvec::ptr::range::BitPtrRange&lt;M,T,O&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (59 samples, 0.08%)</title><rect x="17.7543%" y="1429" width="0.0791%" height="15" fill="rgb(244,27,41)" fg:x="13239" fg:w="59"/><text x="18.0043%" y="1439.50"></text></g><g><title>bitvec::ptr::range::BitPtrRange&lt;M,T,O&gt;::take_back (50 samples, 0.07%)</title><rect x="17.7663%" y="1413" width="0.0671%" height="15" fill="rgb(235,35,32)" fg:x="13248" fg:w="50"/><text x="18.0163%" y="1423.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::wrapping_sub (36 samples, 0.05%)</title><rect x="17.7851%" y="1397" width="0.0483%" height="15" fill="rgb(218,68,31)" fg:x="13262" fg:w="36"/><text x="18.0351%" y="1407.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::wrapping_offset (36 samples, 0.05%)</title><rect x="17.7851%" y="1381" width="0.0483%" height="15" fill="rgb(207,120,37)" fg:x="13262" fg:w="36"/><text x="18.0351%" y="1391.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::wrapping_offset (12 samples, 0.02%)</title><rect x="17.8173%" y="1365" width="0.0161%" height="15" fill="rgb(227,98,0)" fg:x="13286" fg:w="12"/><text x="18.0673%" y="1375.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::with_ptr (12 samples, 0.02%)</title><rect x="17.8173%" y="1349" width="0.0161%" height="15" fill="rgb(207,7,3)" fg:x="13286" fg:w="12"/><text x="18.0673%" y="1359.50"></text></g><g><title>&lt;bitvec::slice::iter::BitValIter&lt;T,O&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (84 samples, 0.11%)</title><rect x="17.7543%" y="1445" width="0.1126%" height="15" fill="rgb(206,98,19)" fg:x="13239" fg:w="84"/><text x="18.0043%" y="1455.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (25 samples, 0.03%)</title><rect x="17.8334%" y="1429" width="0.0335%" height="15" fill="rgb(217,5,26)" fg:x="13298" fg:w="25"/><text x="18.0834%" y="1439.50"></text></g><g><title>&lt;bitvec::slice::iter::BitValIter&lt;T,O&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back::{{closure}} (25 samples, 0.03%)</title><rect x="17.8334%" y="1413" width="0.0335%" height="15" fill="rgb(235,190,38)" fg:x="13298" fg:w="25"/><text x="18.0834%" y="1423.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::read (25 samples, 0.03%)</title><rect x="17.8334%" y="1397" width="0.0335%" height="15" fill="rgb(247,86,24)" fg:x="13298" fg:w="25"/><text x="18.0834%" y="1407.50"></text></g><g><title>bitvec::store::BitStore::get_bit (13 samples, 0.02%)</title><rect x="17.8495%" y="1381" width="0.0174%" height="15" fill="rgb(205,101,16)" fg:x="13310" fg:w="13"/><text x="18.0995%" y="1391.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::ne (13 samples, 0.02%)</title><rect x="17.8495%" y="1365" width="0.0174%" height="15" fill="rgb(246,168,33)" fg:x="13310" fg:w="13"/><text x="18.0995%" y="1375.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (14 samples, 0.02%)</title><rect x="17.8964%" y="1397" width="0.0188%" height="15" fill="rgb(231,114,1)" fg:x="13345" fg:w="14"/><text x="18.1464%" y="1407.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (138 samples, 0.19%)</title><rect x="17.7489%" y="1477" width="0.1851%" height="15" fill="rgb(207,184,53)" fg:x="13235" fg:w="138"/><text x="17.9989%" y="1487.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next_back (138 samples, 0.19%)</title><rect x="17.7489%" y="1461" width="0.1851%" height="15" fill="rgb(224,95,51)" fg:x="13235" fg:w="138"/><text x="17.9989%" y="1471.50"></text></g><g><title>&lt;bitvec::slice::iter::BitValIter&lt;T,O&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (50 samples, 0.07%)</title><rect x="17.8669%" y="1445" width="0.0671%" height="15" fill="rgb(212,188,45)" fg:x="13323" fg:w="50"/><text x="18.1169%" y="1455.50"></text></g><g><title>&lt;bitvec::ptr::range::BitPtrRange&lt;M,T,O&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (50 samples, 0.07%)</title><rect x="17.8669%" y="1429" width="0.0671%" height="15" fill="rgb(223,154,38)" fg:x="13323" fg:w="50"/><text x="18.1169%" y="1439.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::offset_from (34 samples, 0.05%)</title><rect x="17.8884%" y="1413" width="0.0456%" height="15" fill="rgb(251,22,52)" fg:x="13339" fg:w="34"/><text x="18.1384%" y="1423.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::offset_from (14 samples, 0.02%)</title><rect x="17.9152%" y="1397" width="0.0188%" height="15" fill="rgb(229,209,22)" fg:x="13359" fg:w="14"/><text x="18.1652%" y="1407.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset_from (14 samples, 0.02%)</title><rect x="17.9152%" y="1381" width="0.0188%" height="15" fill="rgb(234,138,34)" fg:x="13359" fg:w="14"/><text x="18.1652%" y="1391.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (14 samples, 0.02%)</title><rect x="17.9152%" y="1365" width="0.0188%" height="15" fill="rgb(212,95,11)" fg:x="13359" fg:w="14"/><text x="18.1652%" y="1375.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_add (9 samples, 0.01%)</title><rect x="17.9541%" y="1365" width="0.0121%" height="15" fill="rgb(240,179,47)" fg:x="13388" fg:w="9"/><text x="18.2041%" y="1375.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (12 samples, 0.02%)</title><rect x="17.9662%" y="1365" width="0.0161%" height="15" fill="rgb(240,163,11)" fg:x="13397" fg:w="12"/><text x="18.2162%" y="1375.50"></text></g><g><title>&lt;bitvec::slice::iter::BitValIter&lt;T,O&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (50 samples, 0.07%)</title><rect x="17.9340%" y="1429" width="0.0671%" height="15" fill="rgb(236,37,12)" fg:x="13373" fg:w="50"/><text x="18.1840%" y="1439.50"></text></g><g><title>&lt;bitvec::slice::iter::BitValIter&lt;T,O&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (50 samples, 0.07%)</title><rect x="17.9340%" y="1413" width="0.0671%" height="15" fill="rgb(232,164,16)" fg:x="13373" fg:w="50"/><text x="18.1840%" y="1423.50"></text></g><g><title>&lt;bitvec::ptr::range::BitPtrRange&lt;M,T,O&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (50 samples, 0.07%)</title><rect x="17.9340%" y="1397" width="0.0671%" height="15" fill="rgb(244,205,15)" fg:x="13373" fg:w="50"/><text x="18.1840%" y="1407.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::offset_from (35 samples, 0.05%)</title><rect x="17.9541%" y="1381" width="0.0469%" height="15" fill="rgb(223,117,47)" fg:x="13388" fg:w="35"/><text x="18.2041%" y="1391.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::offset_from (14 samples, 0.02%)</title><rect x="17.9822%" y="1365" width="0.0188%" height="15" fill="rgb(244,107,35)" fg:x="13409" fg:w="14"/><text x="18.2322%" y="1375.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset_from (14 samples, 0.02%)</title><rect x="17.9822%" y="1349" width="0.0188%" height="15" fill="rgb(205,140,8)" fg:x="13409" fg:w="14"/><text x="18.2322%" y="1359.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (14 samples, 0.02%)</title><rect x="17.9822%" y="1333" width="0.0188%" height="15" fill="rgb(228,84,46)" fg:x="13409" fg:w="14"/><text x="18.2322%" y="1343.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (288 samples, 0.39%)</title><rect x="17.6282%" y="1509" width="0.3862%" height="15" fill="rgb(254,188,9)" fg:x="13145" fg:w="288"/><text x="17.8782%" y="1519.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next_back (288 samples, 0.39%)</title><rect x="17.6282%" y="1493" width="0.3862%" height="15" fill="rgb(206,112,54)" fg:x="13145" fg:w="288"/><text x="17.8782%" y="1503.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (60 samples, 0.08%)</title><rect x="17.9340%" y="1477" width="0.0805%" height="15" fill="rgb(216,84,49)" fg:x="13373" fg:w="60"/><text x="18.1840%" y="1487.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (60 samples, 0.08%)</title><rect x="17.9340%" y="1461" width="0.0805%" height="15" fill="rgb(214,194,35)" fg:x="13373" fg:w="60"/><text x="18.1840%" y="1471.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::size_hint (60 samples, 0.08%)</title><rect x="17.9340%" y="1445" width="0.0805%" height="15" fill="rgb(249,28,3)" fg:x="13373" fg:w="60"/><text x="18.1840%" y="1455.50"></text></g><g><title>core::cmp::min (10 samples, 0.01%)</title><rect x="18.0010%" y="1429" width="0.0134%" height="15" fill="rgb(222,56,52)" fg:x="13423" fg:w="10"/><text x="18.2510%" y="1439.50"></text></g><g><title>core::cmp::Ord::min (10 samples, 0.01%)</title><rect x="18.0010%" y="1413" width="0.0134%" height="15" fill="rgb(245,217,50)" fg:x="13423" fg:w="10"/><text x="18.2510%" y="1423.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (397 samples, 0.53%)</title><rect x="17.4968%" y="1573" width="0.5324%" height="15" fill="rgb(213,201,24)" fg:x="13047" fg:w="397"/><text x="17.7468%" y="1583.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (397 samples, 0.53%)</title><rect x="17.4968%" y="1557" width="0.5324%" height="15" fill="rgb(248,116,28)" fg:x="13047" fg:w="397"/><text x="17.7468%" y="1567.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (299 samples, 0.40%)</title><rect x="17.6282%" y="1541" width="0.4010%" height="15" fill="rgb(219,72,43)" fg:x="13145" fg:w="299"/><text x="17.8782%" y="1551.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (299 samples, 0.40%)</title><rect x="17.6282%" y="1525" width="0.4010%" height="15" fill="rgb(209,138,14)" fg:x="13145" fg:w="299"/><text x="17.8782%" y="1535.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (11 samples, 0.01%)</title><rect x="18.0144%" y="1509" width="0.0148%" height="15" fill="rgb(222,18,33)" fg:x="13433" fg:w="11"/><text x="18.2644%" y="1519.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (10 samples, 0.01%)</title><rect x="18.0158%" y="1493" width="0.0134%" height="15" fill="rgb(213,199,7)" fg:x="13434" fg:w="10"/><text x="18.2658%" y="1503.50"></text></g><g><title>gmw::mul_triple::boolean::MulTriplesSlice::iter::{{closure}} (10 samples, 0.01%)</title><rect x="18.0158%" y="1477" width="0.0134%" height="15" fill="rgb(250,110,10)" fg:x="13434" fg:w="10"/><text x="18.2658%" y="1487.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::add (32 samples, 0.04%)</title><rect x="18.1445%" y="1477" width="0.0429%" height="15" fill="rgb(248,123,6)" fg:x="13530" fg:w="32"/><text x="18.3945%" y="1487.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::offset (32 samples, 0.04%)</title><rect x="18.1445%" y="1461" width="0.0429%" height="15" fill="rgb(206,91,31)" fg:x="13530" fg:w="32"/><text x="18.3945%" y="1471.50"></text></g><g><title>bitvec::index::BitIdx&lt;R&gt;::offset (32 samples, 0.04%)</title><rect x="18.1445%" y="1445" width="0.0429%" height="15" fill="rgb(211,154,13)" fg:x="13530" fg:w="32"/><text x="18.3945%" y="1455.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_add (15 samples, 0.02%)</title><rect x="18.1673%" y="1429" width="0.0201%" height="15" fill="rgb(225,148,7)" fg:x="13547" fg:w="15"/><text x="18.4173%" y="1439.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::as_mut_bitptr_range (66 samples, 0.09%)</title><rect x="18.1096%" y="1509" width="0.0885%" height="15" fill="rgb(220,160,43)" fg:x="13504" fg:w="66"/><text x="18.3596%" y="1519.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::to_bitptr_range (66 samples, 0.09%)</title><rect x="18.1096%" y="1493" width="0.0885%" height="15" fill="rgb(213,52,39)" fg:x="13504" fg:w="66"/><text x="18.3596%" y="1503.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::to_bitptr (8 samples, 0.01%)</title><rect x="18.1874%" y="1477" width="0.0107%" height="15" fill="rgb(243,137,7)" fg:x="13562" fg:w="8"/><text x="18.4374%" y="1487.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::head (8 samples, 0.01%)</title><rect x="18.1874%" y="1461" width="0.0107%" height="15" fill="rgb(230,79,13)" fg:x="13562" fg:w="8"/><text x="18.4374%" y="1471.50"></text></g><g><title>bitvec::index::BitIdx&lt;R&gt;::offset (22 samples, 0.03%)</title><rect x="18.1982%" y="1429" width="0.0295%" height="15" fill="rgb(247,105,23)" fg:x="13570" fg:w="22"/><text x="18.4482%" y="1439.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_add (22 samples, 0.03%)</title><rect x="18.1982%" y="1413" width="0.0295%" height="15" fill="rgb(223,179,41)" fg:x="13570" fg:w="22"/><text x="18.4482%" y="1423.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::add (31 samples, 0.04%)</title><rect x="18.1982%" y="1461" width="0.0416%" height="15" fill="rgb(218,9,34)" fg:x="13570" fg:w="31"/><text x="18.4482%" y="1471.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::offset (31 samples, 0.04%)</title><rect x="18.1982%" y="1445" width="0.0416%" height="15" fill="rgb(222,106,8)" fg:x="13570" fg:w="31"/><text x="18.4482%" y="1455.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::offset (9 samples, 0.01%)</title><rect x="18.2277%" y="1429" width="0.0121%" height="15" fill="rgb(211,220,0)" fg:x="13592" fg:w="9"/><text x="18.4777%" y="1439.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::with_ptr (9 samples, 0.01%)</title><rect x="18.2277%" y="1413" width="0.0121%" height="15" fill="rgb(229,52,16)" fg:x="13592" fg:w="9"/><text x="18.4777%" y="1423.50"></text></g><g><title>tap::pipe::Pipe::pipe (9 samples, 0.01%)</title><rect x="18.2277%" y="1397" width="0.0121%" height="15" fill="rgb(212,155,18)" fg:x="13592" fg:w="9"/><text x="18.4777%" y="1407.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::offset::{{closure}} (9 samples, 0.01%)</title><rect x="18.2277%" y="1381" width="0.0121%" height="15" fill="rgb(242,21,14)" fg:x="13592" fg:w="9"/><text x="18.4777%" y="1391.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (9 samples, 0.01%)</title><rect x="18.2277%" y="1365" width="0.0121%" height="15" fill="rgb(222,19,48)" fg:x="13592" fg:w="9"/><text x="18.4777%" y="1375.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::span_unchecked (27 samples, 0.04%)</title><rect x="18.2397%" y="1461" width="0.0362%" height="15" fill="rgb(232,45,27)" fg:x="13601" fg:w="27"/><text x="18.4897%" y="1471.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::new_unchecked (27 samples, 0.04%)</title><rect x="18.2397%" y="1445" width="0.0362%" height="15" fill="rgb(249,103,42)" fg:x="13601" fg:w="27"/><text x="18.4897%" y="1455.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::address (15 samples, 0.02%)</title><rect x="18.2759%" y="1445" width="0.0201%" height="15" fill="rgb(246,81,33)" fg:x="13628" fg:w="15"/><text x="18.5259%" y="1455.50"></text></g><g><title>bitvec::slice::api::&lt;impl bitvec::slice::BitSlice&lt;T,O&gt;&gt;::get_unchecked_mut (83 samples, 0.11%)</title><rect x="18.1982%" y="1509" width="0.1113%" height="15" fill="rgb(252,33,42)" fg:x="13570" fg:w="83"/><text x="18.4482%" y="1519.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as bitvec::slice::api::BitSliceIndex&lt;T,O&gt;&gt;::get_unchecked_mut (83 samples, 0.11%)</title><rect x="18.1982%" y="1493" width="0.1113%" height="15" fill="rgb(209,212,41)" fg:x="13570" fg:w="83"/><text x="18.4482%" y="1503.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as bitvec::slice::api::BitSliceIndex&lt;T,O&gt;&gt;::get_unchecked_mut::{{closure}} (83 samples, 0.11%)</title><rect x="18.1982%" y="1477" width="0.1113%" height="15" fill="rgb(207,154,6)" fg:x="13570" fg:w="83"/><text x="18.4482%" y="1487.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::to_bitptr (25 samples, 0.03%)</title><rect x="18.2759%" y="1461" width="0.0335%" height="15" fill="rgb(223,64,47)" fg:x="13628" fg:w="25"/><text x="18.5259%" y="1471.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::head (10 samples, 0.01%)</title><rect x="18.2961%" y="1445" width="0.0134%" height="15" fill="rgb(211,161,38)" fg:x="13643" fg:w="10"/><text x="18.5461%" y="1455.50"></text></g><g><title>bitvec::vec::api::&lt;impl bitvec::vec::BitVec&lt;T,O&gt;&gt;::len (11 samples, 0.01%)</title><rect x="18.3095%" y="1509" width="0.0148%" height="15" fill="rgb(219,138,40)" fg:x="13653" fg:w="11"/><text x="18.5595%" y="1519.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::len (11 samples, 0.01%)</title><rect x="18.3095%" y="1493" width="0.0148%" height="15" fill="rgb(241,228,46)" fg:x="13653" fg:w="11"/><text x="18.5595%" y="1503.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::assert_len_encodable (13 samples, 0.02%)</title><rect x="18.3403%" y="1493" width="0.0174%" height="15" fill="rgb(223,209,38)" fg:x="13676" fg:w="13"/><text x="18.5903%" y="1503.50"></text></g><g><title>bitvec::mem::elts (38 samples, 0.05%)</title><rect x="18.3644%" y="1477" width="0.0510%" height="15" fill="rgb(236,164,45)" fg:x="13694" fg:w="38"/><text x="18.6144%" y="1487.50"></text></g><g><title>bitvec::mem::elts (22 samples, 0.03%)</title><rect x="18.4248%" y="1461" width="0.0295%" height="15" fill="rgb(231,15,5)" fg:x="13739" fg:w="22"/><text x="18.6748%" y="1471.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::elements (45 samples, 0.06%)</title><rect x="18.4154%" y="1477" width="0.0603%" height="15" fill="rgb(252,35,15)" fg:x="13732" fg:w="45"/><text x="18.6654%" y="1487.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::head (16 samples, 0.02%)</title><rect x="18.4543%" y="1461" width="0.0215%" height="15" fill="rgb(248,181,18)" fg:x="13761" fg:w="16"/><text x="18.7043%" y="1471.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::head (22 samples, 0.03%)</title><rect x="18.4758%" y="1477" width="0.0295%" height="15" fill="rgb(233,39,42)" fg:x="13777" fg:w="22"/><text x="18.7258%" y="1487.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (11 samples, 0.01%)</title><rect x="18.5066%" y="1461" width="0.0148%" height="15" fill="rgb(238,110,33)" fg:x="13800" fg:w="11"/><text x="18.7566%" y="1471.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (11 samples, 0.01%)</title><rect x="18.5066%" y="1445" width="0.0148%" height="15" fill="rgb(233,195,10)" fg:x="13800" fg:w="11"/><text x="18.7566%" y="1455.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::set_address (13 samples, 0.02%)</title><rect x="18.5227%" y="1461" width="0.0174%" height="15" fill="rgb(254,105,3)" fg:x="13812" fg:w="13"/><text x="18.7727%" y="1471.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (12 samples, 0.02%)</title><rect x="18.5643%" y="1413" width="0.0161%" height="15" fill="rgb(221,225,9)" fg:x="13843" fg:w="12"/><text x="18.8143%" y="1423.50"></text></g><g><title>&lt;core::iter::sources::repeat_with::RepeatWith&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (12 samples, 0.02%)</title><rect x="18.5643%" y="1397" width="0.0161%" height="15" fill="rgb(224,227,45)" fg:x="13843" fg:w="12"/><text x="18.8143%" y="1407.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each::check::{{closure}} (11 samples, 0.01%)</title><rect x="18.5656%" y="1381" width="0.0148%" height="15" fill="rgb(229,198,43)" fg:x="13844" fg:w="11"/><text x="18.8156%" y="1391.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (11 samples, 0.01%)</title><rect x="18.5656%" y="1365" width="0.0148%" height="15" fill="rgb(206,209,35)" fg:x="13844" fg:w="11"/><text x="18.8156%" y="1375.50"></text></g><g><title>core::ptr::write (11 samples, 0.01%)</title><rect x="18.5656%" y="1349" width="0.0148%" height="15" fill="rgb(245,195,53)" fg:x="13844" fg:w="11"/><text x="18.8156%" y="1359.50"></text></g><g><title>[libc.so.6] (10 samples, 0.01%)</title><rect x="18.5669%" y="1333" width="0.0134%" height="15" fill="rgb(240,92,26)" fg:x="13845" fg:w="10"/><text x="18.8169%" y="1343.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (13 samples, 0.02%)</title><rect x="18.5643%" y="1429" width="0.0174%" height="15" fill="rgb(207,40,23)" fg:x="13843" fg:w="13"/><text x="18.8143%" y="1439.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize_with (32 samples, 0.04%)</title><rect x="18.5401%" y="1445" width="0.0429%" height="15" fill="rgb(223,111,35)" fg:x="13825" fg:w="32"/><text x="18.7901%" y="1455.50"></text></g><g><title>alloc::raw_vec::finish_grow (13 samples, 0.02%)</title><rect x="18.5911%" y="1365" width="0.0174%" height="15" fill="rgb(229,147,28)" fg:x="13863" fg:w="13"/><text x="18.8411%" y="1375.50"></text></g><g><title>malloc (11 samples, 0.01%)</title><rect x="18.5938%" y="1349" width="0.0148%" height="15" fill="rgb(211,29,28)" fg:x="13865" fg:w="11"/><text x="18.8438%" y="1359.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::do_reservation::{{closure}} (52 samples, 0.07%)</title><rect x="18.5401%" y="1461" width="0.0697%" height="15" fill="rgb(228,72,33)" fg:x="13825" fg:w="52"/><text x="18.7901%" y="1471.50"></text></g><g><title>core::ops::function::FnOnce::call_once (20 samples, 0.03%)</title><rect x="18.5830%" y="1445" width="0.0268%" height="15" fill="rgb(205,214,31)" fg:x="13857" fg:w="20"/><text x="18.8330%" y="1455.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (20 samples, 0.03%)</title><rect x="18.5830%" y="1429" width="0.0268%" height="15" fill="rgb(224,111,15)" fg:x="13857" fg:w="20"/><text x="18.8330%" y="1439.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (20 samples, 0.03%)</title><rect x="18.5830%" y="1413" width="0.0268%" height="15" fill="rgb(253,21,26)" fg:x="13857" fg:w="20"/><text x="18.8330%" y="1423.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (15 samples, 0.02%)</title><rect x="18.5897%" y="1397" width="0.0201%" height="15" fill="rgb(245,139,43)" fg:x="13862" fg:w="15"/><text x="18.8397%" y="1407.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (15 samples, 0.02%)</title><rect x="18.5897%" y="1381" width="0.0201%" height="15" fill="rgb(252,170,7)" fg:x="13862" fg:w="15"/><text x="18.8397%" y="1391.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::with_vec (106 samples, 0.14%)</title><rect x="18.5053%" y="1477" width="0.1422%" height="15" fill="rgb(231,118,14)" fg:x="13799" fg:w="106"/><text x="18.7553%" y="1487.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::into_vec (28 samples, 0.04%)</title><rect x="18.6099%" y="1461" width="0.0375%" height="15" fill="rgb(238,83,0)" fg:x="13877" fg:w="28"/><text x="18.8599%" y="1471.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::address (28 samples, 0.04%)</title><rect x="18.6099%" y="1445" width="0.0375%" height="15" fill="rgb(221,39,39)" fg:x="13877" fg:w="28"/><text x="18.8599%" y="1455.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::do_reservation (243 samples, 0.33%)</title><rect x="18.3577%" y="1493" width="0.3259%" height="15" fill="rgb(222,119,46)" fg:x="13689" fg:w="243"/><text x="18.6077%" y="1503.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_add (27 samples, 0.04%)</title><rect x="18.6474%" y="1477" width="0.0362%" height="15" fill="rgb(222,165,49)" fg:x="13905" fg:w="27"/><text x="18.8974%" y="1487.50"></text></g><g><title>bitvec::vec::api::&lt;impl bitvec::vec::BitVec&lt;T,O&gt;&gt;::reserve (287 samples, 0.38%)</title><rect x="18.3242%" y="1509" width="0.3849%" height="15" fill="rgb(219,113,52)" fg:x="13664" fg:w="287"/><text x="18.5742%" y="1519.50"></text></g><g><title>bitvec::vec::api::&lt;impl bitvec::vec::BitVec&lt;T,O&gt;&gt;::len (19 samples, 0.03%)</title><rect x="18.6836%" y="1493" width="0.0255%" height="15" fill="rgb(214,7,15)" fg:x="13932" fg:w="19"/><text x="18.9336%" y="1503.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::len (19 samples, 0.03%)</title><rect x="18.6836%" y="1477" width="0.0255%" height="15" fill="rgb(235,32,4)" fg:x="13932" fg:w="19"/><text x="18.9336%" y="1487.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::set_len_unchecked (21 samples, 0.03%)</title><rect x="18.7212%" y="1493" width="0.0282%" height="15" fill="rgb(238,90,54)" fg:x="13960" fg:w="21"/><text x="18.9712%" y="1503.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::set_len (21 samples, 0.03%)</title><rect x="18.7212%" y="1477" width="0.0282%" height="15" fill="rgb(213,208,19)" fg:x="13960" fg:w="21"/><text x="18.9712%" y="1487.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (31 samples, 0.04%)</title><rect x="18.7493%" y="1477" width="0.0416%" height="15" fill="rgb(233,156,4)" fg:x="13981" fg:w="31"/><text x="18.9993%" y="1487.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (31 samples, 0.04%)</title><rect x="18.7493%" y="1461" width="0.0416%" height="15" fill="rgb(207,194,5)" fg:x="13981" fg:w="31"/><text x="18.9993%" y="1471.50"></text></g><g><title>bitvec::vec::api::&lt;impl bitvec::vec::BitVec&lt;T,O&gt;&gt;::set_len (84 samples, 0.11%)</title><rect x="18.7091%" y="1509" width="0.1126%" height="15" fill="rgb(206,111,30)" fg:x="13951" fg:w="84"/><text x="18.9591%" y="1519.50"></text></g><g><title>bitvec::vec::api::&lt;impl bitvec::vec::BitVec&lt;T,O&gt;&gt;::capacity (54 samples, 0.07%)</title><rect x="18.7493%" y="1493" width="0.0724%" height="15" fill="rgb(243,70,54)" fg:x="13981" fg:w="54"/><text x="18.9993%" y="1503.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (23 samples, 0.03%)</title><rect x="18.7909%" y="1477" width="0.0308%" height="15" fill="rgb(242,28,8)" fg:x="14012" fg:w="23"/><text x="19.0409%" y="1487.50"></text></g><g><title>bitvec::vec::ops::&lt;impl core::ops::deref::DerefMut for bitvec::vec::BitVec&lt;T,O&gt;&gt;::deref_mut (15 samples, 0.02%)</title><rect x="18.8217%" y="1509" width="0.0201%" height="15" fill="rgb(219,106,18)" fg:x="14035" fg:w="15"/><text x="19.0717%" y="1519.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::as_mut_bitslice (15 samples, 0.02%)</title><rect x="18.8217%" y="1493" width="0.0201%" height="15" fill="rgb(244,222,10)" fg:x="14035" fg:w="15"/><text x="19.0717%" y="1503.50"></text></g><g><title>bitvec::index::BitIdx&lt;R&gt;::offset (25 samples, 0.03%)</title><rect x="18.8687%" y="1365" width="0.0335%" height="15" fill="rgb(236,179,52)" fg:x="14070" fg:w="25"/><text x="19.1187%" y="1375.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_add (25 samples, 0.03%)</title><rect x="18.8687%" y="1349" width="0.0335%" height="15" fill="rgb(213,23,39)" fg:x="14070" fg:w="25"/><text x="19.1187%" y="1359.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (17 samples, 0.02%)</title><rect x="18.9022%" y="1333" width="0.0228%" height="15" fill="rgb(238,48,10)" fg:x="14095" fg:w="17"/><text x="19.1522%" y="1343.50"></text></g><g><title>&lt;bitvec::ptr::range::BitPtrRange&lt;M,T,O&gt; as core::iter::traits::iterator::Iterator&gt;::next (66 samples, 0.09%)</title><rect x="18.8419%" y="1429" width="0.0885%" height="15" fill="rgb(251,196,23)" fg:x="14050" fg:w="66"/><text x="19.0919%" y="1439.50"></text></g><g><title>bitvec::ptr::range::BitPtrRange&lt;M,T,O&gt;::take_front (46 samples, 0.06%)</title><rect x="18.8687%" y="1413" width="0.0617%" height="15" fill="rgb(250,152,24)" fg:x="14070" fg:w="46"/><text x="19.1187%" y="1423.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::wrapping_add (46 samples, 0.06%)</title><rect x="18.8687%" y="1397" width="0.0617%" height="15" fill="rgb(209,150,17)" fg:x="14070" fg:w="46"/><text x="19.1187%" y="1407.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::wrapping_offset (46 samples, 0.06%)</title><rect x="18.8687%" y="1381" width="0.0617%" height="15" fill="rgb(234,202,34)" fg:x="14070" fg:w="46"/><text x="19.1187%" y="1391.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::wrapping_offset (21 samples, 0.03%)</title><rect x="18.9022%" y="1365" width="0.0282%" height="15" fill="rgb(253,148,53)" fg:x="14095" fg:w="21"/><text x="19.1522%" y="1375.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::with_ptr (21 samples, 0.03%)</title><rect x="18.9022%" y="1349" width="0.0282%" height="15" fill="rgb(218,129,16)" fg:x="14095" fg:w="21"/><text x="19.1522%" y="1359.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (72 samples, 0.10%)</title><rect x="18.8419%" y="1461" width="0.0966%" height="15" fill="rgb(216,85,19)" fg:x="14050" fg:w="72"/><text x="19.0919%" y="1471.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (72 samples, 0.10%)</title><rect x="18.8419%" y="1445" width="0.0966%" height="15" fill="rgb(235,228,7)" fg:x="14050" fg:w="72"/><text x="19.0919%" y="1455.50"></text></g><g><title>&lt;core::cell::Cell&lt;usize&gt; as radium::Radium&gt;::fetch_and (12 samples, 0.02%)</title><rect x="18.9652%" y="1365" width="0.0161%" height="15" fill="rgb(245,175,0)" fg:x="14142" fg:w="12"/><text x="19.2152%" y="1375.50"></text></g><g><title>bitvec::vec::iter::&lt;impl core::iter::traits::collect::Extend&lt;bool&gt; for bitvec::vec::BitVec&lt;T,O&gt;&gt;::extend::{{closure}} (46 samples, 0.06%)</title><rect x="18.9384%" y="1445" width="0.0617%" height="15" fill="rgb(208,168,36)" fg:x="14122" fg:w="46"/><text x="19.1884%" y="1455.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;wyz::comu::Mut,T,O&gt;::write (45 samples, 0.06%)</title><rect x="18.9398%" y="1429" width="0.0603%" height="15" fill="rgb(246,171,24)" fg:x="14123" fg:w="45"/><text x="19.1898%" y="1439.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;wyz::comu::Mut,T,O&gt;::replace (45 samples, 0.06%)</title><rect x="18.9398%" y="1413" width="0.0603%" height="15" fill="rgb(215,142,24)" fg:x="14123" fg:w="45"/><text x="19.1898%" y="1423.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;wyz::comu::Frozen&lt;M&gt;,T,O&gt;::frozen_write_bit (45 samples, 0.06%)</title><rect x="18.9398%" y="1397" width="0.0603%" height="15" fill="rgb(250,187,7)" fg:x="14123" fg:w="45"/><text x="19.1898%" y="1407.50"></text></g><g><title>bitvec::access::BitAccess::write_bit (45 samples, 0.06%)</title><rect x="18.9398%" y="1381" width="0.0603%" height="15" fill="rgb(228,66,33)" fg:x="14123" fg:w="45"/><text x="19.1898%" y="1391.50"></text></g><g><title>&lt;core::cell::Cell&lt;usize&gt; as radium::Radium&gt;::fetch_or (14 samples, 0.02%)</title><rect x="18.9813%" y="1365" width="0.0188%" height="15" fill="rgb(234,215,21)" fg:x="14154" fg:w="14"/><text x="19.2313%" y="1375.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (137 samples, 0.18%)</title><rect x="18.8419%" y="1509" width="0.1837%" height="15" fill="rgb(222,191,20)" fg:x="14050" fg:w="137"/><text x="19.0919%" y="1519.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (137 samples, 0.18%)</title><rect x="18.8419%" y="1493" width="0.1837%" height="15" fill="rgb(245,79,54)" fg:x="14050" fg:w="137"/><text x="19.0919%" y="1503.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (137 samples, 0.18%)</title><rect x="18.8419%" y="1477" width="0.1837%" height="15" fill="rgb(240,10,37)" fg:x="14050" fg:w="137"/><text x="19.0919%" y="1487.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (65 samples, 0.09%)</title><rect x="18.9384%" y="1461" width="0.0872%" height="15" fill="rgb(214,192,32)" fg:x="14122" fg:w="65"/><text x="19.1884%" y="1471.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count::{{closure}} (19 samples, 0.03%)</title><rect x="19.0001%" y="1445" width="0.0255%" height="15" fill="rgb(209,36,54)" fg:x="14168" fg:w="19"/><text x="19.2501%" y="1455.50"></text></g><g><title>&lt;(ExtendA,ExtendB) as core::iter::traits::collect::Extend&lt;(A,B)&gt;&gt;::extend::extend::{{closure}} (746 samples, 1.00%)</title><rect x="18.0292%" y="1557" width="1.0004%" height="15" fill="rgb(220,10,11)" fg:x="13444" fg:w="746"/><text x="18.2792%" y="1567.50"></text></g><g><title>core::iter::traits::collect::Extend::extend_one (726 samples, 0.97%)</title><rect x="18.0560%" y="1541" width="0.9736%" height="15" fill="rgb(221,106,17)" fg:x="13464" fg:w="726"/><text x="18.3060%" y="1551.50"></text></g><g><title>bitvec::vec::iter::&lt;impl core::iter::traits::collect::Extend&lt;bool&gt; for bitvec::vec::BitVec&lt;T,O&gt;&gt;::extend (719 samples, 0.96%)</title><rect x="18.0654%" y="1525" width="0.9642%" height="15" fill="rgb(251,142,44)" fg:x="13471" fg:w="719"/><text x="18.3154%" y="1535.50"></text></g><g><title>[libc.so.6] (266 samples, 0.36%)</title><rect x="19.1396%" y="1429" width="0.3567%" height="15" fill="rgb(238,13,15)" fg:x="14272" fg:w="266"/><text x="19.3896%" y="1439.50"></text></g><g><title>&lt;gmw::circuit::static_layers::ScLayerIterator&lt;G,Idx&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.01%)</title><rect x="19.5432%" y="1269" width="0.0107%" height="15" fill="rgb(208,107,27)" fg:x="14573" fg:w="8"/><text x="19.7932%" y="1279.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.03%)</title><rect x="19.5419%" y="1349" width="0.0255%" height="15" fill="rgb(205,136,37)" fg:x="14572" fg:w="19"/><text x="19.7919%" y="1359.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (19 samples, 0.03%)</title><rect x="19.5419%" y="1333" width="0.0255%" height="15" fill="rgb(250,205,27)" fg:x="14572" fg:w="19"/><text x="19.7919%" y="1343.50"></text></g><g><title>core::iter::adapters::fuse::and_then_or_clear (19 samples, 0.03%)</title><rect x="19.5419%" y="1317" width="0.0255%" height="15" fill="rgb(210,80,43)" fg:x="14572" fg:w="19"/><text x="19.7919%" y="1327.50"></text></g><g><title>core::ops::function::FnOnce::call_once (18 samples, 0.02%)</title><rect x="19.5432%" y="1301" width="0.0241%" height="15" fill="rgb(247,160,36)" fg:x="14573" fg:w="18"/><text x="19.7932%" y="1311.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="19.5432%" y="1285" width="0.0241%" height="15" fill="rgb(234,13,49)" fg:x="14573" fg:w="18"/><text x="19.7932%" y="1295.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (10 samples, 0.01%)</title><rect x="19.5540%" y="1269" width="0.0134%" height="15" fill="rgb(234,122,0)" fg:x="14581" fg:w="10"/><text x="19.8040%" y="1279.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (10 samples, 0.01%)</title><rect x="19.5540%" y="1253" width="0.0134%" height="15" fill="rgb(207,146,38)" fg:x="14581" fg:w="10"/><text x="19.8040%" y="1263.50"></text></g><g><title>gmw::circuit::ExecutableLayer&lt;G,Idx&gt;::interactive_parents_iter::{{closure}} (8 samples, 0.01%)</title><rect x="19.5566%" y="1237" width="0.0107%" height="15" fill="rgb(207,177,25)" fg:x="14583" fg:w="8"/><text x="19.8066%" y="1247.50"></text></g><g><title>bitvec::ptr::range::BitPtrRange&lt;M,T,O&gt;::is_empty (41 samples, 0.05%)</title><rect x="19.6948%" y="1205" width="0.0550%" height="15" fill="rgb(211,178,42)" fg:x="14686" fg:w="41"/><text x="19.9448%" y="1215.50"></text></g><g><title>bitvec::index::BitIdx&lt;R&gt;::offset (19 samples, 0.03%)</title><rect x="19.7618%" y="1157" width="0.0255%" height="15" fill="rgb(230,69,54)" fg:x="14736" fg:w="19"/><text x="20.0118%" y="1167.50"></text></g><g><title>&lt;bitvec::slice::iter::BitValIter&lt;T,O&gt; as core::iter::traits::iterator::Iterator&gt;::next (143 samples, 0.19%)</title><rect x="19.5982%" y="1237" width="0.1918%" height="15" fill="rgb(214,135,41)" fg:x="14614" fg:w="143"/><text x="19.8482%" y="1247.50"></text></g><g><title>&lt;bitvec::ptr::range::BitPtrRange&lt;M,T,O&gt; as core::iter::traits::iterator::Iterator&gt;::next (143 samples, 0.19%)</title><rect x="19.5982%" y="1221" width="0.1918%" height="15" fill="rgb(237,67,25)" fg:x="14614" fg:w="143"/><text x="19.8482%" y="1231.50"></text></g><g><title>bitvec::ptr::range::BitPtrRange&lt;M,T,O&gt;::take_front (30 samples, 0.04%)</title><rect x="19.7498%" y="1205" width="0.0402%" height="15" fill="rgb(222,189,50)" fg:x="14727" fg:w="30"/><text x="19.9998%" y="1215.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::wrapping_add (21 samples, 0.03%)</title><rect x="19.7618%" y="1189" width="0.0282%" height="15" fill="rgb(245,148,34)" fg:x="14736" fg:w="21"/><text x="20.0118%" y="1199.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::wrapping_offset (21 samples, 0.03%)</title><rect x="19.7618%" y="1173" width="0.0282%" height="15" fill="rgb(222,29,6)" fg:x="14736" fg:w="21"/><text x="20.0118%" y="1183.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (194 samples, 0.26%)</title><rect x="19.5727%" y="1285" width="0.2602%" height="15" fill="rgb(221,189,43)" fg:x="14595" fg:w="194"/><text x="19.8227%" y="1295.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (175 samples, 0.23%)</title><rect x="19.5982%" y="1269" width="0.2347%" height="15" fill="rgb(207,36,27)" fg:x="14614" fg:w="175"/><text x="19.8482%" y="1279.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (175 samples, 0.23%)</title><rect x="19.5982%" y="1253" width="0.2347%" height="15" fill="rgb(217,90,24)" fg:x="14614" fg:w="175"/><text x="19.8482%" y="1263.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.04%)</title><rect x="19.7900%" y="1237" width="0.0429%" height="15" fill="rgb(224,66,35)" fg:x="14757" fg:w="32"/><text x="20.0400%" y="1247.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (18 samples, 0.02%)</title><rect x="19.8088%" y="1221" width="0.0241%" height="15" fill="rgb(221,13,50)" fg:x="14771" fg:w="18"/><text x="20.0588%" y="1231.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (505 samples, 0.68%)</title><rect x="19.5727%" y="1301" width="0.6772%" height="15" fill="rgb(236,68,49)" fg:x="14595" fg:w="505"/><text x="19.8227%" y="1311.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (311 samples, 0.42%)</title><rect x="19.8329%" y="1285" width="0.4171%" height="15" fill="rgb(229,146,28)" fg:x="14789" fg:w="311"/><text x="20.0829%" y="1295.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (66 samples, 0.09%)</title><rect x="20.1615%" y="1269" width="0.0885%" height="15" fill="rgb(225,31,38)" fg:x="15034" fg:w="66"/><text x="20.4115%" y="1279.50"></text></g><g><title>gmw::circuit::static_layers::ExecutableScLayer&lt;G,Idx&gt;::interactive_parents_iter::{{closure}} (62 samples, 0.08%)</title><rect x="20.1668%" y="1253" width="0.0831%" height="15" fill="rgb(250,208,3)" fg:x="15038" fg:w="62"/><text x="20.4168%" y="1263.50"></text></g><g><title>core::ops::function::FnOnce::call_once (826 samples, 1.11%)</title><rect x="19.5727%" y="1333" width="1.1077%" height="15" fill="rgb(246,54,23)" fg:x="14595" fg:w="826"/><text x="19.8227%" y="1343.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (826 samples, 1.11%)</title><rect x="19.5727%" y="1317" width="1.1077%" height="15" fill="rgb(243,76,11)" fg:x="14595" fg:w="826"/><text x="19.8227%" y="1327.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (321 samples, 0.43%)</title><rect x="20.2500%" y="1301" width="0.4305%" height="15" fill="rgb(245,21,50)" fg:x="15100" fg:w="321"/><text x="20.5000%" y="1311.50"></text></g><g><title>&lt;either::Either&lt;L,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (889 samples, 1.19%)</title><rect x="19.4976%" y="1397" width="1.1922%" height="15" fill="rgb(228,9,43)" fg:x="14539" fg:w="889"/><text x="19.7476%" y="1407.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (865 samples, 1.16%)</title><rect x="19.5298%" y="1381" width="1.1600%" height="15" fill="rgb(208,100,47)" fg:x="14563" fg:w="865"/><text x="19.7798%" y="1391.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (865 samples, 1.16%)</title><rect x="19.5298%" y="1365" width="1.1600%" height="15" fill="rgb(232,26,8)" fg:x="14563" fg:w="865"/><text x="19.7798%" y="1375.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (837 samples, 1.12%)</title><rect x="19.5674%" y="1349" width="1.1225%" height="15" fill="rgb(216,166,38)" fg:x="14591" fg:w="837"/><text x="19.8174%" y="1359.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,442 samples, 1.93%)</title><rect x="19.4963%" y="1429" width="1.9338%" height="15" fill="rgb(251,202,51)" fg:x="14538" fg:w="1442"/><text x="19.7463%" y="1439.50">c..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,442 samples, 1.93%)</title><rect x="19.4963%" y="1413" width="1.9338%" height="15" fill="rgb(254,216,34)" fg:x="14538" fg:w="1442"/><text x="19.7463%" y="1423.50">&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::map (552 samples, 0.74%)</title><rect x="20.6898%" y="1397" width="0.7403%" height="15" fill="rgb(251,32,27)" fg:x="15428" fg:w="552"/><text x="20.9398%" y="1407.50"></text></g><g><title>[libc.so.6] (538 samples, 0.72%)</title><rect x="20.7086%" y="1381" width="0.7215%" height="15" fill="rgb(208,127,28)" fg:x="15442" fg:w="538"/><text x="20.9586%" y="1391.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,729 samples, 2.32%)</title><rect x="19.1221%" y="1477" width="2.3187%" height="15" fill="rgb(224,137,22)" fg:x="14259" fg:w="1729"/><text x="19.3721%" y="1487.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (1,729 samples, 2.32%)</title><rect x="19.1221%" y="1461" width="2.3187%" height="15" fill="rgb(254,70,32)" fg:x="14259" fg:w="1729"/><text x="19.3721%" y="1471.50">&lt;..</text></g><g><title>core::iter::adapters::fuse::and_then_or_clear (1,729 samples, 2.32%)</title><rect x="19.1221%" y="1445" width="2.3187%" height="15" fill="rgb(229,75,37)" fg:x="14259" fg:w="1729"/><text x="19.3721%" y="1455.50">c..</text></g><g><title>core::option::Option&lt;T&gt;::as_mut (8 samples, 0.01%)</title><rect x="21.4301%" y="1429" width="0.0107%" height="15" fill="rgb(252,64,23)" fg:x="15980" fg:w="8"/><text x="21.6801%" y="1439.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.02%)</title><rect x="21.5320%" y="1381" width="0.0174%" height="15" fill="rgb(232,162,48)" fg:x="16056" fg:w="13"/><text x="21.7820%" y="1391.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (12 samples, 0.02%)</title><rect x="21.5334%" y="1365" width="0.0161%" height="15" fill="rgb(246,160,12)" fg:x="16057" fg:w="12"/><text x="21.7834%" y="1375.50"></text></g><g><title>&lt;either::Either&lt;L,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (109 samples, 0.15%)</title><rect x="21.4569%" y="1429" width="0.1462%" height="15" fill="rgb(247,166,0)" fg:x="16000" fg:w="109"/><text x="21.7069%" y="1439.50"></text></g><g><title>&lt;either::Either&lt;L,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (81 samples, 0.11%)</title><rect x="21.4945%" y="1413" width="0.1086%" height="15" fill="rgb(249,219,21)" fg:x="16028" fg:w="81"/><text x="21.7445%" y="1423.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (53 samples, 0.07%)</title><rect x="21.5320%" y="1397" width="0.0711%" height="15" fill="rgb(205,209,3)" fg:x="16056" fg:w="53"/><text x="21.7820%" y="1407.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (40 samples, 0.05%)</title><rect x="21.5495%" y="1381" width="0.0536%" height="15" fill="rgb(243,44,1)" fg:x="16069" fg:w="40"/><text x="21.7995%" y="1391.50"></text></g><g><title>core::ops::function::FnOnce::call_once (158 samples, 0.21%)</title><rect x="21.4569%" y="1461" width="0.2119%" height="15" fill="rgb(206,159,16)" fg:x="16000" fg:w="158"/><text x="21.7069%" y="1471.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (158 samples, 0.21%)</title><rect x="21.4569%" y="1445" width="0.2119%" height="15" fill="rgb(244,77,30)" fg:x="16000" fg:w="158"/><text x="21.7069%" y="1455.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (49 samples, 0.07%)</title><rect x="21.6031%" y="1429" width="0.0657%" height="15" fill="rgb(218,69,12)" fg:x="16109" fg:w="49"/><text x="21.8531%" y="1439.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (186 samples, 0.25%)</title><rect x="21.4408%" y="1477" width="0.2494%" height="15" fill="rgb(212,87,7)" fg:x="15988" fg:w="186"/><text x="21.6908%" y="1487.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (16 samples, 0.02%)</title><rect x="21.6688%" y="1461" width="0.0215%" height="15" fill="rgb(245,114,25)" fg:x="16158" fg:w="16"/><text x="21.9188%" y="1471.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::add (17 samples, 0.02%)</title><rect x="21.8217%" y="1317" width="0.0228%" height="15" fill="rgb(210,61,42)" fg:x="16272" fg:w="17"/><text x="22.0717%" y="1327.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::offset (17 samples, 0.02%)</title><rect x="21.8217%" y="1301" width="0.0228%" height="15" fill="rgb(211,52,33)" fg:x="16272" fg:w="17"/><text x="22.0717%" y="1311.50"></text></g><g><title>bitvec::index::BitIdx&lt;R&gt;::offset (17 samples, 0.02%)</title><rect x="21.8217%" y="1285" width="0.0228%" height="15" fill="rgb(234,58,33)" fg:x="16272" fg:w="17"/><text x="22.0717%" y="1295.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,099 samples, 2.81%)</title><rect x="19.0551%" y="1541" width="2.8149%" height="15" fill="rgb(220,115,36)" fg:x="14209" fg:w="2099"/><text x="19.3051%" y="1551.50">&lt;c..</text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (2,091 samples, 2.80%)</title><rect x="19.0658%" y="1525" width="2.8042%" height="15" fill="rgb(243,153,54)" fg:x="14217" fg:w="2091"/><text x="19.3158%" y="1535.50">&lt;&amp;..</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,070 samples, 2.78%)</title><rect x="19.0940%" y="1509" width="2.7760%" height="15" fill="rgb(251,47,18)" fg:x="14238" fg:w="2070"/><text x="19.3440%" y="1519.50">&lt;c..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,070 samples, 2.78%)</title><rect x="19.0940%" y="1493" width="2.7760%" height="15" fill="rgb(242,102,42)" fg:x="14238" fg:w="2070"/><text x="19.3440%" y="1503.50">&lt;c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (134 samples, 0.18%)</title><rect x="21.6903%" y="1477" width="0.1797%" height="15" fill="rgb(234,31,38)" fg:x="16174" fg:w="134"/><text x="21.9403%" y="1487.50"></text></g><g><title>gmw::executor::Executor&lt;P,Idx&gt;::inputs::{{closure}} (134 samples, 0.18%)</title><rect x="21.6903%" y="1461" width="0.1797%" height="15" fill="rgb(221,117,51)" fg:x="16174" fg:w="134"/><text x="21.9403%" y="1471.50"></text></g><g><title>gmw::executor::GateOutputs&lt;Shares&gt;::get (134 samples, 0.18%)</title><rect x="21.6903%" y="1445" width="0.1797%" height="15" fill="rgb(212,20,18)" fg:x="16174" fg:w="134"/><text x="21.9403%" y="1455.50"></text></g><g><title>gmw::executor::GateOutputs&lt;Shares&gt;::get_unchecked (112 samples, 0.15%)</title><rect x="21.7198%" y="1429" width="0.1502%" height="15" fill="rgb(245,133,36)" fg:x="16196" fg:w="112"/><text x="21.9698%" y="1439.50"></text></g><g><title>&lt;bitvec::vec::BitVec&lt;T&gt; as gmw::protocols::ShareStorage&lt;bool&gt;&gt;::get (76 samples, 0.10%)</title><rect x="21.7681%" y="1413" width="0.1019%" height="15" fill="rgb(212,6,19)" fg:x="16232" fg:w="76"/><text x="22.0181%" y="1423.50"></text></g><g><title>bitvec::vec::ops::&lt;impl core::ops::index::Index&lt;Idx&gt; for bitvec::vec::BitVec&lt;T,O&gt;&gt;::index (49 samples, 0.07%)</title><rect x="21.8043%" y="1397" width="0.0657%" height="15" fill="rgb(218,1,36)" fg:x="16259" fg:w="49"/><text x="22.0543%" y="1407.50"></text></g><g><title>bitvec::slice::ops::&lt;impl core::ops::index::Index&lt;usize&gt; for bitvec::slice::BitSlice&lt;T,O&gt;&gt;::index (49 samples, 0.07%)</title><rect x="21.8043%" y="1381" width="0.0657%" height="15" fill="rgb(246,84,54)" fg:x="16259" fg:w="49"/><text x="22.0543%" y="1391.50"></text></g><g><title>&lt;usize as bitvec::slice::api::BitSliceIndex&lt;T,O&gt;&gt;::index (49 samples, 0.07%)</title><rect x="21.8043%" y="1365" width="0.0657%" height="15" fill="rgb(242,110,6)" fg:x="16259" fg:w="49"/><text x="22.0543%" y="1375.50"></text></g><g><title>&lt;usize as bitvec::slice::api::BitSliceIndex&lt;T,O&gt;&gt;::get (49 samples, 0.07%)</title><rect x="21.8043%" y="1349" width="0.0657%" height="15" fill="rgb(214,47,5)" fg:x="16259" fg:w="49"/><text x="22.0543%" y="1359.50"></text></g><g><title>&lt;usize as bitvec::slice::api::BitSliceIndex&lt;T,O&gt;&gt;::get_unchecked (36 samples, 0.05%)</title><rect x="21.8217%" y="1333" width="0.0483%" height="15" fill="rgb(218,159,25)" fg:x="16272" fg:w="36"/><text x="22.0717%" y="1343.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::as_bitptr (15 samples, 0.02%)</title><rect x="21.8499%" y="1317" width="0.0201%" height="15" fill="rgb(215,211,28)" fg:x="16293" fg:w="15"/><text x="22.0999%" y="1327.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::to_bitptr (15 samples, 0.02%)</title><rect x="21.8499%" y="1301" width="0.0201%" height="15" fill="rgb(238,59,32)" fg:x="16293" fg:w="15"/><text x="22.0999%" y="1311.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::head (15 samples, 0.02%)</title><rect x="21.8499%" y="1285" width="0.0201%" height="15" fill="rgb(226,82,3)" fg:x="16293" fg:w="15"/><text x="22.0999%" y="1295.50"></text></g><g><title>&lt;gmw::protocols::boolean_gmw::BooleanGate as gmw::protocols::Gate&gt;::input_size (26 samples, 0.03%)</title><rect x="21.8700%" y="1541" width="0.0349%" height="15" fill="rgb(240,164,32)" fg:x="16308" fg:w="26"/><text x="22.1200%" y="1551.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (32 samples, 0.04%)</title><rect x="21.9048%" y="1541" width="0.0429%" height="15" fill="rgb(232,46,7)" fg:x="16334" fg:w="32"/><text x="22.1548%" y="1551.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2,952 samples, 3.96%)</title><rect x="18.0292%" y="1573" width="3.9588%" height="15" fill="rgb(229,129,53)" fg:x="13444" fg:w="2952"/><text x="18.2792%" y="1583.50">core..</text></g><g><title>&lt;gmw::protocols::boolean_gmw::BooleanGmw as gmw::protocols::Protocol&gt;::compute_msg::{{closure}} (2,206 samples, 2.96%)</title><rect x="19.0296%" y="1557" width="2.9584%" height="15" fill="rgb(234,188,29)" fg:x="14190" fg:w="2206"/><text x="19.2796%" y="1567.50">&lt;gm..</text></g><g><title>gmw::evaluate::and::compute_shares (30 samples, 0.04%)</title><rect x="21.9478%" y="1541" width="0.0402%" height="15" fill="rgb(246,141,4)" fg:x="16366" fg:w="30"/><text x="22.1978%" y="1551.50"></text></g><g><title>gmw::mul_triple::boolean::MulTriple::b (10 samples, 0.01%)</title><rect x="21.9746%" y="1525" width="0.0134%" height="15" fill="rgb(229,23,39)" fg:x="16386" fg:w="10"/><text x="22.2246%" y="1535.50"></text></g><g><title>core::iter::traits::iterator::Iterator::unzip (3,353 samples, 4.50%)</title><rect x="17.4941%" y="1637" width="4.4966%" height="15" fill="rgb(206,12,3)" fg:x="13045" fg:w="3353"/><text x="17.7441%" y="1647.50">core:..</text></g><g><title>&lt;(ExtendA,ExtendB) as core::iter::traits::collect::Extend&lt;(A,B)&gt;&gt;::extend (3,351 samples, 4.49%)</title><rect x="17.4968%" y="1621" width="4.4939%" height="15" fill="rgb(252,226,20)" fg:x="13047" fg:w="3351"/><text x="17.7468%" y="1631.50">&lt;(Ext..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,351 samples, 4.49%)</title><rect x="17.4968%" y="1605" width="4.4939%" height="15" fill="rgb(216,123,35)" fg:x="13047" fg:w="3351"/><text x="17.7468%" y="1615.50">&lt;core..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (3,351 samples, 4.49%)</title><rect x="17.4968%" y="1589" width="4.4939%" height="15" fill="rgb(212,68,40)" fg:x="13047" fg:w="3351"/><text x="17.7468%" y="1599.50">core:..</text></g><g><title>cfree (13 samples, 0.02%)</title><rect x="21.9960%" y="1557" width="0.0174%" height="15" fill="rgb(254,125,32)" fg:x="16402" fg:w="13"/><text x="22.2460%" y="1567.50"></text></g><g><title>[libc.so.6] (12 samples, 0.02%)</title><rect x="21.9974%" y="1541" width="0.0161%" height="15" fill="rgb(253,97,22)" fg:x="16403" fg:w="12"/><text x="22.2474%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlatMap&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::FlatMap&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::zip::Zip&lt;alloc::vec::into_iter::IntoIter&lt;gmw::protocols::boolean_gmw::BooleanGate&gt;,alloc::vec::into_iter::IntoIter&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt;&gt;&gt;,gmw::circuit::dyn_layers::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_iter::{{closure}}::{{closure}}&gt;,gmw::circuit::dyn_layers::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_iter::{{closure}}&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_parents_iter::{{closure}}&gt;,core::iter::adapters::flatten::FlatMap&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;core::ops::range::Range&lt;usize&gt;&gt;,bitvec::slice::iter::BitValIter&lt;u8,bitvec::order::Lsb0&gt;&gt;&gt;,gmw::circuit::static_layers::ExecutableScLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_parents_iter::{{closure}}&gt;,either::Either&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::map::Map&lt;petgraph::graph_impl::Neighbors&lt;(),usize&gt;,&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt; as core::convert::From&lt;petgraph::graph_impl::NodeIndex&lt;usize&gt;&gt;&gt;::from&gt;,gmw::circuit::dyn_layers::Circuit&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::parent_gates::{{closure}}&gt;,core::iter::adapters::chain::Chain&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,core::iter::adapters::flatten::FlatMap&lt;core::iter::adapters::flatten::FlatMap&lt;core::option::IntoIter&lt;&amp;alloc::collections::btree::map::BTreeMap&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::take_while::TakeWhile&lt;core::iter::adapters::rev::Rev&lt;alloc::collections::btree::map::Range&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}&gt;&gt;&gt;,either::Either&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,core::iter::adapters::flatten::FlatMap&lt;core::iter::adapters::flatten::FlatMap&lt;core::option::IntoIter&lt;&amp;alloc::collections::btree::map::BTreeMap&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::take_while::TakeWhile&lt;core::iter::adapters::rev::Rev&lt;alloc::collections::btree::map::Range&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}&gt;&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt;&gt;,gmw::circuit::static_layers::ExecutableScLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_parents_iter::{{closure}}::{{closure}}&gt;&gt;&gt;::Right&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_parents_iter::{{closure}}&gt;&gt;,core::iter::adapters::map::Map&lt;either::Either&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::map::Map&lt;petgraph::graph_impl::Neighbors&lt;(),usize&gt;,&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt; as core::convert::From&lt;petgraph::graph_impl::NodeIndex&lt;usize&gt;&gt;&gt;::from&gt;,gmw::circuit::dyn_layers::Circuit&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::parent_gates::{{closure}}&gt;,core::iter::adapters::chain::Chain&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,core::iter::adapters::flatten::FlatMap&lt;core::iter::adapters::flatten::FlatMap&lt;core::option::IntoIter&lt;&amp;alloc::collections::btree::map::BTreeMap&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::take_while::TakeWhile&lt;core::iter::adapters::rev::Rev&lt;alloc::collections::btree::map::Range&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}&gt;&gt;&gt;,either::Either&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,core::iter::adapters::flatten::FlatMap&lt;core::iter::adapters::flatten::FlatMap&lt;core::option::IntoIter&lt;&amp;alloc::collections::btree::map::BTreeMap&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::take_while::TakeWhile&lt;core::iter::adapters::rev::Rev&lt;alloc::collections::btree::map::Range&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}&gt;&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt;&gt;,gmw::circuit::static_layers::ExecutableScLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_parents_iter::{{closure}}::{{closure}}&gt;&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::inputs&lt;either::Either&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::map::Map&lt;petgraph::graph_impl::Neighbors&lt;(),usize&gt;,&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt; as core::convert::From&lt;petgraph::graph_impl::NodeIndex&lt;usize&gt;&gt;&gt;::from&gt;,gmw::circuit::dyn_layers::Circuit&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::parent_gates::{{closure}}&gt;,core::iter::adapters::chain::Chain&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,core::iter::adapters::flatten::FlatMap&lt;core::iter::adapters::flatten::FlatMap&lt;core::option::IntoIter&lt;&amp;alloc::collections::btree::map::BTreeMap&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::take_while::TakeWhile&lt;core::iter::adapters::rev::Rev&lt;alloc::collections::btree::map::Range&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}&gt;&gt;&gt;,either::Either&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,core::iter::adapters::flatten::FlatMap&lt;core::iter::adapters::flatten::FlatMap&lt;core::option::IntoIter&lt;&amp;alloc::collections::btree::map::BTreeMap&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::take_while::TakeWhile&lt;core::iter::adapters::rev::Rev&lt;alloc::collections::btree::map::Range&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}&gt;&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt;&gt;,gmw::circuit::static_layers::ExecutableScLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_parents_iter::{{closure}}::{{closure}}&gt;&gt;&gt;&gt;::{{closure}}&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt; (17 samples, 0.02%)</title><rect x="21.9920%" y="1637" width="0.0228%" height="15" fill="rgb(241,101,14)" fg:x="16399" fg:w="17"/><text x="22.2420%" y="1647.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlattenCompat&lt;core::iter::adapters::map::Map&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::FlatMap&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::zip::Zip&lt;alloc::vec::into_iter::IntoIter&lt;gmw::protocols::boolean_gmw::BooleanGate&gt;,alloc::vec::into_iter::IntoIter&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt;&gt;&gt;,gmw::circuit::dyn_layers::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_iter::{{closure}}::{{closure}}&gt;,gmw::circuit::dyn_layers::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_iter::{{closure}}&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_parents_iter::{{closure}}&gt;,core::iter::adapters::flatten::FlatMap&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;core::ops::range::Range&lt;usize&gt;&gt;,bitvec::slice::iter::BitValIter&lt;u8,bitvec::order::Lsb0&gt;&gt;&gt;,gmw::circuit::static_layers::ExecutableScLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_parents_iter::{{closure}}&gt;,either::Either&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::map::Map&lt;petgraph::graph_impl::Neighbors&lt;(),usize&gt;,&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt; as core::convert::From&lt;petgraph::graph_impl::NodeIndex&lt;usize&gt;&gt;&gt;::from&gt;,gmw::circuit::dyn_layers::Circuit&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::parent_gates::{{closure}}&gt;,core::iter::adapters::chain::Chain&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,core::iter::adapters::flatten::FlatMap&lt;core::iter::adapters::flatten::FlatMap&lt;core::option::IntoIter&lt;&amp;alloc::collections::btree::map::BTreeMap&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::take_while::TakeWhile&lt;core::iter::adapters::rev::Rev&lt;alloc::collections::btree::map::Range&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}&gt;&gt;&gt;,either::Either&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,core::iter::adapters::flatten::FlatMap&lt;core::iter::adapters::flatten::FlatMap&lt;core::option::IntoIter&lt;&amp;alloc::collections::btree::map::BTreeMap&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::take_while::TakeWhile&lt;core::iter::adapters::rev::Rev&lt;alloc::collections::btree::map::Range&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}&gt;&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt;&gt;,gmw::circuit::static_layers::ExecutableScLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_parents_iter::{{closure}}::{{closure}}&gt;&gt;&gt;::Right&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_parents_iter::{{closure}}&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;,core::iter::adapters::map::Map&lt;either::Either&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::map::Map&lt;petgraph::graph_impl::Neighbors&lt;(),usize&gt;,&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt; as core::convert::From&lt;petgraph::graph_impl::NodeIndex&lt;usize&gt;&gt;&gt;::from&gt;,gmw::circuit::dyn_layers::Circuit&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::parent_gates::{{closure}}&gt;,core::iter::adapters::chain::Chain&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,core::iter::adapters::flatten::FlatMap&lt;core::iter::adapters::flatten::FlatMap&lt;core::option::IntoIter&lt;&amp;alloc::collections::btree::map::BTreeMap&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::take_while::TakeWhile&lt;core::iter::adapters::rev::Rev&lt;alloc::collections::btree::map::Range&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}&gt;&gt;&gt;,either::Either&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,core::iter::adapters::flatten::FlatMap&lt;core::iter::adapters::flatten::FlatMap&lt;core::option::IntoIter&lt;&amp;alloc::collections::btree::map::BTreeMap&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::take_while::TakeWhile&lt;core::iter::adapters::rev::Rev&lt;alloc::collections::btree::map::Range&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}&gt;&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt;&gt;,gmw::circuit::static_layers::ExecutableScLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_parents_iter::{{closure}}::{{closure}}&gt;&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::inputs&lt;either::Either&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::map::Map&lt;petgraph::graph_impl::Neighbors&lt;(),usize&gt;,&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt; as core::convert::From&lt;petgraph::graph_impl::NodeIndex&lt;usize&gt;&gt;&gt;::from&gt;,gmw::circuit::dyn_layers::Circuit&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::parent_gates::{{closure}}&gt;,core::iter::adapters::chain::Chain&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,core::iter::adapters::flatten::FlatMap&lt;core::iter::adapters::flatten::FlatMap&lt;core::option::IntoIter&lt;&amp;alloc::collections::btree::map::BTreeMap&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::take_while::TakeWhile&lt;core::iter::adapters::rev::Rev&lt;alloc::collections::btree::map::Range&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}&gt;&gt;&gt;,either::Either&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,core::iter::adapters::flatten::FlatMap&lt;core::iter::adapters::flatten::FlatMap&lt;core::option::IntoIter&lt;&amp;alloc::collections::btree::map::BTreeMap&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::take_while::TakeWhile&lt;core::iter::adapters::rev::Rev&lt;alloc::collections::btree::map::Range&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}&gt;&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt;&gt;,gmw::circuit::static_layers::ExecutableScLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_parents_iter::{{closure}}::{{closure}}&gt;&gt;&gt;&gt;::{{closure}}&gt;&gt;&gt; (17 samples, 0.02%)</title><rect x="21.9920%" y="1621" width="0.0228%" height="15" fill="rgb(238,103,29)" fg:x="16399" fg:w="17"/><text x="22.2420%" y="1631.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::fuse::Fuse&lt;core::iter::adapters::map::Map&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::FlatMap&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::zip::Zip&lt;alloc::vec::into_iter::IntoIter&lt;gmw::protocols::boolean_gmw::BooleanGate&gt;,alloc::vec::into_iter::IntoIter&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt;&gt;&gt;,gmw::circuit::dyn_layers::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_iter::{{closure}}::{{closure}}&gt;,gmw::circuit::dyn_layers::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_iter::{{closure}}&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_parents_iter::{{closure}}&gt;,core::iter::adapters::flatten::FlatMap&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;core::ops::range::Range&lt;usize&gt;&gt;,bitvec::slice::iter::BitValIter&lt;u8,bitvec::order::Lsb0&gt;&gt;&gt;,gmw::circuit::static_layers::ExecutableScLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_parents_iter::{{closure}}&gt;,either::Either&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::map::Map&lt;petgraph::graph_impl::Neighbors&lt;(),usize&gt;,&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt; as core::convert::From&lt;petgraph::graph_impl::NodeIndex&lt;usize&gt;&gt;&gt;::from&gt;,gmw::circuit::dyn_layers::Circuit&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::parent_gates::{{closure}}&gt;,core::iter::adapters::chain::Chain&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,core::iter::adapters::flatten::FlatMap&lt;core::iter::adapters::flatten::FlatMap&lt;core::option::IntoIter&lt;&amp;alloc::collections::btree::map::BTreeMap&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::take_while::TakeWhile&lt;core::iter::adapters::rev::Rev&lt;alloc::collections::btree::map::Range&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}&gt;&gt;&gt;,either::Either&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,core::iter::adapters::flatten::FlatMap&lt;core::iter::adapters::flatten::FlatMap&lt;core::option::IntoIter&lt;&amp;alloc::collections::btree::map::BTreeMap&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::take_while::TakeWhile&lt;core::iter::adapters::rev::Rev&lt;alloc::collections::btree::map::Range&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}&gt;&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt;&gt;,gmw::circuit::static_layers::ExecutableScLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_parents_iter::{{closure}}::{{closure}}&gt;&gt;&gt;::Right&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_parents_iter::{{closure}}&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt;&gt; (17 samples, 0.02%)</title><rect x="21.9920%" y="1605" width="0.0228%" height="15" fill="rgb(233,195,47)" fg:x="16399" fg:w="17"/><text x="22.2420%" y="1615.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::adapters::map::Map&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::FlatMap&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::zip::Zip&lt;alloc::vec::into_iter::IntoIter&lt;gmw::protocols::boolean_gmw::BooleanGate&gt;,alloc::vec::into_iter::IntoIter&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt;&gt;&gt;,gmw::circuit::dyn_layers::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_iter::{{closure}}::{{closure}}&gt;,gmw::circuit::dyn_layers::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_iter::{{closure}}&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_parents_iter::{{closure}}&gt;,core::iter::adapters::flatten::FlatMap&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;core::ops::range::Range&lt;usize&gt;&gt;,bitvec::slice::iter::BitValIter&lt;u8,bitvec::order::Lsb0&gt;&gt;&gt;,gmw::circuit::static_layers::ExecutableScLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_parents_iter::{{closure}}&gt;,either::Either&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::map::Map&lt;petgraph::graph_impl::Neighbors&lt;(),usize&gt;,&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt; as core::convert::From&lt;petgraph::graph_impl::NodeIndex&lt;usize&gt;&gt;&gt;::from&gt;,gmw::circuit::dyn_layers::Circuit&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::parent_gates::{{closure}}&gt;,core::iter::adapters::chain::Chain&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,core::iter::adapters::flatten::FlatMap&lt;core::iter::adapters::flatten::FlatMap&lt;core::option::IntoIter&lt;&amp;alloc::collections::btree::map::BTreeMap&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::take_while::TakeWhile&lt;core::iter::adapters::rev::Rev&lt;alloc::collections::btree::map::Range&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}&gt;&gt;&gt;,either::Either&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,core::iter::adapters::flatten::FlatMap&lt;core::iter::adapters::flatten::FlatMap&lt;core::option::IntoIter&lt;&amp;alloc::collections::btree::map::BTreeMap&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::take_while::TakeWhile&lt;core::iter::adapters::rev::Rev&lt;alloc::collections::btree::map::Range&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}&gt;&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt;&gt;,gmw::circuit::static_layers::ExecutableScLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_parents_iter::{{closure}}::{{closure}}&gt;&gt;&gt;::Right&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_parents_iter::{{closure}}&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt;&gt; (17 samples, 0.02%)</title><rect x="21.9920%" y="1589" width="0.0228%" height="15" fill="rgb(246,218,30)" fg:x="16399" fg:w="17"/><text x="22.2420%" y="1599.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::flatten::FlatMap&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::zip::Zip&lt;alloc::vec::into_iter::IntoIter&lt;gmw::protocols::boolean_gmw::BooleanGate&gt;,alloc::vec::into_iter::IntoIter&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt;&gt;&gt;,gmw::circuit::dyn_layers::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_iter::{{closure}}::{{closure}}&gt;,gmw::circuit::dyn_layers::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_iter::{{closure}}&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_parents_iter::{{closure}}&gt;,core::iter::adapters::flatten::FlatMap&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::enumerate::Enumerate&lt;core::iter::adapters::zip::Zip&lt;core::slice::iter::Iter&lt;core::ops::range::Range&lt;usize&gt;&gt;,bitvec::slice::iter::BitValIter&lt;u8,bitvec::order::Lsb0&gt;&gt;&gt;,gmw::circuit::static_layers::ExecutableScLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_parents_iter::{{closure}}&gt;,either::Either&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::map::Map&lt;petgraph::graph_impl::Neighbors&lt;(),usize&gt;,&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt; as core::convert::From&lt;petgraph::graph_impl::NodeIndex&lt;usize&gt;&gt;&gt;::from&gt;,gmw::circuit::dyn_layers::Circuit&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::parent_gates::{{closure}}&gt;,core::iter::adapters::chain::Chain&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,core::iter::adapters::flatten::FlatMap&lt;core::iter::adapters::flatten::FlatMap&lt;core::option::IntoIter&lt;&amp;alloc::collections::btree::map::BTreeMap&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::take_while::TakeWhile&lt;core::iter::adapters::rev::Rev&lt;alloc::collections::btree::map::Range&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}&gt;&gt;&gt;,either::Either&lt;core::iter::adapters::chain::Chain&lt;core::iter::adapters::copied::Copied&lt;core::slice::iter::Iter&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,core::iter::adapters::flatten::FlatMap&lt;core::iter::adapters::flatten::FlatMap&lt;core::option::IntoIter&lt;&amp;alloc::collections::btree::map::BTreeMap&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::take_while::TakeWhile&lt;core::iter::adapters::rev::Rev&lt;alloc::collections::btree::map::Range&lt;gmw::utils::RangeInclusiveStartWrapper&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;,smallvec::SmallVec&lt;[core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;: 1]&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeSubCircuitConnections&lt;usize&gt;::get_mapped_ranges::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;core::ops::range::RangeInclusive&lt;gmw::circuit::builder::SubCircuitGate&lt;usize&gt;&gt;&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}::{{closure}}&gt;,gmw::circuit::circuit_connections::RangeConnections&lt;usize&gt;::parent_gates::{{closure}}&gt;&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt;&gt;,gmw::circuit::static_layers::ExecutableScLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_parents_iter::{{closure}}::{{closure}}&gt;&gt;&gt;::Right&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_parents_iter::{{closure}}&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt; (16 samples, 0.02%)</title><rect x="21.9933%" y="1573" width="0.0215%" height="15" fill="rgb(219,145,47)" fg:x="16400" fg:w="16"/><text x="22.2433%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlatMap&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt; (10 samples, 0.01%)</title><rect x="22.0148%" y="1637" width="0.0134%" height="15" fill="rgb(243,12,26)" fg:x="16416" fg:w="10"/><text x="22.2648%" y="1647.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlattenCompat&lt;core::iter::adapters::map::Map&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt;&gt; (10 samples, 0.01%)</title><rect x="22.0148%" y="1621" width="0.0134%" height="15" fill="rgb(214,87,16)" fg:x="16416" fg:w="10"/><text x="22.2648%" y="1631.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::fuse::Fuse&lt;core::iter::adapters::map::Map&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt;&gt; (10 samples, 0.01%)</title><rect x="22.0148%" y="1605" width="0.0134%" height="15" fill="rgb(208,99,42)" fg:x="16416" fg:w="10"/><text x="22.2648%" y="1615.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::adapters::map::Map&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt;&gt; (10 samples, 0.01%)</title><rect x="22.0148%" y="1589" width="0.0134%" height="15" fill="rgb(253,99,2)" fg:x="16416" fg:w="10"/><text x="22.2648%" y="1599.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt; (10 samples, 0.01%)</title><rect x="22.0148%" y="1573" width="0.0134%" height="15" fill="rgb(220,168,23)" fg:x="16416" fg:w="10"/><text x="22.2648%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt;&gt; (10 samples, 0.01%)</title><rect x="22.0148%" y="1557" width="0.0134%" height="15" fill="rgb(242,38,24)" fg:x="16416" fg:w="10"/><text x="22.2648%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt; (10 samples, 0.01%)</title><rect x="22.0148%" y="1541" width="0.0134%" height="15" fill="rgb(225,182,9)" fg:x="16416" fg:w="10"/><text x="22.2648%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;&gt; (10 samples, 0.01%)</title><rect x="22.0148%" y="1525" width="0.0134%" height="15" fill="rgb(243,178,37)" fg:x="16416" fg:w="10"/><text x="22.2648%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (10 samples, 0.01%)</title><rect x="22.0148%" y="1509" width="0.0134%" height="15" fill="rgb(232,139,19)" fg:x="16416" fg:w="10"/><text x="22.2648%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (10 samples, 0.01%)</title><rect x="22.0148%" y="1493" width="0.0134%" height="15" fill="rgb(225,201,24)" fg:x="16416" fg:w="10"/><text x="22.2648%" y="1503.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.01%)</title><rect x="22.0148%" y="1477" width="0.0134%" height="15" fill="rgb(221,47,46)" fg:x="16416" fg:w="10"/><text x="22.2648%" y="1487.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (10 samples, 0.01%)</title><rect x="22.0148%" y="1461" width="0.0134%" height="15" fill="rgb(249,23,13)" fg:x="16416" fg:w="10"/><text x="22.2648%" y="1471.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.01%)</title><rect x="22.0148%" y="1445" width="0.0134%" height="15" fill="rgb(219,9,5)" fg:x="16416" fg:w="10"/><text x="22.2648%" y="1455.50"></text></g><g><title>cfree (10 samples, 0.01%)</title><rect x="22.0148%" y="1429" width="0.0134%" height="15" fill="rgb(254,171,16)" fg:x="16416" fg:w="10"/><text x="22.2648%" y="1439.50"></text></g><g><title>[libc.so.6] (10 samples, 0.01%)</title><rect x="22.0148%" y="1413" width="0.0134%" height="15" fill="rgb(230,171,20)" fg:x="16416" fg:w="10"/><text x="22.2648%" y="1423.50"></text></g><g><title>&lt;gmw::protocols::boolean_gmw::BooleanGmw as gmw::protocols::Protocol&gt;::compute_msg (3,402 samples, 4.56%)</title><rect x="17.4767%" y="1653" width="4.5623%" height="15" fill="rgb(210,71,41)" fg:x="13032" fg:w="3402"/><text x="17.7267%" y="1663.50">&lt;gmw:..</text></g><g><title>&lt;bitvec::domain::Domain&lt;wyz::comu::Const,T,O&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.03%)</title><rect x="22.0886%" y="1541" width="0.0349%" height="15" fill="rgb(206,173,20)" fg:x="16471" fg:w="26"/><text x="22.3386%" y="1551.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (34 samples, 0.05%)</title><rect x="22.0792%" y="1589" width="0.0456%" height="15" fill="rgb(233,88,34)" fg:x="16464" fg:w="34"/><text x="22.3292%" y="1599.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (28 samples, 0.04%)</title><rect x="22.0872%" y="1573" width="0.0375%" height="15" fill="rgb(223,209,46)" fg:x="16470" fg:w="28"/><text x="22.3372%" y="1583.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (28 samples, 0.04%)</title><rect x="22.0872%" y="1557" width="0.0375%" height="15" fill="rgb(250,43,18)" fg:x="16470" fg:w="28"/><text x="22.3372%" y="1567.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::domain (12 samples, 0.02%)</title><rect x="22.1301%" y="1589" width="0.0161%" height="15" fill="rgb(208,13,10)" fg:x="16502" fg:w="12"/><text x="22.3801%" y="1599.50"></text></g><g><title>bitvec::domain::Domain&lt;M,T,O&gt;::new (12 samples, 0.02%)</title><rect x="22.1301%" y="1573" width="0.0161%" height="15" fill="rgb(212,200,36)" fg:x="16502" fg:w="12"/><text x="22.3801%" y="1583.50"></text></g><g><title>bitvec::vec::api::&lt;impl bitvec::vec::BitVec&lt;T,O&gt;&gt;::split_off (98 samples, 0.13%)</title><rect x="22.0738%" y="1621" width="0.1314%" height="15" fill="rgb(225,90,30)" fg:x="16460" fg:w="98"/><text x="22.3238%" y="1631.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::from_bitslice (96 samples, 0.13%)</title><rect x="22.0765%" y="1605" width="0.1287%" height="15" fill="rgb(236,182,39)" fg:x="16462" fg:w="96"/><text x="22.3265%" y="1615.50"></text></g><g><title>tap::pipe::Pipe::pipe (44 samples, 0.06%)</title><rect x="22.1462%" y="1589" width="0.0590%" height="15" fill="rgb(212,144,35)" fg:x="16514" fg:w="44"/><text x="22.3962%" y="1599.50"></text></g><g><title>core::ops::function::FnOnce::call_once (44 samples, 0.06%)</title><rect x="22.1462%" y="1573" width="0.0590%" height="15" fill="rgb(228,63,44)" fg:x="16514" fg:w="44"/><text x="22.3962%" y="1583.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (44 samples, 0.06%)</title><rect x="22.1462%" y="1557" width="0.0590%" height="15" fill="rgb(228,109,6)" fg:x="16514" fg:w="44"/><text x="22.3962%" y="1567.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (44 samples, 0.06%)</title><rect x="22.1462%" y="1541" width="0.0590%" height="15" fill="rgb(238,117,24)" fg:x="16514" fg:w="44"/><text x="22.3962%" y="1551.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (44 samples, 0.06%)</title><rect x="22.1462%" y="1525" width="0.0590%" height="15" fill="rgb(242,26,26)" fg:x="16514" fg:w="44"/><text x="22.3962%" y="1535.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (44 samples, 0.06%)</title><rect x="22.1462%" y="1509" width="0.0590%" height="15" fill="rgb(221,92,48)" fg:x="16514" fg:w="44"/><text x="22.3962%" y="1519.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (42 samples, 0.06%)</title><rect x="22.1489%" y="1493" width="0.0563%" height="15" fill="rgb(209,209,32)" fg:x="16516" fg:w="42"/><text x="22.3989%" y="1503.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (42 samples, 0.06%)</title><rect x="22.1489%" y="1477" width="0.0563%" height="15" fill="rgb(221,70,22)" fg:x="16516" fg:w="42"/><text x="22.3989%" y="1487.50"></text></g><g><title>alloc::alloc::alloc (42 samples, 0.06%)</title><rect x="22.1489%" y="1461" width="0.0563%" height="15" fill="rgb(248,145,5)" fg:x="16516" fg:w="42"/><text x="22.3989%" y="1471.50"></text></g><g><title>malloc (40 samples, 0.05%)</title><rect x="22.1516%" y="1445" width="0.0536%" height="15" fill="rgb(226,116,26)" fg:x="16518" fg:w="40"/><text x="22.4016%" y="1455.50"></text></g><g><title>&lt;gmw::mul_triple::boolean::MulTriples as gmw::protocols::SetupStorage&gt;::split_off_last (111 samples, 0.15%)</title><rect x="22.0604%" y="1637" width="0.1489%" height="15" fill="rgb(244,5,17)" fg:x="16450" fg:w="111"/><text x="22.3104%" y="1647.50"></text></g><g><title>bitvec::vec::iter::&lt;impl core::iter::traits::collect::IntoIterator for bitvec::vec::BitVec&lt;T,O&gt;&gt;::into_iter (24 samples, 0.03%)</title><rect x="22.2119%" y="1637" width="0.0322%" height="15" fill="rgb(252,159,33)" fg:x="16563" fg:w="24"/><text x="22.4619%" y="1647.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::into_boxed_bitslice (24 samples, 0.03%)</title><rect x="22.2119%" y="1621" width="0.0322%" height="15" fill="rgb(206,71,0)" fg:x="16563" fg:w="24"/><text x="22.4619%" y="1631.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (24 samples, 0.03%)</title><rect x="22.2119%" y="1605" width="0.0322%" height="15" fill="rgb(233,118,54)" fg:x="16563" fg:w="24"/><text x="22.4619%" y="1615.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::shrink_to_fit (24 samples, 0.03%)</title><rect x="22.2119%" y="1589" width="0.0322%" height="15" fill="rgb(234,83,48)" fg:x="16563" fg:w="24"/><text x="22.4619%" y="1599.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::shrink_to_fit (24 samples, 0.03%)</title><rect x="22.2119%" y="1573" width="0.0322%" height="15" fill="rgb(228,3,54)" fg:x="16563" fg:w="24"/><text x="22.4619%" y="1583.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::shrink (24 samples, 0.03%)</title><rect x="22.2119%" y="1557" width="0.0322%" height="15" fill="rgb(226,155,13)" fg:x="16563" fg:w="24"/><text x="22.4619%" y="1567.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::shrink (24 samples, 0.03%)</title><rect x="22.2119%" y="1541" width="0.0322%" height="15" fill="rgb(241,28,37)" fg:x="16563" fg:w="24"/><text x="22.4619%" y="1551.50"></text></g><g><title>alloc::alloc::realloc (24 samples, 0.03%)</title><rect x="22.2119%" y="1525" width="0.0322%" height="15" fill="rgb(233,93,10)" fg:x="16563" fg:w="24"/><text x="22.4619%" y="1535.50"></text></g><g><title>realloc (19 samples, 0.03%)</title><rect x="22.2186%" y="1509" width="0.0255%" height="15" fill="rgb(225,113,19)" fg:x="16568" fg:w="19"/><text x="22.4686%" y="1519.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (18 samples, 0.02%)</title><rect x="22.2709%" y="1461" width="0.0241%" height="15" fill="rgb(241,2,18)" fg:x="16607" fg:w="18"/><text x="22.5209%" y="1471.50"></text></g><g><title>&lt;core::iter::sources::repeat_with::RepeatWith&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (18 samples, 0.02%)</title><rect x="22.2709%" y="1445" width="0.0241%" height="15" fill="rgb(228,207,21)" fg:x="16607" fg:w="18"/><text x="22.5209%" y="1455.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each::check::{{closure}} (18 samples, 0.02%)</title><rect x="22.2709%" y="1429" width="0.0241%" height="15" fill="rgb(213,211,35)" fg:x="16607" fg:w="18"/><text x="22.5209%" y="1439.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (18 samples, 0.02%)</title><rect x="22.2709%" y="1413" width="0.0241%" height="15" fill="rgb(209,83,10)" fg:x="16607" fg:w="18"/><text x="22.5209%" y="1423.50"></text></g><g><title>core::ptr::write (18 samples, 0.02%)</title><rect x="22.2709%" y="1397" width="0.0241%" height="15" fill="rgb(209,164,1)" fg:x="16607" fg:w="18"/><text x="22.5209%" y="1407.50"></text></g><g><title>[libc.so.6] (18 samples, 0.02%)</title><rect x="22.2709%" y="1381" width="0.0241%" height="15" fill="rgb(213,184,43)" fg:x="16607" fg:w="18"/><text x="22.5209%" y="1391.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize_with (20 samples, 0.03%)</title><rect x="22.2709%" y="1493" width="0.0268%" height="15" fill="rgb(231,61,34)" fg:x="16607" fg:w="20"/><text x="22.5209%" y="1503.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (20 samples, 0.03%)</title><rect x="22.2709%" y="1477" width="0.0268%" height="15" fill="rgb(235,75,3)" fg:x="16607" fg:w="20"/><text x="22.5209%" y="1487.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::do_reservation (26 samples, 0.03%)</title><rect x="22.2696%" y="1541" width="0.0349%" height="15" fill="rgb(220,106,47)" fg:x="16606" fg:w="26"/><text x="22.5196%" y="1551.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::with_vec (25 samples, 0.03%)</title><rect x="22.2709%" y="1525" width="0.0335%" height="15" fill="rgb(210,196,33)" fg:x="16607" fg:w="25"/><text x="22.5209%" y="1535.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::do_reservation::{{closure}} (25 samples, 0.03%)</title><rect x="22.2709%" y="1509" width="0.0335%" height="15" fill="rgb(229,154,42)" fg:x="16607" fg:w="25"/><text x="22.5209%" y="1519.50"></text></g><g><title>bitvec::vec::api::&lt;impl bitvec::vec::BitVec&lt;T,O&gt;&gt;::reserve (30 samples, 0.04%)</title><rect x="22.2656%" y="1557" width="0.0402%" height="15" fill="rgb(228,114,26)" fg:x="16603" fg:w="30"/><text x="22.5156%" y="1567.50"></text></g><g><title>bitvec::ptr::range::BitPtrRange&lt;M,T,O&gt;::is_empty (17 samples, 0.02%)</title><rect x="22.4158%" y="1317" width="0.0228%" height="15" fill="rgb(208,144,1)" fg:x="16715" fg:w="17"/><text x="22.6658%" y="1327.50"></text></g><g><title>bitvec::index::BitIdx&lt;R&gt;::offset (10 samples, 0.01%)</title><rect x="22.4721%" y="1269" width="0.0134%" height="15" fill="rgb(239,112,37)" fg:x="16757" fg:w="10"/><text x="22.7221%" y="1279.50"></text></g><g><title>&lt;bitvec::ptr::range::BitPtrRange&lt;M,T,O&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (61 samples, 0.08%)</title><rect x="22.4064%" y="1333" width="0.0818%" height="15" fill="rgb(210,96,50)" fg:x="16708" fg:w="61"/><text x="22.6564%" y="1343.50"></text></g><g><title>bitvec::ptr::range::BitPtrRange&lt;M,T,O&gt;::take_back (37 samples, 0.05%)</title><rect x="22.4386%" y="1317" width="0.0496%" height="15" fill="rgb(222,178,2)" fg:x="16732" fg:w="37"/><text x="22.6886%" y="1327.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::wrapping_sub (12 samples, 0.02%)</title><rect x="22.4721%" y="1301" width="0.0161%" height="15" fill="rgb(226,74,18)" fg:x="16757" fg:w="12"/><text x="22.7221%" y="1311.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::wrapping_offset (12 samples, 0.02%)</title><rect x="22.4721%" y="1285" width="0.0161%" height="15" fill="rgb(225,67,54)" fg:x="16757" fg:w="12"/><text x="22.7221%" y="1295.50"></text></g><g><title>&lt;bitvec::slice::iter::BitValIter&lt;T,O&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (96 samples, 0.13%)</title><rect x="22.4064%" y="1349" width="0.1287%" height="15" fill="rgb(251,92,32)" fg:x="16708" fg:w="96"/><text x="22.6564%" y="1359.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (35 samples, 0.05%)</title><rect x="22.4882%" y="1333" width="0.0469%" height="15" fill="rgb(228,149,22)" fg:x="16769" fg:w="35"/><text x="22.7382%" y="1343.50"></text></g><g><title>&lt;bitvec::slice::iter::BitValIter&lt;T,O&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back::{{closure}} (35 samples, 0.05%)</title><rect x="22.4882%" y="1317" width="0.0469%" height="15" fill="rgb(243,54,13)" fg:x="16769" fg:w="35"/><text x="22.7382%" y="1327.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::read (35 samples, 0.05%)</title><rect x="22.4882%" y="1301" width="0.0469%" height="15" fill="rgb(243,180,28)" fg:x="16769" fg:w="35"/><text x="22.7382%" y="1311.50"></text></g><g><title>bitvec::store::BitStore::get_bit (16 samples, 0.02%)</title><rect x="22.5137%" y="1285" width="0.0215%" height="15" fill="rgb(208,167,24)" fg:x="16788" fg:w="16"/><text x="22.7637%" y="1295.50"></text></g><g><title>&lt;usize as core::ops::bit::BitAnd&gt;::bitand (16 samples, 0.02%)</title><rect x="22.5137%" y="1269" width="0.0215%" height="15" fill="rgb(245,73,45)" fg:x="16788" fg:w="16"/><text x="22.7637%" y="1279.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_add (9 samples, 0.01%)</title><rect x="22.5445%" y="1301" width="0.0121%" height="15" fill="rgb(237,203,48)" fg:x="16811" fg:w="9"/><text x="22.7945%" y="1311.50"></text></g><g><title>&lt;bitvec::slice::iter::BitValIter&lt;T,O&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (21 samples, 0.03%)</title><rect x="22.5351%" y="1349" width="0.0282%" height="15" fill="rgb(211,197,16)" fg:x="16804" fg:w="21"/><text x="22.7851%" y="1359.50"></text></g><g><title>&lt;bitvec::ptr::range::BitPtrRange&lt;M,T,O&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (21 samples, 0.03%)</title><rect x="22.5351%" y="1333" width="0.0282%" height="15" fill="rgb(243,99,51)" fg:x="16804" fg:w="21"/><text x="22.7851%" y="1343.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::offset_from (14 samples, 0.02%)</title><rect x="22.5445%" y="1317" width="0.0188%" height="15" fill="rgb(215,123,29)" fg:x="16811" fg:w="14"/><text x="22.7945%" y="1327.50"></text></g><g><title>bitvec::index::BitIdx&lt;R&gt;::offset (38 samples, 0.05%)</title><rect x="22.6263%" y="1237" width="0.0510%" height="15" fill="rgb(239,186,37)" fg:x="16872" fg:w="38"/><text x="22.8763%" y="1247.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_add (10 samples, 0.01%)</title><rect x="22.6639%" y="1221" width="0.0134%" height="15" fill="rgb(252,136,39)" fg:x="16900" fg:w="10"/><text x="22.9139%" y="1231.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (14 samples, 0.02%)</title><rect x="22.6773%" y="1205" width="0.0188%" height="15" fill="rgb(223,213,32)" fg:x="16910" fg:w="14"/><text x="22.9273%" y="1215.50"></text></g><g><title>&lt;bitvec::ptr::range::BitPtrRange&lt;M,T,O&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (91 samples, 0.12%)</title><rect x="22.5807%" y="1301" width="0.1220%" height="15" fill="rgb(233,115,5)" fg:x="16838" fg:w="91"/><text x="22.8307%" y="1311.50"></text></g><g><title>bitvec::ptr::range::BitPtrRange&lt;M,T,O&gt;::take_back (81 samples, 0.11%)</title><rect x="22.5941%" y="1285" width="0.1086%" height="15" fill="rgb(207,226,44)" fg:x="16848" fg:w="81"/><text x="22.8441%" y="1295.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::wrapping_sub (57 samples, 0.08%)</title><rect x="22.6263%" y="1269" width="0.0764%" height="15" fill="rgb(208,126,0)" fg:x="16872" fg:w="57"/><text x="22.8763%" y="1279.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::wrapping_offset (57 samples, 0.08%)</title><rect x="22.6263%" y="1253" width="0.0764%" height="15" fill="rgb(244,66,21)" fg:x="16872" fg:w="57"/><text x="22.8763%" y="1263.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::wrapping_offset (19 samples, 0.03%)</title><rect x="22.6773%" y="1237" width="0.0255%" height="15" fill="rgb(222,97,12)" fg:x="16910" fg:w="19"/><text x="22.9273%" y="1247.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::with_ptr (19 samples, 0.03%)</title><rect x="22.6773%" y="1221" width="0.0255%" height="15" fill="rgb(219,213,19)" fg:x="16910" fg:w="19"/><text x="22.9273%" y="1231.50"></text></g><g><title>&lt;bitvec::slice::iter::BitValIter&lt;T,O&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (105 samples, 0.14%)</title><rect x="22.5807%" y="1317" width="0.1408%" height="15" fill="rgb(252,169,30)" fg:x="16838" fg:w="105"/><text x="22.8307%" y="1327.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (14 samples, 0.02%)</title><rect x="22.7028%" y="1301" width="0.0188%" height="15" fill="rgb(206,32,51)" fg:x="16929" fg:w="14"/><text x="22.9528%" y="1311.50"></text></g><g><title>&lt;bitvec::slice::iter::BitValIter&lt;T,O&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back::{{closure}} (14 samples, 0.02%)</title><rect x="22.7028%" y="1285" width="0.0188%" height="15" fill="rgb(250,172,42)" fg:x="16929" fg:w="14"/><text x="22.9528%" y="1295.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::read (14 samples, 0.02%)</title><rect x="22.7028%" y="1269" width="0.0188%" height="15" fill="rgb(209,34,43)" fg:x="16929" fg:w="14"/><text x="22.9528%" y="1279.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_add (17 samples, 0.02%)</title><rect x="22.7484%" y="1269" width="0.0228%" height="15" fill="rgb(223,11,35)" fg:x="16963" fg:w="17"/><text x="22.9984%" y="1279.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (165 samples, 0.22%)</title><rect x="22.5633%" y="1349" width="0.2213%" height="15" fill="rgb(251,219,26)" fg:x="16825" fg:w="165"/><text x="22.8133%" y="1359.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next_back (165 samples, 0.22%)</title><rect x="22.5633%" y="1333" width="0.2213%" height="15" fill="rgb(231,119,3)" fg:x="16825" fg:w="165"/><text x="22.8133%" y="1343.50"></text></g><g><title>&lt;bitvec::slice::iter::BitValIter&lt;T,O&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (47 samples, 0.06%)</title><rect x="22.7215%" y="1317" width="0.0630%" height="15" fill="rgb(216,97,11)" fg:x="16943" fg:w="47"/><text x="22.9715%" y="1327.50"></text></g><g><title>&lt;bitvec::ptr::range::BitPtrRange&lt;M,T,O&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (47 samples, 0.06%)</title><rect x="22.7215%" y="1301" width="0.0630%" height="15" fill="rgb(223,59,9)" fg:x="16943" fg:w="47"/><text x="22.9715%" y="1311.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::offset_from (27 samples, 0.04%)</title><rect x="22.7484%" y="1285" width="0.0362%" height="15" fill="rgb(233,93,31)" fg:x="16963" fg:w="27"/><text x="22.9984%" y="1295.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::offset_from (8 samples, 0.01%)</title><rect x="22.7738%" y="1269" width="0.0107%" height="15" fill="rgb(239,81,33)" fg:x="16982" fg:w="8"/><text x="23.0238%" y="1279.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset_from (8 samples, 0.01%)</title><rect x="22.7738%" y="1253" width="0.0107%" height="15" fill="rgb(213,120,34)" fg:x="16982" fg:w="8"/><text x="23.0238%" y="1263.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (8 samples, 0.01%)</title><rect x="22.7738%" y="1237" width="0.0107%" height="15" fill="rgb(243,49,53)" fg:x="16982" fg:w="8"/><text x="23.0238%" y="1247.50"></text></g><g><title>&lt;bitvec::slice::iter::BitValIter&lt;T,O&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (21 samples, 0.03%)</title><rect x="22.7846%" y="1301" width="0.0282%" height="15" fill="rgb(247,216,33)" fg:x="16990" fg:w="21"/><text x="23.0346%" y="1311.50"></text></g><g><title>&lt;bitvec::slice::iter::BitValIter&lt;T,O&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (21 samples, 0.03%)</title><rect x="22.7846%" y="1285" width="0.0282%" height="15" fill="rgb(226,26,14)" fg:x="16990" fg:w="21"/><text x="23.0346%" y="1295.50"></text></g><g><title>&lt;bitvec::ptr::range::BitPtrRange&lt;M,T,O&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (21 samples, 0.03%)</title><rect x="22.7846%" y="1269" width="0.0282%" height="15" fill="rgb(215,49,53)" fg:x="16990" fg:w="21"/><text x="23.0346%" y="1279.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (338 samples, 0.45%)</title><rect x="22.3715%" y="1381" width="0.4533%" height="15" fill="rgb(245,162,40)" fg:x="16682" fg:w="338"/><text x="22.6215%" y="1391.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next_back (338 samples, 0.45%)</title><rect x="22.3715%" y="1365" width="0.4533%" height="15" fill="rgb(229,68,17)" fg:x="16682" fg:w="338"/><text x="22.6215%" y="1375.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (30 samples, 0.04%)</title><rect x="22.7846%" y="1349" width="0.0402%" height="15" fill="rgb(213,182,10)" fg:x="16990" fg:w="30"/><text x="23.0346%" y="1359.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (30 samples, 0.04%)</title><rect x="22.7846%" y="1333" width="0.0402%" height="15" fill="rgb(245,125,30)" fg:x="16990" fg:w="30"/><text x="23.0346%" y="1343.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::size_hint (30 samples, 0.04%)</title><rect x="22.7846%" y="1317" width="0.0402%" height="15" fill="rgb(232,202,2)" fg:x="16990" fg:w="30"/><text x="23.0346%" y="1327.50"></text></g><g><title>core::cmp::min (9 samples, 0.01%)</title><rect x="22.8127%" y="1301" width="0.0121%" height="15" fill="rgb(237,140,51)" fg:x="17011" fg:w="9"/><text x="23.0627%" y="1311.50"></text></g><g><title>core::cmp::Ord::min (9 samples, 0.01%)</title><rect x="22.8127%" y="1285" width="0.0121%" height="15" fill="rgb(236,157,25)" fg:x="17011" fg:w="9"/><text x="23.0627%" y="1295.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (359 samples, 0.48%)</title><rect x="22.3715%" y="1413" width="0.4814%" height="15" fill="rgb(219,209,0)" fg:x="16682" fg:w="359"/><text x="22.6215%" y="1423.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (359 samples, 0.48%)</title><rect x="22.3715%" y="1397" width="0.4814%" height="15" fill="rgb(240,116,54)" fg:x="16682" fg:w="359"/><text x="22.6215%" y="1407.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (21 samples, 0.03%)</title><rect x="22.8248%" y="1381" width="0.0282%" height="15" fill="rgb(216,10,36)" fg:x="17020" fg:w="21"/><text x="23.0748%" y="1391.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (20 samples, 0.03%)</title><rect x="22.8261%" y="1365" width="0.0268%" height="15" fill="rgb(222,72,44)" fg:x="17021" fg:w="20"/><text x="23.0761%" y="1375.50"></text></g><g><title>gmw::mul_triple::boolean::MulTriplesSlice::iter::{{closure}} (20 samples, 0.03%)</title><rect x="22.8261%" y="1349" width="0.0268%" height="15" fill="rgb(232,159,9)" fg:x="17021" fg:w="20"/><text x="23.0761%" y="1359.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::add (11 samples, 0.01%)</title><rect x="22.9857%" y="1333" width="0.0148%" height="15" fill="rgb(210,39,32)" fg:x="17140" fg:w="11"/><text x="23.2357%" y="1343.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::offset (11 samples, 0.01%)</title><rect x="22.9857%" y="1317" width="0.0148%" height="15" fill="rgb(216,194,45)" fg:x="17140" fg:w="11"/><text x="23.2357%" y="1327.50"></text></g><g><title>bitvec::index::BitIdx&lt;R&gt;::offset (11 samples, 0.01%)</title><rect x="22.9857%" y="1301" width="0.0148%" height="15" fill="rgb(218,18,35)" fg:x="17140" fg:w="11"/><text x="23.2357%" y="1311.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::read (29 samples, 0.04%)</title><rect x="23.0005%" y="1333" width="0.0389%" height="15" fill="rgb(207,83,51)" fg:x="17151" fg:w="29"/><text x="23.2505%" y="1343.50"></text></g><g><title>bitvec::store::BitStore::get_bit (14 samples, 0.02%)</title><rect x="23.0206%" y="1317" width="0.0188%" height="15" fill="rgb(225,63,43)" fg:x="17166" fg:w="14"/><text x="23.2706%" y="1327.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::ne (14 samples, 0.02%)</title><rect x="23.0206%" y="1301" width="0.0188%" height="15" fill="rgb(207,57,36)" fg:x="17166" fg:w="14"/><text x="23.2706%" y="1311.50"></text></g><g><title>&lt;bitvec::boxed::iter::IntoIter&lt;T,O&gt; as core::iter::traits::iterator::Iterator&gt;::next (75 samples, 0.10%)</title><rect x="22.9589%" y="1381" width="0.1006%" height="15" fill="rgb(216,99,33)" fg:x="17120" fg:w="75"/><text x="23.2089%" y="1391.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (55 samples, 0.07%)</title><rect x="22.9857%" y="1365" width="0.0738%" height="15" fill="rgb(225,42,16)" fg:x="17140" fg:w="55"/><text x="23.2357%" y="1375.50"></text></g><g><title>&lt;bitvec::boxed::iter::IntoIter&lt;T,O&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (55 samples, 0.07%)</title><rect x="22.9857%" y="1349" width="0.0738%" height="15" fill="rgb(220,201,45)" fg:x="17140" fg:w="55"/><text x="23.2357%" y="1359.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::as_bitptr (15 samples, 0.02%)</title><rect x="23.0394%" y="1333" width="0.0201%" height="15" fill="rgb(225,33,4)" fg:x="17180" fg:w="15"/><text x="23.2894%" y="1343.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::to_bitptr (15 samples, 0.02%)</title><rect x="23.0394%" y="1317" width="0.0201%" height="15" fill="rgb(224,33,50)" fg:x="17180" fg:w="15"/><text x="23.2894%" y="1327.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::head (10 samples, 0.01%)</title><rect x="23.0461%" y="1301" width="0.0134%" height="15" fill="rgb(246,198,51)" fg:x="17185" fg:w="10"/><text x="23.2961%" y="1311.50"></text></g><g><title>&lt;bitvec::boxed::iter::IntoIter&lt;T,O&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.01%)</title><rect x="23.1078%" y="1349" width="0.0148%" height="15" fill="rgb(205,22,4)" fg:x="17231" fg:w="11"/><text x="23.3578%" y="1359.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (11 samples, 0.01%)</title><rect x="23.1078%" y="1333" width="0.0148%" height="15" fill="rgb(206,3,8)" fg:x="17231" fg:w="11"/><text x="23.3578%" y="1343.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (11 samples, 0.01%)</title><rect x="23.1078%" y="1317" width="0.0148%" height="15" fill="rgb(251,23,15)" fg:x="17231" fg:w="11"/><text x="23.3578%" y="1327.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (27 samples, 0.04%)</title><rect x="23.1762%" y="1301" width="0.0362%" height="15" fill="rgb(252,88,28)" fg:x="17282" fg:w="27"/><text x="23.4262%" y="1311.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (27 samples, 0.04%)</title><rect x="23.1762%" y="1285" width="0.0362%" height="15" fill="rgb(212,127,14)" fg:x="17282" fg:w="27"/><text x="23.4262%" y="1295.50"></text></g><g><title>core::mem::replace (8 samples, 0.01%)</title><rect x="23.2016%" y="1269" width="0.0107%" height="15" fill="rgb(247,145,37)" fg:x="17301" fg:w="8"/><text x="23.4516%" y="1279.50"></text></g><g><title>core::ptr::write (8 samples, 0.01%)</title><rect x="23.2016%" y="1253" width="0.0107%" height="15" fill="rgb(209,117,53)" fg:x="17301" fg:w="8"/><text x="23.4516%" y="1263.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (288 samples, 0.39%)</title><rect x="22.8530%" y="1413" width="0.3862%" height="15" fill="rgb(212,90,42)" fg:x="17041" fg:w="288"/><text x="23.1030%" y="1423.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (288 samples, 0.39%)</title><rect x="22.8530%" y="1397" width="0.3862%" height="15" fill="rgb(218,164,37)" fg:x="17041" fg:w="288"/><text x="23.1030%" y="1407.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (134 samples, 0.18%)</title><rect x="23.0595%" y="1381" width="0.1797%" height="15" fill="rgb(246,65,34)" fg:x="17195" fg:w="134"/><text x="23.3095%" y="1391.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (134 samples, 0.18%)</title><rect x="23.0595%" y="1365" width="0.1797%" height="15" fill="rgb(231,100,33)" fg:x="17195" fg:w="134"/><text x="23.3095%" y="1375.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (87 samples, 0.12%)</title><rect x="23.1225%" y="1349" width="0.1167%" height="15" fill="rgb(228,126,14)" fg:x="17242" fg:w="87"/><text x="23.3725%" y="1359.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (87 samples, 0.12%)</title><rect x="23.1225%" y="1333" width="0.1167%" height="15" fill="rgb(215,173,21)" fg:x="17242" fg:w="87"/><text x="23.3725%" y="1343.50"></text></g><g><title>&lt;bitvec::boxed::iter::IntoIter&lt;T,O&gt; as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 0.06%)</title><rect x="23.1762%" y="1317" width="0.0630%" height="15" fill="rgb(210,6,40)" fg:x="17282" fg:w="47"/><text x="23.4262%" y="1327.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (20 samples, 0.03%)</title><rect x="23.2124%" y="1301" width="0.0268%" height="15" fill="rgb(212,48,18)" fg:x="17309" fg:w="20"/><text x="23.4624%" y="1311.50"></text></g><g><title>&lt;bitvec::boxed::iter::IntoIter&lt;T,O&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (20 samples, 0.03%)</title><rect x="23.2124%" y="1285" width="0.0268%" height="15" fill="rgb(230,214,11)" fg:x="17309" fg:w="20"/><text x="23.4624%" y="1295.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::read (20 samples, 0.03%)</title><rect x="23.2124%" y="1269" width="0.0268%" height="15" fill="rgb(254,105,39)" fg:x="17309" fg:w="20"/><text x="23.4624%" y="1279.50"></text></g><g><title>bitvec::store::BitStore::get_bit (20 samples, 0.03%)</title><rect x="23.2124%" y="1253" width="0.0268%" height="15" fill="rgb(245,158,5)" fg:x="17309" fg:w="20"/><text x="23.4624%" y="1263.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::ne (20 samples, 0.03%)</title><rect x="23.2124%" y="1237" width="0.0268%" height="15" fill="rgb(249,208,11)" fg:x="17309" fg:w="20"/><text x="23.4624%" y="1247.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (678 samples, 0.91%)</title><rect x="22.3313%" y="1445" width="0.9092%" height="15" fill="rgb(210,39,28)" fg:x="16652" fg:w="678"/><text x="22.5813%" y="1455.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (678 samples, 0.91%)</title><rect x="22.3313%" y="1429" width="0.9092%" height="15" fill="rgb(211,56,53)" fg:x="16652" fg:w="678"/><text x="22.5813%" y="1439.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (787 samples, 1.06%)</title><rect x="22.3286%" y="1477" width="1.0554%" height="15" fill="rgb(226,201,30)" fg:x="16650" fg:w="787"/><text x="22.5786%" y="1487.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (787 samples, 1.06%)</title><rect x="22.3286%" y="1461" width="1.0554%" height="15" fill="rgb(239,101,34)" fg:x="16650" fg:w="787"/><text x="22.5786%" y="1471.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (107 samples, 0.14%)</title><rect x="23.2405%" y="1445" width="0.1435%" height="15" fill="rgb(226,209,5)" fg:x="17330" fg:w="107"/><text x="23.4905%" y="1455.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (93 samples, 0.12%)</title><rect x="23.2593%" y="1429" width="0.1247%" height="15" fill="rgb(250,105,47)" fg:x="17344" fg:w="93"/><text x="23.5093%" y="1439.50"></text></g><g><title>&lt;gmw::protocols::boolean_gmw::BooleanGmw as gmw::protocols::Protocol&gt;::evaluate_interactive::{{closure}} (83 samples, 0.11%)</title><rect x="23.2727%" y="1413" width="0.1113%" height="15" fill="rgb(230,72,3)" fg:x="17354" fg:w="83"/><text x="23.5227%" y="1423.50"></text></g><g><title>gmw::evaluate::and::evaluate (83 samples, 0.11%)</title><rect x="23.2727%" y="1397" width="0.1113%" height="15" fill="rgb(232,218,39)" fg:x="17354" fg:w="83"/><text x="23.5227%" y="1407.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (837 samples, 1.12%)</title><rect x="22.3286%" y="1509" width="1.1225%" height="15" fill="rgb(248,166,6)" fg:x="16650" fg:w="837"/><text x="22.5786%" y="1519.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (837 samples, 1.12%)</title><rect x="22.3286%" y="1493" width="1.1225%" height="15" fill="rgb(247,89,20)" fg:x="16650" fg:w="837"/><text x="22.5786%" y="1503.50"></text></g><g><title>&lt;bitvec::ptr::range::BitPtrRange&lt;M,T,O&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.07%)</title><rect x="23.3840%" y="1477" width="0.0671%" height="15" fill="rgb(248,130,54)" fg:x="17437" fg:w="50"/><text x="23.6340%" y="1487.50"></text></g><g><title>bitvec::ptr::range::BitPtrRange&lt;M,T,O&gt;::take_front (19 samples, 0.03%)</title><rect x="23.4256%" y="1461" width="0.0255%" height="15" fill="rgb(234,196,4)" fg:x="17468" fg:w="19"/><text x="23.6756%" y="1471.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::wrapping_add (19 samples, 0.03%)</title><rect x="23.4256%" y="1445" width="0.0255%" height="15" fill="rgb(250,143,31)" fg:x="17468" fg:w="19"/><text x="23.6756%" y="1455.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::wrapping_offset (19 samples, 0.03%)</title><rect x="23.4256%" y="1429" width="0.0255%" height="15" fill="rgb(211,110,34)" fg:x="17468" fg:w="19"/><text x="23.6756%" y="1439.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::wrapping_offset (14 samples, 0.02%)</title><rect x="23.4323%" y="1413" width="0.0188%" height="15" fill="rgb(215,124,48)" fg:x="17473" fg:w="14"/><text x="23.6823%" y="1423.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::with_ptr (14 samples, 0.02%)</title><rect x="23.4323%" y="1397" width="0.0188%" height="15" fill="rgb(216,46,13)" fg:x="17473" fg:w="14"/><text x="23.6823%" y="1407.50"></text></g><g><title>tap::pipe::Pipe::pipe (13 samples, 0.02%)</title><rect x="23.4336%" y="1381" width="0.0174%" height="15" fill="rgb(205,184,25)" fg:x="17474" fg:w="13"/><text x="23.6836%" y="1391.50"></text></g><g><title>wyz::comu::Address&lt;M,T&gt;::wrapping_offset::{{closure}} (13 samples, 0.02%)</title><rect x="23.4336%" y="1365" width="0.0174%" height="15" fill="rgb(228,1,10)" fg:x="17474" fg:w="13"/><text x="23.6836%" y="1375.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::wrapping_offset (13 samples, 0.02%)</title><rect x="23.4336%" y="1349" width="0.0174%" height="15" fill="rgb(213,116,27)" fg:x="17474" fg:w="13"/><text x="23.6836%" y="1359.50"></text></g><g><title>&lt;core::cell::Cell&lt;usize&gt; as radium::Radium&gt;::fetch_and (60 samples, 0.08%)</title><rect x="23.4779%" y="1413" width="0.0805%" height="15" fill="rgb(241,95,50)" fg:x="17507" fg:w="60"/><text x="23.7279%" y="1423.50"></text></g><g><title>&lt;core::cell::Cell&lt;usize&gt; as radium::Radium&gt;::fetch_or (29 samples, 0.04%)</title><rect x="23.5584%" y="1413" width="0.0389%" height="15" fill="rgb(238,48,32)" fg:x="17567" fg:w="29"/><text x="23.8084%" y="1423.50"></text></g><g><title>bitvec::vec::iter::&lt;impl core::iter::traits::collect::Extend&lt;bool&gt; for bitvec::vec::BitVec&lt;T,O&gt;&gt;::extend::{{closure}} (111 samples, 0.15%)</title><rect x="23.4511%" y="1493" width="0.1489%" height="15" fill="rgb(235,113,49)" fg:x="17487" fg:w="111"/><text x="23.7011%" y="1503.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;wyz::comu::Mut,T,O&gt;::write (111 samples, 0.15%)</title><rect x="23.4511%" y="1477" width="0.1489%" height="15" fill="rgb(205,127,43)" fg:x="17487" fg:w="111"/><text x="23.7011%" y="1487.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;wyz::comu::Mut,T,O&gt;::replace (111 samples, 0.15%)</title><rect x="23.4511%" y="1461" width="0.1489%" height="15" fill="rgb(250,162,2)" fg:x="17487" fg:w="111"/><text x="23.7011%" y="1471.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;wyz::comu::Frozen&lt;M&gt;,T,O&gt;::frozen_write_bit (111 samples, 0.15%)</title><rect x="23.4511%" y="1445" width="0.1489%" height="15" fill="rgb(220,13,41)" fg:x="17487" fg:w="111"/><text x="23.7011%" y="1455.50"></text></g><g><title>bitvec::access::BitAccess::write_bit (111 samples, 0.15%)</title><rect x="23.4511%" y="1429" width="0.1489%" height="15" fill="rgb(249,221,25)" fg:x="17487" fg:w="111"/><text x="23.7011%" y="1439.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (970 samples, 1.30%)</title><rect x="22.3058%" y="1557" width="1.3008%" height="15" fill="rgb(215,208,19)" fg:x="16633" fg:w="970"/><text x="22.5558%" y="1567.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (968 samples, 1.30%)</title><rect x="22.3085%" y="1541" width="1.2981%" height="15" fill="rgb(236,175,2)" fg:x="16635" fg:w="968"/><text x="22.5585%" y="1551.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (965 samples, 1.29%)</title><rect x="22.3125%" y="1525" width="1.2941%" height="15" fill="rgb(241,52,2)" fg:x="16638" fg:w="965"/><text x="22.5625%" y="1535.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (116 samples, 0.16%)</title><rect x="23.4511%" y="1509" width="0.1556%" height="15" fill="rgb(248,140,14)" fg:x="17487" fg:w="116"/><text x="23.7011%" y="1519.50"></text></g><g><title>[libc.so.6] (9 samples, 0.01%)</title><rect x="23.6080%" y="1525" width="0.0121%" height="15" fill="rgb(253,22,42)" fg:x="17604" fg:w="9"/><text x="23.8580%" y="1535.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (78 samples, 0.10%)</title><rect x="23.6066%" y="1541" width="0.1046%" height="15" fill="rgb(234,61,47)" fg:x="17603" fg:w="78"/><text x="23.8566%" y="1551.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (68 samples, 0.09%)</title><rect x="23.6201%" y="1525" width="0.0912%" height="15" fill="rgb(208,226,15)" fg:x="17613" fg:w="68"/><text x="23.8701%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::zip::Zip&lt;core::iter::adapters::zip::Zip&lt;core::iter::adapters::zip::Zip&lt;core::iter::adapters::zip::Zip&lt;bitvec::boxed::iter::IntoIter,bitvec::boxed::iter::IntoIter&gt;,bitvec::boxed::iter::IntoIter&gt;,bitvec::boxed::iter::IntoIter&gt;,core::iter::adapters::rev::Rev&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::zip::Zip&lt;core::iter::adapters::zip::Zip&lt;bitvec::slice::iter::BitValIter&lt;usize,bitvec::order::Lsb0&gt;,bitvec::slice::iter::BitValIter&lt;usize,bitvec::order::Lsb0&gt;&gt;,bitvec::slice::iter::BitValIter&lt;usize,bitvec::order::Lsb0&gt;&gt;,gmw::mul_triple::boolean::MulTriplesSlice::iter::{{closure}}&gt;&gt;&gt;&gt; (53 samples, 0.07%)</title><rect x="23.6402%" y="1509" width="0.0711%" height="15" fill="rgb(217,221,4)" fg:x="17628" fg:w="53"/><text x="23.8902%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::zip::Zip&lt;core::iter::adapters::zip::Zip&lt;core::iter::adapters::zip::Zip&lt;bitvec::boxed::iter::IntoIter,bitvec::boxed::iter::IntoIter&gt;,bitvec::boxed::iter::IntoIter&gt;,bitvec::boxed::iter::IntoIter&gt;&gt; (53 samples, 0.07%)</title><rect x="23.6402%" y="1493" width="0.0711%" height="15" fill="rgb(212,174,34)" fg:x="17628" fg:w="53"/><text x="23.8902%" y="1503.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::zip::Zip&lt;core::iter::adapters::zip::Zip&lt;bitvec::boxed::iter::IntoIter,bitvec::boxed::iter::IntoIter&gt;,bitvec::boxed::iter::IntoIter&gt;&gt; (52 samples, 0.07%)</title><rect x="23.6415%" y="1477" width="0.0697%" height="15" fill="rgb(253,83,4)" fg:x="17629" fg:w="52"/><text x="23.8915%" y="1487.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::zip::Zip&lt;bitvec::boxed::iter::IntoIter,bitvec::boxed::iter::IntoIter&gt;&gt; (46 samples, 0.06%)</title><rect x="23.6496%" y="1461" width="0.0617%" height="15" fill="rgb(250,195,49)" fg:x="17635" fg:w="46"/><text x="23.8996%" y="1471.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitvec::boxed::iter::IntoIter&gt; (45 samples, 0.06%)</title><rect x="23.6509%" y="1445" width="0.0603%" height="15" fill="rgb(241,192,25)" fg:x="17636" fg:w="45"/><text x="23.9009%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitvec::boxed::BitBox&gt; (45 samples, 0.06%)</title><rect x="23.6509%" y="1429" width="0.0603%" height="15" fill="rgb(208,124,10)" fg:x="17636" fg:w="45"/><text x="23.9009%" y="1439.50"></text></g><g><title>bitvec::boxed::ops::&lt;impl core::ops::drop::Drop for bitvec::boxed::BitBox&lt;T,O&gt;&gt;::drop (45 samples, 0.06%)</title><rect x="23.6509%" y="1413" width="0.0603%" height="15" fill="rgb(222,33,0)" fg:x="17636" fg:w="45"/><text x="23.9009%" y="1423.50"></text></g><g><title>bitvec::boxed::BitBox&lt;T,O&gt;::with_box (45 samples, 0.06%)</title><rect x="23.6509%" y="1397" width="0.0603%" height="15" fill="rgb(234,209,28)" fg:x="17636" fg:w="45"/><text x="23.9009%" y="1407.50"></text></g><g><title>tap::pipe::Pipe::pipe_ref_mut (41 samples, 0.05%)</title><rect x="23.6563%" y="1381" width="0.0550%" height="15" fill="rgb(224,11,23)" fg:x="17640" fg:w="41"/><text x="23.9063%" y="1391.50"></text></g><g><title>bitvec::boxed::ops::&lt;impl core::ops::drop::Drop for bitvec::boxed::BitBox&lt;T,O&gt;&gt;::drop::{{closure}} (41 samples, 0.05%)</title><rect x="23.6563%" y="1365" width="0.0550%" height="15" fill="rgb(232,99,1)" fg:x="17640" fg:w="41"/><text x="23.9063%" y="1375.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::drop (41 samples, 0.05%)</title><rect x="23.6563%" y="1349" width="0.0550%" height="15" fill="rgb(237,95,45)" fg:x="17640" fg:w="41"/><text x="23.9063%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[usize]&gt;&gt; (41 samples, 0.05%)</title><rect x="23.6563%" y="1333" width="0.0550%" height="15" fill="rgb(208,109,11)" fg:x="17640" fg:w="41"/><text x="23.9063%" y="1343.50"></text></g><g><title>alloc::alloc::box_free (41 samples, 0.05%)</title><rect x="23.6563%" y="1317" width="0.0550%" height="15" fill="rgb(216,190,48)" fg:x="17640" fg:w="41"/><text x="23.9063%" y="1327.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (41 samples, 0.05%)</title><rect x="23.6563%" y="1301" width="0.0550%" height="15" fill="rgb(251,171,36)" fg:x="17640" fg:w="41"/><text x="23.9063%" y="1311.50"></text></g><g><title>alloc::alloc::dealloc (41 samples, 0.05%)</title><rect x="23.6563%" y="1285" width="0.0550%" height="15" fill="rgb(230,62,22)" fg:x="17640" fg:w="41"/><text x="23.9063%" y="1295.50"></text></g><g><title>cfree (34 samples, 0.05%)</title><rect x="23.6656%" y="1269" width="0.0456%" height="15" fill="rgb(225,114,35)" fg:x="17647" fg:w="34"/><text x="23.9156%" y="1279.50"></text></g><g><title>[libc.so.6] (8 samples, 0.01%)</title><rect x="23.7005%" y="1253" width="0.0107%" height="15" fill="rgb(215,118,42)" fg:x="17673" fg:w="8"/><text x="23.9505%" y="1263.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1,103 samples, 1.48%)</title><rect x="22.2441%" y="1637" width="1.4792%" height="15" fill="rgb(243,119,21)" fg:x="16587" fg:w="1103"/><text x="22.4941%" y="1647.50"></text></g><g><title>bitvec::vec::iter::&lt;impl core::iter::traits::collect::FromIterator&lt;bool&gt; for bitvec::vec::BitVec&lt;T,O&gt;&gt;::from_iter (1,103 samples, 1.48%)</title><rect x="22.2441%" y="1621" width="1.4792%" height="15" fill="rgb(252,177,53)" fg:x="16587" fg:w="1103"/><text x="22.4941%" y="1631.50"></text></g><g><title>tap::tap::Tap::tap_mut (1,099 samples, 1.47%)</title><rect x="22.2495%" y="1605" width="1.4738%" height="15" fill="rgb(237,209,29)" fg:x="16591" fg:w="1099"/><text x="22.4995%" y="1615.50"></text></g><g><title>bitvec::vec::iter::&lt;impl core::iter::traits::collect::FromIterator&lt;bool&gt; for bitvec::vec::BitVec&lt;T,O&gt;&gt;::from_iter::{{closure}} (1,099 samples, 1.47%)</title><rect x="22.2495%" y="1589" width="1.4738%" height="15" fill="rgb(212,65,23)" fg:x="16591" fg:w="1099"/><text x="22.4995%" y="1599.50"></text></g><g><title>bitvec::vec::iter::&lt;impl core::iter::traits::collect::Extend&lt;bool&gt; for bitvec::vec::BitVec&lt;T,O&gt;&gt;::extend (1,099 samples, 1.47%)</title><rect x="22.2495%" y="1573" width="1.4738%" height="15" fill="rgb(230,222,46)" fg:x="16591" fg:w="1099"/><text x="22.4995%" y="1583.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (87 samples, 0.12%)</title><rect x="23.6066%" y="1557" width="0.1167%" height="15" fill="rgb(215,135,32)" fg:x="17603" fg:w="87"/><text x="23.8566%" y="1567.50"></text></g><g><title>[libc.so.6] (9 samples, 0.01%)</title><rect x="23.7112%" y="1541" width="0.0121%" height="15" fill="rgb(246,101,22)" fg:x="17681" fg:w="9"/><text x="23.9612%" y="1551.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (14 samples, 0.02%)</title><rect x="23.7394%" y="1589" width="0.0188%" height="15" fill="rgb(206,107,13)" fg:x="17702" fg:w="14"/><text x="23.9894%" y="1599.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::shrink_to_fit (14 samples, 0.02%)</title><rect x="23.7394%" y="1573" width="0.0188%" height="15" fill="rgb(250,100,44)" fg:x="17702" fg:w="14"/><text x="23.9894%" y="1583.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::shrink_to_fit (14 samples, 0.02%)</title><rect x="23.7394%" y="1557" width="0.0188%" height="15" fill="rgb(231,147,38)" fg:x="17702" fg:w="14"/><text x="23.9894%" y="1567.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::shrink (14 samples, 0.02%)</title><rect x="23.7394%" y="1541" width="0.0188%" height="15" fill="rgb(229,8,40)" fg:x="17702" fg:w="14"/><text x="23.9894%" y="1551.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::shrink (14 samples, 0.02%)</title><rect x="23.7394%" y="1525" width="0.0188%" height="15" fill="rgb(221,135,30)" fg:x="17702" fg:w="14"/><text x="23.9894%" y="1535.50"></text></g><g><title>alloc::alloc::realloc (14 samples, 0.02%)</title><rect x="23.7394%" y="1509" width="0.0188%" height="15" fill="rgb(249,193,18)" fg:x="17702" fg:w="14"/><text x="23.9894%" y="1519.50"></text></g><g><title>realloc (13 samples, 0.02%)</title><rect x="23.7407%" y="1493" width="0.0174%" height="15" fill="rgb(209,133,39)" fg:x="17703" fg:w="13"/><text x="23.9907%" y="1503.50"></text></g><g><title>bitvec::vec::iter::&lt;impl core::iter::traits::collect::IntoIterator for bitvec::vec::BitVec&lt;T,O&gt;&gt;::into_iter (16 samples, 0.02%)</title><rect x="23.7394%" y="1621" width="0.0215%" height="15" fill="rgb(232,100,14)" fg:x="17702" fg:w="16"/><text x="23.9894%" y="1631.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::into_boxed_bitslice (16 samples, 0.02%)</title><rect x="23.7394%" y="1605" width="0.0215%" height="15" fill="rgb(224,185,1)" fg:x="17702" fg:w="16"/><text x="23.9894%" y="1615.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (25 samples, 0.03%)</title><rect x="23.7340%" y="1637" width="0.0335%" height="15" fill="rgb(223,139,8)" fg:x="17698" fg:w="25"/><text x="23.9840%" y="1647.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::cloned::Cloned&lt;core::iter::adapters::flatten::Flatten&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;&gt;&gt;&gt;&gt; (15 samples, 0.02%)</title><rect x="23.7676%" y="1637" width="0.0201%" height="15" fill="rgb(232,213,38)" fg:x="17723" fg:w="15"/><text x="24.0176%" y="1647.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;&gt;&gt;&gt; (15 samples, 0.02%)</title><rect x="23.7676%" y="1621" width="0.0201%" height="15" fill="rgb(207,94,22)" fg:x="17723" fg:w="15"/><text x="24.0176%" y="1631.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlattenCompat&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;&gt;,core::slice::iter::Iter&lt;gmw::protocols::boolean_gmw::BooleanGate&gt;&gt;&gt; (15 samples, 0.02%)</title><rect x="23.7676%" y="1605" width="0.0201%" height="15" fill="rgb(219,183,54)" fg:x="17723" fg:w="15"/><text x="24.0176%" y="1615.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::fuse::Fuse&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;&gt;&gt;&gt; (15 samples, 0.02%)</title><rect x="23.7676%" y="1589" width="0.0201%" height="15" fill="rgb(216,185,54)" fg:x="17723" fg:w="15"/><text x="24.0176%" y="1599.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;&gt;&gt;&gt; (15 samples, 0.02%)</title><rect x="23.7676%" y="1573" width="0.0201%" height="15" fill="rgb(254,217,39)" fg:x="17723" fg:w="15"/><text x="24.0176%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;&gt;&gt; (14 samples, 0.02%)</title><rect x="23.7689%" y="1557" width="0.0188%" height="15" fill="rgb(240,178,23)" fg:x="17724" fg:w="14"/><text x="24.0189%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;&gt; (14 samples, 0.02%)</title><rect x="23.7689%" y="1541" width="0.0188%" height="15" fill="rgb(218,11,47)" fg:x="17724" fg:w="14"/><text x="24.0189%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;&gt; (14 samples, 0.02%)</title><rect x="23.7689%" y="1525" width="0.0188%" height="15" fill="rgb(218,51,51)" fg:x="17724" fg:w="14"/><text x="24.0189%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (14 samples, 0.02%)</title><rect x="23.7689%" y="1509" width="0.0188%" height="15" fill="rgb(238,126,27)" fg:x="17724" fg:w="14"/><text x="24.0189%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (14 samples, 0.02%)</title><rect x="23.7689%" y="1493" width="0.0188%" height="15" fill="rgb(249,202,22)" fg:x="17724" fg:w="14"/><text x="24.0189%" y="1503.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.02%)</title><rect x="23.7689%" y="1477" width="0.0188%" height="15" fill="rgb(254,195,49)" fg:x="17724" fg:w="14"/><text x="24.0189%" y="1487.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.02%)</title><rect x="23.7689%" y="1461" width="0.0188%" height="15" fill="rgb(208,123,14)" fg:x="17724" fg:w="14"/><text x="24.0189%" y="1471.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.02%)</title><rect x="23.7689%" y="1445" width="0.0188%" height="15" fill="rgb(224,200,8)" fg:x="17724" fg:w="14"/><text x="24.0189%" y="1455.50"></text></g><g><title>cfree (13 samples, 0.02%)</title><rect x="23.7702%" y="1429" width="0.0174%" height="15" fill="rgb(217,61,36)" fg:x="17725" fg:w="13"/><text x="24.0202%" y="1439.50"></text></g><g><title>[libc.so.6] (13 samples, 0.02%)</title><rect x="23.7702%" y="1413" width="0.0174%" height="15" fill="rgb(206,35,45)" fg:x="17725" fg:w="13"/><text x="24.0202%" y="1423.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlatMap&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt; (25 samples, 0.03%)</title><rect x="23.7877%" y="1637" width="0.0335%" height="15" fill="rgb(217,65,33)" fg:x="17738" fg:w="25"/><text x="24.0377%" y="1647.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlattenCompat&lt;core::iter::adapters::map::Map&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt;&gt; (25 samples, 0.03%)</title><rect x="23.7877%" y="1621" width="0.0335%" height="15" fill="rgb(222,158,48)" fg:x="17738" fg:w="25"/><text x="24.0377%" y="1631.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::fuse::Fuse&lt;core::iter::adapters::map::Map&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt;&gt; (25 samples, 0.03%)</title><rect x="23.7877%" y="1605" width="0.0335%" height="15" fill="rgb(254,2,54)" fg:x="17738" fg:w="25"/><text x="24.0377%" y="1615.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::adapters::map::Map&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt;&gt; (25 samples, 0.03%)</title><rect x="23.7877%" y="1589" width="0.0335%" height="15" fill="rgb(250,143,38)" fg:x="17738" fg:w="25"/><text x="24.0377%" y="1599.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt; (25 samples, 0.03%)</title><rect x="23.7877%" y="1573" width="0.0335%" height="15" fill="rgb(248,25,0)" fg:x="17738" fg:w="25"/><text x="24.0377%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt;&gt; (25 samples, 0.03%)</title><rect x="23.7877%" y="1557" width="0.0335%" height="15" fill="rgb(206,152,27)" fg:x="17738" fg:w="25"/><text x="24.0377%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt; (25 samples, 0.03%)</title><rect x="23.7877%" y="1541" width="0.0335%" height="15" fill="rgb(240,77,30)" fg:x="17738" fg:w="25"/><text x="24.0377%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;&gt; (25 samples, 0.03%)</title><rect x="23.7877%" y="1525" width="0.0335%" height="15" fill="rgb(231,5,3)" fg:x="17738" fg:w="25"/><text x="24.0377%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (25 samples, 0.03%)</title><rect x="23.7877%" y="1509" width="0.0335%" height="15" fill="rgb(207,226,32)" fg:x="17738" fg:w="25"/><text x="24.0377%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (25 samples, 0.03%)</title><rect x="23.7877%" y="1493" width="0.0335%" height="15" fill="rgb(222,207,47)" fg:x="17738" fg:w="25"/><text x="24.0377%" y="1503.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.03%)</title><rect x="23.7877%" y="1477" width="0.0335%" height="15" fill="rgb(229,115,45)" fg:x="17738" fg:w="25"/><text x="24.0377%" y="1487.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (25 samples, 0.03%)</title><rect x="23.7877%" y="1461" width="0.0335%" height="15" fill="rgb(224,191,6)" fg:x="17738" fg:w="25"/><text x="24.0377%" y="1471.50"></text></g><g><title>alloc::alloc::dealloc (25 samples, 0.03%)</title><rect x="23.7877%" y="1445" width="0.0335%" height="15" fill="rgb(230,227,24)" fg:x="17738" fg:w="25"/><text x="24.0377%" y="1455.50"></text></g><g><title>cfree (24 samples, 0.03%)</title><rect x="23.7890%" y="1429" width="0.0322%" height="15" fill="rgb(228,80,19)" fg:x="17739" fg:w="24"/><text x="24.0390%" y="1439.50"></text></g><g><title>[libc.so.6] (22 samples, 0.03%)</title><rect x="23.7917%" y="1413" width="0.0295%" height="15" fill="rgb(247,229,0)" fg:x="17741" fg:w="22"/><text x="24.0417%" y="1423.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::with_vec (22 samples, 0.03%)</title><rect x="23.8212%" y="1589" width="0.0295%" height="15" fill="rgb(237,194,15)" fg:x="17763" fg:w="22"/><text x="24.0712%" y="1599.50"></text></g><g><title>bitvec::vec::ops::&lt;impl core::ops::drop::Drop for bitvec::vec::BitVec&lt;T,O&gt;&gt;::drop::{{closure}} (22 samples, 0.03%)</title><rect x="23.8212%" y="1573" width="0.0295%" height="15" fill="rgb(219,203,20)" fg:x="17763" fg:w="22"/><text x="24.0712%" y="1583.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::drop (22 samples, 0.03%)</title><rect x="23.8212%" y="1557" width="0.0295%" height="15" fill="rgb(234,128,8)" fg:x="17763" fg:w="22"/><text x="24.0712%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (22 samples, 0.03%)</title><rect x="23.8212%" y="1541" width="0.0295%" height="15" fill="rgb(248,202,8)" fg:x="17763" fg:w="22"/><text x="24.0712%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (22 samples, 0.03%)</title><rect x="23.8212%" y="1525" width="0.0295%" height="15" fill="rgb(206,104,37)" fg:x="17763" fg:w="22"/><text x="24.0712%" y="1535.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.03%)</title><rect x="23.8212%" y="1509" width="0.0295%" height="15" fill="rgb(223,8,27)" fg:x="17763" fg:w="22"/><text x="24.0712%" y="1519.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (22 samples, 0.03%)</title><rect x="23.8212%" y="1493" width="0.0295%" height="15" fill="rgb(216,217,28)" fg:x="17763" fg:w="22"/><text x="24.0712%" y="1503.50"></text></g><g><title>alloc::alloc::dealloc (22 samples, 0.03%)</title><rect x="23.8212%" y="1477" width="0.0295%" height="15" fill="rgb(249,199,1)" fg:x="17763" fg:w="22"/><text x="24.0712%" y="1487.50"></text></g><g><title>cfree (19 samples, 0.03%)</title><rect x="23.8252%" y="1461" width="0.0255%" height="15" fill="rgb(240,85,17)" fg:x="17766" fg:w="19"/><text x="24.0752%" y="1471.50"></text></g><g><title>core::ptr::drop_in_place&lt;gmw::mul_triple::boolean::MulTriples&gt; (23 samples, 0.03%)</title><rect x="23.8212%" y="1637" width="0.0308%" height="15" fill="rgb(206,108,45)" fg:x="17763" fg:w="23"/><text x="24.0712%" y="1647.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitvec::vec::BitVec&gt; (23 samples, 0.03%)</title><rect x="23.8212%" y="1621" width="0.0308%" height="15" fill="rgb(245,210,41)" fg:x="17763" fg:w="23"/><text x="24.0712%" y="1631.50"></text></g><g><title>bitvec::vec::ops::&lt;impl core::ops::drop::Drop for bitvec::vec::BitVec&lt;T,O&gt;&gt;::drop (23 samples, 0.03%)</title><rect x="23.8212%" y="1605" width="0.0308%" height="15" fill="rgb(206,13,37)" fg:x="17763" fg:w="23"/><text x="24.0712%" y="1615.50"></text></g><g><title>&lt;gmw::protocols::boolean_gmw::BooleanGmw as gmw::protocols::Protocol&gt;::evaluate_interactive (1,355 samples, 1.82%)</title><rect x="22.0389%" y="1653" width="1.8171%" height="15" fill="rgb(250,61,18)" fg:x="16434" fg:w="1355"/><text x="22.2889%" y="1663.50">&lt;..</text></g><g><title>&lt;bitvec::vec::BitVec&lt;T&gt; as gmw::utils::BitVecExt&gt;::fast_bit_xor_mut (9 samples, 0.01%)</title><rect x="23.8896%" y="1637" width="0.0121%" height="15" fill="rgb(235,172,48)" fg:x="17814" fg:w="9"/><text x="24.1396%" y="1647.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::from_bitslice (25 samples, 0.03%)</title><rect x="23.9070%" y="1605" width="0.0335%" height="15" fill="rgb(249,201,17)" fg:x="17827" fg:w="25"/><text x="24.1570%" y="1615.50"></text></g><g><title>tap::pipe::Pipe::pipe (10 samples, 0.01%)</title><rect x="23.9272%" y="1589" width="0.0134%" height="15" fill="rgb(219,208,6)" fg:x="17842" fg:w="10"/><text x="24.1772%" y="1599.50"></text></g><g><title>core::ops::function::FnOnce::call_once (10 samples, 0.01%)</title><rect x="23.9272%" y="1573" width="0.0134%" height="15" fill="rgb(248,31,23)" fg:x="17842" fg:w="10"/><text x="24.1772%" y="1583.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (10 samples, 0.01%)</title><rect x="23.9272%" y="1557" width="0.0134%" height="15" fill="rgb(245,15,42)" fg:x="17842" fg:w="10"/><text x="24.1772%" y="1567.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (10 samples, 0.01%)</title><rect x="23.9272%" y="1541" width="0.0134%" height="15" fill="rgb(222,217,39)" fg:x="17842" fg:w="10"/><text x="24.1772%" y="1551.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 0.01%)</title><rect x="23.9272%" y="1525" width="0.0134%" height="15" fill="rgb(210,219,27)" fg:x="17842" fg:w="10"/><text x="24.1772%" y="1535.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.01%)</title><rect x="23.9272%" y="1509" width="0.0134%" height="15" fill="rgb(252,166,36)" fg:x="17842" fg:w="10"/><text x="24.1772%" y="1519.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.01%)</title><rect x="23.9298%" y="1493" width="0.0107%" height="15" fill="rgb(245,132,34)" fg:x="17844" fg:w="8"/><text x="24.1798%" y="1503.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.01%)</title><rect x="23.9298%" y="1477" width="0.0107%" height="15" fill="rgb(236,54,3)" fg:x="17844" fg:w="8"/><text x="24.1798%" y="1487.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.01%)</title><rect x="23.9298%" y="1461" width="0.0107%" height="15" fill="rgb(241,173,43)" fg:x="17844" fg:w="8"/><text x="24.1798%" y="1471.50"></text></g><g><title>&lt;gmw::mul_triple::boolean::MulTriples as gmw::protocols::SetupStorage&gt;::split_off_last (30 samples, 0.04%)</title><rect x="23.9017%" y="1637" width="0.0402%" height="15" fill="rgb(215,190,9)" fg:x="17823" fg:w="30"/><text x="24.1517%" y="1647.50"></text></g><g><title>bitvec::vec::api::&lt;impl bitvec::vec::BitVec&lt;T,O&gt;&gt;::split_off (29 samples, 0.04%)</title><rect x="23.9030%" y="1621" width="0.0389%" height="15" fill="rgb(242,101,16)" fg:x="17824" fg:w="29"/><text x="24.1530%" y="1631.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (41 samples, 0.05%)</title><rect x="23.9419%" y="1637" width="0.0550%" height="15" fill="rgb(223,190,21)" fg:x="17853" fg:w="41"/><text x="24.1919%" y="1647.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (41 samples, 0.05%)</title><rect x="23.9419%" y="1621" width="0.0550%" height="15" fill="rgb(215,228,25)" fg:x="17853" fg:w="41"/><text x="24.1919%" y="1631.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (41 samples, 0.05%)</title><rect x="23.9419%" y="1605" width="0.0550%" height="15" fill="rgb(225,36,22)" fg:x="17853" fg:w="41"/><text x="24.1919%" y="1615.50"></text></g><g><title>[libc.so.6] (41 samples, 0.05%)</title><rect x="23.9419%" y="1589" width="0.0550%" height="15" fill="rgb(251,106,46)" fg:x="17853" fg:w="41"/><text x="24.1919%" y="1599.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitvec::vec::BitVec&gt; (11 samples, 0.01%)</title><rect x="24.0183%" y="1637" width="0.0148%" height="15" fill="rgb(208,90,1)" fg:x="17910" fg:w="11"/><text x="24.2683%" y="1647.50"></text></g><g><title>bitvec::vec::ops::&lt;impl core::ops::drop::Drop for bitvec::vec::BitVec&lt;T,O&gt;&gt;::drop (11 samples, 0.01%)</title><rect x="24.0183%" y="1621" width="0.0148%" height="15" fill="rgb(243,10,4)" fg:x="17910" fg:w="11"/><text x="24.2683%" y="1631.50"></text></g><g><title>core::cmp::PartialEq::ne (9 samples, 0.01%)</title><rect x="24.0210%" y="1605" width="0.0121%" height="15" fill="rgb(212,137,27)" fg:x="17912" fg:w="9"/><text x="24.2710%" y="1615.50"></text></g><g><title>&lt;bitvec::ptr::span::BitSpan&lt;M1,T1,O&gt; as core::cmp::PartialEq&lt;bitvec::ptr::span::BitSpan&lt;M2,T2,O&gt;&gt;&gt;::eq (9 samples, 0.01%)</title><rect x="24.0210%" y="1589" width="0.0121%" height="15" fill="rgb(231,220,49)" fg:x="17912" fg:w="9"/><text x="24.2710%" y="1599.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::cloned::Cloned&lt;core::iter::adapters::flatten::Flatten&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;&gt;&gt;&gt;&gt; (12 samples, 0.02%)</title><rect x="24.0331%" y="1637" width="0.0161%" height="15" fill="rgb(237,96,20)" fg:x="17921" fg:w="12"/><text x="24.2831%" y="1647.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;&gt;&gt;&gt; (12 samples, 0.02%)</title><rect x="24.0331%" y="1621" width="0.0161%" height="15" fill="rgb(239,229,30)" fg:x="17921" fg:w="12"/><text x="24.2831%" y="1631.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlattenCompat&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;&gt;,core::slice::iter::Iter&lt;gmw::protocols::boolean_gmw::BooleanGate&gt;&gt;&gt; (12 samples, 0.02%)</title><rect x="24.0331%" y="1605" width="0.0161%" height="15" fill="rgb(219,65,33)" fg:x="17921" fg:w="12"/><text x="24.2831%" y="1615.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::fuse::Fuse&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;&gt;&gt;&gt; (12 samples, 0.02%)</title><rect x="24.0331%" y="1589" width="0.0161%" height="15" fill="rgb(243,134,7)" fg:x="17921" fg:w="12"/><text x="24.2831%" y="1599.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;&gt;&gt;&gt; (12 samples, 0.02%)</title><rect x="24.0331%" y="1573" width="0.0161%" height="15" fill="rgb(216,177,54)" fg:x="17921" fg:w="12"/><text x="24.2831%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;&gt;&gt; (12 samples, 0.02%)</title><rect x="24.0331%" y="1557" width="0.0161%" height="15" fill="rgb(211,160,20)" fg:x="17921" fg:w="12"/><text x="24.2831%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;&gt; (12 samples, 0.02%)</title><rect x="24.0331%" y="1541" width="0.0161%" height="15" fill="rgb(239,85,39)" fg:x="17921" fg:w="12"/><text x="24.2831%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;&gt; (12 samples, 0.02%)</title><rect x="24.0331%" y="1525" width="0.0161%" height="15" fill="rgb(232,125,22)" fg:x="17921" fg:w="12"/><text x="24.2831%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (12 samples, 0.02%)</title><rect x="24.0331%" y="1509" width="0.0161%" height="15" fill="rgb(244,57,34)" fg:x="17921" fg:w="12"/><text x="24.2831%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (12 samples, 0.02%)</title><rect x="24.0331%" y="1493" width="0.0161%" height="15" fill="rgb(214,203,32)" fg:x="17921" fg:w="12"/><text x="24.2831%" y="1503.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.02%)</title><rect x="24.0331%" y="1477" width="0.0161%" height="15" fill="rgb(207,58,43)" fg:x="17921" fg:w="12"/><text x="24.2831%" y="1487.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 0.02%)</title><rect x="24.0331%" y="1461" width="0.0161%" height="15" fill="rgb(215,193,15)" fg:x="17921" fg:w="12"/><text x="24.2831%" y="1471.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 0.02%)</title><rect x="24.0331%" y="1445" width="0.0161%" height="15" fill="rgb(232,15,44)" fg:x="17921" fg:w="12"/><text x="24.2831%" y="1455.50"></text></g><g><title>cfree (12 samples, 0.02%)</title><rect x="24.0331%" y="1429" width="0.0161%" height="15" fill="rgb(212,3,48)" fg:x="17921" fg:w="12"/><text x="24.2831%" y="1439.50"></text></g><g><title>[libc.so.6] (10 samples, 0.01%)</title><rect x="24.0358%" y="1413" width="0.0134%" height="15" fill="rgb(218,128,7)" fg:x="17923" fg:w="10"/><text x="24.2858%" y="1423.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlatMap&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt; (14 samples, 0.02%)</title><rect x="24.0492%" y="1637" width="0.0188%" height="15" fill="rgb(226,216,39)" fg:x="17933" fg:w="14"/><text x="24.2992%" y="1647.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlattenCompat&lt;core::iter::adapters::map::Map&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt;&gt; (14 samples, 0.02%)</title><rect x="24.0492%" y="1621" width="0.0188%" height="15" fill="rgb(243,47,51)" fg:x="17933" fg:w="14"/><text x="24.2992%" y="1631.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::fuse::Fuse&lt;core::iter::adapters::map::Map&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt;&gt; (14 samples, 0.02%)</title><rect x="24.0492%" y="1605" width="0.0188%" height="15" fill="rgb(241,183,40)" fg:x="17933" fg:w="14"/><text x="24.2992%" y="1615.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::adapters::map::Map&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt;&gt; (14 samples, 0.02%)</title><rect x="24.0492%" y="1589" width="0.0188%" height="15" fill="rgb(231,217,32)" fg:x="17933" fg:w="14"/><text x="24.2992%" y="1599.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt; (13 samples, 0.02%)</title><rect x="24.0505%" y="1573" width="0.0174%" height="15" fill="rgb(229,61,38)" fg:x="17934" fg:w="13"/><text x="24.3005%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt;&gt; (13 samples, 0.02%)</title><rect x="24.0505%" y="1557" width="0.0174%" height="15" fill="rgb(225,210,5)" fg:x="17934" fg:w="13"/><text x="24.3005%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt; (13 samples, 0.02%)</title><rect x="24.0505%" y="1541" width="0.0174%" height="15" fill="rgb(231,79,45)" fg:x="17934" fg:w="13"/><text x="24.3005%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;&gt; (13 samples, 0.02%)</title><rect x="24.0505%" y="1525" width="0.0174%" height="15" fill="rgb(224,100,7)" fg:x="17934" fg:w="13"/><text x="24.3005%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (13 samples, 0.02%)</title><rect x="24.0505%" y="1509" width="0.0174%" height="15" fill="rgb(241,198,18)" fg:x="17934" fg:w="13"/><text x="24.3005%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (13 samples, 0.02%)</title><rect x="24.0505%" y="1493" width="0.0174%" height="15" fill="rgb(252,97,53)" fg:x="17934" fg:w="13"/><text x="24.3005%" y="1503.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.02%)</title><rect x="24.0505%" y="1477" width="0.0174%" height="15" fill="rgb(220,88,7)" fg:x="17934" fg:w="13"/><text x="24.3005%" y="1487.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.02%)</title><rect x="24.0505%" y="1461" width="0.0174%" height="15" fill="rgb(213,176,14)" fg:x="17934" fg:w="13"/><text x="24.3005%" y="1471.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.02%)</title><rect x="24.0505%" y="1445" width="0.0174%" height="15" fill="rgb(246,73,7)" fg:x="17934" fg:w="13"/><text x="24.3005%" y="1455.50"></text></g><g><title>cfree (11 samples, 0.01%)</title><rect x="24.0532%" y="1429" width="0.0148%" height="15" fill="rgb(245,64,36)" fg:x="17936" fg:w="11"/><text x="24.3032%" y="1439.50"></text></g><g><title>[libc.so.6] (8 samples, 0.01%)</title><rect x="24.0572%" y="1413" width="0.0107%" height="15" fill="rgb(245,80,10)" fg:x="17939" fg:w="8"/><text x="24.3072%" y="1423.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.02%)</title><rect x="24.0680%" y="1493" width="0.0174%" height="15" fill="rgb(232,107,50)" fg:x="17947" fg:w="13"/><text x="24.3180%" y="1503.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.02%)</title><rect x="24.0680%" y="1477" width="0.0174%" height="15" fill="rgb(253,3,0)" fg:x="17947" fg:w="13"/><text x="24.3180%" y="1487.50"></text></g><g><title>cfree (12 samples, 0.02%)</title><rect x="24.0693%" y="1461" width="0.0161%" height="15" fill="rgb(212,99,53)" fg:x="17948" fg:w="12"/><text x="24.3193%" y="1471.50"></text></g><g><title>bitvec::vec::ops::&lt;impl core::ops::drop::Drop for bitvec::vec::BitVec&lt;T,O&gt;&gt;::drop::{{closure}} (14 samples, 0.02%)</title><rect x="24.0680%" y="1573" width="0.0188%" height="15" fill="rgb(249,111,54)" fg:x="17947" fg:w="14"/><text x="24.3180%" y="1583.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::drop (14 samples, 0.02%)</title><rect x="24.0680%" y="1557" width="0.0188%" height="15" fill="rgb(249,55,30)" fg:x="17947" fg:w="14"/><text x="24.3180%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (14 samples, 0.02%)</title><rect x="24.0680%" y="1541" width="0.0188%" height="15" fill="rgb(237,47,42)" fg:x="17947" fg:w="14"/><text x="24.3180%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (14 samples, 0.02%)</title><rect x="24.0680%" y="1525" width="0.0188%" height="15" fill="rgb(211,20,18)" fg:x="17947" fg:w="14"/><text x="24.3180%" y="1535.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.02%)</title><rect x="24.0680%" y="1509" width="0.0188%" height="15" fill="rgb(231,203,46)" fg:x="17947" fg:w="14"/><text x="24.3180%" y="1519.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::with_vec (15 samples, 0.02%)</title><rect x="24.0680%" y="1589" width="0.0201%" height="15" fill="rgb(237,142,3)" fg:x="17947" fg:w="15"/><text x="24.3180%" y="1599.50"></text></g><g><title>core::ptr::drop_in_place&lt;gmw::mul_triple::boolean::MulTriples&gt; (17 samples, 0.02%)</title><rect x="24.0680%" y="1637" width="0.0228%" height="15" fill="rgb(241,107,1)" fg:x="17947" fg:w="17"/><text x="24.3180%" y="1647.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitvec::vec::BitVec&gt; (17 samples, 0.02%)</title><rect x="24.0680%" y="1621" width="0.0228%" height="15" fill="rgb(229,83,13)" fg:x="17947" fg:w="17"/><text x="24.3180%" y="1631.50"></text></g><g><title>bitvec::vec::ops::&lt;impl core::ops::drop::Drop for bitvec::vec::BitVec&lt;T,O&gt;&gt;::drop (17 samples, 0.02%)</title><rect x="24.0680%" y="1605" width="0.0228%" height="15" fill="rgb(241,91,40)" fg:x="17947" fg:w="17"/><text x="24.3180%" y="1615.50"></text></g><g><title>&lt;gmw::protocols::boolean_gmw::BooleanGmw as gmw::protocols::Protocol&gt;::evaluate_interactive_simd (186 samples, 0.25%)</title><rect x="23.8561%" y="1653" width="0.2494%" height="15" fill="rgb(225,3,45)" fg:x="17789" fg:w="186"/><text x="24.1061%" y="1663.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (18 samples, 0.02%)</title><rect x="24.1082%" y="1573" width="0.0241%" height="15" fill="rgb(244,223,14)" fg:x="17977" fg:w="18"/><text x="24.3582%" y="1583.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (18 samples, 0.02%)</title><rect x="24.1082%" y="1557" width="0.0241%" height="15" fill="rgb(224,124,37)" fg:x="17977" fg:w="18"/><text x="24.3582%" y="1567.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (18 samples, 0.02%)</title><rect x="24.1082%" y="1541" width="0.0241%" height="15" fill="rgb(251,171,30)" fg:x="17977" fg:w="18"/><text x="24.3582%" y="1551.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18 samples, 0.02%)</title><rect x="24.1082%" y="1525" width="0.0241%" height="15" fill="rgb(236,46,54)" fg:x="17977" fg:w="18"/><text x="24.3582%" y="1535.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 0.02%)</title><rect x="24.1082%" y="1509" width="0.0241%" height="15" fill="rgb(245,213,5)" fg:x="17977" fg:w="18"/><text x="24.3582%" y="1519.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.02%)</title><rect x="24.1082%" y="1493" width="0.0241%" height="15" fill="rgb(230,144,27)" fg:x="17977" fg:w="18"/><text x="24.3582%" y="1503.50"></text></g><g><title>malloc (13 samples, 0.02%)</title><rect x="24.1149%" y="1477" width="0.0174%" height="15" fill="rgb(220,86,6)" fg:x="17982" fg:w="13"/><text x="24.3649%" y="1487.50"></text></g><g><title>&lt;gmw::protocols::boolean_gmw::Msg as core::clone::Clone&gt;::clone (34 samples, 0.05%)</title><rect x="24.1055%" y="1653" width="0.0456%" height="15" fill="rgb(240,20,13)" fg:x="17975" fg:w="34"/><text x="24.3555%" y="1663.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (34 samples, 0.05%)</title><rect x="24.1055%" y="1637" width="0.0456%" height="15" fill="rgb(217,89,34)" fg:x="17975" fg:w="34"/><text x="24.3555%" y="1647.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (32 samples, 0.04%)</title><rect x="24.1082%" y="1621" width="0.0429%" height="15" fill="rgb(229,13,5)" fg:x="17977" fg:w="32"/><text x="24.3582%" y="1631.50"></text></g><g><title>alloc::slice::hack::to_vec (32 samples, 0.04%)</title><rect x="24.1082%" y="1605" width="0.0429%" height="15" fill="rgb(244,67,35)" fg:x="17977" fg:w="32"/><text x="24.3582%" y="1615.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (32 samples, 0.04%)</title><rect x="24.1082%" y="1589" width="0.0429%" height="15" fill="rgb(221,40,2)" fg:x="17977" fg:w="32"/><text x="24.3582%" y="1599.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (14 samples, 0.02%)</title><rect x="24.1323%" y="1573" width="0.0188%" height="15" fill="rgb(237,157,21)" fg:x="17995" fg:w="14"/><text x="24.3823%" y="1583.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.02%)</title><rect x="24.1323%" y="1557" width="0.0188%" height="15" fill="rgb(222,94,11)" fg:x="17995" fg:w="14"/><text x="24.3823%" y="1567.50"></text></g><g><title>[libc.so.6] (14 samples, 0.02%)</title><rect x="24.1323%" y="1541" width="0.0188%" height="15" fill="rgb(249,113,6)" fg:x="17995" fg:w="14"/><text x="24.3823%" y="1551.50"></text></g><g><title>&lt;tracing_core::metadata::Level as core::cmp::PartialOrd&lt;tracing_core::metadata::LevelFilter&gt;&gt;::le (49 samples, 0.07%)</title><rect x="24.1511%" y="1653" width="0.0657%" height="15" fill="rgb(238,137,36)" fg:x="18009" fg:w="49"/><text x="24.4011%" y="1663.50"></text></g><g><title>[libc.so.6] (1,986 samples, 2.66%)</title><rect x="24.2168%" y="1653" width="2.6633%" height="15" fill="rgb(210,102,26)" fg:x="18058" fg:w="1986"/><text x="24.4668%" y="1663.50">[l..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (31 samples, 0.04%)</title><rect x="26.9030%" y="1429" width="0.0416%" height="15" fill="rgb(218,30,30)" fg:x="20061" fg:w="31"/><text x="27.1530%" y="1439.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (31 samples, 0.04%)</title><rect x="26.9030%" y="1413" width="0.0416%" height="15" fill="rgb(214,67,26)" fg:x="20061" fg:w="31"/><text x="27.1530%" y="1423.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (31 samples, 0.04%)</title><rect x="26.9030%" y="1397" width="0.0416%" height="15" fill="rgb(251,9,53)" fg:x="20061" fg:w="31"/><text x="27.1530%" y="1407.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (30 samples, 0.04%)</title><rect x="26.9043%" y="1381" width="0.0402%" height="15" fill="rgb(228,204,25)" fg:x="20062" fg:w="30"/><text x="27.1543%" y="1391.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (30 samples, 0.04%)</title><rect x="26.9043%" y="1365" width="0.0402%" height="15" fill="rgb(207,153,8)" fg:x="20062" fg:w="30"/><text x="27.1543%" y="1375.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 0.04%)</title><rect x="26.9043%" y="1349" width="0.0402%" height="15" fill="rgb(242,9,16)" fg:x="20062" fg:w="30"/><text x="27.1543%" y="1359.50"></text></g><g><title>malloc (30 samples, 0.04%)</title><rect x="26.9043%" y="1333" width="0.0402%" height="15" fill="rgb(217,211,10)" fg:x="20062" fg:w="30"/><text x="27.1543%" y="1343.50"></text></g><g><title>[libc.so.6] (20 samples, 0.03%)</title><rect x="26.9177%" y="1317" width="0.0268%" height="15" fill="rgb(219,228,52)" fg:x="20072" fg:w="20"/><text x="27.1677%" y="1327.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::clone::Clone&gt;::clone (95 samples, 0.13%)</title><rect x="26.8976%" y="1621" width="0.1274%" height="15" fill="rgb(231,92,29)" fg:x="20057" fg:w="95"/><text x="27.1476%" y="1631.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::clone::Clone&gt;::clone (95 samples, 0.13%)</title><rect x="26.8976%" y="1605" width="0.1274%" height="15" fill="rgb(232,8,23)" fg:x="20057" fg:w="95"/><text x="27.1476%" y="1615.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::clone::Clone&gt;::clone (95 samples, 0.13%)</title><rect x="26.8976%" y="1589" width="0.1274%" height="15" fill="rgb(216,211,34)" fg:x="20057" fg:w="95"/><text x="27.1476%" y="1599.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::clone::Clone&gt;::clone (95 samples, 0.13%)</title><rect x="26.8976%" y="1573" width="0.1274%" height="15" fill="rgb(236,151,0)" fg:x="20057" fg:w="95"/><text x="27.1476%" y="1583.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (92 samples, 0.12%)</title><rect x="26.9016%" y="1557" width="0.1234%" height="15" fill="rgb(209,168,3)" fg:x="20060" fg:w="92"/><text x="27.1516%" y="1567.50"></text></g><g><title>&lt;either::Either&lt;L,R&gt; as core::clone::Clone&gt;::clone (92 samples, 0.12%)</title><rect x="26.9016%" y="1541" width="0.1234%" height="15" fill="rgb(208,129,28)" fg:x="20060" fg:w="92"/><text x="27.1516%" y="1551.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::clone::Clone&gt;::clone (91 samples, 0.12%)</title><rect x="26.9030%" y="1525" width="0.1220%" height="15" fill="rgb(229,78,22)" fg:x="20061" fg:w="91"/><text x="27.1530%" y="1535.50"></text></g><g><title>&lt;gmw::circuit::static_layers::ScLayerIterator&lt;G,Idx&gt; as core::clone::Clone&gt;::clone (91 samples, 0.12%)</title><rect x="26.9030%" y="1509" width="0.1220%" height="15" fill="rgb(228,187,13)" fg:x="20061" fg:w="91"/><text x="27.1530%" y="1519.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (91 samples, 0.12%)</title><rect x="26.9030%" y="1493" width="0.1220%" height="15" fill="rgb(240,119,24)" fg:x="20061" fg:w="91"/><text x="27.1530%" y="1503.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (91 samples, 0.12%)</title><rect x="26.9030%" y="1477" width="0.1220%" height="15" fill="rgb(209,194,42)" fg:x="20061" fg:w="91"/><text x="27.1530%" y="1487.50"></text></g><g><title>alloc::slice::hack::to_vec (91 samples, 0.12%)</title><rect x="26.9030%" y="1461" width="0.1220%" height="15" fill="rgb(247,200,46)" fg:x="20061" fg:w="91"/><text x="27.1530%" y="1471.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (91 samples, 0.12%)</title><rect x="26.9030%" y="1445" width="0.1220%" height="15" fill="rgb(218,76,16)" fg:x="20061" fg:w="91"/><text x="27.1530%" y="1455.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (60 samples, 0.08%)</title><rect x="26.9445%" y="1429" width="0.0805%" height="15" fill="rgb(225,21,48)" fg:x="20092" fg:w="60"/><text x="27.1945%" y="1439.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (60 samples, 0.08%)</title><rect x="26.9445%" y="1413" width="0.0805%" height="15" fill="rgb(239,223,50)" fg:x="20092" fg:w="60"/><text x="27.1945%" y="1423.50"></text></g><g><title>[libc.so.6] (59 samples, 0.08%)</title><rect x="26.9459%" y="1397" width="0.0791%" height="15" fill="rgb(244,45,21)" fg:x="20093" fg:w="59"/><text x="27.1959%" y="1407.50"></text></g><g><title>[libc.so.6] (8 samples, 0.01%)</title><rect x="27.0424%" y="1605" width="0.0107%" height="15" fill="rgb(232,33,43)" fg:x="20165" fg:w="8"/><text x="27.2924%" y="1615.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::domain (12 samples, 0.02%)</title><rect x="27.0532%" y="1589" width="0.0161%" height="15" fill="rgb(209,8,3)" fg:x="20173" fg:w="12"/><text x="27.3032%" y="1599.50"></text></g><g><title>bitvec::domain::Domain&lt;M,T,O&gt;::new (12 samples, 0.02%)</title><rect x="27.0532%" y="1573" width="0.0161%" height="15" fill="rgb(214,25,53)" fg:x="20173" fg:w="12"/><text x="27.3032%" y="1583.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (19 samples, 0.03%)</title><rect x="27.0693%" y="1589" width="0.0255%" height="15" fill="rgb(254,186,54)" fg:x="20185" fg:w="19"/><text x="27.3193%" y="1599.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (19 samples, 0.03%)</title><rect x="27.0693%" y="1573" width="0.0255%" height="15" fill="rgb(208,174,49)" fg:x="20185" fg:w="19"/><text x="27.3193%" y="1583.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17 samples, 0.02%)</title><rect x="27.0719%" y="1557" width="0.0228%" height="15" fill="rgb(233,191,51)" fg:x="20187" fg:w="17"/><text x="27.3219%" y="1567.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (17 samples, 0.02%)</title><rect x="27.0719%" y="1541" width="0.0228%" height="15" fill="rgb(222,134,10)" fg:x="20187" fg:w="17"/><text x="27.3219%" y="1551.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::to_bitvec (36 samples, 0.05%)</title><rect x="27.0532%" y="1605" width="0.0483%" height="15" fill="rgb(230,226,20)" fg:x="20173" fg:w="36"/><text x="27.3032%" y="1615.50"></text></g><g><title>core::ops::function::FnOnce::call_once (21 samples, 0.03%)</title><rect x="27.1162%" y="1301" width="0.0282%" height="15" fill="rgb(251,111,25)" fg:x="20220" fg:w="21"/><text x="27.3662%" y="1311.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.03%)</title><rect x="27.1162%" y="1285" width="0.0282%" height="15" fill="rgb(224,40,46)" fg:x="20220" fg:w="21"/><text x="27.3662%" y="1295.50"></text></g><g><title>&lt;gmw::circuit::static_layers::ScLayerIterator&lt;G,Idx&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.03%)</title><rect x="27.1162%" y="1269" width="0.0282%" height="15" fill="rgb(236,108,47)" fg:x="20220" fg:w="21"/><text x="27.3662%" y="1279.50"></text></g><g><title>gmw::circuit::static_layers::Circuit&lt;G,Idx&gt;::get_circ (17 samples, 0.02%)</title><rect x="27.1216%" y="1253" width="0.0228%" height="15" fill="rgb(234,93,0)" fg:x="20224" fg:w="17"/><text x="27.3716%" y="1263.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (17 samples, 0.02%)</title><rect x="27.1216%" y="1237" width="0.0228%" height="15" fill="rgb(224,213,32)" fg:x="20224" fg:w="17"/><text x="27.3716%" y="1247.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (17 samples, 0.02%)</title><rect x="27.1216%" y="1221" width="0.0228%" height="15" fill="rgb(251,11,48)" fg:x="20224" fg:w="17"/><text x="27.3716%" y="1231.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (17 samples, 0.02%)</title><rect x="27.1216%" y="1205" width="0.0228%" height="15" fill="rgb(236,173,5)" fg:x="20224" fg:w="17"/><text x="27.3716%" y="1215.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (17 samples, 0.02%)</title><rect x="27.1216%" y="1189" width="0.0228%" height="15" fill="rgb(230,95,12)" fg:x="20224" fg:w="17"/><text x="27.3716%" y="1199.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (10 samples, 0.01%)</title><rect x="27.1309%" y="1173" width="0.0134%" height="15" fill="rgb(232,209,1)" fg:x="20231" fg:w="10"/><text x="27.3809%" y="1183.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (10 samples, 0.01%)</title><rect x="27.1309%" y="1157" width="0.0134%" height="15" fill="rgb(232,6,1)" fg:x="20231" fg:w="10"/><text x="27.3809%" y="1167.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (10 samples, 0.01%)</title><rect x="27.1309%" y="1141" width="0.0134%" height="15" fill="rgb(210,224,50)" fg:x="20231" fg:w="10"/><text x="27.3809%" y="1151.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.04%)</title><rect x="27.1162%" y="1349" width="0.0429%" height="15" fill="rgb(228,127,35)" fg:x="20220" fg:w="32"/><text x="27.3662%" y="1359.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (32 samples, 0.04%)</title><rect x="27.1162%" y="1333" width="0.0429%" height="15" fill="rgb(245,102,45)" fg:x="20220" fg:w="32"/><text x="27.3662%" y="1343.50"></text></g><g><title>core::iter::adapters::fuse::and_then_or_clear (32 samples, 0.04%)</title><rect x="27.1162%" y="1317" width="0.0429%" height="15" fill="rgb(214,1,49)" fg:x="20220" fg:w="32"/><text x="27.3662%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_parents_iter::{{closure}}&gt;&gt;&gt; (10 samples, 0.01%)</title><rect x="27.1457%" y="1301" width="0.0134%" height="15" fill="rgb(226,163,40)" fg:x="20242" fg:w="10"/><text x="27.3957%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_parents_iter::{{closure}}&gt;&gt; (10 samples, 0.01%)</title><rect x="27.1457%" y="1285" width="0.0134%" height="15" fill="rgb(239,212,28)" fg:x="20242" fg:w="10"/><text x="27.3957%" y="1295.50"></text></g><g><title>core::ptr::drop_in_place&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;&gt; (10 samples, 0.01%)</title><rect x="27.1457%" y="1269" width="0.0134%" height="15" fill="rgb(220,20,13)" fg:x="20242" fg:w="10"/><text x="27.3957%" y="1279.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (10 samples, 0.01%)</title><rect x="27.1457%" y="1253" width="0.0134%" height="15" fill="rgb(210,164,35)" fg:x="20242" fg:w="10"/><text x="27.3957%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (10 samples, 0.01%)</title><rect x="27.1457%" y="1237" width="0.0134%" height="15" fill="rgb(248,109,41)" fg:x="20242" fg:w="10"/><text x="27.3957%" y="1247.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.01%)</title><rect x="27.1457%" y="1221" width="0.0134%" height="15" fill="rgb(238,23,50)" fg:x="20242" fg:w="10"/><text x="27.3957%" y="1231.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (10 samples, 0.01%)</title><rect x="27.1457%" y="1205" width="0.0134%" height="15" fill="rgb(211,48,49)" fg:x="20242" fg:w="10"/><text x="27.3957%" y="1215.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.01%)</title><rect x="27.1457%" y="1189" width="0.0134%" height="15" fill="rgb(223,36,21)" fg:x="20242" fg:w="10"/><text x="27.3957%" y="1199.50"></text></g><g><title>cfree (9 samples, 0.01%)</title><rect x="27.1470%" y="1173" width="0.0121%" height="15" fill="rgb(207,123,46)" fg:x="20243" fg:w="9"/><text x="27.3970%" y="1183.50"></text></g><g><title>[libc.so.6] (8 samples, 0.01%)</title><rect x="27.1484%" y="1157" width="0.0107%" height="15" fill="rgb(240,218,32)" fg:x="20244" fg:w="8"/><text x="27.3984%" y="1167.50"></text></g><g><title>core::ops::function::FnOnce::call_once (33 samples, 0.04%)</title><rect x="27.1162%" y="1429" width="0.0443%" height="15" fill="rgb(252,5,43)" fg:x="20220" fg:w="33"/><text x="27.3662%" y="1439.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.04%)</title><rect x="27.1162%" y="1413" width="0.0443%" height="15" fill="rgb(252,84,19)" fg:x="20220" fg:w="33"/><text x="27.3662%" y="1423.50"></text></g><g><title>&lt;either::Either&lt;L,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.04%)</title><rect x="27.1162%" y="1397" width="0.0443%" height="15" fill="rgb(243,152,39)" fg:x="20220" fg:w="33"/><text x="27.3662%" y="1407.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.04%)</title><rect x="27.1162%" y="1381" width="0.0443%" height="15" fill="rgb(234,160,15)" fg:x="20220" fg:w="33"/><text x="27.3662%" y="1391.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.04%)</title><rect x="27.1162%" y="1365" width="0.0443%" height="15" fill="rgb(237,34,20)" fg:x="20220" fg:w="33"/><text x="27.3662%" y="1375.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (39 samples, 0.05%)</title><rect x="27.1108%" y="1605" width="0.0523%" height="15" fill="rgb(229,97,13)" fg:x="20216" fg:w="39"/><text x="27.3608%" y="1615.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (39 samples, 0.05%)</title><rect x="27.1108%" y="1589" width="0.0523%" height="15" fill="rgb(234,71,50)" fg:x="20216" fg:w="39"/><text x="27.3608%" y="1599.50"></text></g><g><title>&lt;itertools::groupbylazy::Chunks&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.05%)</title><rect x="27.1108%" y="1573" width="0.0523%" height="15" fill="rgb(253,155,4)" fg:x="20216" fg:w="39"/><text x="27.3608%" y="1583.50"></text></g><g><title>itertools::groupbylazy::GroupInner&lt;K,I,F&gt;::step (38 samples, 0.05%)</title><rect x="27.1122%" y="1557" width="0.0510%" height="15" fill="rgb(222,185,37)" fg:x="20217" fg:w="38"/><text x="27.3622%" y="1567.50"></text></g><g><title>itertools::groupbylazy::GroupInner&lt;K,I,F&gt;::step_current (38 samples, 0.05%)</title><rect x="27.1122%" y="1541" width="0.0510%" height="15" fill="rgb(251,177,13)" fg:x="20217" fg:w="38"/><text x="27.3622%" y="1551.50"></text></g><g><title>itertools::groupbylazy::GroupInner&lt;K,I,F&gt;::next_element (38 samples, 0.05%)</title><rect x="27.1122%" y="1525" width="0.0510%" height="15" fill="rgb(250,179,40)" fg:x="20217" fg:w="38"/><text x="27.3622%" y="1535.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.05%)</title><rect x="27.1148%" y="1509" width="0.0483%" height="15" fill="rgb(242,44,2)" fg:x="20219" fg:w="36"/><text x="27.3648%" y="1519.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.05%)</title><rect x="27.1148%" y="1493" width="0.0483%" height="15" fill="rgb(216,177,13)" fg:x="20219" fg:w="36"/><text x="27.3648%" y="1503.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.05%)</title><rect x="27.1148%" y="1477" width="0.0483%" height="15" fill="rgb(216,106,43)" fg:x="20219" fg:w="36"/><text x="27.3648%" y="1487.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (36 samples, 0.05%)</title><rect x="27.1148%" y="1461" width="0.0483%" height="15" fill="rgb(216,183,2)" fg:x="20219" fg:w="36"/><text x="27.3648%" y="1471.50"></text></g><g><title>core::iter::adapters::fuse::and_then_or_clear (36 samples, 0.05%)</title><rect x="27.1148%" y="1445" width="0.0483%" height="15" fill="rgb(249,75,3)" fg:x="20219" fg:w="36"/><text x="27.3648%" y="1455.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19 samples, 0.03%)</title><rect x="27.1631%" y="1477" width="0.0255%" height="15" fill="rgb(219,67,39)" fg:x="20255" fg:w="19"/><text x="27.4131%" y="1487.50"></text></g><g><title>alloc::alloc::dealloc (19 samples, 0.03%)</title><rect x="27.1631%" y="1461" width="0.0255%" height="15" fill="rgb(253,228,2)" fg:x="20255" fg:w="19"/><text x="27.4131%" y="1471.50"></text></g><g><title>cfree (15 samples, 0.02%)</title><rect x="27.1685%" y="1445" width="0.0201%" height="15" fill="rgb(235,138,27)" fg:x="20259" fg:w="15"/><text x="27.4185%" y="1455.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::with_vec (20 samples, 0.03%)</title><rect x="27.1631%" y="1573" width="0.0268%" height="15" fill="rgb(236,97,51)" fg:x="20255" fg:w="20"/><text x="27.4131%" y="1583.50"></text></g><g><title>bitvec::vec::ops::&lt;impl core::ops::drop::Drop for bitvec::vec::BitVec&lt;T,O&gt;&gt;::drop::{{closure}} (20 samples, 0.03%)</title><rect x="27.1631%" y="1557" width="0.0268%" height="15" fill="rgb(240,80,30)" fg:x="20255" fg:w="20"/><text x="27.4131%" y="1567.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::drop (20 samples, 0.03%)</title><rect x="27.1631%" y="1541" width="0.0268%" height="15" fill="rgb(230,178,19)" fg:x="20255" fg:w="20"/><text x="27.4131%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (20 samples, 0.03%)</title><rect x="27.1631%" y="1525" width="0.0268%" height="15" fill="rgb(210,190,27)" fg:x="20255" fg:w="20"/><text x="27.4131%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (20 samples, 0.03%)</title><rect x="27.1631%" y="1509" width="0.0268%" height="15" fill="rgb(222,107,31)" fg:x="20255" fg:w="20"/><text x="27.4131%" y="1519.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.03%)</title><rect x="27.1631%" y="1493" width="0.0268%" height="15" fill="rgb(216,127,34)" fg:x="20255" fg:w="20"/><text x="27.4131%" y="1503.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitvec::vec::BitVec&gt; (22 samples, 0.03%)</title><rect x="27.1631%" y="1605" width="0.0295%" height="15" fill="rgb(234,116,52)" fg:x="20255" fg:w="22"/><text x="27.4131%" y="1615.50"></text></g><g><title>bitvec::vec::ops::&lt;impl core::ops::drop::Drop for bitvec::vec::BitVec&lt;T,O&gt;&gt;::drop (22 samples, 0.03%)</title><rect x="27.1631%" y="1589" width="0.0295%" height="15" fill="rgb(222,124,15)" fg:x="20255" fg:w="22"/><text x="27.4131%" y="1599.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::cloned::Cloned&lt;core::iter::adapters::flatten::Flatten&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;&gt;&gt;&gt;&gt; (18 samples, 0.02%)</title><rect x="27.1926%" y="1605" width="0.0241%" height="15" fill="rgb(231,179,28)" fg:x="20277" fg:w="18"/><text x="27.4426%" y="1615.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;&gt;&gt;&gt; (18 samples, 0.02%)</title><rect x="27.1926%" y="1589" width="0.0241%" height="15" fill="rgb(226,93,45)" fg:x="20277" fg:w="18"/><text x="27.4426%" y="1599.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlattenCompat&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;&gt;,core::slice::iter::Iter&lt;gmw::protocols::boolean_gmw::BooleanGate&gt;&gt;&gt; (18 samples, 0.02%)</title><rect x="27.1926%" y="1573" width="0.0241%" height="15" fill="rgb(215,8,51)" fg:x="20277" fg:w="18"/><text x="27.4426%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::fuse::Fuse&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;&gt;&gt;&gt; (18 samples, 0.02%)</title><rect x="27.1926%" y="1557" width="0.0241%" height="15" fill="rgb(223,106,5)" fg:x="20277" fg:w="18"/><text x="27.4426%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;&gt;&gt;&gt; (18 samples, 0.02%)</title><rect x="27.1926%" y="1541" width="0.0241%" height="15" fill="rgb(250,191,5)" fg:x="20277" fg:w="18"/><text x="27.4426%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;&gt;&gt; (18 samples, 0.02%)</title><rect x="27.1926%" y="1525" width="0.0241%" height="15" fill="rgb(242,132,44)" fg:x="20277" fg:w="18"/><text x="27.4426%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_gates::{{closure}}&gt;&gt; (18 samples, 0.02%)</title><rect x="27.1926%" y="1509" width="0.0241%" height="15" fill="rgb(251,152,29)" fg:x="20277" fg:w="18"/><text x="27.4426%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;&gt; (18 samples, 0.02%)</title><rect x="27.1926%" y="1493" width="0.0241%" height="15" fill="rgb(218,179,5)" fg:x="20277" fg:w="18"/><text x="27.4426%" y="1503.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (18 samples, 0.02%)</title><rect x="27.1926%" y="1477" width="0.0241%" height="15" fill="rgb(227,67,19)" fg:x="20277" fg:w="18"/><text x="27.4426%" y="1487.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (18 samples, 0.02%)</title><rect x="27.1926%" y="1461" width="0.0241%" height="15" fill="rgb(233,119,31)" fg:x="20277" fg:w="18"/><text x="27.4426%" y="1471.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.02%)</title><rect x="27.1926%" y="1445" width="0.0241%" height="15" fill="rgb(241,120,22)" fg:x="20277" fg:w="18"/><text x="27.4426%" y="1455.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 0.02%)</title><rect x="27.1926%" y="1429" width="0.0241%" height="15" fill="rgb(224,102,30)" fg:x="20277" fg:w="18"/><text x="27.4426%" y="1439.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 0.02%)</title><rect x="27.1926%" y="1413" width="0.0241%" height="15" fill="rgb(210,164,37)" fg:x="20277" fg:w="18"/><text x="27.4426%" y="1423.50"></text></g><g><title>cfree (16 samples, 0.02%)</title><rect x="27.1953%" y="1397" width="0.0215%" height="15" fill="rgb(226,191,16)" fg:x="20279" fg:w="16"/><text x="27.4453%" y="1407.50"></text></g><g><title>[libc.so.6] (14 samples, 0.02%)</title><rect x="27.1980%" y="1381" width="0.0188%" height="15" fill="rgb(214,40,45)" fg:x="20281" fg:w="14"/><text x="27.4480%" y="1391.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlatMap&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt; (14 samples, 0.02%)</title><rect x="27.2168%" y="1605" width="0.0188%" height="15" fill="rgb(244,29,26)" fg:x="20295" fg:w="14"/><text x="27.4668%" y="1615.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlattenCompat&lt;core::iter::adapters::map::Map&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;gmw::circuit::base_circuit::GateId&lt;usize&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt;&gt; (14 samples, 0.02%)</title><rect x="27.2168%" y="1589" width="0.0188%" height="15" fill="rgb(216,16,5)" fg:x="20295" fg:w="14"/><text x="27.4668%" y="1599.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::fuse::Fuse&lt;core::iter::adapters::map::Map&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt;&gt; (14 samples, 0.02%)</title><rect x="27.2168%" y="1573" width="0.0188%" height="15" fill="rgb(249,76,35)" fg:x="20295" fg:w="14"/><text x="27.4668%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::adapters::map::Map&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt;&gt; (14 samples, 0.02%)</title><rect x="27.2168%" y="1557" width="0.0188%" height="15" fill="rgb(207,11,44)" fg:x="20295" fg:w="14"/><text x="27.4668%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt;,gmw::executor::Executor&lt;gmw::protocols::boolean_gmw::BooleanGmw,usize&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}&gt;&gt; (14 samples, 0.02%)</title><rect x="27.2168%" y="1541" width="0.0188%" height="15" fill="rgb(228,190,49)" fg:x="20295" fg:w="14"/><text x="27.4668%" y="1551.50"></text></g><g><title>core::ptr::drop_in_place&lt;either::Either&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;(u32,core::option::Option&lt;core::num::nonzero::NonZeroUsize&gt;,gmw::circuit::base_circuit::CircuitLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;)&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;,core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt;&gt; (14 samples, 0.02%)</title><rect x="27.2168%" y="1525" width="0.0188%" height="15" fill="rgb(214,173,12)" fg:x="20295" fg:w="14"/><text x="27.4668%" y="1535.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_indices::{{closure}}&gt;&gt; (14 samples, 0.02%)</title><rect x="27.2168%" y="1509" width="0.0188%" height="15" fill="rgb(218,26,35)" fg:x="20295" fg:w="14"/><text x="27.4668%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;&gt; (14 samples, 0.02%)</title><rect x="27.2168%" y="1493" width="0.0188%" height="15" fill="rgb(220,200,19)" fg:x="20295" fg:w="14"/><text x="27.4668%" y="1503.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (14 samples, 0.02%)</title><rect x="27.2168%" y="1477" width="0.0188%" height="15" fill="rgb(239,95,49)" fg:x="20295" fg:w="14"/><text x="27.4668%" y="1487.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (14 samples, 0.02%)</title><rect x="27.2168%" y="1461" width="0.0188%" height="15" fill="rgb(235,85,53)" fg:x="20295" fg:w="14"/><text x="27.4668%" y="1471.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.02%)</title><rect x="27.2168%" y="1445" width="0.0188%" height="15" fill="rgb(233,133,31)" fg:x="20295" fg:w="14"/><text x="27.4668%" y="1455.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.02%)</title><rect x="27.2168%" y="1429" width="0.0188%" height="15" fill="rgb(218,25,20)" fg:x="20295" fg:w="14"/><text x="27.4668%" y="1439.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.02%)</title><rect x="27.2168%" y="1413" width="0.0188%" height="15" fill="rgb(252,210,38)" fg:x="20295" fg:w="14"/><text x="27.4668%" y="1423.50"></text></g><g><title>cfree (14 samples, 0.02%)</title><rect x="27.2168%" y="1397" width="0.0188%" height="15" fill="rgb(242,134,21)" fg:x="20295" fg:w="14"/><text x="27.4668%" y="1407.50"></text></g><g><title>[libc.so.6] (14 samples, 0.02%)</title><rect x="27.2168%" y="1381" width="0.0188%" height="15" fill="rgb(213,28,48)" fg:x="20295" fg:w="14"/><text x="27.4668%" y="1391.50"></text></g><g><title>&lt;gmw::protocols::boolean_gmw::BooleanGmw as gmw::protocols::Protocol&gt;::compute_msg_simd (179 samples, 0.24%)</title><rect x="27.0250%" y="1621" width="0.2400%" height="15" fill="rgb(250,196,2)" fg:x="20152" fg:w="179"/><text x="27.2750%" y="1631.50"></text></g><g><title>[libc.so.6] (12 samples, 0.02%)</title><rect x="27.2650%" y="1621" width="0.0161%" height="15" fill="rgb(227,5,17)" fg:x="20331" fg:w="12"/><text x="27.5150%" y="1631.50"></text></g><g><title>core::iter::traits::iterator::Iterator::flat_map (10 samples, 0.01%)</title><rect x="27.2811%" y="1621" width="0.0134%" height="15" fill="rgb(221,226,24)" fg:x="20343" fg:w="10"/><text x="27.5311%" y="1631.50"></text></g><g><title>core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt;::new (10 samples, 0.01%)</title><rect x="27.2811%" y="1605" width="0.0134%" height="15" fill="rgb(211,5,48)" fg:x="20343" fg:w="10"/><text x="27.5311%" y="1615.50"></text></g><g><title>core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::new (10 samples, 0.01%)</title><rect x="27.2811%" y="1589" width="0.0134%" height="15" fill="rgb(219,150,6)" fg:x="20343" fg:w="10"/><text x="27.5311%" y="1599.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fuse (10 samples, 0.01%)</title><rect x="27.2811%" y="1573" width="0.0134%" height="15" fill="rgb(251,46,16)" fg:x="20343" fg:w="10"/><text x="27.5311%" y="1583.50"></text></g><g><title>[libc.so.6] (10 samples, 0.01%)</title><rect x="27.2811%" y="1557" width="0.0134%" height="15" fill="rgb(220,204,40)" fg:x="20343" fg:w="10"/><text x="27.5311%" y="1567.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17 samples, 0.02%)</title><rect x="27.2945%" y="1525" width="0.0228%" height="15" fill="rgb(211,85,2)" fg:x="20353" fg:w="17"/><text x="27.5445%" y="1535.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.02%)</title><rect x="27.2945%" y="1509" width="0.0228%" height="15" fill="rgb(229,17,7)" fg:x="20353" fg:w="17"/><text x="27.5445%" y="1519.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (17 samples, 0.02%)</title><rect x="27.2945%" y="1493" width="0.0228%" height="15" fill="rgb(239,72,28)" fg:x="20353" fg:w="17"/><text x="27.5445%" y="1503.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.02%)</title><rect x="27.2945%" y="1477" width="0.0228%" height="15" fill="rgb(230,47,54)" fg:x="20353" fg:w="17"/><text x="27.5445%" y="1487.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.02%)</title><rect x="27.2945%" y="1461" width="0.0228%" height="15" fill="rgb(214,50,8)" fg:x="20353" fg:w="17"/><text x="27.5445%" y="1471.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.02%)</title><rect x="27.2945%" y="1445" width="0.0228%" height="15" fill="rgb(216,198,43)" fg:x="20353" fg:w="17"/><text x="27.5445%" y="1455.50"></text></g><g><title>malloc (17 samples, 0.02%)</title><rect x="27.2945%" y="1429" width="0.0228%" height="15" fill="rgb(234,20,35)" fg:x="20353" fg:w="17"/><text x="27.5445%" y="1439.50"></text></g><g><title>gmw::circuit::ExecutableLayer&lt;G,Idx&gt;::interactive_indices (59 samples, 0.08%)</title><rect x="27.2945%" y="1621" width="0.0791%" height="15" fill="rgb(254,45,19)" fg:x="20353" fg:w="59"/><text x="27.5445%" y="1631.50"></text></g><g><title>&lt;gmw::circuit::static_layers::ScLayerIterator&lt;G,Idx&gt; as core::clone::Clone&gt;::clone (59 samples, 0.08%)</title><rect x="27.2945%" y="1605" width="0.0791%" height="15" fill="rgb(219,14,44)" fg:x="20353" fg:w="59"/><text x="27.5445%" y="1615.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (59 samples, 0.08%)</title><rect x="27.2945%" y="1589" width="0.0791%" height="15" fill="rgb(217,220,26)" fg:x="20353" fg:w="59"/><text x="27.5445%" y="1599.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (59 samples, 0.08%)</title><rect x="27.2945%" y="1573" width="0.0791%" height="15" fill="rgb(213,158,28)" fg:x="20353" fg:w="59"/><text x="27.5445%" y="1583.50"></text></g><g><title>alloc::slice::hack::to_vec (59 samples, 0.08%)</title><rect x="27.2945%" y="1557" width="0.0791%" height="15" fill="rgb(252,51,52)" fg:x="20353" fg:w="59"/><text x="27.5445%" y="1567.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (59 samples, 0.08%)</title><rect x="27.2945%" y="1541" width="0.0791%" height="15" fill="rgb(246,89,16)" fg:x="20353" fg:w="59"/><text x="27.5445%" y="1551.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (42 samples, 0.06%)</title><rect x="27.3173%" y="1525" width="0.0563%" height="15" fill="rgb(216,158,49)" fg:x="20370" fg:w="42"/><text x="27.5673%" y="1535.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (42 samples, 0.06%)</title><rect x="27.3173%" y="1509" width="0.0563%" height="15" fill="rgb(236,107,19)" fg:x="20370" fg:w="42"/><text x="27.5673%" y="1519.50"></text></g><g><title>[libc.so.6] (41 samples, 0.05%)</title><rect x="27.3187%" y="1493" width="0.0550%" height="15" fill="rgb(228,185,30)" fg:x="20371" fg:w="41"/><text x="27.5687%" y="1503.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16 samples, 0.02%)</title><rect x="27.3804%" y="1525" width="0.0215%" height="15" fill="rgb(246,134,8)" fg:x="20417" fg:w="16"/><text x="27.6304%" y="1535.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.02%)</title><rect x="27.3804%" y="1509" width="0.0215%" height="15" fill="rgb(214,143,50)" fg:x="20417" fg:w="16"/><text x="27.6304%" y="1519.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.02%)</title><rect x="27.3804%" y="1493" width="0.0215%" height="15" fill="rgb(228,75,8)" fg:x="20417" fg:w="16"/><text x="27.6304%" y="1503.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.02%)</title><rect x="27.3831%" y="1477" width="0.0188%" height="15" fill="rgb(207,175,4)" fg:x="20419" fg:w="14"/><text x="27.6331%" y="1487.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.02%)</title><rect x="27.3831%" y="1461" width="0.0188%" height="15" fill="rgb(205,108,24)" fg:x="20419" fg:w="14"/><text x="27.6331%" y="1471.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.02%)</title><rect x="27.3831%" y="1445" width="0.0188%" height="15" fill="rgb(244,120,49)" fg:x="20419" fg:w="14"/><text x="27.6331%" y="1455.50"></text></g><g><title>malloc (12 samples, 0.02%)</title><rect x="27.3857%" y="1429" width="0.0161%" height="15" fill="rgb(223,47,38)" fg:x="20421" fg:w="12"/><text x="27.6357%" y="1439.50"></text></g><g><title>core::bool::&lt;impl bool&gt;::then (427 samples, 0.57%)</title><rect x="26.8869%" y="1653" width="0.5726%" height="15" fill="rgb(229,179,11)" fg:x="20049" fg:w="427"/><text x="27.1369%" y="1663.50"></text></g><g><title>gmw::executor::Executor&lt;P,Idx&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}} (425 samples, 0.57%)</title><rect x="26.8896%" y="1637" width="0.5699%" height="15" fill="rgb(231,122,1)" fg:x="20051" fg:w="425"/><text x="27.1396%" y="1647.50"></text></g><g><title>gmw::circuit::ExecutableLayer&lt;G,Idx&gt;::interactive_parents_iter (64 samples, 0.09%)</title><rect x="27.3737%" y="1621" width="0.0858%" height="15" fill="rgb(245,119,9)" fg:x="20412" fg:w="64"/><text x="27.6237%" y="1631.50"></text></g><g><title>&lt;gmw::circuit::static_layers::ScLayerIterator&lt;G,Idx&gt; as core::clone::Clone&gt;::clone (59 samples, 0.08%)</title><rect x="27.3804%" y="1605" width="0.0791%" height="15" fill="rgb(241,163,25)" fg:x="20417" fg:w="59"/><text x="27.6304%" y="1615.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (59 samples, 0.08%)</title><rect x="27.3804%" y="1589" width="0.0791%" height="15" fill="rgb(217,214,3)" fg:x="20417" fg:w="59"/><text x="27.6304%" y="1599.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (59 samples, 0.08%)</title><rect x="27.3804%" y="1573" width="0.0791%" height="15" fill="rgb(240,86,28)" fg:x="20417" fg:w="59"/><text x="27.6304%" y="1583.50"></text></g><g><title>alloc::slice::hack::to_vec (59 samples, 0.08%)</title><rect x="27.3804%" y="1557" width="0.0791%" height="15" fill="rgb(215,47,9)" fg:x="20417" fg:w="59"/><text x="27.6304%" y="1567.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (59 samples, 0.08%)</title><rect x="27.3804%" y="1541" width="0.0791%" height="15" fill="rgb(252,25,45)" fg:x="20417" fg:w="59"/><text x="27.6304%" y="1551.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (43 samples, 0.06%)</title><rect x="27.4018%" y="1525" width="0.0577%" height="15" fill="rgb(251,164,9)" fg:x="20433" fg:w="43"/><text x="27.6518%" y="1535.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (43 samples, 0.06%)</title><rect x="27.4018%" y="1509" width="0.0577%" height="15" fill="rgb(233,194,0)" fg:x="20433" fg:w="43"/><text x="27.6518%" y="1519.50"></text></g><g><title>[libc.so.6] (43 samples, 0.06%)</title><rect x="27.4018%" y="1493" width="0.0577%" height="15" fill="rgb(249,111,24)" fg:x="20433" fg:w="43"/><text x="27.6518%" y="1503.50"></text></g><g><title>core::iter::traits::iterator::Iterator::flat_map (8 samples, 0.01%)</title><rect x="27.4689%" y="1653" width="0.0107%" height="15" fill="rgb(250,223,3)" fg:x="20483" fg:w="8"/><text x="27.7189%" y="1663.50"></text></g><g><title>core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt;::new (8 samples, 0.01%)</title><rect x="27.4689%" y="1637" width="0.0107%" height="15" fill="rgb(236,178,37)" fg:x="20483" fg:w="8"/><text x="27.7189%" y="1647.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (16 samples, 0.02%)</title><rect x="27.5346%" y="1573" width="0.0215%" height="15" fill="rgb(241,158,50)" fg:x="20532" fg:w="16"/><text x="27.7846%" y="1583.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (16 samples, 0.02%)</title><rect x="27.5346%" y="1557" width="0.0215%" height="15" fill="rgb(213,121,41)" fg:x="20532" fg:w="16"/><text x="27.7846%" y="1567.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::read (17 samples, 0.02%)</title><rect x="27.5614%" y="1541" width="0.0228%" height="15" fill="rgb(240,92,3)" fg:x="20552" fg:w="17"/><text x="27.8114%" y="1551.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::address (10 samples, 0.01%)</title><rect x="27.5842%" y="1509" width="0.0134%" height="15" fill="rgb(205,123,3)" fg:x="20569" fg:w="10"/><text x="27.8342%" y="1519.50"></text></g><g><title>&lt;bitvec::boxed::iter::IntoIter&lt;T,O&gt; as core::iter::traits::iterator::Iterator&gt;::next (63 samples, 0.08%)</title><rect x="27.5279%" y="1589" width="0.0845%" height="15" fill="rgb(205,97,47)" fg:x="20527" fg:w="63"/><text x="27.7779%" y="1599.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (42 samples, 0.06%)</title><rect x="27.5561%" y="1573" width="0.0563%" height="15" fill="rgb(247,152,14)" fg:x="20548" fg:w="42"/><text x="27.8061%" y="1583.50"></text></g><g><title>&lt;bitvec::boxed::iter::IntoIter&lt;T,O&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (42 samples, 0.06%)</title><rect x="27.5561%" y="1557" width="0.0563%" height="15" fill="rgb(248,195,53)" fg:x="20548" fg:w="42"/><text x="27.8061%" y="1567.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::as_bitptr (21 samples, 0.03%)</title><rect x="27.5842%" y="1541" width="0.0282%" height="15" fill="rgb(226,201,16)" fg:x="20569" fg:w="21"/><text x="27.8342%" y="1551.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::to_bitptr (21 samples, 0.03%)</title><rect x="27.5842%" y="1525" width="0.0282%" height="15" fill="rgb(205,98,0)" fg:x="20569" fg:w="21"/><text x="27.8342%" y="1535.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::head (11 samples, 0.01%)</title><rect x="27.5976%" y="1509" width="0.0148%" height="15" fill="rgb(214,191,48)" fg:x="20579" fg:w="11"/><text x="27.8476%" y="1519.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (11 samples, 0.01%)</title><rect x="27.6781%" y="1333" width="0.0148%" height="15" fill="rgb(237,112,39)" fg:x="20639" fg:w="11"/><text x="27.9281%" y="1343.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (11 samples, 0.01%)</title><rect x="27.6781%" y="1317" width="0.0148%" height="15" fill="rgb(247,203,27)" fg:x="20639" fg:w="11"/><text x="27.9281%" y="1327.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (11 samples, 0.01%)</title><rect x="27.6781%" y="1301" width="0.0148%" height="15" fill="rgb(235,124,28)" fg:x="20639" fg:w="11"/><text x="27.9281%" y="1311.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (11 samples, 0.01%)</title><rect x="27.6781%" y="1285" width="0.0148%" height="15" fill="rgb(208,207,46)" fg:x="20639" fg:w="11"/><text x="27.9281%" y="1295.50"></text></g><g><title>hashbrown::map::make_hash (27 samples, 0.04%)</title><rect x="27.6687%" y="1365" width="0.0362%" height="15" fill="rgb(234,176,4)" fg:x="20632" fg:w="27"/><text x="27.9187%" y="1375.50"></text></g><g><title>core::hash::BuildHasher::hash_one (27 samples, 0.04%)</title><rect x="27.6687%" y="1349" width="0.0362%" height="15" fill="rgb(230,133,28)" fg:x="20632" fg:w="27"/><text x="27.9187%" y="1359.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (9 samples, 0.01%)</title><rect x="27.6928%" y="1333" width="0.0121%" height="15" fill="rgb(211,137,40)" fg:x="20650" fg:w="9"/><text x="27.9428%" y="1343.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (9 samples, 0.01%)</title><rect x="27.6928%" y="1317" width="0.0121%" height="15" fill="rgb(254,35,13)" fg:x="20650" fg:w="9"/><text x="27.9428%" y="1327.50"></text></g><g><title>core::hash::Hasher::write_u32 (9 samples, 0.01%)</title><rect x="27.6928%" y="1301" width="0.0121%" height="15" fill="rgb(225,49,51)" fg:x="20650" fg:w="9"/><text x="27.9428%" y="1311.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.01%)</title><rect x="27.6928%" y="1285" width="0.0121%" height="15" fill="rgb(251,10,15)" fg:x="20650" fg:w="9"/><text x="27.9428%" y="1295.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (9 samples, 0.01%)</title><rect x="27.6928%" y="1269" width="0.0121%" height="15" fill="rgb(228,207,15)" fg:x="20650" fg:w="9"/><text x="27.9428%" y="1279.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.01%)</title><rect x="27.6928%" y="1253" width="0.0121%" height="15" fill="rgb(241,99,19)" fg:x="20650" fg:w="9"/><text x="27.9428%" y="1263.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (10 samples, 0.01%)</title><rect x="27.7183%" y="1317" width="0.0134%" height="15" fill="rgb(207,104,49)" fg:x="20669" fg:w="10"/><text x="27.9683%" y="1327.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (10 samples, 0.01%)</title><rect x="27.7183%" y="1301" width="0.0134%" height="15" fill="rgb(234,99,18)" fg:x="20669" fg:w="10"/><text x="27.9683%" y="1311.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.01%)</title><rect x="27.7183%" y="1285" width="0.0134%" height="15" fill="rgb(213,191,49)" fg:x="20669" fg:w="10"/><text x="27.9683%" y="1295.50"></text></g><g><title>&lt;gmw::circuit::static_layers::ScLayerIterator&lt;G,Idx&gt; as core::iter::traits::iterator::Iterator&gt;::next (74 samples, 0.10%)</title><rect x="27.6338%" y="1461" width="0.0992%" height="15" fill="rgb(210,226,19)" fg:x="20606" fg:w="74"/><text x="27.8838%" y="1471.50"></text></g><g><title>gmw::circuit::static_layers::Circuit&lt;G,Idx&gt;::get_circ (55 samples, 0.07%)</title><rect x="27.6593%" y="1445" width="0.0738%" height="15" fill="rgb(229,97,18)" fg:x="20625" fg:w="55"/><text x="27.9093%" y="1455.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (53 samples, 0.07%)</title><rect x="27.6620%" y="1429" width="0.0711%" height="15" fill="rgb(211,167,15)" fg:x="20627" fg:w="53"/><text x="27.9120%" y="1439.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (53 samples, 0.07%)</title><rect x="27.6620%" y="1413" width="0.0711%" height="15" fill="rgb(210,169,34)" fg:x="20627" fg:w="53"/><text x="27.9120%" y="1423.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (53 samples, 0.07%)</title><rect x="27.6620%" y="1397" width="0.0711%" height="15" fill="rgb(241,121,31)" fg:x="20627" fg:w="53"/><text x="27.9120%" y="1407.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (53 samples, 0.07%)</title><rect x="27.6620%" y="1381" width="0.0711%" height="15" fill="rgb(232,40,11)" fg:x="20627" fg:w="53"/><text x="27.9120%" y="1391.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (21 samples, 0.03%)</title><rect x="27.7049%" y="1365" width="0.0282%" height="15" fill="rgb(205,86,26)" fg:x="20659" fg:w="21"/><text x="27.9549%" y="1375.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (21 samples, 0.03%)</title><rect x="27.7049%" y="1349" width="0.0282%" height="15" fill="rgb(231,126,28)" fg:x="20659" fg:w="21"/><text x="27.9549%" y="1359.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (21 samples, 0.03%)</title><rect x="27.7049%" y="1333" width="0.0282%" height="15" fill="rgb(219,221,18)" fg:x="20659" fg:w="21"/><text x="27.9549%" y="1343.50"></text></g><g><title>core::ops::function::FnOnce::call_once (87 samples, 0.12%)</title><rect x="27.6338%" y="1493" width="0.1167%" height="15" fill="rgb(211,40,0)" fg:x="20606" fg:w="87"/><text x="27.8838%" y="1503.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (87 samples, 0.12%)</title><rect x="27.6338%" y="1477" width="0.1167%" height="15" fill="rgb(239,85,43)" fg:x="20606" fg:w="87"/><text x="27.8838%" y="1487.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (13 samples, 0.02%)</title><rect x="27.7331%" y="1461" width="0.0174%" height="15" fill="rgb(231,55,21)" fg:x="20680" fg:w="13"/><text x="27.9831%" y="1471.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (13 samples, 0.02%)</title><rect x="27.7331%" y="1445" width="0.0174%" height="15" fill="rgb(225,184,43)" fg:x="20680" fg:w="13"/><text x="27.9831%" y="1455.50"></text></g><g><title>gmw::circuit::ExecutableLayer&lt;G,Idx&gt;::interactive_iter::{{closure}} (13 samples, 0.02%)</title><rect x="27.7331%" y="1429" width="0.0174%" height="15" fill="rgb(251,158,41)" fg:x="20680" fg:w="13"/><text x="27.9831%" y="1439.50"></text></g><g><title>gmw::circuit::static_layers::ExecutableScLayer&lt;G,Idx&gt;::interactive_iter (13 samples, 0.02%)</title><rect x="27.7331%" y="1413" width="0.0174%" height="15" fill="rgb(234,159,37)" fg:x="20680" fg:w="13"/><text x="27.9831%" y="1423.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (112 samples, 0.15%)</title><rect x="27.6338%" y="1541" width="0.1502%" height="15" fill="rgb(216,204,22)" fg:x="20606" fg:w="112"/><text x="27.8838%" y="1551.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (112 samples, 0.15%)</title><rect x="27.6338%" y="1525" width="0.1502%" height="15" fill="rgb(214,17,3)" fg:x="20606" fg:w="112"/><text x="27.8838%" y="1535.50"></text></g><g><title>core::iter::adapters::fuse::and_then_or_clear (112 samples, 0.15%)</title><rect x="27.6338%" y="1509" width="0.1502%" height="15" fill="rgb(212,111,17)" fg:x="20606" fg:w="112"/><text x="27.8838%" y="1519.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_iter::{{closure}}&gt;&gt;&gt; (24 samples, 0.03%)</title><rect x="27.7519%" y="1493" width="0.0322%" height="15" fill="rgb(221,157,24)" fg:x="20694" fg:w="24"/><text x="28.0019%" y="1503.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;,gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;::interactive_iter::{{closure}}&gt;&gt; (24 samples, 0.03%)</title><rect x="27.7519%" y="1477" width="0.0322%" height="15" fill="rgb(252,16,13)" fg:x="20694" fg:w="24"/><text x="28.0019%" y="1487.50"></text></g><g><title>core::ptr::drop_in_place&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;&gt; (24 samples, 0.03%)</title><rect x="27.7519%" y="1461" width="0.0322%" height="15" fill="rgb(221,62,2)" fg:x="20694" fg:w="24"/><text x="28.0019%" y="1471.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (24 samples, 0.03%)</title><rect x="27.7519%" y="1445" width="0.0322%" height="15" fill="rgb(247,87,22)" fg:x="20694" fg:w="24"/><text x="28.0019%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (24 samples, 0.03%)</title><rect x="27.7519%" y="1429" width="0.0322%" height="15" fill="rgb(215,73,9)" fg:x="20694" fg:w="24"/><text x="28.0019%" y="1439.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.03%)</title><rect x="27.7519%" y="1413" width="0.0322%" height="15" fill="rgb(207,175,33)" fg:x="20694" fg:w="24"/><text x="28.0019%" y="1423.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (24 samples, 0.03%)</title><rect x="27.7519%" y="1397" width="0.0322%" height="15" fill="rgb(243,129,54)" fg:x="20694" fg:w="24"/><text x="28.0019%" y="1407.50"></text></g><g><title>alloc::alloc::dealloc (24 samples, 0.03%)</title><rect x="27.7519%" y="1381" width="0.0322%" height="15" fill="rgb(227,119,45)" fg:x="20694" fg:w="24"/><text x="28.0019%" y="1391.50"></text></g><g><title>cfree (24 samples, 0.03%)</title><rect x="27.7519%" y="1365" width="0.0322%" height="15" fill="rgb(205,109,36)" fg:x="20694" fg:w="24"/><text x="28.0019%" y="1375.50"></text></g><g><title>[libc.so.6] (16 samples, 0.02%)</title><rect x="27.7626%" y="1349" width="0.0215%" height="15" fill="rgb(205,6,39)" fg:x="20702" fg:w="16"/><text x="28.0126%" y="1359.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (63 samples, 0.08%)</title><rect x="27.8430%" y="1493" width="0.0845%" height="15" fill="rgb(221,32,16)" fg:x="20762" fg:w="63"/><text x="28.0930%" y="1503.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (63 samples, 0.08%)</title><rect x="27.8430%" y="1477" width="0.0845%" height="15" fill="rgb(228,144,50)" fg:x="20762" fg:w="63"/><text x="28.0930%" y="1487.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (25 samples, 0.03%)</title><rect x="27.8940%" y="1461" width="0.0335%" height="15" fill="rgb(229,201,53)" fg:x="20800" fg:w="25"/><text x="28.1440%" y="1471.50"></text></g><g><title>core::ops::function::FnOnce::call_once (72 samples, 0.10%)</title><rect x="27.8430%" y="1525" width="0.0966%" height="15" fill="rgb(249,153,27)" fg:x="20762" fg:w="72"/><text x="28.0930%" y="1535.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (72 samples, 0.10%)</title><rect x="27.8430%" y="1509" width="0.0966%" height="15" fill="rgb(227,106,25)" fg:x="20762" fg:w="72"/><text x="28.0930%" y="1519.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (9 samples, 0.01%)</title><rect x="27.9275%" y="1493" width="0.0121%" height="15" fill="rgb(230,65,29)" fg:x="20825" fg:w="9"/><text x="28.1775%" y="1503.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (334 samples, 0.45%)</title><rect x="27.4957%" y="1621" width="0.4479%" height="15" fill="rgb(221,57,46)" fg:x="20503" fg:w="334"/><text x="27.7457%" y="1631.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (334 samples, 0.45%)</title><rect x="27.4957%" y="1605" width="0.4479%" height="15" fill="rgb(229,161,17)" fg:x="20503" fg:w="334"/><text x="27.7457%" y="1615.50"></text></g><g><title>&lt;either::Either&lt;L,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (244 samples, 0.33%)</title><rect x="27.6164%" y="1589" width="0.3272%" height="15" fill="rgb(222,213,11)" fg:x="20593" fg:w="244"/><text x="27.8664%" y="1599.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (233 samples, 0.31%)</title><rect x="27.6312%" y="1573" width="0.3125%" height="15" fill="rgb(235,35,13)" fg:x="20604" fg:w="233"/><text x="27.8812%" y="1583.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (233 samples, 0.31%)</title><rect x="27.6312%" y="1557" width="0.3125%" height="15" fill="rgb(233,158,34)" fg:x="20604" fg:w="233"/><text x="27.8812%" y="1567.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (119 samples, 0.16%)</title><rect x="27.7840%" y="1541" width="0.1596%" height="15" fill="rgb(215,151,48)" fg:x="20718" fg:w="119"/><text x="28.0340%" y="1551.50"></text></g><g><title>cfree (14 samples, 0.02%)</title><rect x="27.9450%" y="1621" width="0.0188%" height="15" fill="rgb(229,84,14)" fg:x="20838" fg:w="14"/><text x="28.1950%" y="1631.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (13 samples, 0.02%)</title><rect x="28.0227%" y="1573" width="0.0174%" height="15" fill="rgb(229,68,14)" fg:x="20896" fg:w="13"/><text x="28.2727%" y="1583.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (13 samples, 0.02%)</title><rect x="28.0227%" y="1557" width="0.0174%" height="15" fill="rgb(243,106,26)" fg:x="20896" fg:w="13"/><text x="28.2727%" y="1567.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (13 samples, 0.02%)</title><rect x="28.0227%" y="1541" width="0.0174%" height="15" fill="rgb(206,45,38)" fg:x="20896" fg:w="13"/><text x="28.2727%" y="1551.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::assert_in_bounds (10 samples, 0.01%)</title><rect x="28.0402%" y="1525" width="0.0134%" height="15" fill="rgb(226,6,15)" fg:x="20909" fg:w="10"/><text x="28.2902%" y="1535.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::add (12 samples, 0.02%)</title><rect x="28.0536%" y="1509" width="0.0161%" height="15" fill="rgb(232,22,54)" fg:x="20919" fg:w="12"/><text x="28.3036%" y="1519.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::offset (12 samples, 0.02%)</title><rect x="28.0536%" y="1493" width="0.0161%" height="15" fill="rgb(229,222,32)" fg:x="20919" fg:w="12"/><text x="28.3036%" y="1503.50"></text></g><g><title>bitvec::index::BitIdx&lt;R&gt;::offset (12 samples, 0.02%)</title><rect x="28.0536%" y="1477" width="0.0161%" height="15" fill="rgb(228,62,29)" fg:x="20919" fg:w="12"/><text x="28.3036%" y="1487.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_add (8 samples, 0.01%)</title><rect x="28.0590%" y="1461" width="0.0107%" height="15" fill="rgb(251,103,34)" fg:x="20923" fg:w="8"/><text x="28.3090%" y="1471.50"></text></g><g><title>&lt;core::cell::Cell&lt;usize&gt; as radium::Radium&gt;::fetch_and (30 samples, 0.04%)</title><rect x="28.0911%" y="1461" width="0.0402%" height="15" fill="rgb(233,12,30)" fg:x="20947" fg:w="30"/><text x="28.3411%" y="1471.50"></text></g><g><title>&lt;core::cell::Cell&lt;usize&gt; as radium::Radium&gt;::fetch_or (41 samples, 0.05%)</title><rect x="28.1314%" y="1461" width="0.0550%" height="15" fill="rgb(238,52,0)" fg:x="20977" fg:w="41"/><text x="28.3814%" y="1471.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;wyz::comu::Mut,T,O&gt;::replace (88 samples, 0.12%)</title><rect x="28.0697%" y="1509" width="0.1180%" height="15" fill="rgb(223,98,5)" fg:x="20931" fg:w="88"/><text x="28.3197%" y="1519.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;wyz::comu::Frozen&lt;M&gt;,T,O&gt;::frozen_write_bit (88 samples, 0.12%)</title><rect x="28.0697%" y="1493" width="0.1180%" height="15" fill="rgb(228,75,37)" fg:x="20931" fg:w="88"/><text x="28.3197%" y="1503.50"></text></g><g><title>bitvec::access::BitAccess::write_bit (88 samples, 0.12%)</title><rect x="28.0697%" y="1477" width="0.1180%" height="15" fill="rgb(205,115,49)" fg:x="20931" fg:w="88"/><text x="28.3197%" y="1487.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::replace_unchecked (110 samples, 0.15%)</title><rect x="28.0536%" y="1525" width="0.1475%" height="15" fill="rgb(250,154,43)" fg:x="20919" fg:w="110"/><text x="28.3036%" y="1535.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::as_mut_bitptr (10 samples, 0.01%)</title><rect x="28.1877%" y="1509" width="0.0134%" height="15" fill="rgb(226,43,29)" fg:x="21019" fg:w="10"/><text x="28.4377%" y="1519.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::to_bitptr (10 samples, 0.01%)</title><rect x="28.1877%" y="1493" width="0.0134%" height="15" fill="rgb(249,228,39)" fg:x="21019" fg:w="10"/><text x="28.4377%" y="1503.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::head (9 samples, 0.01%)</title><rect x="28.1890%" y="1477" width="0.0121%" height="15" fill="rgb(216,79,43)" fg:x="21020" fg:w="9"/><text x="28.4390%" y="1487.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::set (124 samples, 0.17%)</title><rect x="28.0402%" y="1557" width="0.1663%" height="15" fill="rgb(228,95,12)" fg:x="20909" fg:w="124"/><text x="28.2902%" y="1567.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::replace (124 samples, 0.17%)</title><rect x="28.0402%" y="1541" width="0.1663%" height="15" fill="rgb(249,221,15)" fg:x="20909" fg:w="124"/><text x="28.2902%" y="1551.50"></text></g><g><title>gmw::executor::GateOutputs&lt;Shares&gt;::set (166 samples, 0.22%)</title><rect x="27.9865%" y="1589" width="0.2226%" height="15" fill="rgb(233,34,13)" fg:x="20869" fg:w="166"/><text x="28.2365%" y="1599.50"></text></g><g><title>&lt;bitvec::vec::BitVec&lt;T&gt; as gmw::protocols::ShareStorage&lt;bool&gt;&gt;::set (126 samples, 0.17%)</title><rect x="28.0402%" y="1573" width="0.1690%" height="15" fill="rgb(214,103,39)" fg:x="20909" fg:w="126"/><text x="28.2902%" y="1583.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (217 samples, 0.29%)</title><rect x="27.9637%" y="1621" width="0.2910%" height="15" fill="rgb(251,126,39)" fg:x="20852" fg:w="217"/><text x="28.2137%" y="1631.50"></text></g><g><title>gmw::executor::Executor&lt;P,Idx&gt;::execute::{{closure}}::{{closure}}::{{closure}}::{{closure}} (217 samples, 0.29%)</title><rect x="27.9637%" y="1605" width="0.2910%" height="15" fill="rgb(214,216,36)" fg:x="20852" fg:w="217"/><text x="28.2137%" y="1615.50"></text></g><g><title>tracing_core::metadata::LevelFilter::current (34 samples, 0.05%)</title><rect x="28.2092%" y="1589" width="0.0456%" height="15" fill="rgb(220,221,8)" fg:x="21035" fg:w="34"/><text x="28.4592%" y="1599.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (26 samples, 0.03%)</title><rect x="28.2199%" y="1573" width="0.0349%" height="15" fill="rgb(240,216,3)" fg:x="21043" fg:w="26"/><text x="28.4699%" y="1583.50"></text></g><g><title>core::sync::atomic::atomic_load (26 samples, 0.03%)</title><rect x="28.2199%" y="1557" width="0.0349%" height="15" fill="rgb(232,218,17)" fg:x="21043" fg:w="26"/><text x="28.4699%" y="1567.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (581 samples, 0.78%)</title><rect x="27.4796%" y="1653" width="0.7792%" height="15" fill="rgb(229,163,45)" fg:x="20491" fg:w="581"/><text x="27.7296%" y="1663.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (575 samples, 0.77%)</title><rect x="27.4877%" y="1637" width="0.7711%" height="15" fill="rgb(231,110,42)" fg:x="20497" fg:w="575"/><text x="27.7377%" y="1647.50"></text></g><g><title>bitvec::vec::iter::&lt;impl core::iter::traits::collect::IntoIterator for bitvec::vec::BitVec&lt;T,O&gt;&gt;::into_iter (15 samples, 0.02%)</title><rect x="28.2655%" y="1637" width="0.0201%" height="15" fill="rgb(208,170,48)" fg:x="21077" fg:w="15"/><text x="28.5155%" y="1647.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::into_boxed_bitslice (15 samples, 0.02%)</title><rect x="28.2655%" y="1621" width="0.0201%" height="15" fill="rgb(239,116,25)" fg:x="21077" fg:w="15"/><text x="28.5155%" y="1631.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::into_vec (8 samples, 0.01%)</title><rect x="28.2749%" y="1605" width="0.0107%" height="15" fill="rgb(219,200,50)" fg:x="21084" fg:w="8"/><text x="28.5249%" y="1615.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (24 samples, 0.03%)</title><rect x="28.2588%" y="1653" width="0.0322%" height="15" fill="rgb(245,200,0)" fg:x="21072" fg:w="24"/><text x="28.5088%" y="1663.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (283 samples, 0.38%)</title><rect x="28.2950%" y="1653" width="0.3795%" height="15" fill="rgb(245,119,33)" fg:x="21099" fg:w="283"/><text x="28.5450%" y="1663.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (283 samples, 0.38%)</title><rect x="28.2950%" y="1637" width="0.3795%" height="15" fill="rgb(231,125,12)" fg:x="21099" fg:w="283"/><text x="28.5450%" y="1647.50"></text></g><g><title>cfree (37 samples, 0.05%)</title><rect x="28.6799%" y="1637" width="0.0496%" height="15" fill="rgb(216,96,41)" fg:x="21386" fg:w="37"/><text x="28.9299%" y="1647.50"></text></g><g><title>[libc.so.6] (29 samples, 0.04%)</title><rect x="28.6906%" y="1621" width="0.0389%" height="15" fill="rgb(248,43,45)" fg:x="21394" fg:w="29"/><text x="28.9406%" y="1631.50"></text></g><g><title>core::ptr::drop_in_place&lt;gmw::circuit::ExecutableLayer&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;&gt; (43 samples, 0.06%)</title><rect x="28.6758%" y="1653" width="0.0577%" height="15" fill="rgb(217,222,7)" fg:x="21383" fg:w="43"/><text x="28.9258%" y="1663.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search (8 samples, 0.01%)</title><rect x="28.7348%" y="1653" width="0.0107%" height="15" fill="rgb(233,28,6)" fg:x="21427" fg:w="8"/><text x="28.9848%" y="1663.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (8 samples, 0.01%)</title><rect x="28.7348%" y="1637" width="0.0107%" height="15" fill="rgb(231,218,15)" fg:x="21427" fg:w="8"/><text x="28.9848%" y="1647.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (79 samples, 0.11%)</title><rect x="28.7751%" y="1621" width="0.1059%" height="15" fill="rgb(226,171,48)" fg:x="21457" fg:w="79"/><text x="29.0251%" y="1631.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (79 samples, 0.11%)</title><rect x="28.7751%" y="1605" width="0.1059%" height="15" fill="rgb(235,201,9)" fg:x="21457" fg:w="79"/><text x="29.0251%" y="1615.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (79 samples, 0.11%)</title><rect x="28.7751%" y="1589" width="0.1059%" height="15" fill="rgb(217,80,15)" fg:x="21457" fg:w="79"/><text x="29.0251%" y="1599.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (98 samples, 0.13%)</title><rect x="29.1734%" y="1461" width="0.1314%" height="15" fill="rgb(219,152,8)" fg:x="21754" fg:w="98"/><text x="29.4234%" y="1471.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (121 samples, 0.16%)</title><rect x="29.1573%" y="1477" width="0.1623%" height="15" fill="rgb(243,107,38)" fg:x="21742" fg:w="121"/><text x="29.4073%" y="1487.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (11 samples, 0.01%)</title><rect x="29.3048%" y="1461" width="0.0148%" height="15" fill="rgb(231,17,5)" fg:x="21852" fg:w="11"/><text x="29.5548%" y="1471.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (223 samples, 0.30%)</title><rect x="29.4697%" y="1461" width="0.2991%" height="15" fill="rgb(209,25,54)" fg:x="21975" fg:w="223"/><text x="29.7197%" y="1471.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (723 samples, 0.97%)</title><rect x="28.9977%" y="1525" width="0.9696%" height="15" fill="rgb(219,0,2)" fg:x="21623" fg:w="723"/><text x="29.2477%" y="1535.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (723 samples, 0.97%)</title><rect x="28.9977%" y="1509" width="0.9696%" height="15" fill="rgb(246,9,5)" fg:x="21623" fg:w="723"/><text x="29.2477%" y="1519.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (723 samples, 0.97%)</title><rect x="28.9977%" y="1493" width="0.9696%" height="15" fill="rgb(226,159,4)" fg:x="21623" fg:w="723"/><text x="29.2477%" y="1503.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (483 samples, 0.65%)</title><rect x="29.3195%" y="1477" width="0.6477%" height="15" fill="rgb(219,175,34)" fg:x="21863" fg:w="483"/><text x="29.5695%" y="1487.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (148 samples, 0.20%)</title><rect x="29.7688%" y="1461" width="0.1985%" height="15" fill="rgb(236,10,46)" fg:x="22198" fg:w="148"/><text x="30.0188%" y="1471.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (106 samples, 0.14%)</title><rect x="29.9673%" y="1525" width="0.1422%" height="15" fill="rgb(240,211,16)" fg:x="22346" fg:w="106"/><text x="30.2173%" y="1535.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (101 samples, 0.14%)</title><rect x="29.9740%" y="1509" width="0.1354%" height="15" fill="rgb(205,3,43)" fg:x="22351" fg:w="101"/><text x="30.2240%" y="1519.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (101 samples, 0.14%)</title><rect x="29.9740%" y="1493" width="0.1354%" height="15" fill="rgb(245,7,22)" fg:x="22351" fg:w="101"/><text x="30.2240%" y="1503.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (49 samples, 0.07%)</title><rect x="30.0437%" y="1477" width="0.0657%" height="15" fill="rgb(239,132,32)" fg:x="22403" fg:w="49"/><text x="30.2937%" y="1487.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (293 samples, 0.39%)</title><rect x="30.2864%" y="1477" width="0.3929%" height="15" fill="rgb(228,202,34)" fg:x="22584" fg:w="293"/><text x="30.5364%" y="1487.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (293 samples, 0.39%)</title><rect x="30.2864%" y="1461" width="0.3929%" height="15" fill="rgb(254,200,22)" fg:x="22584" fg:w="293"/><text x="30.5364%" y="1471.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (293 samples, 0.39%)</title><rect x="30.2864%" y="1445" width="0.3929%" height="15" fill="rgb(219,10,39)" fg:x="22584" fg:w="293"/><text x="30.5364%" y="1455.50"></text></g><g><title>core::hash::sip::u8to64_le (184 samples, 0.25%)</title><rect x="30.4326%" y="1429" width="0.2468%" height="15" fill="rgb(226,210,39)" fg:x="22693" fg:w="184"/><text x="30.6826%" y="1439.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (50 samples, 0.07%)</title><rect x="30.6123%" y="1413" width="0.0671%" height="15" fill="rgb(208,219,16)" fg:x="22827" fg:w="50"/><text x="30.8623%" y="1423.50"></text></g><g><title>hashbrown::map::make_hash (1,261 samples, 1.69%)</title><rect x="28.9977%" y="1557" width="1.6911%" height="15" fill="rgb(216,158,51)" fg:x="21623" fg:w="1261"/><text x="29.2477%" y="1567.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,261 samples, 1.69%)</title><rect x="28.9977%" y="1541" width="1.6911%" height="15" fill="rgb(233,14,44)" fg:x="21623" fg:w="1261"/><text x="29.2477%" y="1551.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (432 samples, 0.58%)</title><rect x="30.1094%" y="1525" width="0.5793%" height="15" fill="rgb(237,97,39)" fg:x="22452" fg:w="432"/><text x="30.3594%" y="1535.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (391 samples, 0.52%)</title><rect x="30.1644%" y="1509" width="0.5244%" height="15" fill="rgb(218,198,43)" fg:x="22493" fg:w="391"/><text x="30.4144%" y="1519.50"></text></g><g><title>core::hash::Hasher::write_u32 (391 samples, 0.52%)</title><rect x="30.1644%" y="1493" width="0.5244%" height="15" fill="rgb(231,104,20)" fg:x="22493" fg:w="391"/><text x="30.4144%" y="1503.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (74 samples, 0.10%)</title><rect x="30.7183%" y="1509" width="0.0992%" height="15" fill="rgb(254,36,13)" fg:x="22906" fg:w="74"/><text x="30.9683%" y="1519.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (32 samples, 0.04%)</title><rect x="30.7746%" y="1493" width="0.0429%" height="15" fill="rgb(248,14,50)" fg:x="22948" fg:w="32"/><text x="31.0246%" y="1503.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (156 samples, 0.21%)</title><rect x="30.8175%" y="1493" width="0.2092%" height="15" fill="rgb(217,107,29)" fg:x="22980" fg:w="156"/><text x="31.0675%" y="1503.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (156 samples, 0.21%)</title><rect x="30.8175%" y="1477" width="0.2092%" height="15" fill="rgb(251,169,33)" fg:x="22980" fg:w="156"/><text x="31.0675%" y="1487.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (211 samples, 0.28%)</title><rect x="30.8175%" y="1509" width="0.2830%" height="15" fill="rgb(217,108,32)" fg:x="22980" fg:w="211"/><text x="31.0675%" y="1519.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (55 samples, 0.07%)</title><rect x="31.0267%" y="1493" width="0.0738%" height="15" fill="rgb(219,66,42)" fg:x="23136" fg:w="55"/><text x="31.2767%" y="1503.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (55 samples, 0.07%)</title><rect x="31.0267%" y="1477" width="0.0738%" height="15" fill="rgb(206,180,7)" fg:x="23136" fg:w="55"/><text x="31.2767%" y="1487.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (55 samples, 0.07%)</title><rect x="31.0267%" y="1461" width="0.0738%" height="15" fill="rgb(208,226,31)" fg:x="23136" fg:w="55"/><text x="31.2767%" y="1471.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (55 samples, 0.07%)</title><rect x="31.0267%" y="1445" width="0.0738%" height="15" fill="rgb(218,26,49)" fg:x="23136" fg:w="55"/><text x="31.2767%" y="1455.50"></text></g><g><title>hashbrown::raw::h2 (115 samples, 0.15%)</title><rect x="31.1005%" y="1509" width="0.1542%" height="15" fill="rgb(233,197,48)" fg:x="23191" fg:w="115"/><text x="31.3505%" y="1519.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (8 samples, 0.01%)</title><rect x="31.2547%" y="1509" width="0.0107%" height="15" fill="rgb(252,181,51)" fg:x="23306" fg:w="8"/><text x="31.5047%" y="1519.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (8 samples, 0.01%)</title><rect x="31.2547%" y="1493" width="0.0107%" height="15" fill="rgb(253,90,19)" fg:x="23306" fg:w="8"/><text x="31.5047%" y="1503.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.01%)</title><rect x="31.2547%" y="1477" width="0.0107%" height="15" fill="rgb(215,171,30)" fg:x="23306" fg:w="8"/><text x="31.5047%" y="1487.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (18 samples, 0.02%)</title><rect x="31.2654%" y="1493" width="0.0241%" height="15" fill="rgb(214,222,9)" fg:x="23314" fg:w="18"/><text x="31.5154%" y="1503.50"></text></g><g><title>gmw::circuit::ExecutableCircuit&lt;G,Idx&gt;::simd_size (1,951 samples, 2.62%)</title><rect x="28.7456%" y="1653" width="2.6164%" height="15" fill="rgb(223,3,22)" fg:x="21435" fg:w="1951"/><text x="28.9956%" y="1663.50">gm..</text></g><g><title>gmw::circuit::static_layers::Circuit&lt;G,Idx&gt;::get_circ (1,943 samples, 2.61%)</title><rect x="28.7563%" y="1637" width="2.6057%" height="15" fill="rgb(225,196,46)" fg:x="21443" fg:w="1943"/><text x="29.0063%" y="1647.50">gm..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (1,850 samples, 2.48%)</title><rect x="28.8810%" y="1621" width="2.4810%" height="15" fill="rgb(209,110,37)" fg:x="21536" fg:w="1850"/><text x="29.1310%" y="1631.50">&lt;s..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,850 samples, 2.48%)</title><rect x="28.8810%" y="1605" width="2.4810%" height="15" fill="rgb(249,89,12)" fg:x="21536" fg:w="1850"/><text x="29.1310%" y="1615.50">st..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,850 samples, 2.48%)</title><rect x="28.8810%" y="1589" width="2.4810%" height="15" fill="rgb(226,27,33)" fg:x="21536" fg:w="1850"/><text x="29.1310%" y="1599.50">ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,850 samples, 2.48%)</title><rect x="28.8810%" y="1573" width="2.4810%" height="15" fill="rgb(213,82,22)" fg:x="21536" fg:w="1850"/><text x="29.1310%" y="1583.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (502 samples, 0.67%)</title><rect x="30.6888%" y="1557" width="0.6732%" height="15" fill="rgb(248,140,0)" fg:x="22884" fg:w="502"/><text x="30.9388%" y="1567.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (502 samples, 0.67%)</title><rect x="30.6888%" y="1541" width="0.6732%" height="15" fill="rgb(228,106,3)" fg:x="22884" fg:w="502"/><text x="30.9388%" y="1551.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (502 samples, 0.67%)</title><rect x="30.6888%" y="1525" width="0.6732%" height="15" fill="rgb(209,23,37)" fg:x="22884" fg:w="502"/><text x="30.9388%" y="1535.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (72 samples, 0.10%)</title><rect x="31.2654%" y="1509" width="0.0966%" height="15" fill="rgb(241,93,50)" fg:x="23314" fg:w="72"/><text x="31.5154%" y="1519.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (54 samples, 0.07%)</title><rect x="31.2896%" y="1493" width="0.0724%" height="15" fill="rgb(253,46,43)" fg:x="23332" fg:w="54"/><text x="31.5396%" y="1503.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.01%)</title><rect x="31.3647%" y="1509" width="0.0121%" height="15" fill="rgb(226,206,43)" fg:x="23388" fg:w="9"/><text x="31.6147%" y="1519.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.01%)</title><rect x="31.3647%" y="1493" width="0.0121%" height="15" fill="rgb(217,54,7)" fg:x="23388" fg:w="9"/><text x="31.6147%" y="1503.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.01%)</title><rect x="31.3647%" y="1477" width="0.0121%" height="15" fill="rgb(223,5,52)" fg:x="23388" fg:w="9"/><text x="31.6147%" y="1487.50"></text></g><g><title>malloc (8 samples, 0.01%)</title><rect x="31.3660%" y="1461" width="0.0107%" height="15" fill="rgb(206,52,46)" fg:x="23389" fg:w="8"/><text x="31.6160%" y="1471.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (10 samples, 0.01%)</title><rect x="31.3647%" y="1557" width="0.0134%" height="15" fill="rgb(253,136,11)" fg:x="23388" fg:w="10"/><text x="31.6147%" y="1567.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 0.01%)</title><rect x="31.3647%" y="1541" width="0.0134%" height="15" fill="rgb(208,106,33)" fg:x="23388" fg:w="10"/><text x="31.6147%" y="1551.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.01%)</title><rect x="31.3647%" y="1525" width="0.0134%" height="15" fill="rgb(206,54,4)" fg:x="23388" fg:w="10"/><text x="31.6147%" y="1535.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (67 samples, 0.09%)</title><rect x="31.3633%" y="1621" width="0.0899%" height="15" fill="rgb(213,3,15)" fg:x="23387" fg:w="67"/><text x="31.6133%" y="1631.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (66 samples, 0.09%)</title><rect x="31.3647%" y="1605" width="0.0885%" height="15" fill="rgb(252,211,39)" fg:x="23388" fg:w="66"/><text x="31.6147%" y="1615.50"></text></g><g><title>alloc::slice::hack::to_vec (66 samples, 0.09%)</title><rect x="31.3647%" y="1589" width="0.0885%" height="15" fill="rgb(223,6,36)" fg:x="23388" fg:w="66"/><text x="31.6147%" y="1599.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (66 samples, 0.09%)</title><rect x="31.3647%" y="1573" width="0.0885%" height="15" fill="rgb(252,169,45)" fg:x="23388" fg:w="66"/><text x="31.6147%" y="1583.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (56 samples, 0.08%)</title><rect x="31.3781%" y="1557" width="0.0751%" height="15" fill="rgb(212,48,26)" fg:x="23398" fg:w="56"/><text x="31.6281%" y="1567.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (56 samples, 0.08%)</title><rect x="31.3781%" y="1541" width="0.0751%" height="15" fill="rgb(251,102,48)" fg:x="23398" fg:w="56"/><text x="31.6281%" y="1551.50"></text></g><g><title>[libc.so.6] (56 samples, 0.08%)</title><rect x="31.3781%" y="1525" width="0.0751%" height="15" fill="rgb(243,208,16)" fg:x="23398" fg:w="56"/><text x="31.6281%" y="1535.50"></text></g><g><title>&lt;gmw::circuit::static_layers::ScLayerIterator&lt;G,Idx&gt; as core::clone::Clone&gt;::clone (70 samples, 0.09%)</title><rect x="31.3633%" y="1637" width="0.0939%" height="15" fill="rgb(219,96,24)" fg:x="23387" fg:w="70"/><text x="31.6133%" y="1647.50"></text></g><g><title>&lt;gmw::circuit::static_layers::ScLayerIterator&lt;G,Idx&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.02%)</title><rect x="31.4572%" y="1573" width="0.0188%" height="15" fill="rgb(219,33,29)" fg:x="23457" fg:w="14"/><text x="31.7072%" y="1583.50"></text></g><g><title>gmw::circuit::static_layers::Circuit&lt;G,Idx&gt;::get_circ (9 samples, 0.01%)</title><rect x="31.4639%" y="1557" width="0.0121%" height="15" fill="rgb(223,176,5)" fg:x="23462" fg:w="9"/><text x="31.7139%" y="1567.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (9 samples, 0.01%)</title><rect x="31.4639%" y="1541" width="0.0121%" height="15" fill="rgb(228,140,14)" fg:x="23462" fg:w="9"/><text x="31.7139%" y="1551.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (9 samples, 0.01%)</title><rect x="31.4639%" y="1525" width="0.0121%" height="15" fill="rgb(217,179,31)" fg:x="23462" fg:w="9"/><text x="31.7139%" y="1535.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (9 samples, 0.01%)</title><rect x="31.4639%" y="1509" width="0.0121%" height="15" fill="rgb(230,9,30)" fg:x="23462" fg:w="9"/><text x="31.7139%" y="1519.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (9 samples, 0.01%)</title><rect x="31.4639%" y="1493" width="0.0121%" height="15" fill="rgb(230,136,20)" fg:x="23462" fg:w="9"/><text x="31.7139%" y="1503.50"></text></g><g><title>gmw::circuit::ExecutableLayer&lt;G,Idx&gt;::interactive_count (97 samples, 0.13%)</title><rect x="31.3620%" y="1653" width="0.1301%" height="15" fill="rgb(215,210,22)" fg:x="23386" fg:w="97"/><text x="31.6120%" y="1663.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (26 samples, 0.03%)</title><rect x="31.4572%" y="1637" width="0.0349%" height="15" fill="rgb(218,43,5)" fg:x="23457" fg:w="26"/><text x="31.7072%" y="1647.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (26 samples, 0.03%)</title><rect x="31.4572%" y="1621" width="0.0349%" height="15" fill="rgb(216,11,5)" fg:x="23457" fg:w="26"/><text x="31.7072%" y="1631.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (26 samples, 0.03%)</title><rect x="31.4572%" y="1605" width="0.0349%" height="15" fill="rgb(209,82,29)" fg:x="23457" fg:w="26"/><text x="31.7072%" y="1615.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (26 samples, 0.03%)</title><rect x="31.4572%" y="1589" width="0.0349%" height="15" fill="rgb(244,115,12)" fg:x="23457" fg:w="26"/><text x="31.7072%" y="1599.50"></text></g><g><title>core::ptr::drop_in_place&lt;gmw::circuit::static_layers::ScLayerIterator&lt;gmw::protocols::boolean_gmw::BooleanGate,usize&gt;&gt; (11 samples, 0.01%)</title><rect x="31.4773%" y="1573" width="0.0148%" height="15" fill="rgb(222,82,18)" fg:x="23472" fg:w="11"/><text x="31.7273%" y="1583.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (11 samples, 0.01%)</title><rect x="31.4773%" y="1557" width="0.0148%" height="15" fill="rgb(249,227,8)" fg:x="23472" fg:w="11"/><text x="31.7273%" y="1567.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (11 samples, 0.01%)</title><rect x="31.4773%" y="1541" width="0.0148%" height="15" fill="rgb(253,141,45)" fg:x="23472" fg:w="11"/><text x="31.7273%" y="1551.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.01%)</title><rect x="31.4773%" y="1525" width="0.0148%" height="15" fill="rgb(234,184,4)" fg:x="23472" fg:w="11"/><text x="31.7273%" y="1535.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.01%)</title><rect x="31.4773%" y="1509" width="0.0148%" height="15" fill="rgb(218,194,23)" fg:x="23472" fg:w="11"/><text x="31.7273%" y="1519.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.01%)</title><rect x="31.4773%" y="1493" width="0.0148%" height="15" fill="rgb(235,66,41)" fg:x="23472" fg:w="11"/><text x="31.7273%" y="1503.50"></text></g><g><title>cfree (10 samples, 0.01%)</title><rect x="31.4787%" y="1477" width="0.0134%" height="15" fill="rgb(245,217,1)" fg:x="23473" fg:w="10"/><text x="31.7287%" y="1487.50"></text></g><g><title>[libc.so.6] (8 samples, 0.01%)</title><rect x="31.4813%" y="1461" width="0.0107%" height="15" fill="rgb(229,91,1)" fg:x="23475" fg:w="8"/><text x="31.7313%" y="1471.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (28 samples, 0.04%)</title><rect x="31.4934%" y="1557" width="0.0375%" height="15" fill="rgb(207,101,30)" fg:x="23484" fg:w="28"/><text x="31.7434%" y="1567.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (28 samples, 0.04%)</title><rect x="31.4934%" y="1541" width="0.0375%" height="15" fill="rgb(223,82,49)" fg:x="23484" fg:w="28"/><text x="31.7434%" y="1551.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (28 samples, 0.04%)</title><rect x="31.4934%" y="1525" width="0.0375%" height="15" fill="rgb(218,167,17)" fg:x="23484" fg:w="28"/><text x="31.7434%" y="1535.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (26 samples, 0.03%)</title><rect x="31.4961%" y="1509" width="0.0349%" height="15" fill="rgb(208,103,14)" fg:x="23486" fg:w="26"/><text x="31.7461%" y="1519.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (26 samples, 0.03%)</title><rect x="31.4961%" y="1493" width="0.0349%" height="15" fill="rgb(238,20,8)" fg:x="23486" fg:w="26"/><text x="31.7461%" y="1503.50"></text></g><g><title>alloc::alloc::alloc (26 samples, 0.03%)</title><rect x="31.4961%" y="1477" width="0.0349%" height="15" fill="rgb(218,80,54)" fg:x="23486" fg:w="26"/><text x="31.7461%" y="1487.50"></text></g><g><title>malloc (25 samples, 0.03%)</title><rect x="31.4974%" y="1461" width="0.0335%" height="15" fill="rgb(240,144,17)" fg:x="23487" fg:w="25"/><text x="31.7474%" y="1471.50"></text></g><g><title>[libc.so.6] (19 samples, 0.03%)</title><rect x="31.5055%" y="1445" width="0.0255%" height="15" fill="rgb(245,27,50)" fg:x="23493" fg:w="19"/><text x="31.7555%" y="1455.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (126 samples, 0.17%)</title><rect x="31.4934%" y="1621" width="0.1690%" height="15" fill="rgb(251,51,7)" fg:x="23484" fg:w="126"/><text x="31.7434%" y="1631.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (126 samples, 0.17%)</title><rect x="31.4934%" y="1605" width="0.1690%" height="15" fill="rgb(245,217,29)" fg:x="23484" fg:w="126"/><text x="31.7434%" y="1615.50"></text></g><g><title>alloc::slice::hack::to_vec (126 samples, 0.17%)</title><rect x="31.4934%" y="1589" width="0.1690%" height="15" fill="rgb(221,176,29)" fg:x="23484" fg:w="126"/><text x="31.7434%" y="1599.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (126 samples, 0.17%)</title><rect x="31.4934%" y="1573" width="0.1690%" height="15" fill="rgb(212,180,24)" fg:x="23484" fg:w="126"/><text x="31.7434%" y="1583.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (98 samples, 0.13%)</title><rect x="31.5310%" y="1557" width="0.1314%" height="15" fill="rgb(254,24,2)" fg:x="23512" fg:w="98"/><text x="31.7810%" y="1567.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (98 samples, 0.13%)</title><rect x="31.5310%" y="1541" width="0.1314%" height="15" fill="rgb(230,100,2)" fg:x="23512" fg:w="98"/><text x="31.7810%" y="1551.50"></text></g><g><title>[libc.so.6] (97 samples, 0.13%)</title><rect x="31.5323%" y="1525" width="0.1301%" height="15" fill="rgb(219,142,25)" fg:x="23513" fg:w="97"/><text x="31.7823%" y="1535.50"></text></g><g><title>gmw::circuit::ExecutableLayer&lt;G,Idx&gt;::interactive_gates (129 samples, 0.17%)</title><rect x="31.4921%" y="1653" width="0.1730%" height="15" fill="rgb(240,73,43)" fg:x="23483" fg:w="129"/><text x="31.7421%" y="1663.50"></text></g><g><title>&lt;gmw::circuit::static_layers::ScLayerIterator&lt;G,Idx&gt; as core::clone::Clone&gt;::clone (128 samples, 0.17%)</title><rect x="31.4934%" y="1637" width="0.1717%" height="15" fill="rgb(214,114,15)" fg:x="23484" fg:w="128"/><text x="31.7434%" y="1647.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (129 samples, 0.17%)</title><rect x="31.6677%" y="1557" width="0.1730%" height="15" fill="rgb(207,130,4)" fg:x="23614" fg:w="129"/><text x="31.9177%" y="1567.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (129 samples, 0.17%)</title><rect x="31.6677%" y="1541" width="0.1730%" height="15" fill="rgb(221,25,40)" fg:x="23614" fg:w="129"/><text x="31.9177%" y="1551.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (129 samples, 0.17%)</title><rect x="31.6677%" y="1525" width="0.1730%" height="15" fill="rgb(241,184,7)" fg:x="23614" fg:w="129"/><text x="31.9177%" y="1535.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (129 samples, 0.17%)</title><rect x="31.6677%" y="1509" width="0.1730%" height="15" fill="rgb(235,159,4)" fg:x="23614" fg:w="129"/><text x="31.9177%" y="1519.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (129 samples, 0.17%)</title><rect x="31.6677%" y="1493" width="0.1730%" height="15" fill="rgb(214,87,48)" fg:x="23614" fg:w="129"/><text x="31.9177%" y="1503.50"></text></g><g><title>alloc::alloc::alloc (129 samples, 0.17%)</title><rect x="31.6677%" y="1477" width="0.1730%" height="15" fill="rgb(246,198,24)" fg:x="23614" fg:w="129"/><text x="31.9177%" y="1487.50"></text></g><g><title>malloc (119 samples, 0.16%)</title><rect x="31.6812%" y="1461" width="0.1596%" height="15" fill="rgb(209,66,40)" fg:x="23624" fg:w="119"/><text x="31.9312%" y="1471.50"></text></g><g><title>[libc.so.6] (63 samples, 0.08%)</title><rect x="31.7562%" y="1445" width="0.0845%" height="15" fill="rgb(233,147,39)" fg:x="23680" fg:w="63"/><text x="32.0062%" y="1455.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (439 samples, 0.59%)</title><rect x="31.6664%" y="1621" width="0.5887%" height="15" fill="rgb(231,145,52)" fg:x="23613" fg:w="439"/><text x="31.9164%" y="1631.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (438 samples, 0.59%)</title><rect x="31.6677%" y="1605" width="0.5874%" height="15" fill="rgb(206,20,26)" fg:x="23614" fg:w="438"/><text x="31.9177%" y="1615.50"></text></g><g><title>alloc::slice::hack::to_vec (438 samples, 0.59%)</title><rect x="31.6677%" y="1589" width="0.5874%" height="15" fill="rgb(238,220,4)" fg:x="23614" fg:w="438"/><text x="31.9177%" y="1599.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (438 samples, 0.59%)</title><rect x="31.6677%" y="1573" width="0.5874%" height="15" fill="rgb(252,195,42)" fg:x="23614" fg:w="438"/><text x="31.9177%" y="1583.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (309 samples, 0.41%)</title><rect x="31.8407%" y="1557" width="0.4144%" height="15" fill="rgb(209,10,6)" fg:x="23743" fg:w="309"/><text x="32.0907%" y="1567.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (309 samples, 0.41%)</title><rect x="31.8407%" y="1541" width="0.4144%" height="15" fill="rgb(229,3,52)" fg:x="23743" fg:w="309"/><text x="32.0907%" y="1551.50"></text></g><g><title>[libc.so.6] (308 samples, 0.41%)</title><rect x="31.8421%" y="1525" width="0.4130%" height="15" fill="rgb(253,49,37)" fg:x="23744" fg:w="308"/><text x="32.0921%" y="1535.50"></text></g><g><title>gmw::circuit::ExecutableLayer&lt;G,Idx&gt;::interactive_indices (442 samples, 0.59%)</title><rect x="31.6651%" y="1653" width="0.5927%" height="15" fill="rgb(240,103,49)" fg:x="23612" fg:w="442"/><text x="31.9151%" y="1663.50"></text></g><g><title>&lt;gmw::circuit::static_layers::ScLayerIterator&lt;G,Idx&gt; as core::clone::Clone&gt;::clone (441 samples, 0.59%)</title><rect x="31.6664%" y="1637" width="0.5914%" height="15" fill="rgb(250,182,30)" fg:x="23613" fg:w="441"/><text x="31.9164%" y="1647.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (38 samples, 0.05%)</title><rect x="32.2578%" y="1557" width="0.0510%" height="15" fill="rgb(248,8,30)" fg:x="24054" fg:w="38"/><text x="32.5078%" y="1567.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (38 samples, 0.05%)</title><rect x="32.2578%" y="1541" width="0.0510%" height="15" fill="rgb(237,120,30)" fg:x="24054" fg:w="38"/><text x="32.5078%" y="1551.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (38 samples, 0.05%)</title><rect x="32.2578%" y="1525" width="0.0510%" height="15" fill="rgb(221,146,34)" fg:x="24054" fg:w="38"/><text x="32.5078%" y="1535.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (37 samples, 0.05%)</title><rect x="32.2591%" y="1509" width="0.0496%" height="15" fill="rgb(242,55,13)" fg:x="24055" fg:w="37"/><text x="32.5091%" y="1519.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (37 samples, 0.05%)</title><rect x="32.2591%" y="1493" width="0.0496%" height="15" fill="rgb(242,112,31)" fg:x="24055" fg:w="37"/><text x="32.5091%" y="1503.50"></text></g><g><title>alloc::alloc::alloc (37 samples, 0.05%)</title><rect x="32.2591%" y="1477" width="0.0496%" height="15" fill="rgb(249,192,27)" fg:x="24055" fg:w="37"/><text x="32.5091%" y="1487.50"></text></g><g><title>malloc (36 samples, 0.05%)</title><rect x="32.2605%" y="1461" width="0.0483%" height="15" fill="rgb(208,204,44)" fg:x="24056" fg:w="36"/><text x="32.5105%" y="1471.50"></text></g><g><title>[libc.so.6] (21 samples, 0.03%)</title><rect x="32.2806%" y="1445" width="0.0282%" height="15" fill="rgb(208,93,54)" fg:x="24071" fg:w="21"/><text x="32.5306%" y="1455.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (142 samples, 0.19%)</title><rect x="32.2578%" y="1621" width="0.1904%" height="15" fill="rgb(242,1,31)" fg:x="24054" fg:w="142"/><text x="32.5078%" y="1631.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (142 samples, 0.19%)</title><rect x="32.2578%" y="1605" width="0.1904%" height="15" fill="rgb(241,83,25)" fg:x="24054" fg:w="142"/><text x="32.5078%" y="1615.50"></text></g><g><title>alloc::slice::hack::to_vec (142 samples, 0.19%)</title><rect x="32.2578%" y="1589" width="0.1904%" height="15" fill="rgb(205,169,50)" fg:x="24054" fg:w="142"/><text x="32.5078%" y="1599.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (142 samples, 0.19%)</title><rect x="32.2578%" y="1573" width="0.1904%" height="15" fill="rgb(239,186,37)" fg:x="24054" fg:w="142"/><text x="32.5078%" y="1583.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (104 samples, 0.14%)</title><rect x="32.3088%" y="1557" width="0.1395%" height="15" fill="rgb(205,221,10)" fg:x="24092" fg:w="104"/><text x="32.5588%" y="1567.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (104 samples, 0.14%)</title><rect x="32.3088%" y="1541" width="0.1395%" height="15" fill="rgb(218,196,15)" fg:x="24092" fg:w="104"/><text x="32.5588%" y="1551.50"></text></g><g><title>[libc.so.6] (104 samples, 0.14%)</title><rect x="32.3088%" y="1525" width="0.1395%" height="15" fill="rgb(218,196,35)" fg:x="24092" fg:w="104"/><text x="32.5588%" y="1535.50"></text></g><g><title>gmw::circuit::ExecutableLayer&lt;G,Idx&gt;::interactive_iter (148 samples, 0.20%)</title><rect x="32.2578%" y="1653" width="0.1985%" height="15" fill="rgb(233,63,24)" fg:x="24054" fg:w="148"/><text x="32.5078%" y="1663.50"></text></g><g><title>&lt;gmw::circuit::static_layers::ScLayerIterator&lt;G,Idx&gt; as core::clone::Clone&gt;::clone (148 samples, 0.20%)</title><rect x="32.2578%" y="1637" width="0.1985%" height="15" fill="rgb(225,8,4)" fg:x="24054" fg:w="148"/><text x="32.5078%" y="1647.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (19 samples, 0.03%)</title><rect x="32.4616%" y="1557" width="0.0255%" height="15" fill="rgb(234,105,35)" fg:x="24206" fg:w="19"/><text x="32.7116%" y="1567.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (19 samples, 0.03%)</title><rect x="32.4616%" y="1541" width="0.0255%" height="15" fill="rgb(236,21,32)" fg:x="24206" fg:w="19"/><text x="32.7116%" y="1551.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (19 samples, 0.03%)</title><rect x="32.4616%" y="1525" width="0.0255%" height="15" fill="rgb(228,109,6)" fg:x="24206" fg:w="19"/><text x="32.7116%" y="1535.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (19 samples, 0.03%)</title><rect x="32.4616%" y="1509" width="0.0255%" height="15" fill="rgb(229,215,31)" fg:x="24206" fg:w="19"/><text x="32.7116%" y="1519.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (19 samples, 0.03%)</title><rect x="32.4616%" y="1493" width="0.0255%" height="15" fill="rgb(221,52,54)" fg:x="24206" fg:w="19"/><text x="32.7116%" y="1503.50"></text></g><g><title>alloc::alloc::alloc (19 samples, 0.03%)</title><rect x="32.4616%" y="1477" width="0.0255%" height="15" fill="rgb(252,129,43)" fg:x="24206" fg:w="19"/><text x="32.7116%" y="1487.50"></text></g><g><title>malloc (16 samples, 0.02%)</title><rect x="32.4657%" y="1461" width="0.0215%" height="15" fill="rgb(248,183,27)" fg:x="24209" fg:w="16"/><text x="32.7157%" y="1471.50"></text></g><g><title>gmw::circuit::ExecutableLayer&lt;G,Idx&gt;::interactive_parents_iter (78 samples, 0.10%)</title><rect x="32.4563%" y="1653" width="0.1046%" height="15" fill="rgb(250,0,22)" fg:x="24202" fg:w="78"/><text x="32.7063%" y="1663.50"></text></g><g><title>&lt;gmw::circuit::static_layers::ScLayerIterator&lt;G,Idx&gt; as core::clone::Clone&gt;::clone (75 samples, 0.10%)</title><rect x="32.4603%" y="1637" width="0.1006%" height="15" fill="rgb(213,166,10)" fg:x="24205" fg:w="75"/><text x="32.7103%" y="1647.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (75 samples, 0.10%)</title><rect x="32.4603%" y="1621" width="0.1006%" height="15" fill="rgb(207,163,36)" fg:x="24205" fg:w="75"/><text x="32.7103%" y="1631.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (75 samples, 0.10%)</title><rect x="32.4603%" y="1605" width="0.1006%" height="15" fill="rgb(208,122,22)" fg:x="24205" fg:w="75"/><text x="32.7103%" y="1615.50"></text></g><g><title>alloc::slice::hack::to_vec (75 samples, 0.10%)</title><rect x="32.4603%" y="1589" width="0.1006%" height="15" fill="rgb(207,104,49)" fg:x="24205" fg:w="75"/><text x="32.7103%" y="1599.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (75 samples, 0.10%)</title><rect x="32.4603%" y="1573" width="0.1006%" height="15" fill="rgb(248,211,50)" fg:x="24205" fg:w="75"/><text x="32.7103%" y="1583.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (55 samples, 0.07%)</title><rect x="32.4871%" y="1557" width="0.0738%" height="15" fill="rgb(217,13,45)" fg:x="24225" fg:w="55"/><text x="32.7371%" y="1567.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (55 samples, 0.07%)</title><rect x="32.4871%" y="1541" width="0.0738%" height="15" fill="rgb(211,216,49)" fg:x="24225" fg:w="55"/><text x="32.7371%" y="1551.50"></text></g><g><title>[libc.so.6] (55 samples, 0.07%)</title><rect x="32.4871%" y="1525" width="0.0738%" height="15" fill="rgb(221,58,53)" fg:x="24225" fg:w="55"/><text x="32.7371%" y="1535.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (10 samples, 0.01%)</title><rect x="32.5636%" y="1557" width="0.0134%" height="15" fill="rgb(220,112,41)" fg:x="24282" fg:w="10"/><text x="32.8136%" y="1567.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 0.01%)</title><rect x="32.5636%" y="1541" width="0.0134%" height="15" fill="rgb(236,38,28)" fg:x="24282" fg:w="10"/><text x="32.8136%" y="1551.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.01%)</title><rect x="32.5636%" y="1525" width="0.0134%" height="15" fill="rgb(227,195,22)" fg:x="24282" fg:w="10"/><text x="32.8136%" y="1535.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.01%)</title><rect x="32.5662%" y="1509" width="0.0107%" height="15" fill="rgb(214,55,33)" fg:x="24284" fg:w="8"/><text x="32.8162%" y="1519.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.01%)</title><rect x="32.5662%" y="1493" width="0.0107%" height="15" fill="rgb(248,80,13)" fg:x="24284" fg:w="8"/><text x="32.8162%" y="1503.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.01%)</title><rect x="32.5662%" y="1477" width="0.0107%" height="15" fill="rgb(238,52,6)" fg:x="24284" fg:w="8"/><text x="32.8162%" y="1487.50"></text></g><g><title>malloc (8 samples, 0.01%)</title><rect x="32.5662%" y="1461" width="0.0107%" height="15" fill="rgb(224,198,47)" fg:x="24284" fg:w="8"/><text x="32.8162%" y="1471.50"></text></g><g><title>gmw::circuit::ExecutableLayer&lt;G,Idx&gt;::non_interactive_with_parents_iter (74 samples, 0.10%)</title><rect x="32.5609%" y="1653" width="0.0992%" height="15" fill="rgb(233,171,20)" fg:x="24280" fg:w="74"/><text x="32.8109%" y="1663.50"></text></g><g><title>&lt;gmw::circuit::static_layers::ScLayerIterator&lt;G,Idx&gt; as core::clone::Clone&gt;::clone (72 samples, 0.10%)</title><rect x="32.5636%" y="1637" width="0.0966%" height="15" fill="rgb(241,30,25)" fg:x="24282" fg:w="72"/><text x="32.8136%" y="1647.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (72 samples, 0.10%)</title><rect x="32.5636%" y="1621" width="0.0966%" height="15" fill="rgb(207,171,38)" fg:x="24282" fg:w="72"/><text x="32.8136%" y="1631.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (72 samples, 0.10%)</title><rect x="32.5636%" y="1605" width="0.0966%" height="15" fill="rgb(234,70,1)" fg:x="24282" fg:w="72"/><text x="32.8136%" y="1615.50"></text></g><g><title>alloc::slice::hack::to_vec (72 samples, 0.10%)</title><rect x="32.5636%" y="1589" width="0.0966%" height="15" fill="rgb(232,178,18)" fg:x="24282" fg:w="72"/><text x="32.8136%" y="1599.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (72 samples, 0.10%)</title><rect x="32.5636%" y="1573" width="0.0966%" height="15" fill="rgb(241,78,40)" fg:x="24282" fg:w="72"/><text x="32.8136%" y="1583.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (62 samples, 0.08%)</title><rect x="32.5770%" y="1557" width="0.0831%" height="15" fill="rgb(222,35,25)" fg:x="24292" fg:w="62"/><text x="32.8270%" y="1567.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (62 samples, 0.08%)</title><rect x="32.5770%" y="1541" width="0.0831%" height="15" fill="rgb(207,92,16)" fg:x="24292" fg:w="62"/><text x="32.8270%" y="1551.50"></text></g><g><title>[libc.so.6] (62 samples, 0.08%)</title><rect x="32.5770%" y="1525" width="0.0831%" height="15" fill="rgb(216,59,51)" fg:x="24292" fg:w="62"/><text x="32.8270%" y="1535.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 0.04%)</title><rect x="32.6829%" y="1493" width="0.0429%" height="15" fill="rgb(213,80,28)" fg:x="24371" fg:w="32"/><text x="32.9329%" y="1503.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 0.04%)</title><rect x="32.6829%" y="1477" width="0.0429%" height="15" fill="rgb(220,93,7)" fg:x="24371" fg:w="32"/><text x="32.9329%" y="1487.50"></text></g><g><title>alloc::alloc::alloc (32 samples, 0.04%)</title><rect x="32.6829%" y="1461" width="0.0429%" height="15" fill="rgb(225,24,44)" fg:x="24371" fg:w="32"/><text x="32.9329%" y="1471.50"></text></g><g><title>malloc (32 samples, 0.04%)</title><rect x="32.6829%" y="1445" width="0.0429%" height="15" fill="rgb(243,74,40)" fg:x="24371" fg:w="32"/><text x="32.9329%" y="1455.50"></text></g><g><title>[libc.so.6] (16 samples, 0.02%)</title><rect x="32.7044%" y="1429" width="0.0215%" height="15" fill="rgb(228,39,7)" fg:x="24387" fg:w="16"/><text x="32.9544%" y="1439.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (35 samples, 0.05%)</title><rect x="32.6816%" y="1541" width="0.0469%" height="15" fill="rgb(227,79,8)" fg:x="24370" fg:w="35"/><text x="32.9316%" y="1551.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (35 samples, 0.05%)</title><rect x="32.6816%" y="1525" width="0.0469%" height="15" fill="rgb(236,58,11)" fg:x="24370" fg:w="35"/><text x="32.9316%" y="1535.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (35 samples, 0.05%)</title><rect x="32.6816%" y="1509" width="0.0469%" height="15" fill="rgb(249,63,35)" fg:x="24370" fg:w="35"/><text x="32.9316%" y="1519.50"></text></g><g><title>gmw::circuit::ExecutableLayer&lt;G,Idx&gt;::split_simd (128 samples, 0.17%)</title><rect x="32.6601%" y="1653" width="0.1717%" height="15" fill="rgb(252,114,16)" fg:x="24354" fg:w="128"/><text x="32.9101%" y="1663.50"></text></g><g><title>gmw::circuit::static_layers::ScLayerIterator&lt;G,Idx&gt;::split_simd (115 samples, 0.15%)</title><rect x="32.6776%" y="1637" width="0.1542%" height="15" fill="rgb(254,151,24)" fg:x="24367" fg:w="115"/><text x="32.9276%" y="1647.50"></text></g><g><title>&lt;gmw::circuit::static_layers::ScLayerIterator&lt;G,Idx&gt; as core::clone::Clone&gt;::clone (113 samples, 0.15%)</title><rect x="32.6802%" y="1621" width="0.1515%" height="15" fill="rgb(253,54,39)" fg:x="24369" fg:w="113"/><text x="32.9302%" y="1631.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (112 samples, 0.15%)</title><rect x="32.6816%" y="1605" width="0.1502%" height="15" fill="rgb(243,25,45)" fg:x="24370" fg:w="112"/><text x="32.9316%" y="1615.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (112 samples, 0.15%)</title><rect x="32.6816%" y="1589" width="0.1502%" height="15" fill="rgb(234,134,9)" fg:x="24370" fg:w="112"/><text x="32.9316%" y="1599.50"></text></g><g><title>alloc::slice::hack::to_vec (112 samples, 0.15%)</title><rect x="32.6816%" y="1573" width="0.1502%" height="15" fill="rgb(227,166,31)" fg:x="24370" fg:w="112"/><text x="32.9316%" y="1583.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (112 samples, 0.15%)</title><rect x="32.6816%" y="1557" width="0.1502%" height="15" fill="rgb(245,143,41)" fg:x="24370" fg:w="112"/><text x="32.9316%" y="1567.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (77 samples, 0.10%)</title><rect x="32.7285%" y="1541" width="0.1033%" height="15" fill="rgb(238,181,32)" fg:x="24405" fg:w="77"/><text x="32.9785%" y="1551.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (77 samples, 0.10%)</title><rect x="32.7285%" y="1525" width="0.1033%" height="15" fill="rgb(224,113,18)" fg:x="24405" fg:w="77"/><text x="32.9785%" y="1535.50"></text></g><g><title>[libc.so.6] (77 samples, 0.10%)</title><rect x="32.7285%" y="1509" width="0.1033%" height="15" fill="rgb(240,229,28)" fg:x="24405" fg:w="77"/><text x="32.9785%" y="1519.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (50 samples, 0.07%)</title><rect x="32.9324%" y="1637" width="0.0671%" height="15" fill="rgb(250,185,3)" fg:x="24557" fg:w="50"/><text x="33.1824%" y="1647.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (50 samples, 0.07%)</title><rect x="32.9324%" y="1621" width="0.0671%" height="15" fill="rgb(212,59,25)" fg:x="24557" fg:w="50"/><text x="33.1824%" y="1631.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (50 samples, 0.07%)</title><rect x="32.9324%" y="1605" width="0.0671%" height="15" fill="rgb(221,87,20)" fg:x="24557" fg:w="50"/><text x="33.1824%" y="1615.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::assert_in_bounds (59 samples, 0.08%)</title><rect x="32.9994%" y="1589" width="0.0791%" height="15" fill="rgb(213,74,28)" fg:x="24607" fg:w="59"/><text x="33.2494%" y="1599.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::add (44 samples, 0.06%)</title><rect x="33.0785%" y="1573" width="0.0590%" height="15" fill="rgb(224,132,34)" fg:x="24666" fg:w="44"/><text x="33.3285%" y="1583.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;M,T,O&gt;::offset (44 samples, 0.06%)</title><rect x="33.0785%" y="1557" width="0.0590%" height="15" fill="rgb(222,101,24)" fg:x="24666" fg:w="44"/><text x="33.3285%" y="1567.50"></text></g><g><title>bitvec::index::BitIdx&lt;R&gt;::offset (44 samples, 0.06%)</title><rect x="33.0785%" y="1541" width="0.0590%" height="15" fill="rgb(254,142,4)" fg:x="24666" fg:w="44"/><text x="33.3285%" y="1551.50"></text></g><g><title>&lt;core::cell::Cell&lt;usize&gt; as radium::Radium&gt;::fetch_and (62 samples, 0.08%)</title><rect x="33.1912%" y="1525" width="0.0831%" height="15" fill="rgb(230,229,49)" fg:x="24750" fg:w="62"/><text x="33.4412%" y="1535.50"></text></g><g><title>&lt;core::cell::Cell&lt;usize&gt; as radium::Radium&gt;::fetch_or (36 samples, 0.05%)</title><rect x="33.2743%" y="1525" width="0.0483%" height="15" fill="rgb(238,70,47)" fg:x="24812" fg:w="36"/><text x="33.5243%" y="1535.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;wyz::comu::Mut,T,O&gt;::replace (143 samples, 0.19%)</title><rect x="33.1375%" y="1573" width="0.1918%" height="15" fill="rgb(231,160,17)" fg:x="24710" fg:w="143"/><text x="33.3875%" y="1583.50"></text></g><g><title>bitvec::ptr::single::BitPtr&lt;wyz::comu::Frozen&lt;M&gt;,T,O&gt;::frozen_write_bit (143 samples, 0.19%)</title><rect x="33.1375%" y="1557" width="0.1918%" height="15" fill="rgb(218,68,53)" fg:x="24710" fg:w="143"/><text x="33.3875%" y="1567.50"></text></g><g><title>bitvec::access::BitAccess::write_bit (143 samples, 0.19%)</title><rect x="33.1375%" y="1541" width="0.1918%" height="15" fill="rgb(236,111,10)" fg:x="24710" fg:w="143"/><text x="33.3875%" y="1551.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::address (41 samples, 0.05%)</title><rect x="33.3293%" y="1541" width="0.0550%" height="15" fill="rgb(224,34,41)" fg:x="24853" fg:w="41"/><text x="33.5793%" y="1551.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::replace_unchecked (274 samples, 0.37%)</title><rect x="33.0785%" y="1589" width="0.3674%" height="15" fill="rgb(241,118,19)" fg:x="24666" fg:w="274"/><text x="33.3285%" y="1599.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::as_mut_bitptr (87 samples, 0.12%)</title><rect x="33.3293%" y="1573" width="0.1167%" height="15" fill="rgb(238,129,25)" fg:x="24853" fg:w="87"/><text x="33.5793%" y="1583.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::to_bitptr (87 samples, 0.12%)</title><rect x="33.3293%" y="1557" width="0.1167%" height="15" fill="rgb(238,22,31)" fg:x="24853" fg:w="87"/><text x="33.5793%" y="1567.50"></text></g><g><title>bitvec::ptr::span::BitSpan&lt;M,T,O&gt;::head (46 samples, 0.06%)</title><rect x="33.3843%" y="1541" width="0.0617%" height="15" fill="rgb(222,174,48)" fg:x="24894" fg:w="46"/><text x="33.6343%" y="1551.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::set (338 samples, 0.45%)</title><rect x="32.9994%" y="1621" width="0.4533%" height="15" fill="rgb(206,152,40)" fg:x="24607" fg:w="338"/><text x="33.2494%" y="1631.50"></text></g><g><title>bitvec::slice::BitSlice&lt;T,O&gt;::replace (338 samples, 0.45%)</title><rect x="32.9994%" y="1605" width="0.4533%" height="15" fill="rgb(218,99,54)" fg:x="24607" fg:w="338"/><text x="33.2494%" y="1615.50"></text></g><g><title>gmw::executor::GateOutputs&lt;Shares&gt;::set (515 samples, 0.69%)</title><rect x="32.8318%" y="1653" width="0.6906%" height="15" fill="rgb(220,174,26)" fg:x="24482" fg:w="515"/><text x="33.0818%" y="1663.50"></text></g><g><title>&lt;bitvec::vec::BitVec&lt;T&gt; as gmw::protocols::ShareStorage&lt;bool&gt;&gt;::set (390 samples, 0.52%)</title><rect x="32.9994%" y="1637" width="0.5230%" height="15" fill="rgb(245,116,9)" fg:x="24607" fg:w="390"/><text x="33.2494%" y="1647.50"></text></g><g><title>bitvec::vec::ops::&lt;impl core::ops::deref::DerefMut for bitvec::vec::BitVec&lt;T,O&gt;&gt;::deref_mut (52 samples, 0.07%)</title><rect x="33.4527%" y="1621" width="0.0697%" height="15" fill="rgb(209,72,35)" fg:x="24945" fg:w="52"/><text x="33.7027%" y="1631.50"></text></g><g><title>bitvec::vec::BitVec&lt;T,O&gt;::as_mut_bitslice (52 samples, 0.07%)</title><rect x="33.4527%" y="1605" width="0.0697%" height="15" fill="rgb(226,126,21)" fg:x="24945" fg:w="52"/><text x="33.7027%" y="1615.50"></text></g><g><title>&lt;tokio::sync::mpsc::bounded::Semaphore as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (15 samples, 0.02%)</title><rect x="33.5841%" y="1541" width="0.0201%" height="15" fill="rgb(227,192,1)" fg:x="25043" fg:w="15"/><text x="33.8341%" y="1551.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (15 samples, 0.02%)</title><rect x="33.5841%" y="1525" width="0.0201%" height="15" fill="rgb(237,180,29)" fg:x="25043" fg:w="15"/><text x="33.8341%" y="1535.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (14 samples, 0.02%)</title><rect x="33.5855%" y="1509" width="0.0188%" height="15" fill="rgb(230,197,35)" fg:x="25044" fg:w="14"/><text x="33.8355%" y="1519.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (14 samples, 0.02%)</title><rect x="33.5855%" y="1493" width="0.0188%" height="15" fill="rgb(246,193,31)" fg:x="25044" fg:w="14"/><text x="33.8355%" y="1503.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (14 samples, 0.02%)</title><rect x="33.5855%" y="1477" width="0.0188%" height="15" fill="rgb(241,36,4)" fg:x="25044" fg:w="14"/><text x="33.8355%" y="1487.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (14 samples, 0.02%)</title><rect x="33.5855%" y="1461" width="0.0188%" height="15" fill="rgb(241,130,17)" fg:x="25044" fg:w="14"/><text x="33.8355%" y="1471.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (14 samples, 0.02%)</title><rect x="33.5855%" y="1445" width="0.0188%" height="15" fill="rgb(206,137,32)" fg:x="25044" fg:w="14"/><text x="33.8355%" y="1455.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (13 samples, 0.02%)</title><rect x="33.6069%" y="1541" width="0.0174%" height="15" fill="rgb(237,228,51)" fg:x="25060" fg:w="13"/><text x="33.8569%" y="1551.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (16 samples, 0.02%)</title><rect x="33.6337%" y="1509" width="0.0215%" height="15" fill="rgb(243,6,42)" fg:x="25080" fg:w="16"/><text x="33.8837%" y="1519.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::read::{{closure}} (16 samples, 0.02%)</title><rect x="33.6337%" y="1493" width="0.0215%" height="15" fill="rgb(251,74,28)" fg:x="25080" fg:w="16"/><text x="33.8837%" y="1503.50"></text></g><g><title>core::ptr::read (16 samples, 0.02%)</title><rect x="33.6337%" y="1477" width="0.0215%" height="15" fill="rgb(218,20,49)" fg:x="25080" fg:w="16"/><text x="33.8837%" y="1487.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (16 samples, 0.02%)</title><rect x="33.6337%" y="1461" width="0.0215%" height="15" fill="rgb(238,28,14)" fg:x="25080" fg:w="16"/><text x="33.8837%" y="1471.50"></text></g><g><title>tokio::sync::mpsc::block::is_ready (10 samples, 0.01%)</title><rect x="33.6552%" y="1509" width="0.0134%" height="15" fill="rgb(229,40,46)" fg:x="25096" fg:w="10"/><text x="33.9052%" y="1519.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::read (33 samples, 0.04%)</title><rect x="33.6270%" y="1525" width="0.0443%" height="15" fill="rgb(244,195,20)" fg:x="25075" fg:w="33"/><text x="33.8770%" y="1535.50"></text></g><g><title>core::cmp::PartialEq::ne (8 samples, 0.01%)</title><rect x="33.6713%" y="1509" width="0.0107%" height="15" fill="rgb(253,56,35)" fg:x="25108" fg:w="8"/><text x="33.9213%" y="1519.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::reclaim_blocks (9 samples, 0.01%)</title><rect x="33.6713%" y="1525" width="0.0121%" height="15" fill="rgb(210,149,44)" fg:x="25108" fg:w="9"/><text x="33.9213%" y="1535.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (72 samples, 0.10%)</title><rect x="33.6243%" y="1541" width="0.0966%" height="15" fill="rgb(240,135,12)" fg:x="25073" fg:w="72"/><text x="33.8743%" y="1551.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::try_advancing_head (28 samples, 0.04%)</title><rect x="33.6833%" y="1525" width="0.0375%" height="15" fill="rgb(251,24,50)" fg:x="25117" fg:w="28"/><text x="33.9333%" y="1535.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (130 samples, 0.17%)</title><rect x="33.5680%" y="1573" width="0.1743%" height="15" fill="rgb(243,200,47)" fg:x="25031" fg:w="130"/><text x="33.8180%" y="1583.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (130 samples, 0.17%)</title><rect x="33.5680%" y="1557" width="0.1743%" height="15" fill="rgb(224,166,26)" fg:x="25031" fg:w="130"/><text x="33.8180%" y="1567.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (16 samples, 0.02%)</title><rect x="33.7209%" y="1541" width="0.0215%" height="15" fill="rgb(233,0,47)" fg:x="25145" fg:w="16"/><text x="33.9709%" y="1551.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register (16 samples, 0.02%)</title><rect x="33.7209%" y="1525" width="0.0215%" height="15" fill="rgb(253,80,5)" fg:x="25145" fg:w="16"/><text x="33.9709%" y="1535.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::catch_unwind (13 samples, 0.02%)</title><rect x="33.7249%" y="1509" width="0.0174%" height="15" fill="rgb(214,133,25)" fg:x="25148" fg:w="13"/><text x="33.9749%" y="1519.50"></text></g><g><title>std::panic::catch_unwind (13 samples, 0.02%)</title><rect x="33.7249%" y="1493" width="0.0174%" height="15" fill="rgb(209,27,14)" fg:x="25148" fg:w="13"/><text x="33.9749%" y="1503.50"></text></g><g><title>std::panicking::try (13 samples, 0.02%)</title><rect x="33.7249%" y="1477" width="0.0174%" height="15" fill="rgb(219,102,51)" fg:x="25148" fg:w="13"/><text x="33.9749%" y="1487.50"></text></g><g><title>std::panicking::try::do_call (13 samples, 0.02%)</title><rect x="33.7249%" y="1461" width="0.0174%" height="15" fill="rgb(237,18,16)" fg:x="25148" fg:w="13"/><text x="33.9749%" y="1471.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (13 samples, 0.02%)</title><rect x="33.7249%" y="1445" width="0.0174%" height="15" fill="rgb(241,85,17)" fg:x="25148" fg:w="13"/><text x="33.9749%" y="1455.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::{{closure}} (13 samples, 0.02%)</title><rect x="33.7249%" y="1429" width="0.0174%" height="15" fill="rgb(236,90,42)" fg:x="25148" fg:w="13"/><text x="33.9749%" y="1439.50"></text></g><g><title>&lt;&amp;core::task::wake::Waker as tokio::sync::task::atomic_waker::WakerRef&gt;::into_waker (13 samples, 0.02%)</title><rect x="33.7249%" y="1413" width="0.0174%" height="15" fill="rgb(249,57,21)" fg:x="25148" fg:w="13"/><text x="33.9749%" y="1423.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (13 samples, 0.02%)</title><rect x="33.7249%" y="1397" width="0.0174%" height="15" fill="rgb(243,12,36)" fg:x="25148" fg:w="13"/><text x="33.9749%" y="1407.50"></text></g><g><title>tokio::runtime::park::clone (13 samples, 0.02%)</title><rect x="33.7249%" y="1381" width="0.0174%" height="15" fill="rgb(253,128,47)" fg:x="25148" fg:w="13"/><text x="33.9749%" y="1391.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (13 samples, 0.02%)</title><rect x="33.7249%" y="1365" width="0.0174%" height="15" fill="rgb(207,33,20)" fg:x="25148" fg:w="13"/><text x="33.9749%" y="1375.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (13 samples, 0.02%)</title><rect x="33.7249%" y="1349" width="0.0174%" height="15" fill="rgb(233,215,35)" fg:x="25148" fg:w="13"/><text x="33.9749%" y="1359.50"></text></g><g><title>core::sync::atomic::atomic_add (13 samples, 0.02%)</title><rect x="33.7249%" y="1333" width="0.0174%" height="15" fill="rgb(249,188,52)" fg:x="25148" fg:w="13"/><text x="33.9749%" y="1343.50"></text></g><g><title>remoc::rch::mpsc::receiver::Receiver&lt;T,Codec,_&gt;::recv::{{closure}} (177 samples, 0.24%)</title><rect x="33.5224%" y="1653" width="0.2374%" height="15" fill="rgb(225,12,32)" fg:x="24997" fg:w="177"/><text x="33.7724%" y="1663.50"></text></g><g><title>tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::recv::{{closure}} (166 samples, 0.22%)</title><rect x="33.5372%" y="1637" width="0.2226%" height="15" fill="rgb(247,98,14)" fg:x="25008" fg:w="166"/><text x="33.7872%" y="1647.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (147 samples, 0.20%)</title><rect x="33.5627%" y="1621" width="0.1971%" height="15" fill="rgb(247,219,48)" fg:x="25027" fg:w="147"/><text x="33.8127%" y="1631.50"></text></g><g><title>tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::recv::{{closure}}::{{closure}} (147 samples, 0.20%)</title><rect x="33.5627%" y="1605" width="0.1971%" height="15" fill="rgb(253,60,48)" fg:x="25027" fg:w="147"/><text x="33.8127%" y="1615.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (146 samples, 0.20%)</title><rect x="33.5640%" y="1589" width="0.1958%" height="15" fill="rgb(245,15,52)" fg:x="25028" fg:w="146"/><text x="33.8140%" y="1599.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (13 samples, 0.02%)</title><rect x="33.7424%" y="1573" width="0.0174%" height="15" fill="rgb(220,133,28)" fg:x="25161" fg:w="13"/><text x="33.9924%" y="1583.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (8 samples, 0.01%)</title><rect x="33.7799%" y="1605" width="0.0107%" height="15" fill="rgb(217,180,4)" fg:x="25189" fg:w="8"/><text x="34.0299%" y="1615.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (8 samples, 0.01%)</title><rect x="33.7799%" y="1589" width="0.0107%" height="15" fill="rgb(251,24,1)" fg:x="25189" fg:w="8"/><text x="34.0299%" y="1599.50"></text></g><g><title>alloc::sync::Weak&lt;T&gt;::upgrade (20 samples, 0.03%)</title><rect x="33.7786%" y="1637" width="0.0268%" height="15" fill="rgb(212,185,49)" fg:x="25188" fg:w="20"/><text x="34.0286%" y="1647.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_update (19 samples, 0.03%)</title><rect x="33.7799%" y="1621" width="0.0255%" height="15" fill="rgb(215,175,22)" fg:x="25189" fg:w="19"/><text x="34.0299%" y="1631.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (11 samples, 0.01%)</title><rect x="33.7906%" y="1605" width="0.0148%" height="15" fill="rgb(250,205,14)" fg:x="25197" fg:w="11"/><text x="34.0406%" y="1615.50"></text></g><g><title>core::sync::atomic::atomic_load (11 samples, 0.01%)</title><rect x="33.7906%" y="1589" width="0.0148%" height="15" fill="rgb(225,211,22)" fg:x="25197" fg:w="11"/><text x="34.0406%" y="1599.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (24 samples, 0.03%)</title><rect x="33.8550%" y="1461" width="0.0322%" height="15" fill="rgb(251,179,42)" fg:x="25245" fg:w="24"/><text x="34.1050%" y="1471.50"></text></g><g><title>core::sync::atomic::atomic_load (24 samples, 0.03%)</title><rect x="33.8550%" y="1445" width="0.0322%" height="15" fill="rgb(208,216,51)" fg:x="25245" fg:w="24"/><text x="34.1050%" y="1455.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (46 samples, 0.06%)</title><rect x="33.8872%" y="1461" width="0.0617%" height="15" fill="rgb(235,36,11)" fg:x="25269" fg:w="46"/><text x="34.1372%" y="1471.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (40 samples, 0.05%)</title><rect x="33.8952%" y="1445" width="0.0536%" height="15" fill="rgb(213,189,28)" fg:x="25275" fg:w="40"/><text x="34.1452%" y="1455.50"></text></g><g><title>clock_gettime (40 samples, 0.05%)</title><rect x="33.8952%" y="1429" width="0.0536%" height="15" fill="rgb(227,203,42)" fg:x="25275" fg:w="40"/><text x="34.1452%" y="1439.50"></text></g><g><title>__vdso_clock_gettime (22 samples, 0.03%)</title><rect x="33.9194%" y="1413" width="0.0295%" height="15" fill="rgb(244,72,36)" fg:x="25293" fg:w="22"/><text x="34.1694%" y="1423.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (22 samples, 0.03%)</title><rect x="33.9489%" y="1461" width="0.0295%" height="15" fill="rgb(213,53,17)" fg:x="25315" fg:w="22"/><text x="34.1989%" y="1471.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (10 samples, 0.01%)</title><rect x="33.9650%" y="1445" width="0.0134%" height="15" fill="rgb(207,167,3)" fg:x="25327" fg:w="10"/><text x="34.2150%" y="1455.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (10 samples, 0.01%)</title><rect x="33.9650%" y="1429" width="0.0134%" height="15" fill="rgb(216,98,30)" fg:x="25327" fg:w="10"/><text x="34.2150%" y="1439.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (10 samples, 0.01%)</title><rect x="33.9650%" y="1413" width="0.0134%" height="15" fill="rgb(236,123,15)" fg:x="25327" fg:w="10"/><text x="34.2150%" y="1423.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (118 samples, 0.16%)</title><rect x="33.8309%" y="1493" width="0.1582%" height="15" fill="rgb(248,81,50)" fg:x="25227" fg:w="118"/><text x="34.0809%" y="1503.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (115 samples, 0.15%)</title><rect x="33.8349%" y="1477" width="0.1542%" height="15" fill="rgb(214,120,4)" fg:x="25230" fg:w="115"/><text x="34.0849%" y="1487.50"></text></g><g><title>parking_lot_core::parking_lot::unlock_bucket_pair (8 samples, 0.01%)</title><rect x="33.9784%" y="1461" width="0.0107%" height="15" fill="rgb(208,179,34)" fg:x="25337" fg:w="8"/><text x="34.2284%" y="1471.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (8 samples, 0.01%)</title><rect x="33.9784%" y="1445" width="0.0107%" height="15" fill="rgb(227,140,7)" fg:x="25337" fg:w="8"/><text x="34.2284%" y="1455.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (8 samples, 0.01%)</title><rect x="33.9784%" y="1429" width="0.0107%" height="15" fill="rgb(214,22,6)" fg:x="25337" fg:w="8"/><text x="34.2284%" y="1439.50"></text></g><g><title>core::sync::atomic::atomic_sub (8 samples, 0.01%)</title><rect x="33.9784%" y="1413" width="0.0107%" height="15" fill="rgb(207,137,27)" fg:x="25337" fg:w="8"/><text x="34.2284%" y="1423.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked (19 samples, 0.03%)</title><rect x="33.9958%" y="1461" width="0.0255%" height="15" fill="rgb(210,8,46)" fg:x="25350" fg:w="19"/><text x="34.2458%" y="1471.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (18 samples, 0.02%)</title><rect x="33.9972%" y="1445" width="0.0241%" height="15" fill="rgb(240,16,54)" fg:x="25351" fg:w="18"/><text x="34.2472%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::task::inject::Pointers&gt;&gt; (10 samples, 0.01%)</title><rect x="34.0253%" y="1445" width="0.0134%" height="15" fill="rgb(211,209,29)" fg:x="25372" fg:w="10"/><text x="34.2753%" y="1455.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::task::inject::Pointers&gt;&gt; (10 samples, 0.01%)</title><rect x="34.0253%" y="1429" width="0.0134%" height="15" fill="rgb(226,228,24)" fg:x="25372" fg:w="10"/><text x="34.2753%" y="1439.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.01%)</title><rect x="34.0253%" y="1413" width="0.0134%" height="15" fill="rgb(222,84,9)" fg:x="25372" fg:w="10"/><text x="34.2753%" y="1423.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (10 samples, 0.01%)</title><rect x="34.0253%" y="1397" width="0.0134%" height="15" fill="rgb(234,203,30)" fg:x="25372" fg:w="10"/><text x="34.2753%" y="1407.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (10 samples, 0.01%)</title><rect x="34.0253%" y="1381" width="0.0134%" height="15" fill="rgb(238,109,14)" fg:x="25372" fg:w="10"/><text x="34.2753%" y="1391.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (10 samples, 0.01%)</title><rect x="34.0253%" y="1365" width="0.0134%" height="15" fill="rgb(233,206,34)" fg:x="25372" fg:w="10"/><text x="34.2753%" y="1375.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (48 samples, 0.06%)</title><rect x="33.9891%" y="1493" width="0.0644%" height="15" fill="rgb(220,167,47)" fg:x="25345" fg:w="48"/><text x="34.2391%" y="1503.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::{{closure}} (43 samples, 0.06%)</title><rect x="33.9958%" y="1477" width="0.0577%" height="15" fill="rgb(238,105,10)" fg:x="25350" fg:w="43"/><text x="34.2458%" y="1487.50"></text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::push (24 samples, 0.03%)</title><rect x="34.0213%" y="1461" width="0.0322%" height="15" fill="rgb(213,227,17)" fg:x="25369" fg:w="24"/><text x="34.2713%" y="1471.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (11 samples, 0.01%)</title><rect x="34.0387%" y="1445" width="0.0148%" height="15" fill="rgb(217,132,38)" fg:x="25382" fg:w="11"/><text x="34.2887%" y="1455.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (11 samples, 0.01%)</title><rect x="34.0387%" y="1429" width="0.0148%" height="15" fill="rgb(242,146,4)" fg:x="25382" fg:w="11"/><text x="34.2887%" y="1439.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (11 samples, 0.01%)</title><rect x="34.0387%" y="1413" width="0.0148%" height="15" fill="rgb(212,61,9)" fg:x="25382" fg:w="11"/><text x="34.2887%" y="1423.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (11 samples, 0.01%)</title><rect x="34.0387%" y="1397" width="0.0148%" height="15" fill="rgb(247,126,22)" fg:x="25382" fg:w="11"/><text x="34.2887%" y="1407.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (11 samples, 0.01%)</title><rect x="34.0387%" y="1381" width="0.0148%" height="15" fill="rgb(220,196,2)" fg:x="25382" fg:w="11"/><text x="34.2887%" y="1391.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (13 samples, 0.02%)</title><rect x="34.0548%" y="1429" width="0.0174%" height="15" fill="rgb(208,46,4)" fg:x="25394" fg:w="13"/><text x="34.3048%" y="1439.50"></text></g><g><title>std::sys::unix::fs::File::write (13 samples, 0.02%)</title><rect x="34.0548%" y="1413" width="0.0174%" height="15" fill="rgb(252,104,46)" fg:x="25394" fg:w="13"/><text x="34.3048%" y="1423.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (13 samples, 0.02%)</title><rect x="34.0548%" y="1397" width="0.0174%" height="15" fill="rgb(237,152,48)" fg:x="25394" fg:w="13"/><text x="34.3048%" y="1407.50"></text></g><g><title>write (13 samples, 0.02%)</title><rect x="34.0548%" y="1381" width="0.0174%" height="15" fill="rgb(221,59,37)" fg:x="25394" fg:w="13"/><text x="34.3048%" y="1391.50"></text></g><g><title>mio::sys::unix::waker::eventfd::Waker::wake (14 samples, 0.02%)</title><rect x="34.0548%" y="1445" width="0.0188%" height="15" fill="rgb(209,202,51)" fg:x="25394" fg:w="14"/><text x="34.3048%" y="1455.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (16 samples, 0.02%)</title><rect x="34.0535%" y="1493" width="0.0215%" height="15" fill="rgb(228,81,30)" fg:x="25393" fg:w="16"/><text x="34.3035%" y="1503.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (16 samples, 0.02%)</title><rect x="34.0535%" y="1477" width="0.0215%" height="15" fill="rgb(227,42,39)" fg:x="25393" fg:w="16"/><text x="34.3035%" y="1487.50"></text></g><g><title>tokio::runtime::io::Handle::unpark (15 samples, 0.02%)</title><rect x="34.0548%" y="1461" width="0.0201%" height="15" fill="rgb(221,26,2)" fg:x="25394" fg:w="15"/><text x="34.3048%" y="1471.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (14 samples, 0.02%)</title><rect x="34.0910%" y="1461" width="0.0188%" height="15" fill="rgb(254,61,31)" fg:x="25421" fg:w="14"/><text x="34.3410%" y="1471.50"></text></g><g><title>core::sync::atomic::atomic_swap (14 samples, 0.02%)</title><rect x="34.0910%" y="1445" width="0.0188%" height="15" fill="rgb(222,173,38)" fg:x="25421" fg:w="14"/><text x="34.3410%" y="1455.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (214 samples, 0.29%)</title><rect x="33.8309%" y="1525" width="0.2870%" height="15" fill="rgb(218,50,12)" fg:x="25227" fg:w="214"/><text x="34.0809%" y="1535.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (214 samples, 0.29%)</title><rect x="33.8309%" y="1509" width="0.2870%" height="15" fill="rgb(223,88,40)" fg:x="25227" fg:w="214"/><text x="34.0809%" y="1519.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (32 samples, 0.04%)</title><rect x="34.0749%" y="1493" width="0.0429%" height="15" fill="rgb(237,54,19)" fg:x="25409" fg:w="32"/><text x="34.3249%" y="1503.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (25 samples, 0.03%)</title><rect x="34.0843%" y="1477" width="0.0335%" height="15" fill="rgb(251,129,25)" fg:x="25416" fg:w="25"/><text x="34.3343%" y="1487.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (228 samples, 0.31%)</title><rect x="33.8309%" y="1541" width="0.3058%" height="15" fill="rgb(238,97,19)" fg:x="25227" fg:w="228"/><text x="34.0809%" y="1551.50"></text></g><g><title>tokio::runtime::task::raw::schedule (14 samples, 0.02%)</title><rect x="34.1179%" y="1525" width="0.0188%" height="15" fill="rgb(240,169,18)" fg:x="25441" fg:w="14"/><text x="34.3679%" y="1535.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (246 samples, 0.33%)</title><rect x="33.8255%" y="1573" width="0.3299%" height="15" fill="rgb(230,187,49)" fg:x="25223" fg:w="246"/><text x="34.0755%" y="1583.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (246 samples, 0.33%)</title><rect x="33.8255%" y="1557" width="0.3299%" height="15" fill="rgb(209,44,26)" fg:x="25223" fg:w="246"/><text x="34.0755%" y="1567.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (14 samples, 0.02%)</title><rect x="34.1366%" y="1541" width="0.0188%" height="15" fill="rgb(244,0,6)" fg:x="25455" fg:w="14"/><text x="34.3866%" y="1551.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (14 samples, 0.02%)</title><rect x="34.1366%" y="1525" width="0.0188%" height="15" fill="rgb(248,18,21)" fg:x="25455" fg:w="14"/><text x="34.3866%" y="1535.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::write (26 samples, 0.03%)</title><rect x="34.1594%" y="1557" width="0.0349%" height="15" fill="rgb(245,180,19)" fg:x="25472" fg:w="26"/><text x="34.4094%" y="1567.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::set_ready (25 samples, 0.03%)</title><rect x="34.1608%" y="1541" width="0.0335%" height="15" fill="rgb(252,118,36)" fg:x="25473" fg:w="25"/><text x="34.4108%" y="1551.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (24 samples, 0.03%)</title><rect x="34.1621%" y="1525" width="0.0322%" height="15" fill="rgb(210,224,19)" fg:x="25474" fg:w="24"/><text x="34.4121%" y="1535.50"></text></g><g><title>core::sync::atomic::atomic_or (24 samples, 0.03%)</title><rect x="34.1621%" y="1509" width="0.0322%" height="15" fill="rgb(218,30,24)" fg:x="25474" fg:w="24"/><text x="34.4121%" y="1519.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::push (35 samples, 0.05%)</title><rect x="34.1554%" y="1573" width="0.0469%" height="15" fill="rgb(219,75,50)" fg:x="25469" fg:w="35"/><text x="34.4054%" y="1583.50"></text></g><g><title>tokio::sync::mpsc::bounded::Permit&lt;T&gt;::send (295 samples, 0.40%)</title><rect x="33.8201%" y="1621" width="0.3956%" height="15" fill="rgb(234,72,50)" fg:x="25219" fg:w="295"/><text x="34.0701%" y="1631.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (295 samples, 0.40%)</title><rect x="33.8201%" y="1605" width="0.3956%" height="15" fill="rgb(219,100,48)" fg:x="25219" fg:w="295"/><text x="34.0701%" y="1615.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (295 samples, 0.40%)</title><rect x="33.8201%" y="1589" width="0.3956%" height="15" fill="rgb(253,5,41)" fg:x="25219" fg:w="295"/><text x="34.0701%" y="1599.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (10 samples, 0.01%)</title><rect x="34.2023%" y="1573" width="0.0134%" height="15" fill="rgb(247,181,11)" fg:x="25504" fg:w="10"/><text x="34.4523%" y="1583.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (13 samples, 0.02%)</title><rect x="34.2292%" y="1557" width="0.0174%" height="15" fill="rgb(222,223,25)" fg:x="25524" fg:w="13"/><text x="34.4792%" y="1567.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (13 samples, 0.02%)</title><rect x="34.2292%" y="1541" width="0.0174%" height="15" fill="rgb(214,198,28)" fg:x="25524" fg:w="13"/><text x="34.4792%" y="1551.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (22 samples, 0.03%)</title><rect x="34.2225%" y="1589" width="0.0295%" height="15" fill="rgb(230,46,43)" fg:x="25519" fg:w="22"/><text x="34.4725%" y="1599.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::poll_acquire (18 samples, 0.02%)</title><rect x="34.2278%" y="1573" width="0.0241%" height="15" fill="rgb(233,65,53)" fg:x="25523" fg:w="18"/><text x="34.4778%" y="1583.50"></text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::send::{{closure}} (333 samples, 0.45%)</title><rect x="33.8081%" y="1637" width="0.4466%" height="15" fill="rgb(221,121,27)" fg:x="25210" fg:w="333"/><text x="34.0581%" y="1647.50"></text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::reserve::{{closure}} (29 samples, 0.04%)</title><rect x="34.2157%" y="1621" width="0.0389%" height="15" fill="rgb(247,70,47)" fg:x="25514" fg:w="29"/><text x="34.4657%" y="1631.50"></text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::reserve_inner::{{closure}} (28 samples, 0.04%)</title><rect x="34.2171%" y="1605" width="0.0375%" height="15" fill="rgb(228,85,35)" fg:x="25515" fg:w="28"/><text x="34.4671%" y="1615.50"></text></g><g><title>tokio::loom::std::parking_lot::RwLock&lt;T&gt;::read (15 samples, 0.02%)</title><rect x="34.2560%" y="1621" width="0.0201%" height="15" fill="rgb(209,50,18)" fg:x="25544" fg:w="15"/><text x="34.5060%" y="1631.50"></text></g><g><title>lock_api::rwlock::RwLock&lt;R,T&gt;::read (15 samples, 0.02%)</title><rect x="34.2560%" y="1605" width="0.0201%" height="15" fill="rgb(250,19,35)" fg:x="25544" fg:w="15"/><text x="34.5060%" y="1615.50"></text></g><g><title>&lt;parking_lot::raw_rwlock::RawRwLock as lock_api::rwlock::RawRwLock&gt;::lock_shared (15 samples, 0.02%)</title><rect x="34.2560%" y="1589" width="0.0201%" height="15" fill="rgb(253,107,29)" fg:x="25544" fg:w="15"/><text x="34.5060%" y="1599.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::try_lock_shared_fast (15 samples, 0.02%)</title><rect x="34.2560%" y="1573" width="0.0201%" height="15" fill="rgb(252,179,29)" fg:x="25544" fg:w="15"/><text x="34.5060%" y="1583.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (8 samples, 0.01%)</title><rect x="34.2654%" y="1557" width="0.0107%" height="15" fill="rgb(238,194,6)" fg:x="25551" fg:w="8"/><text x="34.5154%" y="1567.50"></text></g><g><title>core::sync::atomic::atomic_load (8 samples, 0.01%)</title><rect x="34.2654%" y="1541" width="0.0107%" height="15" fill="rgb(238,164,29)" fg:x="25551" fg:w="8"/><text x="34.5154%" y="1551.50"></text></g><g><title>tokio::sync::watch::state::AtomicState::load (15 samples, 0.02%)</title><rect x="34.2761%" y="1621" width="0.0201%" height="15" fill="rgb(224,25,9)" fg:x="25559" fg:w="15"/><text x="34.5261%" y="1631.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (15 samples, 0.02%)</title><rect x="34.2761%" y="1605" width="0.0201%" height="15" fill="rgb(244,153,23)" fg:x="25559" fg:w="15"/><text x="34.5261%" y="1615.50"></text></g><g><title>core::sync::atomic::atomic_load (15 samples, 0.02%)</title><rect x="34.2761%" y="1589" width="0.0201%" height="15" fill="rgb(212,203,14)" fg:x="25559" fg:w="15"/><text x="34.5261%" y="1599.50"></text></g><g><title>remoc::rch::mpsc::sender::Sender&lt;T,Codec,_&gt;::send::{{closure}} (402 samples, 0.54%)</title><rect x="33.7598%" y="1653" width="0.5391%" height="15" fill="rgb(220,164,20)" fg:x="25174" fg:w="402"/><text x="34.0098%" y="1663.50"></text></g><g><title>tokio::sync::watch::Receiver&lt;T&gt;::borrow (33 samples, 0.04%)</title><rect x="34.2546%" y="1637" width="0.0443%" height="15" fill="rgb(222,203,48)" fg:x="25543" fg:w="33"/><text x="34.5046%" y="1647.50"></text></g><g><title>gmw::executor::Executor&lt;P,Idx&gt;::execute::{{closure}}::{{closure}} (22,887 samples, 30.69%)</title><rect x="3.6624%" y="1685" width="30.6928%" height="15" fill="rgb(215,159,22)" fg:x="2731" fg:w="22887"/><text x="3.9124%" y="1695.50">gmw::executor::Executor&lt;P,Idx&gt;::execute::{{closure..</text></g><g><title>gmw::executor::Executor&lt;P,Idx&gt;::execute::{{closure}}::{{closure}}::{{closure}} (22,876 samples, 30.68%)</title><rect x="3.6772%" y="1669" width="30.6780%" height="15" fill="rgb(216,183,47)" fg:x="2742" fg:w="22876"/><text x="3.9272%" y="1679.50">gmw::executor::Executor&lt;P,Idx&gt;::execute::{{closur..</text></g><g><title>tracing_core::metadata::LevelFilter::current (42 samples, 0.06%)</title><rect x="34.2989%" y="1653" width="0.0563%" height="15" fill="rgb(229,195,25)" fg:x="25576" fg:w="42"/><text x="34.5489%" y="1663.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (42 samples, 0.06%)</title><rect x="34.2989%" y="1637" width="0.0563%" height="15" fill="rgb(224,132,51)" fg:x="25576" fg:w="42"/><text x="34.5489%" y="1647.50"></text></g><g><title>core::sync::atomic::atomic_load (42 samples, 0.06%)</title><rect x="34.2989%" y="1621" width="0.0563%" height="15" fill="rgb(240,63,7)" fg:x="25576" fg:w="42"/><text x="34.5489%" y="1631.50"></text></g><g><title>&lt;tracing_subscriber::fmt::fmt_layer::Layer&lt;S,N,E,W&gt; as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::on_enter (9 samples, 0.01%)</title><rect x="34.3552%" y="1605" width="0.0121%" height="15" fill="rgb(249,182,41)" fg:x="25618" fg:w="9"/><text x="34.6052%" y="1615.50"></text></g><g><title>sharded_slab::pool::Pool&lt;T,C&gt;::get (18 samples, 0.02%)</title><rect x="34.3713%" y="1573" width="0.0241%" height="15" fill="rgb(243,47,26)" fg:x="25630" fg:w="18"/><text x="34.6213%" y="1583.50"></text></g><g><title>sharded_slab::shard::Shard&lt;T,C&gt;::with_slot (11 samples, 0.01%)</title><rect x="34.3807%" y="1557" width="0.0148%" height="15" fill="rgb(233,48,2)" fg:x="25637" fg:w="11"/><text x="34.6307%" y="1567.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (24 samples, 0.03%)</title><rect x="34.3673%" y="1605" width="0.0322%" height="15" fill="rgb(244,165,34)" fg:x="25627" fg:w="24"/><text x="34.6173%" y="1615.50"></text></g><g><title>tracing_subscriber::registry::sharded::Registry::get (21 samples, 0.03%)</title><rect x="34.3713%" y="1589" width="0.0282%" height="15" fill="rgb(207,89,7)" fg:x="25630" fg:w="21"/><text x="34.6213%" y="1599.50"></text></g><g><title>thread_local::ThreadLocal&lt;T&gt;::get_inner (14 samples, 0.02%)</title><rect x="34.4035%" y="1541" width="0.0188%" height="15" fill="rgb(244,117,36)" fg:x="25654" fg:w="14"/><text x="34.6535%" y="1551.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (8 samples, 0.01%)</title><rect x="34.4115%" y="1525" width="0.0107%" height="15" fill="rgb(226,144,34)" fg:x="25660" fg:w="8"/><text x="34.6615%" y="1535.50"></text></g><g><title>core::sync::atomic::atomic_load (8 samples, 0.01%)</title><rect x="34.4115%" y="1509" width="0.0107%" height="15" fill="rgb(213,23,19)" fg:x="25660" fg:w="8"/><text x="34.6615%" y="1519.50"></text></g><g><title>thread_local::ThreadLocal&lt;T&gt;::get_or_default (16 samples, 0.02%)</title><rect x="34.4035%" y="1589" width="0.0215%" height="15" fill="rgb(217,75,12)" fg:x="25654" fg:w="16"/><text x="34.6535%" y="1599.50"></text></g><g><title>thread_local::ThreadLocal&lt;T&gt;::get_or (16 samples, 0.02%)</title><rect x="34.4035%" y="1573" width="0.0215%" height="15" fill="rgb(224,159,17)" fg:x="25654" fg:w="16"/><text x="34.6535%" y="1583.50"></text></g><g><title>thread_local::ThreadLocal&lt;T&gt;::get_or_try (16 samples, 0.02%)</title><rect x="34.4035%" y="1557" width="0.0215%" height="15" fill="rgb(217,118,1)" fg:x="25654" fg:w="16"/><text x="34.6535%" y="1567.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (27 samples, 0.04%)</title><rect x="34.3995%" y="1605" width="0.0362%" height="15" fill="rgb(232,180,48)" fg:x="25651" fg:w="27"/><text x="34.6495%" y="1615.50"></text></g><g><title>tracing_subscriber::registry::stack::SpanStack::push (8 samples, 0.01%)</title><rect x="34.4250%" y="1589" width="0.0107%" height="15" fill="rgb(230,27,33)" fg:x="25670" fg:w="8"/><text x="34.6750%" y="1599.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enter (62 samples, 0.08%)</title><rect x="34.3552%" y="1621" width="0.0831%" height="15" fill="rgb(205,31,21)" fg:x="25618" fg:w="62"/><text x="34.6052%" y="1631.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (63 samples, 0.08%)</title><rect x="34.3552%" y="1653" width="0.0845%" height="15" fill="rgb(253,59,4)" fg:x="25618" fg:w="63"/><text x="34.6052%" y="1663.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enter (63 samples, 0.08%)</title><rect x="34.3552%" y="1637" width="0.0845%" height="15" fill="rgb(224,201,9)" fg:x="25618" fg:w="63"/><text x="34.6052%" y="1647.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::enter (13 samples, 0.02%)</title><rect x="34.4397%" y="1653" width="0.0174%" height="15" fill="rgb(229,206,30)" fg:x="25681" fg:w="13"/><text x="34.6897%" y="1663.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;S&gt; as tracing_core::subscriber::Subscriber&gt;::enter (13 samples, 0.02%)</title><rect x="34.4397%" y="1637" width="0.0174%" height="15" fill="rgb(212,67,47)" fg:x="25681" fg:w="13"/><text x="34.6897%" y="1647.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::convert::AsRef&lt;T&gt;&gt;::as_ref (11 samples, 0.01%)</title><rect x="34.4424%" y="1621" width="0.0148%" height="15" fill="rgb(211,96,50)" fg:x="25683" fg:w="11"/><text x="34.6924%" y="1631.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (11 samples, 0.01%)</title><rect x="34.4424%" y="1605" width="0.0148%" height="15" fill="rgb(252,114,18)" fg:x="25683" fg:w="11"/><text x="34.6924%" y="1615.50"></text></g><g><title>gmw::executor::Executor&lt;P,Idx&gt;::execute::{{closure}} (23,061 samples, 30.93%)</title><rect x="3.5364%" y="1717" width="30.9261%" height="15" fill="rgb(223,58,37)" fg:x="2637" fg:w="23061"/><text x="3.7864%" y="1727.50">gmw::executor::Executor&lt;P,Idx&gt;::execute::{{closure..</text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (23,052 samples, 30.91%)</title><rect x="3.5484%" y="1701" width="30.9141%" height="15" fill="rgb(237,70,4)" fg:x="2646" fg:w="23052"/><text x="3.7984%" y="1711.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::fut..</text></g><g><title>tracing::span::Span::enter (80 samples, 0.11%)</title><rect x="34.3552%" y="1685" width="0.1073%" height="15" fill="rgb(244,85,46)" fg:x="25618" fg:w="80"/><text x="34.6052%" y="1695.50"></text></g><g><title>tracing::span::Span::do_enter (80 samples, 0.11%)</title><rect x="34.3552%" y="1669" width="0.1073%" height="15" fill="rgb(223,39,52)" fg:x="25618" fg:w="80"/><text x="34.6052%" y="1679.50"></text></g><g><title>gmw::bench::BenchParty&lt;P,Idx&gt;::bench::{{closure}}::{{closure}} (23,068 samples, 30.94%)</title><rect x="3.5283%" y="1765" width="30.9355%" height="15" fill="rgb(218,200,14)" fg:x="2631" fg:w="23068"/><text x="3.7783%" y="1775.50">gmw::bench::BenchParty&lt;P,Idx&gt;::bench::{{closure}}:..</text></g><g><title>mpc_channel::util::Statistics::record::{{closure}} (23,062 samples, 30.93%)</title><rect x="3.5364%" y="1749" width="30.9275%" height="15" fill="rgb(208,171,16)" fg:x="2637" fg:w="23062"/><text x="3.7864%" y="1759.50">mpc_channel::util::Statistics::record::{{closure}}</text></g><g><title>mpc_channel::util::Statistics::record_for::{{closure}} (23,062 samples, 30.93%)</title><rect x="3.5364%" y="1733" width="30.9275%" height="15" fill="rgb(234,200,18)" fg:x="2637" fg:w="23062"/><text x="3.7864%" y="1743.50">mpc_channel::util::Statistics::record_for::{{closu..</text></g><g><title>gmw::circuit::static_layers::Circuit&lt;G,Idx&gt;::get_circ (10 samples, 0.01%)</title><rect x="34.4665%" y="1765" width="0.0134%" height="15" fill="rgb(228,45,11)" fg:x="25701" fg:w="10"/><text x="34.7165%" y="1775.50"></text></g><g><title>gmw::executor::Executor&lt;P,Idx&gt;::execute::{{closure}} (11 samples, 0.01%)</title><rect x="34.4799%" y="1765" width="0.0148%" height="15" fill="rgb(237,182,11)" fg:x="25711" fg:w="11"/><text x="34.7299%" y="1775.50"></text></g><g><title>gmw::executor::Executor&lt;P,Idx&gt;::execute::{{closure}}::{{closure}} (12 samples, 0.02%)</title><rect x="34.4947%" y="1765" width="0.0161%" height="15" fill="rgb(241,175,49)" fg:x="25722" fg:w="12"/><text x="34.7447%" y="1775.50"></text></g><g><title>&lt;gmw::protocols::boolean_gmw::BooleanGate as gmw::protocols::Gate&gt;::evaluate_non_interactive (110 samples, 0.15%)</title><rect x="34.8058%" y="1749" width="0.1475%" height="15" fill="rgb(247,38,35)" fg:x="25954" fg:w="110"/><text x="35.0558%" y="1759.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (110 samples, 0.15%)</title><rect x="34.8058%" y="1733" width="0.1475%" height="15" fill="rgb(228,39,49)" fg:x="25954" fg:w="110"/><text x="35.0558%" y="1743.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (52 samples, 0.07%)</title><rect x="34.8836%" y="1717" width="0.0697%" height="15" fill="rgb(226,101,26)" fg:x="26012" fg:w="52"/><text x="35.1336%" y="1727.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (14 samples, 0.02%)</title><rect x="34.9533%" y="1749" width="0.0188%" height="15" fill="rgb(206,141,19)" fg:x="26064" fg:w="14"/><text x="35.2033%" y="1759.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (14 samples, 0.02%)</title><rect x="34.9533%" y="1733" width="0.0188%" height="15" fill="rgb(211,200,13)" fg:x="26064" fg:w="14"/><text x="35.2033%" y="1743.50"></text></g><g><title>gmw::circuit::ExecutableCircuit&lt;G,Idx&gt;::simd_size (42 samples, 0.06%)</title><rect x="34.9734%" y="1749" width="0.0563%" height="15" fill="rgb(241,121,6)" fg:x="26079" fg:w="42"/><text x="35.2234%" y="1759.50"></text></g><g><title>gmw::circuit::static_layers::Circuit&lt;G,Idx&gt;::get_circ (42 samples, 0.06%)</title><rect x="34.9734%" y="1733" width="0.0563%" height="15" fill="rgb(234,221,29)" fg:x="26079" fg:w="42"/><text x="35.2234%" y="1743.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (42 samples, 0.06%)</title><rect x="34.9734%" y="1717" width="0.0563%" height="15" fill="rgb(229,136,5)" fg:x="26079" fg:w="42"/><text x="35.2234%" y="1727.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (42 samples, 0.06%)</title><rect x="34.9734%" y="1701" width="0.0563%" height="15" fill="rgb(238,36,11)" fg:x="26079" fg:w="42"/><text x="35.2234%" y="1711.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (42 samples, 0.06%)</title><rect x="34.9734%" y="1685" width="0.0563%" height="15" fill="rgb(251,55,41)" fg:x="26079" fg:w="42"/><text x="35.2234%" y="1695.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (42 samples, 0.06%)</title><rect x="34.9734%" y="1669" width="0.0563%" height="15" fill="rgb(242,34,40)" fg:x="26079" fg:w="42"/><text x="35.2234%" y="1679.50"></text></g><g><title>hashbrown::map::make_hash (42 samples, 0.06%)</title><rect x="34.9734%" y="1653" width="0.0563%" height="15" fill="rgb(215,42,17)" fg:x="26079" fg:w="42"/><text x="35.2234%" y="1663.50"></text></g><g><title>gmw::executor::Executor&lt;P,Idx&gt;::execute::{{closure}}::{{closure}}::{{closure}} (397 samples, 0.53%)</title><rect x="34.5108%" y="1765" width="0.5324%" height="15" fill="rgb(207,44,46)" fg:x="25734" fg:w="397"/><text x="34.7608%" y="1775.50"></text></g><g><title>gmw::executor::GateOutputs&lt;Shares&gt;::set (10 samples, 0.01%)</title><rect x="35.0512%" y="1765" width="0.0134%" height="15" fill="rgb(211,206,28)" fg:x="26137" fg:w="10"/><text x="35.3012%" y="1775.50"></text></g><g><title>gmw::mul_triple::boolean::MulTriple::a (19 samples, 0.03%)</title><rect x="35.0646%" y="1765" width="0.0255%" height="15" fill="rgb(237,167,16)" fg:x="26147" fg:w="19"/><text x="35.3146%" y="1775.50"></text></g><g><title>gmw::mul_triple::boolean::MulTriple::b (23 samples, 0.03%)</title><rect x="35.0901%" y="1765" width="0.0308%" height="15" fill="rgb(233,66,6)" fg:x="26166" fg:w="23"/><text x="35.3401%" y="1775.50"></text></g><g><title>gmw::mul_triple::boolean::MulTriple::c (9 samples, 0.01%)</title><rect x="35.1210%" y="1765" width="0.0121%" height="15" fill="rgb(246,123,29)" fg:x="26189" fg:w="9"/><text x="35.3710%" y="1775.50"></text></g><g><title>malloc (15 samples, 0.02%)</title><rect x="35.1344%" y="1765" width="0.0201%" height="15" fill="rgb(209,62,40)" fg:x="26199" fg:w="15"/><text x="35.3844%" y="1775.50"></text></g><g><title>syscall (14 samples, 0.02%)</title><rect x="35.1585%" y="1765" width="0.0188%" height="15" fill="rgb(218,4,25)" fg:x="26217" fg:w="14"/><text x="35.4085%" y="1775.50"></text></g><g><title>tokio::runtime::defer::Defer::wake (10 samples, 0.01%)</title><rect x="35.1773%" y="1765" width="0.0134%" height="15" fill="rgb(253,91,49)" fg:x="26231" fg:w="10"/><text x="35.4273%" y="1775.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (10 samples, 0.01%)</title><rect x="35.1773%" y="1749" width="0.0134%" height="15" fill="rgb(228,155,29)" fg:x="26231" fg:w="10"/><text x="35.4273%" y="1759.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (10 samples, 0.01%)</title><rect x="35.1773%" y="1733" width="0.0134%" height="15" fill="rgb(243,57,37)" fg:x="26231" fg:w="10"/><text x="35.4273%" y="1743.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (10 samples, 0.01%)</title><rect x="35.1773%" y="1717" width="0.0134%" height="15" fill="rgb(244,167,17)" fg:x="26231" fg:w="10"/><text x="35.4273%" y="1727.50"></text></g><g><title>tokio::runtime::coop::Budget::initial (14 samples, 0.02%)</title><rect x="35.2269%" y="1733" width="0.0188%" height="15" fill="rgb(207,181,38)" fg:x="26268" fg:w="14"/><text x="35.4769%" y="1743.50"></text></g><g><title>gmw::protocols::boolean_gmw::_::&lt;impl serde::de::Deserialize for gmw::protocols::boolean_gmw::BooleanGate&gt;::deserialize (8 samples, 0.01%)</title><rect x="35.2926%" y="693" width="0.0107%" height="15" fill="rgb(211,8,23)" fg:x="26317" fg:w="8"/><text x="35.5426%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_enum (8 samples, 0.01%)</title><rect x="35.2926%" y="677" width="0.0107%" height="15" fill="rgb(235,11,44)" fg:x="26317" fg:w="8"/><text x="35.5426%" y="687.50"></text></g><g><title>&lt;gmw::protocols::boolean_gmw::_::&lt;impl serde::de::Deserialize for gmw::protocols::boolean_gmw::BooleanGate&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (8 samples, 0.01%)</title><rect x="35.2926%" y="661" width="0.0107%" height="15" fill="rgb(248,18,52)" fg:x="26317" fg:w="8"/><text x="35.5426%" y="671.50"></text></g><g><title>bincode::deserialize_from (23 samples, 0.03%)</title><rect x="35.2779%" y="1669" width="0.0308%" height="15" fill="rgb(208,4,7)" fg:x="26306" fg:w="23"/><text x="35.5279%" y="1679.50"></text></g><g><title>bincode::config::Options::deserialize_from (23 samples, 0.03%)</title><rect x="35.2779%" y="1653" width="0.0308%" height="15" fill="rgb(240,17,39)" fg:x="26306" fg:w="23"/><text x="35.5279%" y="1663.50"></text></g><g><title>bincode::internal::deserialize_from (23 samples, 0.03%)</title><rect x="35.2779%" y="1637" width="0.0308%" height="15" fill="rgb(207,170,3)" fg:x="26306" fg:w="23"/><text x="35.5279%" y="1647.50"></text></g><g><title>bincode::internal::deserialize_from_seed (23 samples, 0.03%)</title><rect x="35.2779%" y="1621" width="0.0308%" height="15" fill="rgb(236,100,52)" fg:x="26306" fg:w="23"/><text x="35.5279%" y="1631.50"></text></g><g><title>bincode::internal::deserialize_from_custom_seed (23 samples, 0.03%)</title><rect x="35.2779%" y="1605" width="0.0308%" height="15" fill="rgb(246,78,51)" fg:x="26306" fg:w="23"/><text x="35.5279%" y="1615.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (23 samples, 0.03%)</title><rect x="35.2779%" y="1589" width="0.0308%" height="15" fill="rgb(211,17,15)" fg:x="26306" fg:w="23"/><text x="35.5279%" y="1599.50"></text></g><g><title>gmw::circuit::_::&lt;impl serde::de::Deserialize for gmw::circuit::ExecutableCircuit&lt;G,Idx&gt;&gt;::deserialize (23 samples, 0.03%)</title><rect x="35.2779%" y="1573" width="0.0308%" height="15" fill="rgb(209,59,46)" fg:x="26306" fg:w="23"/><text x="35.5279%" y="1583.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_enum (23 samples, 0.03%)</title><rect x="35.2779%" y="1557" width="0.0308%" height="15" fill="rgb(210,92,25)" fg:x="26306" fg:w="23"/><text x="35.5279%" y="1567.50"></text></g><g><title>&lt;gmw::circuit::_::&lt;impl serde::de::Deserialize for gmw::circuit::ExecutableCircuit&lt;G,Idx&gt;&gt;::deserialize::__Visitor&lt;G,Idx&gt; as serde::de::Visitor&gt;::visit_enum (23 samples, 0.03%)</title><rect x="35.2779%" y="1541" width="0.0308%" height="15" fill="rgb(238,174,52)" fg:x="26306" fg:w="23"/><text x="35.5279%" y="1551.50"></text></g><g><title>serde::de::VariantAccess::newtype_variant (23 samples, 0.03%)</title><rect x="35.2779%" y="1525" width="0.0308%" height="15" fill="rgb(230,73,7)" fg:x="26306" fg:w="23"/><text x="35.5279%" y="1535.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::VariantAccess&gt;::newtype_variant_seed (23 samples, 0.03%)</title><rect x="35.2779%" y="1509" width="0.0308%" height="15" fill="rgb(243,124,40)" fg:x="26306" fg:w="23"/><text x="35.5279%" y="1519.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (23 samples, 0.03%)</title><rect x="35.2779%" y="1493" width="0.0308%" height="15" fill="rgb(244,170,11)" fg:x="26306" fg:w="23"/><text x="35.5279%" y="1503.50"></text></g><g><title>gmw::circuit::static_layers::_::&lt;impl serde::de::Deserialize for gmw::circuit::static_layers::Circuit&lt;G,Idx&gt;&gt;::deserialize (23 samples, 0.03%)</title><rect x="35.2779%" y="1477" width="0.0308%" height="15" fill="rgb(207,114,54)" fg:x="26306" fg:w="23"/><text x="35.5279%" y="1487.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (23 samples, 0.03%)</title><rect x="35.2779%" y="1461" width="0.0308%" height="15" fill="rgb(205,42,20)" fg:x="26306" fg:w="23"/><text x="35.5279%" y="1471.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (23 samples, 0.03%)</title><rect x="35.2779%" y="1445" width="0.0308%" height="15" fill="rgb(230,30,28)" fg:x="26306" fg:w="23"/><text x="35.5279%" y="1455.50"></text></g><g><title>&lt;gmw::circuit::static_layers::_::&lt;impl serde::de::Deserialize for gmw::circuit::static_layers::Circuit&lt;G,Idx&gt;&gt;::deserialize::__Visitor&lt;G,Idx&gt; as serde::de::Visitor&gt;::visit_seq (23 samples, 0.03%)</title><rect x="35.2779%" y="1429" width="0.0308%" height="15" fill="rgb(205,73,54)" fg:x="26306" fg:w="23"/><text x="35.5279%" y="1439.50"></text></g><g><title>serde::de::SeqAccess::next_element (23 samples, 0.03%)</title><rect x="35.2779%" y="1413" width="0.0308%" height="15" fill="rgb(254,227,23)" fg:x="26306" fg:w="23"/><text x="35.5279%" y="1423.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (23 samples, 0.03%)</title><rect x="35.2779%" y="1397" width="0.0308%" height="15" fill="rgb(228,202,34)" fg:x="26306" fg:w="23"/><text x="35.5279%" y="1407.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (23 samples, 0.03%)</title><rect x="35.2779%" y="1381" width="0.0308%" height="15" fill="rgb(222,225,37)" fg:x="26306" fg:w="23"/><text x="35.5279%" y="1391.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (23 samples, 0.03%)</title><rect x="35.2779%" y="1365" width="0.0308%" height="15" fill="rgb(221,14,54)" fg:x="26306" fg:w="23"/><text x="35.5279%" y="1375.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (23 samples, 0.03%)</title><rect x="35.2779%" y="1349" width="0.0308%" height="15" fill="rgb(254,102,2)" fg:x="26306" fg:w="23"/><text x="35.5279%" y="1359.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (23 samples, 0.03%)</title><rect x="35.2779%" y="1333" width="0.0308%" height="15" fill="rgb(232,104,17)" fg:x="26306" fg:w="23"/><text x="35.5279%" y="1343.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (23 samples, 0.03%)</title><rect x="35.2779%" y="1317" width="0.0308%" height="15" fill="rgb(250,220,14)" fg:x="26306" fg:w="23"/><text x="35.5279%" y="1327.50"></text></g><g><title>serde::de::SeqAccess::next_element (22 samples, 0.03%)</title><rect x="35.2792%" y="1301" width="0.0295%" height="15" fill="rgb(241,158,9)" fg:x="26307" fg:w="22"/><text x="35.5292%" y="1311.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (22 samples, 0.03%)</title><rect x="35.2792%" y="1285" width="0.0295%" height="15" fill="rgb(246,9,43)" fg:x="26307" fg:w="22"/><text x="35.5292%" y="1295.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (22 samples, 0.03%)</title><rect x="35.2792%" y="1269" width="0.0295%" height="15" fill="rgb(206,73,33)" fg:x="26307" fg:w="22"/><text x="35.5292%" y="1279.50"></text></g><g><title>gmw::circuit::static_layers::_::&lt;impl serde::de::Deserialize for gmw::circuit::static_layers::SubCircuit&lt;G,Idx&gt;&gt;::deserialize (18 samples, 0.02%)</title><rect x="35.2846%" y="1253" width="0.0241%" height="15" fill="rgb(222,79,8)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="1263.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (18 samples, 0.02%)</title><rect x="35.2846%" y="1237" width="0.0241%" height="15" fill="rgb(234,8,54)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="1247.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (18 samples, 0.02%)</title><rect x="35.2846%" y="1221" width="0.0241%" height="15" fill="rgb(209,134,38)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="1231.50"></text></g><g><title>&lt;gmw::circuit::static_layers::_::&lt;impl serde::de::Deserialize for gmw::circuit::static_layers::SubCircuit&lt;G,Idx&gt;&gt;::deserialize::__Visitor&lt;G,Idx&gt; as serde::de::Visitor&gt;::visit_seq (18 samples, 0.02%)</title><rect x="35.2846%" y="1205" width="0.0241%" height="15" fill="rgb(230,127,29)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="1215.50"></text></g><g><title>serde::de::SeqAccess::next_element (18 samples, 0.02%)</title><rect x="35.2846%" y="1189" width="0.0241%" height="15" fill="rgb(242,44,41)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="1199.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (18 samples, 0.02%)</title><rect x="35.2846%" y="1173" width="0.0241%" height="15" fill="rgb(222,56,43)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="1183.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (18 samples, 0.02%)</title><rect x="35.2846%" y="1157" width="0.0241%" height="15" fill="rgb(238,39,47)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="1167.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (18 samples, 0.02%)</title><rect x="35.2846%" y="1141" width="0.0241%" height="15" fill="rgb(226,79,43)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="1151.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (18 samples, 0.02%)</title><rect x="35.2846%" y="1125" width="0.0241%" height="15" fill="rgb(242,105,53)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="1135.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (18 samples, 0.02%)</title><rect x="35.2846%" y="1109" width="0.0241%" height="15" fill="rgb(251,132,46)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="1119.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (18 samples, 0.02%)</title><rect x="35.2846%" y="1093" width="0.0241%" height="15" fill="rgb(231,77,14)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="1103.50"></text></g><g><title>serde::de::SeqAccess::next_element (18 samples, 0.02%)</title><rect x="35.2846%" y="1077" width="0.0241%" height="15" fill="rgb(240,135,9)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="1087.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (18 samples, 0.02%)</title><rect x="35.2846%" y="1061" width="0.0241%" height="15" fill="rgb(248,109,14)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="1071.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (18 samples, 0.02%)</title><rect x="35.2846%" y="1045" width="0.0241%" height="15" fill="rgb(227,146,52)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="1055.50"></text></g><g><title>gmw::circuit::static_layers::_::&lt;impl serde::de::Deserialize for gmw::circuit::static_layers::ScLayer&lt;G,Idx&gt;&gt;::deserialize (18 samples, 0.02%)</title><rect x="35.2846%" y="1029" width="0.0241%" height="15" fill="rgb(232,54,3)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="1039.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (18 samples, 0.02%)</title><rect x="35.2846%" y="1013" width="0.0241%" height="15" fill="rgb(229,201,43)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="1023.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (18 samples, 0.02%)</title><rect x="35.2846%" y="997" width="0.0241%" height="15" fill="rgb(252,161,33)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="1007.50"></text></g><g><title>&lt;gmw::circuit::static_layers::_::&lt;impl serde::de::Deserialize for gmw::circuit::static_layers::ScLayer&lt;G,Idx&gt;&gt;::deserialize::__Visitor&lt;G,Idx&gt; as serde::de::Visitor&gt;::visit_seq (18 samples, 0.02%)</title><rect x="35.2846%" y="981" width="0.0241%" height="15" fill="rgb(226,146,40)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="991.50"></text></g><g><title>serde::de::SeqAccess::next_element (18 samples, 0.02%)</title><rect x="35.2846%" y="965" width="0.0241%" height="15" fill="rgb(219,47,25)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="975.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (18 samples, 0.02%)</title><rect x="35.2846%" y="949" width="0.0241%" height="15" fill="rgb(250,135,13)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="959.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (18 samples, 0.02%)</title><rect x="35.2846%" y="933" width="0.0241%" height="15" fill="rgb(219,229,18)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="943.50"></text></g><g><title>gmw::circuit::static_layers::_::&lt;impl serde::de::Deserialize for gmw::circuit::static_layers::ScLayerGates&lt;G,Idx&gt;&gt;::deserialize (18 samples, 0.02%)</title><rect x="35.2846%" y="917" width="0.0241%" height="15" fill="rgb(217,152,27)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="927.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (18 samples, 0.02%)</title><rect x="35.2846%" y="901" width="0.0241%" height="15" fill="rgb(225,71,47)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="911.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (18 samples, 0.02%)</title><rect x="35.2846%" y="885" width="0.0241%" height="15" fill="rgb(220,139,14)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="895.50"></text></g><g><title>&lt;gmw::circuit::static_layers::_::&lt;impl serde::de::Deserialize for gmw::circuit::static_layers::ScLayerGates&lt;G,Idx&gt;&gt;::deserialize::__Visitor&lt;G,Idx&gt; as serde::de::Visitor&gt;::visit_seq (18 samples, 0.02%)</title><rect x="35.2846%" y="869" width="0.0241%" height="15" fill="rgb(247,54,32)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="879.50"></text></g><g><title>serde::de::SeqAccess::next_element (18 samples, 0.02%)</title><rect x="35.2846%" y="853" width="0.0241%" height="15" fill="rgb(252,131,39)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="863.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (18 samples, 0.02%)</title><rect x="35.2846%" y="837" width="0.0241%" height="15" fill="rgb(210,108,39)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="847.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (18 samples, 0.02%)</title><rect x="35.2846%" y="821" width="0.0241%" height="15" fill="rgb(205,23,29)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="831.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (18 samples, 0.02%)</title><rect x="35.2846%" y="805" width="0.0241%" height="15" fill="rgb(246,139,46)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="815.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (18 samples, 0.02%)</title><rect x="35.2846%" y="789" width="0.0241%" height="15" fill="rgb(250,81,26)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (18 samples, 0.02%)</title><rect x="35.2846%" y="773" width="0.0241%" height="15" fill="rgb(214,104,7)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="783.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (18 samples, 0.02%)</title><rect x="35.2846%" y="757" width="0.0241%" height="15" fill="rgb(233,189,8)" fg:x="26311" fg:w="18"/><text x="35.5346%" y="767.50"></text></g><g><title>serde::de::SeqAccess::next_element (17 samples, 0.02%)</title><rect x="35.2859%" y="741" width="0.0228%" height="15" fill="rgb(228,141,17)" fg:x="26312" fg:w="17"/><text x="35.5359%" y="751.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (17 samples, 0.02%)</title><rect x="35.2859%" y="725" width="0.0228%" height="15" fill="rgb(247,157,1)" fg:x="26312" fg:w="17"/><text x="35.5359%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (14 samples, 0.02%)</title><rect x="35.2899%" y="709" width="0.0188%" height="15" fill="rgb(249,225,5)" fg:x="26315" fg:w="14"/><text x="35.5399%" y="719.50"></text></g><g><title>__rust_probestack (10 samples, 0.01%)</title><rect x="35.3597%" y="1637" width="0.0134%" height="15" fill="rgb(242,55,13)" fg:x="26367" fg:w="10"/><text x="35.6097%" y="1647.50"></text></g><g><title>tokio::runtime::coop::budget (149 samples, 0.20%)</title><rect x="35.2162%" y="1749" width="0.1998%" height="15" fill="rgb(230,49,50)" fg:x="26260" fg:w="149"/><text x="35.4662%" y="1759.50"></text></g><g><title>tokio::runtime::coop::with_budget (127 samples, 0.17%)</title><rect x="35.2457%" y="1733" width="0.1703%" height="15" fill="rgb(241,111,38)" fg:x="26282" fg:w="127"/><text x="35.4957%" y="1743.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::{{closure}} (120 samples, 0.16%)</title><rect x="35.2551%" y="1717" width="0.1609%" height="15" fill="rgb(252,155,4)" fg:x="26289" fg:w="120"/><text x="35.5051%" y="1727.50"></text></g><g><title>aes_cbc::main::{{closure}} (120 samples, 0.16%)</title><rect x="35.2551%" y="1701" width="0.1609%" height="15" fill="rgb(212,69,32)" fg:x="26289" fg:w="120"/><text x="35.5051%" y="1711.50"></text></g><g><title>aes_cbc::bench_execute::{{closure}} (113 samples, 0.15%)</title><rect x="35.2645%" y="1685" width="0.1515%" height="15" fill="rgb(243,107,47)" fg:x="26296" fg:w="113"/><text x="35.5145%" y="1695.50"></text></g><g><title>gmw::bench::BenchParty&lt;P,Idx&gt;::bench::{{closure}} (80 samples, 0.11%)</title><rect x="35.3087%" y="1669" width="0.1073%" height="15" fill="rgb(247,130,12)" fg:x="26329" fg:w="80"/><text x="35.5587%" y="1679.50"></text></g><g><title>gmw::bench::BenchParty&lt;P,Idx&gt;::bench::{{closure}}::{{closure}} (61 samples, 0.08%)</title><rect x="35.3342%" y="1653" width="0.0818%" height="15" fill="rgb(233,74,16)" fg:x="26348" fg:w="61"/><text x="35.5842%" y="1663.50"></text></g><g><title>mpc_channel::util::Statistics::record::{{closure}} (25 samples, 0.03%)</title><rect x="35.3825%" y="1637" width="0.0335%" height="15" fill="rgb(208,58,18)" fg:x="26384" fg:w="25"/><text x="35.6325%" y="1647.50"></text></g><g><title>mpc_channel::util::Statistics::record_for::{{closure}} (12 samples, 0.02%)</title><rect x="35.3999%" y="1621" width="0.0161%" height="15" fill="rgb(242,225,1)" fg:x="26397" fg:w="12"/><text x="35.6499%" y="1631.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (13 samples, 0.02%)</title><rect x="35.4160%" y="1733" width="0.0174%" height="15" fill="rgb(249,39,40)" fg:x="26409" fg:w="13"/><text x="35.6660%" y="1743.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (13 samples, 0.02%)</title><rect x="35.4160%" y="1717" width="0.0174%" height="15" fill="rgb(207,72,44)" fg:x="26409" fg:w="13"/><text x="35.6660%" y="1727.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (11 samples, 0.01%)</title><rect x="35.4348%" y="1685" width="0.0148%" height="15" fill="rgb(215,193,12)" fg:x="26423" fg:w="11"/><text x="35.6848%" y="1695.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (11 samples, 0.01%)</title><rect x="35.4348%" y="1669" width="0.0148%" height="15" fill="rgb(248,41,39)" fg:x="26423" fg:w="11"/><text x="35.6848%" y="1679.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (11 samples, 0.01%)</title><rect x="35.4348%" y="1653" width="0.0148%" height="15" fill="rgb(253,85,4)" fg:x="26423" fg:w="11"/><text x="35.6848%" y="1663.50"></text></g><g><title>core::sync::atomic::AtomicI32::load (30 samples, 0.04%)</title><rect x="35.4603%" y="1621" width="0.0402%" height="15" fill="rgb(243,70,31)" fg:x="26442" fg:w="30"/><text x="35.7103%" y="1631.50"></text></g><g><title>core::sync::atomic::atomic_load (30 samples, 0.04%)</title><rect x="35.4603%" y="1605" width="0.0402%" height="15" fill="rgb(253,195,26)" fg:x="26442" fg:w="30"/><text x="35.7103%" y="1615.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (66 samples, 0.09%)</title><rect x="35.4589%" y="1637" width="0.0885%" height="15" fill="rgb(243,42,11)" fg:x="26441" fg:w="66"/><text x="35.7089%" y="1647.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (35 samples, 0.05%)</title><rect x="35.5005%" y="1621" width="0.0469%" height="15" fill="rgb(239,66,17)" fg:x="26472" fg:w="35"/><text x="35.7505%" y="1631.50"></text></g><g><title>syscall (35 samples, 0.05%)</title><rect x="35.5005%" y="1605" width="0.0469%" height="15" fill="rgb(217,132,21)" fg:x="26472" fg:w="35"/><text x="35.7505%" y="1615.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket (11 samples, 0.01%)</title><rect x="35.5501%" y="1637" width="0.0148%" height="15" fill="rgb(252,202,21)" fg:x="26509" fg:w="11"/><text x="35.8001%" y="1647.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (9 samples, 0.01%)</title><rect x="35.5528%" y="1621" width="0.0121%" height="15" fill="rgb(233,98,36)" fg:x="26511" fg:w="9"/><text x="35.8028%" y="1631.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (9 samples, 0.01%)</title><rect x="35.5528%" y="1605" width="0.0121%" height="15" fill="rgb(216,153,54)" fg:x="26511" fg:w="9"/><text x="35.8028%" y="1615.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (9 samples, 0.01%)</title><rect x="35.5528%" y="1589" width="0.0121%" height="15" fill="rgb(250,99,7)" fg:x="26511" fg:w="9"/><text x="35.8028%" y="1599.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (87 samples, 0.12%)</title><rect x="35.4535%" y="1653" width="0.1167%" height="15" fill="rgb(207,56,50)" fg:x="26437" fg:w="87"/><text x="35.7035%" y="1663.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (105 samples, 0.14%)</title><rect x="35.4334%" y="1733" width="0.1408%" height="15" fill="rgb(244,61,34)" fg:x="26422" fg:w="105"/><text x="35.6834%" y="1743.50"></text></g><g><title>parking_lot::condvar::Condvar::wait (105 samples, 0.14%)</title><rect x="35.4334%" y="1717" width="0.1408%" height="15" fill="rgb(241,50,38)" fg:x="26422" fg:w="105"/><text x="35.6834%" y="1727.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (105 samples, 0.14%)</title><rect x="35.4334%" y="1701" width="0.1408%" height="15" fill="rgb(212,166,30)" fg:x="26422" fg:w="105"/><text x="35.6834%" y="1711.50"></text></g><g><title>parking_lot_core::parking_lot::park (93 samples, 0.12%)</title><rect x="35.4495%" y="1685" width="0.1247%" height="15" fill="rgb(249,127,32)" fg:x="26434" fg:w="93"/><text x="35.6995%" y="1695.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (93 samples, 0.12%)</title><rect x="35.4495%" y="1669" width="0.1247%" height="15" fill="rgb(209,103,0)" fg:x="26434" fg:w="93"/><text x="35.6995%" y="1679.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (288 samples, 0.39%)</title><rect x="35.1907%" y="1765" width="0.3862%" height="15" fill="rgb(238,209,51)" fg:x="26241" fg:w="288"/><text x="35.4407%" y="1775.50"></text></g><g><title>tokio::runtime::park::Inner::park (120 samples, 0.16%)</title><rect x="35.4160%" y="1749" width="0.1609%" height="15" fill="rgb(237,56,23)" fg:x="26409" fg:w="120"/><text x="35.6660%" y="1759.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (12 samples, 0.02%)</title><rect x="35.5823%" y="1765" width="0.0161%" height="15" fill="rgb(215,153,46)" fg:x="26533" fg:w="12"/><text x="35.8323%" y="1775.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (14 samples, 0.02%)</title><rect x="35.6037%" y="1765" width="0.0188%" height="15" fill="rgb(224,49,31)" fg:x="26549" fg:w="14"/><text x="35.8537%" y="1775.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::read (9 samples, 0.01%)</title><rect x="35.6104%" y="1749" width="0.0121%" height="15" fill="rgb(250,18,42)" fg:x="26554" fg:w="9"/><text x="35.8604%" y="1759.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (13 samples, 0.02%)</title><rect x="35.6225%" y="1765" width="0.0174%" height="15" fill="rgb(215,176,39)" fg:x="26563" fg:w="13"/><text x="35.8725%" y="1775.50"></text></g><g><title>tracing_subscriber::filter::env::EnvFilter::on_enter (11 samples, 0.01%)</title><rect x="35.6560%" y="1765" width="0.0148%" height="15" fill="rgb(223,77,29)" fg:x="26588" fg:w="11"/><text x="35.9060%" y="1775.50"></text></g><g><title>[unknown] (25,015 samples, 33.55%)</title><rect x="2.1269%" y="1781" width="33.5466%" height="15" fill="rgb(234,94,52)" fg:x="1586" fg:w="25015"/><text x="2.3769%" y="1791.50">[unknown]</text></g><g><title>core::iter::traits::collect::Extend::extend_one (12 samples, 0.02%)</title><rect x="35.6842%" y="1781" width="0.0161%" height="15" fill="rgb(220,154,50)" fg:x="26609" fg:w="12"/><text x="35.9342%" y="1791.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (40 samples, 0.05%)</title><rect x="35.7003%" y="1781" width="0.0536%" height="15" fill="rgb(212,11,10)" fg:x="26621" fg:w="40"/><text x="35.9503%" y="1791.50"></text></g><g><title>aes_cbc (26,664 samples, 35.76%)</title><rect x="0.0000%" y="1797" width="35.7580%" height="15" fill="rgb(205,166,19)" fg:x="0" fg:w="26664"/><text x="0.2500%" y="1807.50">aes_cbc</text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (24 samples, 0.03%)</title><rect x="35.7580%" y="1781" width="0.0322%" height="15" fill="rgb(244,198,16)" fg:x="26664" fg:w="24"/><text x="36.0080%" y="1791.50"></text></g><g><title>&lt;bincode::config::DefaultOptions as core::default::Default&gt;::default (41 samples, 0.05%)</title><rect x="35.7902%" y="1781" width="0.0550%" height="15" fill="rgb(219,69,12)" fg:x="26688" fg:w="41"/><text x="36.0402%" y="1791.50"></text></g><g><title>&lt;core::time::Duration as core::ops::arith::Add&gt;::add (19 samples, 0.03%)</title><rect x="35.8451%" y="1781" width="0.0255%" height="15" fill="rgb(245,30,7)" fg:x="26729" fg:w="19"/><text x="36.0951%" y="1791.50"></text></g><g><title>&lt;remoc::chmux::receiver::DataBuf as bytes::buf::buf_impl::Buf&gt;::advance (27 samples, 0.04%)</title><rect x="35.8706%" y="1781" width="0.0362%" height="15" fill="rgb(218,221,48)" fg:x="26748" fg:w="27"/><text x="36.1206%" y="1791.50"></text></g><g><title>&lt;tokio::io::util::buf_writer::BufWriter&lt;W&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (49 samples, 0.07%)</title><rect x="35.9229%" y="1765" width="0.0657%" height="15" fill="rgb(216,66,15)" fg:x="26787" fg:w="49"/><text x="36.1729%" y="1775.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (19 samples, 0.03%)</title><rect x="35.9886%" y="1765" width="0.0255%" height="15" fill="rgb(226,122,50)" fg:x="26836" fg:w="19"/><text x="36.2386%" y="1775.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,R&gt; as futures_core::stream::Stream&gt;::poll_next::CALLSITE (101 samples, 0.14%)</title><rect x="35.9229%" y="1781" width="0.1354%" height="15" fill="rgb(239,156,16)" fg:x="26787" fg:w="101"/><text x="36.1729%" y="1791.50"></text></g><g><title>tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (33 samples, 0.04%)</title><rect x="36.0141%" y="1765" width="0.0443%" height="15" fill="rgb(224,27,38)" fg:x="26855" fg:w="33"/><text x="36.2641%" y="1775.50"></text></g><g><title>&lt;mpc_channel::util::TrackingWriter&lt;AW&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write (28 samples, 0.04%)</title><rect x="36.0208%" y="1749" width="0.0375%" height="15" fill="rgb(224,39,27)" fg:x="26860" fg:w="28"/><text x="36.2708%" y="1759.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (35 samples, 0.05%)</title><rect x="36.0637%" y="1765" width="0.0469%" height="15" fill="rgb(215,92,29)" fg:x="26892" fg:w="35"/><text x="36.3137%" y="1775.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (13 samples, 0.02%)</title><rect x="36.0932%" y="1749" width="0.0174%" height="15" fill="rgb(207,159,16)" fg:x="26914" fg:w="13"/><text x="36.3432%" y="1759.50"></text></g><g><title>mio::sys::unix::IoSourceState::do_io (13 samples, 0.02%)</title><rect x="36.0932%" y="1733" width="0.0174%" height="15" fill="rgb(238,163,47)" fg:x="26914" fg:w="13"/><text x="36.3432%" y="1743.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::{{closure}} (13 samples, 0.02%)</title><rect x="36.0932%" y="1717" width="0.0174%" height="15" fill="rgb(219,91,49)" fg:x="26914" fg:w="13"/><text x="36.3432%" y="1727.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (10 samples, 0.01%)</title><rect x="36.1509%" y="1669" width="0.0134%" height="15" fill="rgb(227,167,31)" fg:x="26957" fg:w="10"/><text x="36.4009%" y="1679.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (10 samples, 0.01%)</title><rect x="36.1509%" y="1653" width="0.0134%" height="15" fill="rgb(234,80,54)" fg:x="26957" fg:w="10"/><text x="36.4009%" y="1663.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::VariantAccess&gt;::struct_variant (42 samples, 0.06%)</title><rect x="36.1107%" y="1765" width="0.0563%" height="15" fill="rgb(212,114,2)" fg:x="26927" fg:w="42"/><text x="36.3607%" y="1775.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (12 samples, 0.02%)</title><rect x="36.1509%" y="1749" width="0.0161%" height="15" fill="rgb(234,50,24)" fg:x="26957" fg:w="12"/><text x="36.4009%" y="1759.50"></text></g><g><title>&lt;&lt;gmw::protocols::boolean_gmw::_::&lt;impl serde::de::Deserialize for gmw::protocols::boolean_gmw::Msg&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum::__Visitor as serde::de::Visitor&gt;::visit_seq (12 samples, 0.02%)</title><rect x="36.1509%" y="1733" width="0.0161%" height="15" fill="rgb(221,68,8)" fg:x="26957" fg:w="12"/><text x="36.4009%" y="1743.50"></text></g><g><title>serde::de::SeqAccess::next_element (12 samples, 0.02%)</title><rect x="36.1509%" y="1717" width="0.0161%" height="15" fill="rgb(254,180,31)" fg:x="26957" fg:w="12"/><text x="36.4009%" y="1727.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (12 samples, 0.02%)</title><rect x="36.1509%" y="1701" width="0.0161%" height="15" fill="rgb(247,130,50)" fg:x="26957" fg:w="12"/><text x="36.4009%" y="1711.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (12 samples, 0.02%)</title><rect x="36.1509%" y="1685" width="0.0161%" height="15" fill="rgb(211,109,4)" fg:x="26957" fg:w="12"/><text x="36.4009%" y="1695.50"></text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (90 samples, 0.12%)</title><rect x="36.1670%" y="1765" width="0.1207%" height="15" fill="rgb(238,50,21)" fg:x="26969" fg:w="90"/><text x="36.4170%" y="1775.50"></text></g><g><title>&lt;tokio_util::codec::framed_read::FramedRead&lt;T,D&gt; as futures_core::stream::Stream&gt;::poll_next (16 samples, 0.02%)</title><rect x="36.2662%" y="1749" width="0.0215%" height="15" fill="rgb(225,57,45)" fg:x="27043" fg:w="16"/><text x="36.5162%" y="1759.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,R&gt; as futures_core::stream::Stream&gt;::poll_next (16 samples, 0.02%)</title><rect x="36.2662%" y="1733" width="0.0215%" height="15" fill="rgb(209,196,50)" fg:x="27043" fg:w="16"/><text x="36.5162%" y="1743.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.07%)</title><rect x="36.2877%" y="1765" width="0.0697%" height="15" fill="rgb(242,140,13)" fg:x="27059" fg:w="52"/><text x="36.5377%" y="1775.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (79 samples, 0.11%)</title><rect x="36.3574%" y="1765" width="0.1059%" height="15" fill="rgb(217,111,7)" fg:x="27111" fg:w="79"/><text x="36.6074%" y="1775.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (19 samples, 0.03%)</title><rect x="36.4634%" y="1765" width="0.0255%" height="15" fill="rgb(253,193,51)" fg:x="27190" fg:w="19"/><text x="36.7134%" y="1775.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (13 samples, 0.02%)</title><rect x="36.4888%" y="1765" width="0.0174%" height="15" fill="rgb(252,70,29)" fg:x="27209" fg:w="13"/><text x="36.7388%" y="1775.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::recv_task::{{closure}}::get_connection_timeout::{{closure}} (14 samples, 0.02%)</title><rect x="36.7383%" y="1749" width="0.0188%" height="15" fill="rgb(232,127,12)" fg:x="27395" fg:w="14"/><text x="36.9883%" y="1759.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::send_task::{{closure}} (24 samples, 0.03%)</title><rect x="36.7584%" y="1749" width="0.0322%" height="15" fill="rgb(211,180,21)" fg:x="27410" fg:w="24"/><text x="37.0084%" y="1759.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::send_task::{{closure}}::get_next_ping::{{closure}} (19 samples, 0.03%)</title><rect x="36.7906%" y="1749" width="0.0255%" height="15" fill="rgb(229,72,13)" fg:x="27434" fg:w="19"/><text x="37.0406%" y="1759.50"></text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (233 samples, 0.31%)</title><rect x="36.5076%" y="1765" width="0.3125%" height="15" fill="rgb(240,211,49)" fg:x="27223" fg:w="233"/><text x="36.7576%" y="1775.50"></text></g><g><title>&lt;remoc::chmux::credit::AssignedCredits as core::ops::drop::Drop&gt;::drop (11 samples, 0.01%)</title><rect x="36.8201%" y="1765" width="0.0148%" height="15" fill="rgb(219,149,40)" fg:x="27456" fg:w="11"/><text x="37.0701%" y="1775.50"></text></g><g><title>&lt;remoc::rch::mpsc::receiver::Receiver&lt;T,Codec,_&gt; as serde::ser::Serialize&gt;::serialize::{{closure}}::{{closure}} (55 samples, 0.07%)</title><rect x="36.8375%" y="1765" width="0.0738%" height="15" fill="rgb(210,127,46)" fg:x="27469" fg:w="55"/><text x="37.0875%" y="1775.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (18 samples, 0.02%)</title><rect x="36.9113%" y="1765" width="0.0241%" height="15" fill="rgb(220,106,7)" fg:x="27524" fg:w="18"/><text x="37.1613%" y="1775.50"></text></g><g><title>serde::de::EnumAccess::variant (20 samples, 0.03%)</title><rect x="36.9810%" y="1749" width="0.0268%" height="15" fill="rgb(249,31,22)" fg:x="27576" fg:w="20"/><text x="37.2310%" y="1759.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_enum::&lt;impl serde::de::EnumAccess for &amp;mut bincode::de::Deserializer&lt;R,O&gt;&gt;::variant_seed (20 samples, 0.03%)</title><rect x="36.9810%" y="1733" width="0.0268%" height="15" fill="rgb(253,1,49)" fg:x="27576" fg:w="20"/><text x="37.2310%" y="1743.50"></text></g><g><title>&lt;bincode::config::int::VarintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (20 samples, 0.03%)</title><rect x="36.9810%" y="1717" width="0.0268%" height="15" fill="rgb(227,144,33)" fg:x="27576" fg:w="20"/><text x="37.2310%" y="1727.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (18 samples, 0.02%)</title><rect x="36.9837%" y="1701" width="0.0241%" height="15" fill="rgb(249,163,44)" fg:x="27578" fg:w="18"/><text x="37.2337%" y="1711.50"></text></g><g><title>core::ops::function::FnOnce::call_once (18 samples, 0.02%)</title><rect x="36.9837%" y="1685" width="0.0241%" height="15" fill="rgb(234,15,39)" fg:x="27578" fg:w="18"/><text x="37.2337%" y="1695.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for core::result::Result&lt;T,E&gt;&gt;::deserialize::ResultVisitor&lt;T,E&gt; as serde::de::Visitor&gt;::visit_enum (56 samples, 0.08%)</title><rect x="36.9354%" y="1765" width="0.0751%" height="15" fill="rgb(207,66,16)" fg:x="27542" fg:w="56"/><text x="37.1854%" y="1775.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (16 samples, 0.02%)</title><rect x="37.0105%" y="1765" width="0.0215%" height="15" fill="rgb(233,112,24)" fg:x="27598" fg:w="16"/><text x="37.2605%" y="1775.50"></text></g><g><title>&lt;remoc::rch::mpsc::receiver::Receiver&lt;T,Codec,_&gt; as serde::de::Deserialize&gt;::deserialize::{{closure}}::{{closure}}::{{closure}} (14 samples, 0.02%)</title><rect x="37.3847%" y="1749" width="0.0188%" height="15" fill="rgb(230,90,22)" fg:x="27877" fg:w="14"/><text x="37.6347%" y="1759.50"></text></g><g><title>&lt;&amp;mut F as core::future::future::Future&gt;::poll (13 samples, 0.02%)</title><rect x="37.4101%" y="1733" width="0.0174%" height="15" fill="rgb(229,61,13)" fg:x="27896" fg:w="13"/><text x="37.6601%" y="1743.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (13 samples, 0.02%)</title><rect x="37.4101%" y="1717" width="0.0174%" height="15" fill="rgb(225,57,24)" fg:x="27896" fg:w="13"/><text x="37.6601%" y="1727.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::recv_task::{{closure}}::{{closure}} (34 samples, 0.05%)</title><rect x="37.4101%" y="1749" width="0.0456%" height="15" fill="rgb(208,169,48)" fg:x="27896" fg:w="34"/><text x="37.6601%" y="1759.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::recv_msg::{{closure}} (21 samples, 0.03%)</title><rect x="37.4276%" y="1733" width="0.0282%" height="15" fill="rgb(244,218,51)" fg:x="27909" fg:w="21"/><text x="37.6776%" y="1743.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::recv_msg::{{closure}}::{{closure}} (21 samples, 0.03%)</title><rect x="37.4276%" y="1717" width="0.0282%" height="15" fill="rgb(214,148,10)" fg:x="27909" fg:w="21"/><text x="37.6776%" y="1727.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (8 samples, 0.01%)</title><rect x="37.4450%" y="1701" width="0.0107%" height="15" fill="rgb(225,174,27)" fg:x="27922" fg:w="8"/><text x="37.6950%" y="1711.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="37.4450%" y="1685" width="0.0107%" height="15" fill="rgb(230,96,26)" fg:x="27922" fg:w="8"/><text x="37.6950%" y="1695.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::run::{{closure}}::{{closure}}::{{closure}} (11 samples, 0.01%)</title><rect x="37.4665%" y="1733" width="0.0148%" height="15" fill="rgb(232,10,30)" fg:x="27938" fg:w="11"/><text x="37.7165%" y="1743.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::run::{{closure}}::{{closure}}::{{closure}} (22 samples, 0.03%)</title><rect x="37.4557%" y="1749" width="0.0295%" height="15" fill="rgb(222,8,50)" fg:x="27930" fg:w="22"/><text x="37.7057%" y="1759.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (364 samples, 0.49%)</title><rect x="37.0320%" y="1765" width="0.4881%" height="15" fill="rgb(213,81,27)" fg:x="27614" fg:w="364"/><text x="37.2820%" y="1775.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::send_task::{{closure}}::{{closure}} (26 samples, 0.03%)</title><rect x="37.4852%" y="1749" width="0.0349%" height="15" fill="rgb(245,50,10)" fg:x="27952" fg:w="26"/><text x="37.7352%" y="1759.50"></text></g><g><title>&lt;&amp;mut F as core::future::future::Future&gt;::poll (26 samples, 0.03%)</title><rect x="37.4852%" y="1733" width="0.0349%" height="15" fill="rgb(216,100,18)" fg:x="27952" fg:w="26"/><text x="37.7352%" y="1743.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (26 samples, 0.03%)</title><rect x="37.4852%" y="1717" width="0.0349%" height="15" fill="rgb(236,147,54)" fg:x="27952" fg:w="26"/><text x="37.7352%" y="1727.50"></text></g><g><title>&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (12 samples, 0.02%)</title><rect x="37.5201%" y="1765" width="0.0161%" height="15" fill="rgb(205,143,26)" fg:x="27978" fg:w="12"/><text x="37.7701%" y="1775.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (19 samples, 0.03%)</title><rect x="37.5456%" y="1765" width="0.0255%" height="15" fill="rgb(236,26,9)" fg:x="27997" fg:w="19"/><text x="37.7956%" y="1775.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (26 samples, 0.03%)</title><rect x="37.5711%" y="1765" width="0.0349%" height="15" fill="rgb(221,165,53)" fg:x="28016" fg:w="26"/><text x="37.8211%" y="1775.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (50 samples, 0.07%)</title><rect x="37.6059%" y="1765" width="0.0671%" height="15" fill="rgb(214,110,17)" fg:x="28042" fg:w="50"/><text x="37.8559%" y="1775.50"></text></g><g><title>&lt;tokio::sync::notify::Notified as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="37.6864%" y="1765" width="0.0121%" height="15" fill="rgb(237,197,12)" fg:x="28102" fg:w="9"/><text x="37.9364%" y="1775.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (26 samples, 0.03%)</title><rect x="37.7025%" y="1765" width="0.0349%" height="15" fill="rgb(205,84,17)" fg:x="28114" fg:w="26"/><text x="37.9525%" y="1775.50"></text></g><g><title>&lt;tokio_util::codec::length_delimited::LengthDelimitedCodec as tokio_util::codec::encoder::Encoder&lt;bytes::bytes::Bytes&gt;&gt;::encode (13 samples, 0.02%)</title><rect x="37.7374%" y="1765" width="0.0174%" height="15" fill="rgb(237,18,45)" fg:x="28140" fg:w="13"/><text x="37.9874%" y="1775.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (51 samples, 0.07%)</title><rect x="37.7548%" y="1765" width="0.0684%" height="15" fill="rgb(221,87,14)" fg:x="28153" fg:w="51"/><text x="38.0048%" y="1775.50"></text></g><g><title>[libc.so.6] (15 samples, 0.02%)</title><rect x="37.8326%" y="1765" width="0.0201%" height="15" fill="rgb(238,186,15)" fg:x="28211" fg:w="15"/><text x="38.0826%" y="1775.50"></text></g><g><title>__rust_probestack (66 samples, 0.09%)</title><rect x="37.8540%" y="1765" width="0.0885%" height="15" fill="rgb(208,115,11)" fg:x="28227" fg:w="66"/><text x="38.1040%" y="1775.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (46 samples, 0.06%)</title><rect x="37.9452%" y="1765" width="0.0617%" height="15" fill="rgb(254,175,0)" fg:x="28295" fg:w="46"/><text x="38.1952%" y="1775.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (46 samples, 0.06%)</title><rect x="37.9452%" y="1749" width="0.0617%" height="15" fill="rgb(227,24,42)" fg:x="28295" fg:w="46"/><text x="38.1952%" y="1759.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (46 samples, 0.06%)</title><rect x="37.9452%" y="1733" width="0.0617%" height="15" fill="rgb(223,211,37)" fg:x="28295" fg:w="46"/><text x="38.1952%" y="1743.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (46 samples, 0.06%)</title><rect x="37.9452%" y="1717" width="0.0617%" height="15" fill="rgb(235,49,27)" fg:x="28295" fg:w="46"/><text x="38.1952%" y="1727.50"></text></g><g><title>bincode::config::int::VarintEncoding::serialize_varint (71 samples, 0.10%)</title><rect x="38.0109%" y="1765" width="0.0952%" height="15" fill="rgb(254,97,51)" fg:x="28344" fg:w="71"/><text x="38.2609%" y="1775.50"></text></g><g><title>bytes::bytes::Bytes::split_to (29 samples, 0.04%)</title><rect x="38.1062%" y="1765" width="0.0389%" height="15" fill="rgb(249,51,40)" fg:x="28415" fg:w="29"/><text x="38.3562%" y="1775.50"></text></g><g><title>bytes::bytes_mut::BytesMut::freeze (99 samples, 0.13%)</title><rect x="38.1518%" y="1765" width="0.1328%" height="15" fill="rgb(210,128,45)" fg:x="28449" fg:w="99"/><text x="38.4018%" y="1775.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (11 samples, 0.01%)</title><rect x="38.2698%" y="1749" width="0.0148%" height="15" fill="rgb(224,137,50)" fg:x="28537" fg:w="11"/><text x="38.5198%" y="1759.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (34 samples, 0.05%)</title><rect x="38.2845%" y="1765" width="0.0456%" height="15" fill="rgb(242,15,9)" fg:x="28548" fg:w="34"/><text x="38.5345%" y="1775.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (20 samples, 0.03%)</title><rect x="38.3301%" y="1765" width="0.0268%" height="15" fill="rgb(233,187,41)" fg:x="28582" fg:w="20"/><text x="38.5801%" y="1775.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (33 samples, 0.04%)</title><rect x="38.3569%" y="1765" width="0.0443%" height="15" fill="rgb(227,2,29)" fg:x="28602" fg:w="33"/><text x="38.6069%" y="1775.50"></text></g><g><title>cfree (9 samples, 0.01%)</title><rect x="38.4012%" y="1765" width="0.0121%" height="15" fill="rgb(222,70,3)" fg:x="28635" fg:w="9"/><text x="38.6512%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;(remoc::chmux::mux::ChMux&lt;tokio_util::codec::framed_write::FramedWrite&lt;tokio::io::util::buf_writer::BufWriter&lt;mpc_channel::util::TrackingWriter&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;,tokio_util::codec::length_delimited::LengthDelimitedCodec&gt;,futures_util::stream::try_stream::MapOk&lt;tokio_util::codec::framed_read::FramedRead&lt;tokio::io::util::buf_reader::BufReader&lt;mpc_channel::util::TrackingReader&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;,tokio_util::codec::length_delimited::LengthDelimitedCodec&gt;,remoc::connect::Connect&lt;std::io::error::Error,std::io::error::Error&gt;::io&lt;tokio::io::util::buf_reader::BufReader&lt;mpc_channel::util::TrackingReader&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;,tokio::io::util::buf_writer::BufWriter&lt;mpc_channel::util::TrackingWriter&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;,aes_cbc::execute::{{closure}}::__mpc_channel_macros__internal_Receivers&lt;aes_cbc::Msg,gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt;,aes_cbc::execute::{{closure}}::__mpc_channel_macros__internal_Receivers&lt;aes_cbc::Msg,gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt;,remoc::codec::bincode::Bincode&gt;::{{closure}}::{{closure}}&gt;&gt;::recv_msg::{{closure}},&amp;mut core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = ()+core::marker::Send&gt;&gt;)&gt; (37 samples, 0.05%)</title><rect x="38.4173%" y="1765" width="0.0496%" height="15" fill="rgb(213,11,42)" fg:x="28647" fg:w="37"/><text x="38.6673%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;(tokio::sync::watch::Receiver&lt;core::option::Option&lt;remoc::rch::ClosedReason&gt;&gt;::changed::{{closure}},tokio::sync::watch::Receiver&lt;core::option::Option&lt;remoc::rch::RemoteSendError&gt;&gt;::changed::{{closure}},remoc::rch::base::receiver::Receiver&lt;core::result::Result&lt;aes_cbc::Msg,remoc::rch::mpsc::receiver::RecvError&gt;,remoc::codec::bincode::Bincode&gt;::recv::{{closure}})&gt; (45 samples, 0.06%)</title><rect x="38.4669%" y="1765" width="0.0603%" height="15" fill="rgb(225,150,9)" fg:x="28684" fg:w="45"/><text x="38.7169%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::watch::Receiver&lt;core::option::Option&lt;remoc::rch::ClosedReason&gt;&gt;::changed::{{closure}}&gt; (12 samples, 0.02%)</title><rect x="38.5112%" y="1749" width="0.0161%" height="15" fill="rgb(230,162,45)" fg:x="28717" fg:w="12"/><text x="38.7612%" y="1759.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::notify::Notified&gt; (12 samples, 0.02%)</title><rect x="38.5112%" y="1733" width="0.0161%" height="15" fill="rgb(222,14,52)" fg:x="28717" fg:w="12"/><text x="38.7612%" y="1743.50"></text></g><g><title>core::ptr::drop_in_place&lt;remoc::chmux::mux::ChMux&lt;tokio_util::codec::framed_write::FramedWrite&lt;tokio::io::util::buf_writer::BufWriter&lt;mpc_channel::util::TrackingWriter&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;,tokio_util::codec::length_delimited::LengthDelimitedCodec&gt;,futures_util::stream::try_stream::MapOk&lt;tokio_util::codec::framed_read::FramedRead&lt;tokio::io::util::buf_reader::BufReader&lt;mpc_channel::util::TrackingReader&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;,tokio_util::codec::length_delimited::LengthDelimitedCodec&gt;,remoc::connect::Connect&lt;std::io::error::Error,std::io::error::Error&gt;::io&lt;tokio::io::util::buf_reader::BufReader&lt;mpc_channel::util::TrackingReader&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;,tokio::io::util::buf_writer::BufWriter&lt;mpc_channel::util::TrackingWriter&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;,aes_cbc::execute::{{closure}}::__mpc_channel_macros__internal_Receivers&lt;aes_cbc::Msg,gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt;,aes_cbc::execute::{{closure}}::__mpc_channel_macros__internal_Receivers&lt;aes_cbc::Msg,gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt;,remoc::codec::bincode::Bincode&gt;::{{closure}}::{{closure}}&gt;&gt;::feed_msg::{{closure}}::{{closure}}&gt; (9 samples, 0.01%)</title><rect x="38.5313%" y="1765" width="0.0121%" height="15" fill="rgb(254,198,14)" fg:x="28732" fg:w="9"/><text x="38.7813%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;remoc::chmux::mux::ChMux&lt;tokio_util::codec::framed_write::FramedWrite&lt;tokio::io::util::buf_writer::BufWriter&lt;mpc_channel::util::TrackingWriter&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;,tokio_util::codec::length_delimited::LengthDelimitedCodec&gt;,futures_util::stream::try_stream::MapOk&lt;tokio_util::codec::framed_read::FramedRead&lt;tokio::io::util::buf_reader::BufReader&lt;mpc_channel::util::TrackingReader&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;,tokio_util::codec::length_delimited::LengthDelimitedCodec&gt;,remoc::connect::Connect&lt;std::io::error::Error,std::io::error::Error&gt;::io&lt;tokio::io::util::buf_reader::BufReader&lt;mpc_channel::util::TrackingReader&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;,tokio::io::util::buf_writer::BufWriter&lt;mpc_channel::util::TrackingWriter&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;,aes_cbc::execute::{{closure}}::__mpc_channel_macros__internal_Receivers&lt;aes_cbc::Msg,gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt;,aes_cbc::execute::{{closure}}::__mpc_channel_macros__internal_Receivers&lt;aes_cbc::Msg,gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt;,remoc::codec::bincode::Bincode&gt;::{{closure}}::{{closure}}&gt;&gt;::flush::{{closure}}&gt; (19 samples, 0.03%)</title><rect x="38.5433%" y="1765" width="0.0255%" height="15" fill="rgb(220,217,30)" fg:x="28741" fg:w="19"/><text x="38.7933%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;remoc::chmux::mux::ChMux&lt;tokio_util::codec::framed_write::FramedWrite&lt;tokio::io::util::buf_writer::BufWriter&lt;mpc_channel::util::TrackingWriter&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;,tokio_util::codec::length_delimited::LengthDelimitedCodec&gt;,futures_util::stream::try_stream::MapOk&lt;tokio_util::codec::framed_read::FramedRead&lt;tokio::io::util::buf_reader::BufReader&lt;mpc_channel::util::TrackingReader&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;,tokio_util::codec::length_delimited::LengthDelimitedCodec&gt;,remoc::connect::Connect&lt;std::io::error::Error,std::io::error::Error&gt;::io&lt;tokio::io::util::buf_reader::BufReader&lt;mpc_channel::util::TrackingReader&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;,tokio::io::util::buf_writer::BufWriter&lt;mpc_channel::util::TrackingWriter&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;,aes_cbc::execute::{{closure}}::__mpc_channel_macros__internal_Receivers&lt;aes_cbc::Msg,gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt;,aes_cbc::execute::{{closure}}::__mpc_channel_macros__internal_Receivers&lt;aes_cbc::Msg,gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt;,remoc::codec::bincode::Bincode&gt;::{{closure}}::{{closure}}&gt;&gt;::handle_event::{{closure}}&gt; (22 samples, 0.03%)</title><rect x="38.5688%" y="1765" width="0.0295%" height="15" fill="rgb(215,146,41)" fg:x="28760" fg:w="22"/><text x="38.8188%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;remoc::chmux::mux::ChMux&lt;tokio_util::codec::framed_write::FramedWrite&lt;tokio::io::util::buf_writer::BufWriter&lt;mpc_channel::util::TrackingWriter&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;,tokio_util::codec::length_delimited::LengthDelimitedCodec&gt;,futures_util::stream::try_stream::MapOk&lt;tokio_util::codec::framed_read::FramedRead&lt;tokio::io::util::buf_reader::BufReader&lt;mpc_channel::util::TrackingReader&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;,tokio_util::codec::length_delimited::LengthDelimitedCodec&gt;,remoc::connect::Connect&lt;std::io::error::Error,std::io::error::Error&gt;::io&lt;tokio::io::util::buf_reader::BufReader&lt;mpc_channel::util::TrackingReader&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;,tokio::io::util::buf_writer::BufWriter&lt;mpc_channel::util::TrackingWriter&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;,aes_cbc::execute::{{closure}}::__mpc_channel_macros__internal_Receivers&lt;aes_cbc::Msg,gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt;,aes_cbc::execute::{{closure}}::__mpc_channel_macros__internal_Receivers&lt;aes_cbc::Msg,gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt;,remoc::codec::bincode::Bincode&gt;::{{closure}}::{{closure}}&gt;&gt;::run::{{closure}}::{{closure}}::{{closure}}&gt; (9 samples, 0.01%)</title><rect x="38.5983%" y="1765" width="0.0121%" height="15" fill="rgb(217,27,36)" fg:x="28782" fg:w="9"/><text x="38.8483%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;remoc::chmux::sender::Sender::send::{{closure}}&gt; (32 samples, 0.04%)</title><rect x="38.6144%" y="1765" width="0.0429%" height="15" fill="rgb(219,218,39)" fg:x="28794" fg:w="32"/><text x="38.8644%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;remoc::rch::base::sender::Sender&lt;core::result::Result&lt;gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;,remoc::rch::mpsc::receiver::RecvError&gt;,remoc::codec::bincode::Bincode&gt;::send::{{closure}}&gt; (51 samples, 0.07%)</title><rect x="38.6573%" y="1765" width="0.0684%" height="15" fill="rgb(219,4,42)" fg:x="28826" fg:w="51"/><text x="38.9073%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mpsc::bounded::Sender&lt;core::result::Result&lt;gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;,remoc::rch::mpsc::receiver::RecvError&gt;&gt;::send::{{closure}}&gt; (39 samples, 0.05%)</title><rect x="38.7271%" y="1765" width="0.0523%" height="15" fill="rgb(249,119,36)" fg:x="28878" fg:w="39"/><text x="38.9771%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mpsc::bounded::Sender&lt;remoc::chmux::mux::PortEvt&gt;::send::{{closure}}&gt; (28 samples, 0.04%)</title><rect x="38.7794%" y="1765" width="0.0375%" height="15" fill="rgb(209,23,33)" fg:x="28917" fg:w="28"/><text x="39.0294%" y="1775.50"></text></g><g><title>core::task::poll::Poll&lt;core::result::Result&lt;T,E&gt;&gt;::map_err (59 samples, 0.08%)</title><rect x="38.8169%" y="1765" width="0.0791%" height="15" fill="rgb(211,10,0)" fg:x="28945" fg:w="59"/><text x="39.0669%" y="1775.50"></text></g><g><title>gmw::executor::_::&lt;impl serde::ser::Serialize for gmw::executor::ExecutorMsg&lt;Msg,SimdMsg&gt;&gt;::serialize (10 samples, 0.01%)</title><rect x="38.8960%" y="1765" width="0.0134%" height="15" fill="rgb(208,99,37)" fg:x="29004" fg:w="10"/><text x="39.1460%" y="1775.50"></text></g><g><title>gmw::protocols::boolean_gmw::_::&lt;impl serde::ser::Serialize for gmw::protocols::boolean_gmw::SimdMsg&gt;::serialize (43 samples, 0.06%)</title><rect x="38.9095%" y="1765" width="0.0577%" height="15" fill="rgb(213,132,31)" fg:x="29014" fg:w="43"/><text x="39.1595%" y="1775.50"></text></g><g><title>mio::sys::unix::waker::eventfd::Waker::wake (34 samples, 0.05%)</title><rect x="38.9738%" y="1765" width="0.0456%" height="15" fill="rgb(243,129,40)" fg:x="29062" fg:w="34"/><text x="39.2238%" y="1775.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (31 samples, 0.04%)</title><rect x="39.0194%" y="1765" width="0.0416%" height="15" fill="rgb(210,66,33)" fg:x="29096" fg:w="31"/><text x="39.2694%" y="1775.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (15 samples, 0.02%)</title><rect x="39.0409%" y="1749" width="0.0201%" height="15" fill="rgb(209,189,4)" fg:x="29112" fg:w="15"/><text x="39.2909%" y="1759.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (12 samples, 0.02%)</title><rect x="39.0449%" y="1733" width="0.0161%" height="15" fill="rgb(214,107,37)" fg:x="29115" fg:w="12"/><text x="39.2949%" y="1743.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (18 samples, 0.02%)</title><rect x="39.0610%" y="1765" width="0.0241%" height="15" fill="rgb(245,88,54)" fg:x="29127" fg:w="18"/><text x="39.3110%" y="1775.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (59 samples, 0.08%)</title><rect x="39.0851%" y="1765" width="0.0791%" height="15" fill="rgb(205,146,20)" fg:x="29145" fg:w="59"/><text x="39.3351%" y="1775.50"></text></g><g><title>remoc::chmux::credit::ChannelCreditReturner::start_return (9 samples, 0.01%)</title><rect x="39.1643%" y="1765" width="0.0121%" height="15" fill="rgb(220,161,25)" fg:x="29204" fg:w="9"/><text x="39.4143%" y="1775.50"></text></g><g><title>remoc::chmux::credit::CreditUser::request::{{closure}} (41 samples, 0.05%)</title><rect x="39.1763%" y="1765" width="0.0550%" height="15" fill="rgb(215,152,15)" fg:x="29213" fg:w="41"/><text x="39.4263%" y="1775.50"></text></g><g><title>remoc::chmux::msg::MultiplexMsg::from_slice (29 samples, 0.04%)</title><rect x="39.2313%" y="1765" width="0.0389%" height="15" fill="rgb(233,192,44)" fg:x="29254" fg:w="29"/><text x="39.4813%" y="1775.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::feed_msg::{{closure}} (39 samples, 0.05%)</title><rect x="39.2729%" y="1765" width="0.0523%" height="15" fill="rgb(240,170,46)" fg:x="29285" fg:w="39"/><text x="39.5229%" y="1775.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::feed_msg::{{closure}}::{{closure}} (12 samples, 0.02%)</title><rect x="39.3091%" y="1749" width="0.0161%" height="15" fill="rgb(207,104,33)" fg:x="29312" fg:w="12"/><text x="39.5591%" y="1759.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::flush::{{closure}} (29 samples, 0.04%)</title><rect x="39.3252%" y="1765" width="0.0389%" height="15" fill="rgb(219,21,39)" fg:x="29324" fg:w="29"/><text x="39.5752%" y="1775.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::run::{{closure}} (137 samples, 0.18%)</title><rect x="39.3641%" y="1765" width="0.1837%" height="15" fill="rgb(214,133,29)" fg:x="29353" fg:w="137"/><text x="39.6141%" y="1775.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::run::{{closure}}::{{closure}} (30 samples, 0.04%)</title><rect x="39.5478%" y="1765" width="0.0402%" height="15" fill="rgb(226,93,6)" fg:x="29490" fg:w="30"/><text x="39.7978%" y="1775.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::should_terminate (38 samples, 0.05%)</title><rect x="39.5880%" y="1765" width="0.0510%" height="15" fill="rgb(252,222,34)" fg:x="29520" fg:w="38"/><text x="39.8380%" y="1775.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::is_empty (38 samples, 0.05%)</title><rect x="39.5880%" y="1749" width="0.0510%" height="15" fill="rgb(252,92,48)" fg:x="29520" fg:w="38"/><text x="39.8380%" y="1759.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::is_empty (38 samples, 0.05%)</title><rect x="39.5880%" y="1733" width="0.0510%" height="15" fill="rgb(245,223,24)" fg:x="29520" fg:w="38"/><text x="39.8380%" y="1743.50"></text></g><g><title>remoc::chmux::mux::TransportMsg::with_data (34 samples, 0.05%)</title><rect x="39.6390%" y="1765" width="0.0456%" height="15" fill="rgb(205,176,3)" fg:x="29558" fg:w="34"/><text x="39.8890%" y="1775.50"></text></g><g><title>remoc::chmux::receiver::Receiver::recv::{{closure}} (43 samples, 0.06%)</title><rect x="39.6846%" y="1765" width="0.0577%" height="15" fill="rgb(235,151,15)" fg:x="29592" fg:w="43"/><text x="39.9346%" y="1775.50"></text></g><g><title>remoc::chmux::receiver::Receiver::recv_any::{{closure}} (18 samples, 0.02%)</title><rect x="39.7422%" y="1765" width="0.0241%" height="15" fill="rgb(237,209,11)" fg:x="29635" fg:w="18"/><text x="39.9922%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (19 samples, 0.03%)</title><rect x="39.9260%" y="1749" width="0.0255%" height="15" fill="rgb(243,227,24)" fg:x="29772" fg:w="19"/><text x="40.1760%" y="1759.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (19 samples, 0.03%)</title><rect x="39.9260%" y="1733" width="0.0255%" height="15" fill="rgb(239,193,16)" fg:x="29772" fg:w="19"/><text x="40.1760%" y="1743.50"></text></g><g><title>remoc::chmux::sender::Sender::send::{{closure}} (157 samples, 0.21%)</title><rect x="39.7664%" y="1765" width="0.2105%" height="15" fill="rgb(231,27,9)" fg:x="29653" fg:w="157"/><text x="40.0164%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;remoc::chmux::credit::AssignedCredits&gt; (19 samples, 0.03%)</title><rect x="39.9515%" y="1749" width="0.0255%" height="15" fill="rgb(219,169,10)" fg:x="29791" fg:w="19"/><text x="40.2015%" y="1759.50"></text></g><g><title>remoc::rch::base::receiver::PortDeserializer::finish (8 samples, 0.01%)</title><rect x="39.9783%" y="1765" width="0.0107%" height="15" fill="rgb(244,229,43)" fg:x="29811" fg:w="8"/><text x="40.2283%" y="1775.50"></text></g><g><title>remoc::rch::base::receiver::PortDeserializer::start (11 samples, 0.01%)</title><rect x="39.9890%" y="1765" width="0.0148%" height="15" fill="rgb(254,38,20)" fg:x="29819" fg:w="11"/><text x="40.2390%" y="1775.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (55 samples, 0.07%)</title><rect x="40.0038%" y="1749" width="0.0738%" height="15" fill="rgb(250,47,30)" fg:x="29830" fg:w="55"/><text x="40.2538%" y="1759.50"></text></g><g><title>remoc::rch::base::sender::PortSerializer::start (58 samples, 0.08%)</title><rect x="40.0038%" y="1765" width="0.0778%" height="15" fill="rgb(224,124,36)" fg:x="29830" fg:w="58"/><text x="40.2538%" y="1775.50"></text></g><g><title>remoc::rch::base::sender::Sender&lt;T,Codec&gt;::send::{{closure}} (75 samples, 0.10%)</title><rect x="40.0815%" y="1765" width="0.1006%" height="15" fill="rgb(246,68,51)" fg:x="29888" fg:w="75"/><text x="40.3315%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::zip::Zip&lt;alloc::vec::into_iter::IntoIter&lt;alloc::boxed::Box&lt;dyn core::ops::function::FnOnce&lt;(remoc::chmux::client::Connect,)&gt;+Output = core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = ()+core::marker::Send&gt;&gt;+core::marker::Send&gt;&gt;,alloc::vec::into_iter::IntoIter&lt;remoc::chmux::client::Connect&gt;&gt;&gt; (8 samples, 0.01%)</title><rect x="40.1714%" y="1749" width="0.0107%" height="15" fill="rgb(253,43,49)" fg:x="29955" fg:w="8"/><text x="40.4214%" y="1759.50"></text></g><g><title>remoc::rch::base::sender::Sender&lt;T,Codec&gt;::serialize_buffered (73 samples, 0.10%)</title><rect x="40.1821%" y="1765" width="0.0979%" height="15" fill="rgb(219,54,36)" fg:x="29963" fg:w="73"/><text x="40.4321%" y="1775.50"></text></g><g><title>&lt;remoc::codec::bincode::Bincode as remoc::codec::Codec&gt;::serialize (23 samples, 0.03%)</title><rect x="40.2492%" y="1749" width="0.0308%" height="15" fill="rgb(227,133,34)" fg:x="30013" fg:w="23"/><text x="40.4992%" y="1759.50"></text></g><g><title>serde::ser::Serializer::collect_seq (34 samples, 0.05%)</title><rect x="40.2800%" y="1765" width="0.0456%" height="15" fill="rgb(247,227,15)" fg:x="30036" fg:w="34"/><text x="40.5300%" y="1775.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for core::result::Result&lt;T,E&gt;&gt;::serialize (12 samples, 0.02%)</title><rect x="40.3256%" y="1765" width="0.0161%" height="15" fill="rgb(229,96,14)" fg:x="30070" fg:w="12"/><text x="40.5756%" y="1775.50"></text></g><g><title>&lt;remoc::rch::base::io::LimitedBytesWriter as std::io::Write&gt;::write (17 samples, 0.02%)</title><rect x="40.3417%" y="1749" width="0.0228%" height="15" fill="rgb(220,79,17)" fg:x="30082" fg:w="17"/><text x="40.5917%" y="1759.50"></text></g><g><title>std::io::Write::write_all (101 samples, 0.14%)</title><rect x="40.3417%" y="1765" width="0.1354%" height="15" fill="rgb(205,131,53)" fg:x="30082" fg:w="101"/><text x="40.5917%" y="1775.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (84 samples, 0.11%)</title><rect x="40.3645%" y="1749" width="0.1126%" height="15" fill="rgb(209,50,29)" fg:x="30099" fg:w="84"/><text x="40.6145%" y="1759.50"></text></g><g><title>std::io::default_read_exact (71 samples, 0.10%)</title><rect x="40.4771%" y="1765" width="0.0952%" height="15" fill="rgb(245,86,46)" fg:x="30183" fg:w="71"/><text x="40.7271%" y="1775.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (64 samples, 0.09%)</title><rect x="40.4865%" y="1749" width="0.0858%" height="15" fill="rgb(235,66,46)" fg:x="30190" fg:w="64"/><text x="40.7365%" y="1759.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (17 samples, 0.02%)</title><rect x="40.5724%" y="1765" width="0.0228%" height="15" fill="rgb(232,148,31)" fg:x="30254" fg:w="17"/><text x="40.8224%" y="1775.50"></text></g><g><title>syscall (35 samples, 0.05%)</title><rect x="40.6072%" y="1765" width="0.0469%" height="15" fill="rgb(217,149,8)" fg:x="30280" fg:w="35"/><text x="40.8572%" y="1775.50"></text></g><g><title>thread_local::thread_id::THREAD::__getit (23 samples, 0.03%)</title><rect x="40.6542%" y="1765" width="0.0308%" height="15" fill="rgb(209,183,11)" fg:x="30315" fg:w="23"/><text x="40.9042%" y="1775.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (49 samples, 0.07%)</title><rect x="40.6850%" y="1765" width="0.0657%" height="15" fill="rgb(208,55,20)" fg:x="30338" fg:w="49"/><text x="40.9350%" y="1775.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (105 samples, 0.14%)</title><rect x="40.7628%" y="1765" width="0.1408%" height="15" fill="rgb(218,39,14)" fg:x="30396" fg:w="105"/><text x="41.0128%" y="1775.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 samples, 0.05%)</title><rect x="40.8513%" y="1749" width="0.0523%" height="15" fill="rgb(216,169,33)" fg:x="30462" fg:w="39"/><text x="41.1013%" y="1759.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (39 samples, 0.05%)</title><rect x="40.8513%" y="1733" width="0.0523%" height="15" fill="rgb(233,80,24)" fg:x="30462" fg:w="39"/><text x="41.1013%" y="1743.50"></text></g><g><title>tokio::macros::support::thread_rng_n (16 samples, 0.02%)</title><rect x="40.9036%" y="1765" width="0.0215%" height="15" fill="rgb(213,179,31)" fg:x="30501" fg:w="16"/><text x="41.1536%" y="1775.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (39 samples, 0.05%)</title><rect x="40.9251%" y="1765" width="0.0523%" height="15" fill="rgb(209,19,5)" fg:x="30517" fg:w="39"/><text x="41.1751%" y="1775.50"></text></g><g><title>tokio::runtime::io::Driver::turn (179 samples, 0.24%)</title><rect x="40.9894%" y="1765" width="0.2400%" height="15" fill="rgb(219,18,35)" fg:x="30565" fg:w="179"/><text x="41.2394%" y="1775.50"></text></g><g><title>tokio::io::ready::Ready::from_mio (57 samples, 0.08%)</title><rect x="41.1530%" y="1749" width="0.0764%" height="15" fill="rgb(209,169,16)" fg:x="30687" fg:w="57"/><text x="41.4030%" y="1759.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (10 samples, 0.01%)</title><rect x="41.2295%" y="1765" width="0.0134%" height="15" fill="rgb(245,90,51)" fg:x="30744" fg:w="10"/><text x="41.4795%" y="1775.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (25 samples, 0.03%)</title><rect x="41.2509%" y="1765" width="0.0335%" height="15" fill="rgb(220,99,45)" fg:x="30760" fg:w="25"/><text x="41.5009%" y="1775.50"></text></g><g><title>tokio::util::wake_list::WakeList::wake_all (25 samples, 0.03%)</title><rect x="41.2509%" y="1749" width="0.0335%" height="15" fill="rgb(249,89,25)" fg:x="30760" fg:w="25"/><text x="41.5009%" y="1759.50"></text></g><g><title>core::task::wake::Waker::wake (25 samples, 0.03%)</title><rect x="41.2509%" y="1733" width="0.0335%" height="15" fill="rgb(239,193,0)" fg:x="30760" fg:w="25"/><text x="41.5009%" y="1743.50"></text></g><g><title>tokio::runtime::park::Inner::from_raw (9 samples, 0.01%)</title><rect x="41.2845%" y="1749" width="0.0121%" height="15" fill="rgb(231,126,1)" fg:x="30785" fg:w="9"/><text x="41.5345%" y="1759.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::from_raw (9 samples, 0.01%)</title><rect x="41.2845%" y="1733" width="0.0121%" height="15" fill="rgb(243,166,3)" fg:x="30785" fg:w="9"/><text x="41.5345%" y="1743.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::byte_sub (9 samples, 0.01%)</title><rect x="41.2845%" y="1717" width="0.0121%" height="15" fill="rgb(223,22,34)" fg:x="30785" fg:w="9"/><text x="41.5345%" y="1727.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub (9 samples, 0.01%)</title><rect x="41.2845%" y="1701" width="0.0121%" height="15" fill="rgb(251,52,51)" fg:x="30785" fg:w="9"/><text x="41.5345%" y="1711.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (9 samples, 0.01%)</title><rect x="41.2845%" y="1685" width="0.0121%" height="15" fill="rgb(221,165,28)" fg:x="30785" fg:w="9"/><text x="41.5345%" y="1695.50"></text></g><g><title>tokio::runtime::park::wake (10 samples, 0.01%)</title><rect x="41.2845%" y="1765" width="0.0134%" height="15" fill="rgb(218,121,47)" fg:x="30785" fg:w="10"/><text x="41.5345%" y="1775.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (18 samples, 0.02%)</title><rect x="41.2979%" y="1765" width="0.0241%" height="15" fill="rgb(209,120,9)" fg:x="30795" fg:w="18"/><text x="41.5479%" y="1775.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::unpark_worker_by_id (14 samples, 0.02%)</title><rect x="41.3220%" y="1765" width="0.0188%" height="15" fill="rgb(236,68,12)" fg:x="30813" fg:w="14"/><text x="41.5720%" y="1775.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::{{closure}} (48 samples, 0.06%)</title><rect x="41.3622%" y="1765" width="0.0644%" height="15" fill="rgb(225,194,26)" fg:x="30843" fg:w="48"/><text x="41.6122%" y="1775.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::yield_now (8 samples, 0.01%)</title><rect x="41.4360%" y="1765" width="0.0107%" height="15" fill="rgb(231,84,39)" fg:x="30898" fg:w="8"/><text x="41.6860%" y="1775.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (31 samples, 0.04%)</title><rect x="41.4481%" y="1765" width="0.0416%" height="15" fill="rgb(210,11,45)" fg:x="30907" fg:w="31"/><text x="41.6981%" y="1775.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::wake_deferred_tasks (16 samples, 0.02%)</title><rect x="41.4682%" y="1749" width="0.0215%" height="15" fill="rgb(224,54,52)" fg:x="30922" fg:w="16"/><text x="41.7182%" y="1759.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (8 samples, 0.01%)</title><rect x="41.4896%" y="1765" width="0.0107%" height="15" fill="rgb(238,102,14)" fg:x="30938" fg:w="8"/><text x="41.7396%" y="1775.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (53 samples, 0.07%)</title><rect x="41.5004%" y="1765" width="0.0711%" height="15" fill="rgb(243,160,52)" fg:x="30946" fg:w="53"/><text x="41.7504%" y="1775.50"></text></g><g><title>tokio::runtime::coop::budget (22 samples, 0.03%)</title><rect x="41.5419%" y="1749" width="0.0295%" height="15" fill="rgb(216,114,19)" fg:x="30977" fg:w="22"/><text x="41.7919%" y="1759.50"></text></g><g><title>tokio::runtime::coop::with_budget (22 samples, 0.03%)</title><rect x="41.5419%" y="1733" width="0.0295%" height="15" fill="rgb(244,166,37)" fg:x="30977" fg:w="22"/><text x="41.7919%" y="1743.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::{{closure}} (22 samples, 0.03%)</title><rect x="41.5419%" y="1717" width="0.0295%" height="15" fill="rgb(246,29,44)" fg:x="30977" fg:w="22"/><text x="41.7919%" y="1727.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (22 samples, 0.03%)</title><rect x="41.5419%" y="1701" width="0.0295%" height="15" fill="rgb(215,56,53)" fg:x="30977" fg:w="22"/><text x="41.7919%" y="1711.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (22 samples, 0.03%)</title><rect x="41.5419%" y="1685" width="0.0295%" height="15" fill="rgb(217,60,2)" fg:x="30977" fg:w="22"/><text x="41.7919%" y="1695.50"></text></g><g><title>tokio::runtime::signal::Driver::process (40 samples, 0.05%)</title><rect x="41.5715%" y="1765" width="0.0536%" height="15" fill="rgb(207,26,24)" fg:x="30999" fg:w="40"/><text x="41.8215%" y="1775.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (16 samples, 0.02%)</title><rect x="41.8316%" y="1717" width="0.0215%" height="15" fill="rgb(252,210,15)" fg:x="31193" fg:w="16"/><text x="42.0816%" y="1727.50"></text></g><g><title>&lt;remoc::connect::Connect&lt;TransportSinkError,TransportStreamError&gt; as core::future::future::Future&gt;::poll (88 samples, 0.12%)</title><rect x="41.8531%" y="1717" width="0.1180%" height="15" fill="rgb(253,209,26)" fg:x="31209" fg:w="88"/><text x="42.1031%" y="1727.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (88 samples, 0.12%)</title><rect x="41.8531%" y="1701" width="0.1180%" height="15" fill="rgb(238,170,14)" fg:x="31209" fg:w="88"/><text x="42.1031%" y="1711.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (88 samples, 0.12%)</title><rect x="41.8531%" y="1685" width="0.1180%" height="15" fill="rgb(216,178,15)" fg:x="31209" fg:w="88"/><text x="42.1031%" y="1695.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (293 samples, 0.39%)</title><rect x="41.6251%" y="1765" width="0.3929%" height="15" fill="rgb(250,197,2)" fg:x="31039" fg:w="293"/><text x="41.8751%" y="1775.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (176 samples, 0.24%)</title><rect x="41.7820%" y="1749" width="0.2360%" height="15" fill="rgb(212,70,42)" fg:x="31156" fg:w="176"/><text x="42.0320%" y="1759.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (176 samples, 0.24%)</title><rect x="41.7820%" y="1733" width="0.2360%" height="15" fill="rgb(227,213,9)" fg:x="31156" fg:w="176"/><text x="42.0320%" y="1743.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::TaskIdGuard&gt; (35 samples, 0.05%)</title><rect x="41.9711%" y="1717" width="0.0469%" height="15" fill="rgb(245,99,25)" fg:x="31297" fg:w="35"/><text x="42.2211%" y="1727.50"></text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (38 samples, 0.05%)</title><rect x="42.0180%" y="1765" width="0.0510%" height="15" fill="rgb(250,82,29)" fg:x="31332" fg:w="38"/><text x="42.2680%" y="1775.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_reference (22 samples, 0.03%)</title><rect x="42.2956%" y="1749" width="0.0295%" height="15" fill="rgb(241,226,54)" fg:x="31539" fg:w="22"/><text x="42.5456%" y="1759.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::get_new_task (12 samples, 0.02%)</title><rect x="42.3251%" y="1749" width="0.0161%" height="15" fill="rgb(221,99,41)" fg:x="31561" fg:w="12"/><text x="42.5751%" y="1759.50"></text></g><g><title>tokio::runtime::task::Task&lt;S&gt;::from_raw (12 samples, 0.02%)</title><rect x="42.3251%" y="1733" width="0.0161%" height="15" fill="rgb(213,90,21)" fg:x="31561" fg:w="12"/><text x="42.5751%" y="1743.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (353 samples, 0.47%)</title><rect x="42.0690%" y="1765" width="0.4734%" height="15" fill="rgb(205,208,24)" fg:x="31370" fg:w="353"/><text x="42.3190%" y="1775.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (150 samples, 0.20%)</title><rect x="42.3412%" y="1749" width="0.2012%" height="15" fill="rgb(246,31,12)" fg:x="31573" fg:w="150"/><text x="42.5912%" y="1759.50"></text></g><g><title>tokio::runtime::task::waker::waker_ref (39 samples, 0.05%)</title><rect x="42.4901%" y="1733" width="0.0523%" height="15" fill="rgb(213,154,6)" fg:x="31684" fg:w="39"/><text x="42.7401%" y="1743.50"></text></g><g><title>tokio::runtime::task::Task&lt;S&gt;::from_raw (28 samples, 0.04%)</title><rect x="42.5477%" y="1749" width="0.0375%" height="15" fill="rgb(222,163,29)" fg:x="31727" fg:w="28"/><text x="42.7977%" y="1759.50"></text></g><g><title>tokio::runtime::task::raw::schedule (80 samples, 0.11%)</title><rect x="42.5477%" y="1765" width="0.1073%" height="15" fill="rgb(227,201,8)" fg:x="31727" fg:w="80"/><text x="42.7977%" y="1775.50"></text></g><g><title>tokio::runtime::task::core::Header::get_scheduler (52 samples, 0.07%)</title><rect x="42.5853%" y="1749" width="0.0697%" height="15" fill="rgb(233,9,32)" fg:x="31755" fg:w="52"/><text x="42.8353%" y="1759.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (51 samples, 0.07%)</title><rect x="42.6658%" y="1765" width="0.0684%" height="15" fill="rgb(217,54,24)" fg:x="31815" fg:w="51"/><text x="42.9158%" y="1775.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::reregister (10 samples, 0.01%)</title><rect x="42.7341%" y="1765" width="0.0134%" height="15" fill="rgb(235,192,0)" fg:x="31866" fg:w="10"/><text x="42.9841%" y="1775.50"></text></g><g><title>tokio::runtime::driver::Handle::time (65 samples, 0.09%)</title><rect x="42.7864%" y="1749" width="0.0872%" height="15" fill="rgb(235,45,9)" fg:x="31905" fg:w="65"/><text x="43.0364%" y="1759.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (65 samples, 0.09%)</title><rect x="42.7864%" y="1733" width="0.0872%" height="15" fill="rgb(246,42,40)" fg:x="31905" fg:w="65"/><text x="43.0364%" y="1743.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (110 samples, 0.15%)</title><rect x="42.7476%" y="1765" width="0.1475%" height="15" fill="rgb(248,111,24)" fg:x="31876" fg:w="110"/><text x="42.9976%" y="1775.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::now (10 samples, 0.01%)</title><rect x="42.8817%" y="1749" width="0.0134%" height="15" fill="rgb(249,65,22)" fg:x="31976" fg:w="10"/><text x="43.1317%" y="1759.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (8 samples, 0.01%)</title><rect x="42.8951%" y="1765" width="0.0107%" height="15" fill="rgb(238,111,51)" fg:x="31986" fg:w="8"/><text x="43.1451%" y="1775.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (15 samples, 0.02%)</title><rect x="42.9085%" y="1765" width="0.0201%" height="15" fill="rgb(250,118,22)" fg:x="31996" fg:w="15"/><text x="43.1585%" y="1775.50"></text></g><g><title>tokio::sync::mpsc::bounded::Permit&lt;T&gt;::send (80 samples, 0.11%)</title><rect x="42.9420%" y="1765" width="0.1073%" height="15" fill="rgb(234,84,26)" fg:x="32021" fg:w="80"/><text x="43.1920%" y="1775.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (8 samples, 0.01%)</title><rect x="43.0386%" y="1749" width="0.0107%" height="15" fill="rgb(243,172,12)" fg:x="32093" fg:w="8"/><text x="43.2886%" y="1759.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (8 samples, 0.01%)</title><rect x="43.0386%" y="1733" width="0.0107%" height="15" fill="rgb(236,150,49)" fg:x="32093" fg:w="8"/><text x="43.2886%" y="1743.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::push (8 samples, 0.01%)</title><rect x="43.0386%" y="1717" width="0.0107%" height="15" fill="rgb(225,197,26)" fg:x="32093" fg:w="8"/><text x="43.2886%" y="1727.50"></text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::reserve::{{closure}} (123 samples, 0.16%)</title><rect x="43.0493%" y="1765" width="0.1650%" height="15" fill="rgb(214,17,42)" fg:x="32101" fg:w="123"/><text x="43.2993%" y="1775.50"></text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::reserve_inner::{{closure}} (44 samples, 0.06%)</title><rect x="43.1552%" y="1749" width="0.0590%" height="15" fill="rgb(224,165,40)" fg:x="32180" fg:w="44"/><text x="43.4052%" y="1759.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::batch_semaphore::Acquire&gt; (18 samples, 0.02%)</title><rect x="43.1901%" y="1733" width="0.0241%" height="15" fill="rgb(246,100,4)" fg:x="32206" fg:w="18"/><text x="43.4401%" y="1743.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::coop::RestoreOnPending&gt; (19 samples, 0.03%)</title><rect x="43.5254%" y="1749" width="0.0255%" height="15" fill="rgb(222,103,0)" fg:x="32456" fg:w="19"/><text x="43.7754%" y="1759.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or (48 samples, 0.06%)</title><rect x="43.5991%" y="1733" width="0.0644%" height="15" fill="rgb(227,189,26)" fg:x="32511" fg:w="48"/><text x="43.8491%" y="1743.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::poll::Poll&lt;tokio::runtime::coop::RestoreOnPending&gt;&gt; (48 samples, 0.06%)</title><rect x="43.5991%" y="1717" width="0.0644%" height="15" fill="rgb(214,202,17)" fg:x="32511" fg:w="48"/><text x="43.8491%" y="1727.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::coop::RestoreOnPending&gt; (48 samples, 0.06%)</title><rect x="43.5991%" y="1701" width="0.0644%" height="15" fill="rgb(229,111,3)" fg:x="32511" fg:w="48"/><text x="43.8491%" y="1711.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (351 samples, 0.47%)</title><rect x="43.2142%" y="1765" width="0.4707%" height="15" fill="rgb(229,172,15)" fg:x="32224" fg:w="351"/><text x="43.4642%" y="1775.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (100 samples, 0.13%)</title><rect x="43.5509%" y="1749" width="0.1341%" height="15" fill="rgb(230,224,35)" fg:x="32475" fg:w="100"/><text x="43.8009%" y="1759.50"></text></g><g><title>tokio::runtime::context::budget (16 samples, 0.02%)</title><rect x="43.6635%" y="1733" width="0.0215%" height="15" fill="rgb(251,141,6)" fg:x="32559" fg:w="16"/><text x="43.9135%" y="1743.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (16 samples, 0.02%)</title><rect x="43.6635%" y="1717" width="0.0215%" height="15" fill="rgb(225,208,6)" fg:x="32559" fg:w="16"/><text x="43.9135%" y="1727.50"></text></g><g><title>tokio::runtime::context::budget::{{closure}} (16 samples, 0.02%)</title><rect x="43.6635%" y="1701" width="0.0215%" height="15" fill="rgb(246,181,16)" fg:x="32559" fg:w="16"/><text x="43.9135%" y="1711.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::{{closure}} (16 samples, 0.02%)</title><rect x="43.6635%" y="1685" width="0.0215%" height="15" fill="rgb(227,129,36)" fg:x="32559" fg:w="16"/><text x="43.9135%" y="1695.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (8 samples, 0.01%)</title><rect x="43.6917%" y="1765" width="0.0107%" height="15" fill="rgb(248,117,24)" fg:x="32580" fg:w="8"/><text x="43.9417%" y="1775.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (30 samples, 0.04%)</title><rect x="43.7882%" y="1749" width="0.0402%" height="15" fill="rgb(214,185,35)" fg:x="32652" fg:w="30"/><text x="44.0382%" y="1759.50"></text></g><g><title>tokio_util::util::poll_read_buf (107 samples, 0.14%)</title><rect x="43.7158%" y="1765" width="0.1435%" height="15" fill="rgb(236,150,34)" fg:x="32598" fg:w="107"/><text x="43.9658%" y="1775.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::filled (23 samples, 0.03%)</title><rect x="43.8285%" y="1749" width="0.0308%" height="15" fill="rgb(243,228,27)" fg:x="32682" fg:w="23"/><text x="44.0785%" y="1759.50"></text></g><g><title>tracing::span::Span::current (21 samples, 0.03%)</title><rect x="43.8593%" y="1765" width="0.0282%" height="15" fill="rgb(245,77,44)" fg:x="32705" fg:w="21"/><text x="44.1093%" y="1775.50"></text></g><g><title>tracing::span::Span::record (60 samples, 0.08%)</title><rect x="43.8875%" y="1765" width="0.0805%" height="15" fill="rgb(235,214,42)" fg:x="32726" fg:w="60"/><text x="44.1375%" y="1775.50"></text></g><g><title>tracing_core::dispatcher::get_default (31 samples, 0.04%)</title><rect x="43.9679%" y="1765" width="0.0416%" height="15" fill="rgb(221,74,3)" fg:x="32786" fg:w="31"/><text x="44.2179%" y="1775.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (22 samples, 0.03%)</title><rect x="43.9800%" y="1749" width="0.0295%" height="15" fill="rgb(206,121,29)" fg:x="32795" fg:w="22"/><text x="44.2300%" y="1759.50"></text></g><g><title>tracing_core::dispatcher::get_default::{{closure}} (22 samples, 0.03%)</title><rect x="43.9800%" y="1733" width="0.0295%" height="15" fill="rgb(249,131,53)" fg:x="32795" fg:w="22"/><text x="44.2300%" y="1743.50"></text></g><g><title>tracing::span::Span::current::{{closure}} (22 samples, 0.03%)</title><rect x="43.9800%" y="1717" width="0.0295%" height="15" fill="rgb(236,170,29)" fg:x="32795" fg:w="22"/><text x="44.2300%" y="1727.50"></text></g><g><title>[[heap]] (5,927 samples, 7.95%)</title><rect x="36.0637%" y="1781" width="7.9484%" height="15" fill="rgb(247,96,15)" fg:x="26892" fg:w="5927"/><text x="36.3137%" y="1791.50">[[heap]]</text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.03%)</title><rect x="44.0149%" y="1765" width="0.0295%" height="15" fill="rgb(211,210,7)" fg:x="32821" fg:w="22"/><text x="44.2649%" y="1775.50"></text></g><g><title>&lt;remoc::rch::mpsc::receiver::Receiver&lt;T,Codec,_&gt; as serde::de::Deserialize&gt;::deserialize::{{closure}}::{{closure}} (41 samples, 0.05%)</title><rect x="44.0457%" y="1765" width="0.0550%" height="15" fill="rgb(240,88,50)" fg:x="32844" fg:w="41"/><text x="44.2957%" y="1775.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (31 samples, 0.04%)</title><rect x="44.1007%" y="1765" width="0.0416%" height="15" fill="rgb(209,229,26)" fg:x="32885" fg:w="31"/><text x="44.3507%" y="1775.50"></text></g><g><title>&lt;tokio::runtime::time::entry::TimerEntry as core::ops::drop::Drop&gt;::drop (31 samples, 0.04%)</title><rect x="44.1530%" y="1765" width="0.0416%" height="15" fill="rgb(210,68,23)" fg:x="32924" fg:w="31"/><text x="44.4030%" y="1775.50"></text></g><g><title>__rust_probestack (27 samples, 0.04%)</title><rect x="44.1946%" y="1765" width="0.0362%" height="15" fill="rgb(229,180,13)" fg:x="32955" fg:w="27"/><text x="44.4446%" y="1775.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::run::{{closure}}::{{closure}} (45 samples, 0.06%)</title><rect x="44.2308%" y="1765" width="0.0603%" height="15" fill="rgb(236,53,44)" fg:x="32982" fg:w="45"/><text x="44.4808%" y="1775.50"></text></g><g><title>remoc::chmux::receiver::Receiver::recv_any::{{closure}} (27 samples, 0.04%)</title><rect x="44.2911%" y="1765" width="0.0362%" height="15" fill="rgb(244,214,29)" fg:x="33027" fg:w="27"/><text x="44.5411%" y="1775.50"></text></g><g><title>remoc::rch::base::receiver::Receiver&lt;T,Codec&gt;::recv::{{closure}} (23 samples, 0.03%)</title><rect x="44.3273%" y="1765" width="0.0308%" height="15" fill="rgb(220,75,29)" fg:x="33054" fg:w="23"/><text x="44.5773%" y="1775.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::CURRENT::FOO::__getit (19 samples, 0.03%)</title><rect x="44.3729%" y="1765" width="0.0255%" height="15" fill="rgb(214,183,37)" fg:x="33088" fg:w="19"/><text x="44.6229%" y="1775.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (48 samples, 0.06%)</title><rect x="44.3984%" y="1765" width="0.0644%" height="15" fill="rgb(239,117,29)" fg:x="33107" fg:w="48"/><text x="44.6484%" y="1775.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (21 samples, 0.03%)</title><rect x="44.4346%" y="1749" width="0.0282%" height="15" fill="rgb(237,171,35)" fg:x="33134" fg:w="21"/><text x="44.6846%" y="1759.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (21 samples, 0.03%)</title><rect x="44.4346%" y="1733" width="0.0282%" height="15" fill="rgb(229,178,53)" fg:x="33134" fg:w="21"/><text x="44.6846%" y="1743.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (21 samples, 0.03%)</title><rect x="44.4346%" y="1717" width="0.0282%" height="15" fill="rgb(210,102,19)" fg:x="33134" fg:w="21"/><text x="44.6846%" y="1727.50"></text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::send::{{closure}} (33 samples, 0.04%)</title><rect x="44.4628%" y="1765" width="0.0443%" height="15" fill="rgb(235,127,22)" fg:x="33155" fg:w="33"/><text x="44.7128%" y="1775.50"></text></g><g><title>tokio::sync::notify::Notified::poll_notified (24 samples, 0.03%)</title><rect x="44.5178%" y="1765" width="0.0322%" height="15" fill="rgb(244,31,31)" fg:x="33196" fg:w="24"/><text x="44.7678%" y="1775.50"></text></g><g><title>tokio::sync::watch::Receiver&lt;T&gt;::changed::{{closure}} (10 samples, 0.01%)</title><rect x="44.5499%" y="1765" width="0.0134%" height="15" fill="rgb(231,43,21)" fg:x="33220" fg:w="10"/><text x="44.7999%" y="1775.50"></text></g><g><title>[aes_cbc] (433 samples, 0.58%)</title><rect x="44.0122%" y="1781" width="0.5807%" height="15" fill="rgb(217,131,35)" fg:x="32819" fg:w="433"/><text x="44.2622%" y="1791.50"></text></g><g><title>tokio_util::util::poll_write_buf (22 samples, 0.03%)</title><rect x="44.5634%" y="1765" width="0.0295%" height="15" fill="rgb(221,149,4)" fg:x="33230" fg:w="22"/><text x="44.8134%" y="1775.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (12 samples, 0.02%)</title><rect x="44.5768%" y="1749" width="0.0161%" height="15" fill="rgb(232,170,28)" fg:x="33240" fg:w="12"/><text x="44.8268%" y="1759.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (53 samples, 0.07%)</title><rect x="44.5929%" y="1765" width="0.0711%" height="15" fill="rgb(238,56,10)" fg:x="33252" fg:w="53"/><text x="44.8429%" y="1775.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (13 samples, 0.02%)</title><rect x="44.6465%" y="1749" width="0.0174%" height="15" fill="rgb(235,196,14)" fg:x="33292" fg:w="13"/><text x="44.8965%" y="1759.50"></text></g><g><title>mio::sys::unix::IoSourceState::do_io (13 samples, 0.02%)</title><rect x="44.6465%" y="1733" width="0.0174%" height="15" fill="rgb(216,45,48)" fg:x="33292" fg:w="13"/><text x="44.8965%" y="1743.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write::{{closure}} (13 samples, 0.02%)</title><rect x="44.6465%" y="1717" width="0.0174%" height="15" fill="rgb(238,213,17)" fg:x="33292" fg:w="13"/><text x="44.8965%" y="1727.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_option (23 samples, 0.03%)</title><rect x="44.6639%" y="1765" width="0.0308%" height="15" fill="rgb(212,13,2)" fg:x="33305" fg:w="23"/><text x="44.9139%" y="1775.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (36 samples, 0.05%)</title><rect x="44.6948%" y="1765" width="0.0483%" height="15" fill="rgb(240,114,20)" fg:x="33328" fg:w="36"/><text x="44.9448%" y="1775.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (52 samples, 0.07%)</title><rect x="44.7444%" y="1765" width="0.0697%" height="15" fill="rgb(228,41,40)" fg:x="33365" fg:w="52"/><text x="44.9944%" y="1775.50"></text></g><g><title>std::sys::unix::fs::File::write (9 samples, 0.01%)</title><rect x="44.8021%" y="1749" width="0.0121%" height="15" fill="rgb(244,132,35)" fg:x="33408" fg:w="9"/><text x="45.0521%" y="1759.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (9 samples, 0.01%)</title><rect x="44.8021%" y="1733" width="0.0121%" height="15" fill="rgb(253,189,4)" fg:x="33408" fg:w="9"/><text x="45.0521%" y="1743.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (50 samples, 0.07%)</title><rect x="44.8141%" y="1765" width="0.0671%" height="15" fill="rgb(224,37,19)" fg:x="33417" fg:w="50"/><text x="45.0641%" y="1775.50"></text></g><g><title>std::sys_common::net::TcpStream::read (20 samples, 0.03%)</title><rect x="44.8544%" y="1749" width="0.0268%" height="15" fill="rgb(235,223,18)" fg:x="33447" fg:w="20"/><text x="45.1044%" y="1759.50"></text></g><g><title>std::sys::unix::net::Socket::read (20 samples, 0.03%)</title><rect x="44.8544%" y="1733" width="0.0268%" height="15" fill="rgb(235,163,25)" fg:x="33447" fg:w="20"/><text x="45.1044%" y="1743.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (20 samples, 0.03%)</title><rect x="44.8544%" y="1717" width="0.0268%" height="15" fill="rgb(217,145,28)" fg:x="33447" fg:w="20"/><text x="45.1044%" y="1727.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (43 samples, 0.06%)</title><rect x="44.8812%" y="1765" width="0.0577%" height="15" fill="rgb(223,223,32)" fg:x="33467" fg:w="43"/><text x="45.1312%" y="1775.50"></text></g><g><title>std::sys_common::net::TcpStream::write (16 samples, 0.02%)</title><rect x="44.9174%" y="1749" width="0.0215%" height="15" fill="rgb(227,189,39)" fg:x="33494" fg:w="16"/><text x="45.1674%" y="1759.50"></text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (9 samples, 0.01%)</title><rect x="44.9388%" y="1765" width="0.0121%" height="15" fill="rgb(248,10,22)" fg:x="33510" fg:w="9"/><text x="45.1888%" y="1775.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.05%)</title><rect x="44.9509%" y="1765" width="0.0496%" height="15" fill="rgb(248,46,39)" fg:x="33519" fg:w="37"/><text x="45.2009%" y="1775.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::as_mut_slices (37 samples, 0.05%)</title><rect x="44.9509%" y="1749" width="0.0496%" height="15" fill="rgb(248,113,48)" fg:x="33519" fg:w="37"/><text x="45.2009%" y="1759.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::slice_ranges (37 samples, 0.05%)</title><rect x="44.9509%" y="1733" width="0.0496%" height="15" fill="rgb(245,16,25)" fg:x="33519" fg:w="37"/><text x="45.2009%" y="1743.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.02%)</title><rect x="45.0005%" y="1765" width="0.0161%" height="15" fill="rgb(249,152,16)" fg:x="33556" fg:w="12"/><text x="45.2505%" y="1775.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (77 samples, 0.10%)</title><rect x="45.0166%" y="1765" width="0.1033%" height="15" fill="rgb(250,16,1)" fg:x="33568" fg:w="77"/><text x="45.2666%" y="1775.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.03%)</title><rect x="45.1199%" y="1765" width="0.0322%" height="15" fill="rgb(249,138,3)" fg:x="33645" fg:w="24"/><text x="45.3699%" y="1775.50"></text></g><g><title>&lt;bincode::config::DefaultOptions as core::default::Default&gt;::default (29 samples, 0.04%)</title><rect x="45.1521%" y="1765" width="0.0389%" height="15" fill="rgb(227,71,41)" fg:x="33669" fg:w="29"/><text x="45.4021%" y="1775.50"></text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (15 samples, 0.02%)</title><rect x="45.1910%" y="1765" width="0.0201%" height="15" fill="rgb(209,184,23)" fg:x="33698" fg:w="15"/><text x="45.4410%" y="1775.50"></text></g><g><title>&lt;mpc_channel::util::TrackingReader&lt;AR&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (106 samples, 0.14%)</title><rect x="45.2111%" y="1765" width="0.1422%" height="15" fill="rgb(223,215,31)" fg:x="33713" fg:w="106"/><text x="45.4611%" y="1775.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::filled (10 samples, 0.01%)</title><rect x="45.3398%" y="1749" width="0.0134%" height="15" fill="rgb(210,146,28)" fg:x="33809" fg:w="10"/><text x="45.5898%" y="1759.50"></text></g><g><title>&lt;tokio::io::util::buf_reader::BufReader&lt;R&gt; as tokio::io::async_buf_read::AsyncBufRead&gt;::poll_fill_buf (37 samples, 0.05%)</title><rect x="45.5222%" y="1749" width="0.0496%" height="15" fill="rgb(209,183,41)" fg:x="33945" fg:w="37"/><text x="45.7722%" y="1759.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::new (34 samples, 0.05%)</title><rect x="45.5262%" y="1733" width="0.0456%" height="15" fill="rgb(209,224,45)" fg:x="33948" fg:w="34"/><text x="45.7762%" y="1743.50"></text></g><g><title>&lt;tokio::io::util::buf_reader::BufReader&lt;R&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (153 samples, 0.21%)</title><rect x="45.3801%" y="1765" width="0.2052%" height="15" fill="rgb(224,209,51)" fg:x="33839" fg:w="153"/><text x="45.6301%" y="1775.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::put_slice (10 samples, 0.01%)</title><rect x="45.5718%" y="1749" width="0.0134%" height="15" fill="rgb(223,17,39)" fg:x="33982" fg:w="10"/><text x="45.8218%" y="1759.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from_nonoverlapping (10 samples, 0.01%)</title><rect x="45.5718%" y="1733" width="0.0134%" height="15" fill="rgb(234,204,37)" fg:x="33982" fg:w="10"/><text x="45.8218%" y="1743.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.01%)</title><rect x="45.5718%" y="1717" width="0.0134%" height="15" fill="rgb(236,120,5)" fg:x="33982" fg:w="10"/><text x="45.8218%" y="1727.50"></text></g><g><title>&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (8 samples, 0.01%)</title><rect x="45.5852%" y="1765" width="0.0107%" height="15" fill="rgb(248,97,27)" fg:x="33992" fg:w="8"/><text x="45.8352%" y="1775.50"></text></g><g><title>&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (10 samples, 0.01%)</title><rect x="45.5960%" y="1765" width="0.0134%" height="15" fill="rgb(240,66,17)" fg:x="34000" fg:w="10"/><text x="45.8460%" y="1775.50"></text></g><g><title>&lt;tokio::sync::mpsc::bounded::Semaphore as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (14 samples, 0.02%)</title><rect x="45.6121%" y="1765" width="0.0188%" height="15" fill="rgb(210,79,3)" fg:x="34012" fg:w="14"/><text x="45.8621%" y="1775.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (64 samples, 0.09%)</title><rect x="45.6335%" y="1765" width="0.0858%" height="15" fill="rgb(214,176,27)" fg:x="34028" fg:w="64"/><text x="45.8835%" y="1775.50"></text></g><g><title>tokio::time::sleep::Sleep::poll_elapsed (11 samples, 0.01%)</title><rect x="45.7046%" y="1749" width="0.0148%" height="15" fill="rgb(235,185,3)" fg:x="34081" fg:w="11"/><text x="45.9546%" y="1759.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::poll_elapsed (11 samples, 0.01%)</title><rect x="45.7046%" y="1733" width="0.0148%" height="15" fill="rgb(227,24,12)" fg:x="34081" fg:w="11"/><text x="45.9546%" y="1743.50"></text></g><g><title>tokio::runtime::time::entry::StateCell::poll (10 samples, 0.01%)</title><rect x="45.7059%" y="1717" width="0.0134%" height="15" fill="rgb(252,169,48)" fg:x="34082" fg:w="10"/><text x="45.9559%" y="1727.50"></text></g><g><title>tokio_util::codec::length_delimited::LengthDelimitedCodec::decode_data (23 samples, 0.03%)</title><rect x="45.7958%" y="1749" width="0.0308%" height="15" fill="rgb(212,65,1)" fg:x="34149" fg:w="23"/><text x="46.0458%" y="1759.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (9 samples, 0.01%)</title><rect x="45.8266%" y="1733" width="0.0121%" height="15" fill="rgb(242,39,24)" fg:x="34172" fg:w="9"/><text x="46.0766%" y="1743.50"></text></g><g><title>&lt;tokio_util::codec::length_delimited::LengthDelimitedCodec as tokio_util::codec::decoder::Decoder&gt;::decode (88 samples, 0.12%)</title><rect x="45.7220%" y="1765" width="0.1180%" height="15" fill="rgb(249,32,23)" fg:x="34094" fg:w="88"/><text x="45.9720%" y="1775.50"></text></g><g><title>tokio_util::codec::length_delimited::LengthDelimitedCodec::decode_head (10 samples, 0.01%)</title><rect x="45.8266%" y="1749" width="0.0134%" height="15" fill="rgb(251,195,23)" fg:x="34172" fg:w="10"/><text x="46.0766%" y="1759.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::current_span (35 samples, 0.05%)</title><rect x="45.8400%" y="1765" width="0.0469%" height="15" fill="rgb(236,174,8)" fg:x="34182" fg:w="35"/><text x="46.0900%" y="1775.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::current_span (11 samples, 0.01%)</title><rect x="45.8722%" y="1749" width="0.0148%" height="15" fill="rgb(220,197,8)" fg:x="34206" fg:w="11"/><text x="46.1222%" y="1759.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::current_span (11 samples, 0.01%)</title><rect x="45.8722%" y="1733" width="0.0148%" height="15" fill="rgb(240,108,37)" fg:x="34206" fg:w="11"/><text x="46.1222%" y="1743.50"></text></g><g><title>remoc::rch::base::receiver::Receiver&lt;T,Codec&gt;::recv::{{closure}} (20 samples, 0.03%)</title><rect x="45.8923%" y="1749" width="0.0268%" height="15" fill="rgb(232,176,24)" fg:x="34221" fg:w="20"/><text x="46.1423%" y="1759.50"></text></g><g><title>[aes_cbc] (64 samples, 0.09%)</title><rect x="45.8923%" y="1765" width="0.0858%" height="15" fill="rgb(243,35,29)" fg:x="34221" fg:w="64"/><text x="46.1423%" y="1775.50"></text></g><g><title>tokio::sync::watch::Receiver&lt;T&gt;::changed::{{closure}} (44 samples, 0.06%)</title><rect x="45.9192%" y="1749" width="0.0590%" height="15" fill="rgb(210,37,18)" fg:x="34241" fg:w="44"/><text x="46.1692%" y="1759.50"></text></g><g><title>tokio::sync::watch::maybe_changed (21 samples, 0.03%)</title><rect x="45.9500%" y="1733" width="0.0282%" height="15" fill="rgb(224,184,40)" fg:x="34264" fg:w="21"/><text x="46.2000%" y="1743.50"></text></g><g><title>[libc.so.6] (26 samples, 0.03%)</title><rect x="45.9782%" y="1765" width="0.0349%" height="15" fill="rgb(236,39,29)" fg:x="34285" fg:w="26"/><text x="46.2282%" y="1775.50"></text></g><g><title>__rdl_alloc (54 samples, 0.07%)</title><rect x="46.0130%" y="1765" width="0.0724%" height="15" fill="rgb(232,48,39)" fg:x="34311" fg:w="54"/><text x="46.2630%" y="1775.50"></text></g><g><title>__rdl_realloc (10 samples, 0.01%)</title><rect x="46.0855%" y="1765" width="0.0134%" height="15" fill="rgb(236,34,42)" fg:x="34365" fg:w="10"/><text x="46.3355%" y="1775.50"></text></g><g><title>alloc::raw_vec::finish_grow (76 samples, 0.10%)</title><rect x="46.1069%" y="1765" width="0.1019%" height="15" fill="rgb(243,106,37)" fg:x="34381" fg:w="76"/><text x="46.3569%" y="1775.50"></text></g><g><title>bincode::config::int::VarintEncoding::deserialize_varint (58 samples, 0.08%)</title><rect x="46.2088%" y="1765" width="0.0778%" height="15" fill="rgb(218,96,6)" fg:x="34457" fg:w="58"/><text x="46.4588%" y="1775.50"></text></g><g><title>bincode::config::int::cast_u64_to_u32 (20 samples, 0.03%)</title><rect x="46.2866%" y="1765" width="0.0268%" height="15" fill="rgb(235,130,12)" fg:x="34515" fg:w="20"/><text x="46.5366%" y="1775.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (23 samples, 0.03%)</title><rect x="46.3885%" y="1749" width="0.0308%" height="15" fill="rgb(231,95,0)" fg:x="34591" fg:w="23"/><text x="46.6385%" y="1759.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (89 samples, 0.12%)</title><rect x="46.3134%" y="1765" width="0.1194%" height="15" fill="rgb(228,12,23)" fg:x="34535" fg:w="89"/><text x="46.5634%" y="1775.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.01%)</title><rect x="46.4194%" y="1749" width="0.0134%" height="15" fill="rgb(216,12,1)" fg:x="34614" fg:w="10"/><text x="46.6694%" y="1759.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (9 samples, 0.01%)</title><rect x="46.4422%" y="1765" width="0.0121%" height="15" fill="rgb(219,59,3)" fg:x="34631" fg:w="9"/><text x="46.6922%" y="1775.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (26 samples, 0.03%)</title><rect x="46.4542%" y="1765" width="0.0349%" height="15" fill="rgb(215,208,46)" fg:x="34640" fg:w="26"/><text x="46.7042%" y="1775.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (25 samples, 0.03%)</title><rect x="46.4556%" y="1749" width="0.0335%" height="15" fill="rgb(254,224,29)" fg:x="34641" fg:w="25"/><text x="46.7056%" y="1759.50"></text></g><g><title>core::ptr::drop_in_place&lt;gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt; (9 samples, 0.01%)</title><rect x="46.4998%" y="1765" width="0.0121%" height="15" fill="rgb(232,14,29)" fg:x="34674" fg:w="9"/><text x="46.7498%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;remoc::chmux::mux::ChMux&lt;tokio_util::codec::framed_write::FramedWrite&lt;tokio::io::util::buf_writer::BufWriter&lt;mpc_channel::util::TrackingWriter&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;,tokio_util::codec::length_delimited::LengthDelimitedCodec&gt;,futures_util::stream::try_stream::MapOk&lt;tokio_util::codec::framed_read::FramedRead&lt;tokio::io::util::buf_reader::BufReader&lt;mpc_channel::util::TrackingReader&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;,tokio_util::codec::length_delimited::LengthDelimitedCodec&gt;,remoc::connect::Connect&lt;std::io::error::Error,std::io::error::Error&gt;::io&lt;tokio::io::util::buf_reader::BufReader&lt;mpc_channel::util::TrackingReader&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;,tokio::io::util::buf_writer::BufWriter&lt;mpc_channel::util::TrackingWriter&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;,aes_cbc::execute::{{closure}}::__mpc_channel_macros__internal_Receivers&lt;aes_cbc::Msg,gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt;,aes_cbc::execute::{{closure}}::__mpc_channel_macros__internal_Receivers&lt;aes_cbc::Msg,gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt;,remoc::codec::bincode::Bincode&gt;::{{closure}}::{{closure}}&gt;&gt;::feed_msg::{{closure}}::{{closure}}&gt; (30 samples, 0.04%)</title><rect x="46.5119%" y="1765" width="0.0402%" height="15" fill="rgb(208,45,52)" fg:x="34683" fg:w="30"/><text x="46.7619%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;remoc::chmux::mux::ChMux&lt;tokio_util::codec::framed_write::FramedWrite&lt;tokio::io::util::buf_writer::BufWriter&lt;mpc_channel::util::TrackingWriter&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;,tokio_util::codec::length_delimited::LengthDelimitedCodec&gt;,futures_util::stream::try_stream::MapOk&lt;tokio_util::codec::framed_read::FramedRead&lt;tokio::io::util::buf_reader::BufReader&lt;mpc_channel::util::TrackingReader&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;,tokio_util::codec::length_delimited::LengthDelimitedCodec&gt;,remoc::connect::Connect&lt;std::io::error::Error,std::io::error::Error&gt;::io&lt;tokio::io::util::buf_reader::BufReader&lt;mpc_channel::util::TrackingReader&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;,tokio::io::util::buf_writer::BufWriter&lt;mpc_channel::util::TrackingWriter&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;,aes_cbc::execute::{{closure}}::__mpc_channel_macros__internal_Receivers&lt;aes_cbc::Msg,gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt;,aes_cbc::execute::{{closure}}::__mpc_channel_macros__internal_Receivers&lt;aes_cbc::Msg,gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt;,remoc::codec::bincode::Bincode&gt;::{{closure}}::{{closure}}&gt;&gt;::run::{{closure}}::{{closure}}::{{closure}}&gt; (53 samples, 0.07%)</title><rect x="46.5521%" y="1765" width="0.0711%" height="15" fill="rgb(234,191,28)" fg:x="34713" fg:w="53"/><text x="46.8021%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;remoc::chmux::receiver::Receiving&gt; (39 samples, 0.05%)</title><rect x="46.6232%" y="1765" width="0.0523%" height="15" fill="rgb(244,67,43)" fg:x="34766" fg:w="39"/><text x="46.8732%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;remoc::chmux::sender::Sender::send::{{closure}}&gt; (12 samples, 0.02%)</title><rect x="46.6755%" y="1765" width="0.0161%" height="15" fill="rgb(236,189,24)" fg:x="34805" fg:w="12"/><text x="46.9255%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;remoc::rch::base::receiver::DataSource&lt;core::result::Result&lt;aes_cbc::Msg,remoc::rch::mpsc::receiver::RecvError&gt;&gt;&gt; (9 samples, 0.01%)</title><rect x="46.6916%" y="1765" width="0.0121%" height="15" fill="rgb(239,214,33)" fg:x="34817" fg:w="9"/><text x="46.9416%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::time::sleep::Sleep&gt; (15 samples, 0.02%)</title><rect x="46.7037%" y="1765" width="0.0201%" height="15" fill="rgb(226,176,41)" fg:x="34826" fg:w="15"/><text x="46.9537%" y="1775.50"></text></g><g><title>gmw::executor::_::&lt;impl serde::ser::Serialize for gmw::executor::ExecutorMsg&lt;Msg,SimdMsg&gt;&gt;::serialize (46 samples, 0.06%)</title><rect x="46.7265%" y="1765" width="0.0617%" height="15" fill="rgb(248,47,8)" fg:x="34843" fg:w="46"/><text x="46.9765%" y="1775.50"></text></g><g><title>malloc (29 samples, 0.04%)</title><rect x="46.7882%" y="1765" width="0.0389%" height="15" fill="rgb(218,81,44)" fg:x="34889" fg:w="29"/><text x="47.0382%" y="1775.50"></text></g><g><title>realloc (11 samples, 0.01%)</title><rect x="46.8324%" y="1765" width="0.0148%" height="15" fill="rgb(213,98,6)" fg:x="34922" fg:w="11"/><text x="47.0824%" y="1775.50"></text></g><g><title>remoc::chmux::credit::ChannelCreditMonitor::use_credits (24 samples, 0.03%)</title><rect x="46.8485%" y="1765" width="0.0322%" height="15" fill="rgb(222,85,22)" fg:x="34934" fg:w="24"/><text x="47.0985%" y="1775.50"></text></g><g><title>remoc::chmux::credit::ChannelCreditReturner::return_flush::{{closure}} (45 samples, 0.06%)</title><rect x="46.8807%" y="1765" width="0.0603%" height="15" fill="rgb(239,46,39)" fg:x="34958" fg:w="45"/><text x="47.1307%" y="1775.50"></text></g><g><title>remoc::rch::base::receiver::PortDeserializer::INSTANCE::__getit (17 samples, 0.02%)</title><rect x="46.9692%" y="1765" width="0.0228%" height="15" fill="rgb(237,12,29)" fg:x="35024" fg:w="17"/><text x="47.2192%" y="1775.50"></text></g><g><title>remoc::rch::base::sender::PortSerializer::INSTANCE::__getit (15 samples, 0.02%)</title><rect x="46.9933%" y="1765" width="0.0201%" height="15" fill="rgb(214,77,8)" fg:x="35042" fg:w="15"/><text x="47.2433%" y="1775.50"></text></g><g><title>remoc::rch::base::sender::PortSerializer::finish (12 samples, 0.02%)</title><rect x="47.0135%" y="1765" width="0.0161%" height="15" fill="rgb(217,168,37)" fg:x="35057" fg:w="12"/><text x="47.2635%" y="1775.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for core::result::Result&lt;T,E&gt;&gt;::serialize (37 samples, 0.05%)</title><rect x="47.0349%" y="1765" width="0.0496%" height="15" fill="rgb(221,217,23)" fg:x="35073" fg:w="37"/><text x="47.2849%" y="1775.50"></text></g><g><title>std::io::Write::write_all (19 samples, 0.03%)</title><rect x="47.0845%" y="1765" width="0.0255%" height="15" fill="rgb(243,229,36)" fg:x="35110" fg:w="19"/><text x="47.3345%" y="1775.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (16 samples, 0.02%)</title><rect x="47.0886%" y="1749" width="0.0215%" height="15" fill="rgb(251,163,40)" fg:x="35113" fg:w="16"/><text x="47.3386%" y="1759.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (14 samples, 0.02%)</title><rect x="47.1140%" y="1765" width="0.0188%" height="15" fill="rgb(237,222,12)" fg:x="35132" fg:w="14"/><text x="47.3640%" y="1775.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (16 samples, 0.02%)</title><rect x="47.1368%" y="1765" width="0.0215%" height="15" fill="rgb(248,132,6)" fg:x="35149" fg:w="16"/><text x="47.3868%" y="1775.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (85 samples, 0.11%)</title><rect x="47.1637%" y="1765" width="0.1140%" height="15" fill="rgb(227,167,50)" fg:x="35169" fg:w="85"/><text x="47.4137%" y="1775.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_read_ready (29 samples, 0.04%)</title><rect x="47.2388%" y="1749" width="0.0389%" height="15" fill="rgb(242,84,37)" fg:x="35225" fg:w="29"/><text x="47.4888%" y="1759.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (252 samples, 0.34%)</title><rect x="47.2777%" y="1765" width="0.3379%" height="15" fill="rgb(212,4,50)" fg:x="35254" fg:w="252"/><text x="47.5277%" y="1775.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (80 samples, 0.11%)</title><rect x="47.5083%" y="1749" width="0.1073%" height="15" fill="rgb(230,228,32)" fg:x="35426" fg:w="80"/><text x="47.7583%" y="1759.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (13 samples, 0.02%)</title><rect x="47.6156%" y="1765" width="0.0174%" height="15" fill="rgb(248,217,23)" fg:x="35506" fg:w="13"/><text x="47.8656%" y="1775.50"></text></g><g><title>tokio::runtime::context::with_defer (8 samples, 0.01%)</title><rect x="47.6384%" y="1765" width="0.0107%" height="15" fill="rgb(238,197,32)" fg:x="35523" fg:w="8"/><text x="47.8884%" y="1775.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (18 samples, 0.02%)</title><rect x="47.6531%" y="1765" width="0.0241%" height="15" fill="rgb(236,106,1)" fg:x="35534" fg:w="18"/><text x="47.9031%" y="1775.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (13 samples, 0.02%)</title><rect x="47.6599%" y="1749" width="0.0174%" height="15" fill="rgb(219,228,13)" fg:x="35539" fg:w="13"/><text x="47.9099%" y="1759.50"></text></g><g><title>tokio::runtime::io::Driver::turn (28 samples, 0.04%)</title><rect x="47.6773%" y="1765" width="0.0375%" height="15" fill="rgb(238,30,35)" fg:x="35552" fg:w="28"/><text x="47.9273%" y="1775.50"></text></g><g><title>tokio::runtime::scheduler::Handle::current (22 samples, 0.03%)</title><rect x="47.7148%" y="1765" width="0.0295%" height="15" fill="rgb(236,70,23)" fg:x="35580" fg:w="22"/><text x="47.9648%" y="1775.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (30 samples, 0.04%)</title><rect x="47.7470%" y="1765" width="0.0402%" height="15" fill="rgb(249,104,48)" fg:x="35604" fg:w="30"/><text x="47.9970%" y="1775.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (22 samples, 0.03%)</title><rect x="47.7873%" y="1749" width="0.0295%" height="15" fill="rgb(254,117,50)" fg:x="35634" fg:w="22"/><text x="48.0373%" y="1759.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (22 samples, 0.03%)</title><rect x="47.7873%" y="1733" width="0.0295%" height="15" fill="rgb(223,152,4)" fg:x="35634" fg:w="22"/><text x="48.0373%" y="1743.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (22 samples, 0.03%)</title><rect x="47.7873%" y="1717" width="0.0295%" height="15" fill="rgb(245,6,2)" fg:x="35634" fg:w="22"/><text x="48.0373%" y="1727.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (24 samples, 0.03%)</title><rect x="47.7873%" y="1765" width="0.0322%" height="15" fill="rgb(249,150,24)" fg:x="35634" fg:w="24"/><text x="48.0373%" y="1775.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (39 samples, 0.05%)</title><rect x="47.8194%" y="1765" width="0.0523%" height="15" fill="rgb(228,185,42)" fg:x="35658" fg:w="39"/><text x="48.0694%" y="1775.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (28 samples, 0.04%)</title><rect x="47.8717%" y="1765" width="0.0375%" height="15" fill="rgb(226,39,33)" fg:x="35697" fg:w="28"/><text x="48.1217%" y="1775.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::yield_now (9 samples, 0.01%)</title><rect x="47.9093%" y="1765" width="0.0121%" height="15" fill="rgb(221,166,19)" fg:x="35725" fg:w="9"/><text x="48.1593%" y="1775.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (27 samples, 0.04%)</title><rect x="47.9267%" y="1765" width="0.0362%" height="15" fill="rgb(209,109,2)" fg:x="35738" fg:w="27"/><text x="48.1767%" y="1775.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (14 samples, 0.02%)</title><rect x="47.9629%" y="1765" width="0.0188%" height="15" fill="rgb(252,216,26)" fg:x="35765" fg:w="14"/><text x="48.2129%" y="1775.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (8 samples, 0.01%)</title><rect x="47.9871%" y="1765" width="0.0107%" height="15" fill="rgb(227,173,36)" fg:x="35783" fg:w="8"/><text x="48.2371%" y="1775.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::clear_entry (9 samples, 0.01%)</title><rect x="47.9978%" y="1765" width="0.0121%" height="15" fill="rgb(209,90,7)" fg:x="35791" fg:w="9"/><text x="48.2478%" y="1775.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (11 samples, 0.01%)</title><rect x="48.0099%" y="1765" width="0.0148%" height="15" fill="rgb(250,194,11)" fg:x="35800" fg:w="11"/><text x="48.2599%" y="1775.50"></text></g><g><title>&lt;tokio::time::instant::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (11 samples, 0.01%)</title><rect x="48.0541%" y="1733" width="0.0148%" height="15" fill="rgb(220,72,50)" fg:x="35833" fg:w="11"/><text x="48.3041%" y="1743.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::reset (34 samples, 0.05%)</title><rect x="48.0246%" y="1765" width="0.0456%" height="15" fill="rgb(222,106,48)" fg:x="35811" fg:w="34"/><text x="48.2746%" y="1775.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::deadline_to_tick (12 samples, 0.02%)</title><rect x="48.0541%" y="1749" width="0.0161%" height="15" fill="rgb(216,220,45)" fg:x="35833" fg:w="12"/><text x="48.3041%" y="1759.50"></text></g><g><title>tokio::sync::mpsc::bounded::Permit&lt;T&gt;::send (49 samples, 0.07%)</title><rect x="48.0863%" y="1765" width="0.0657%" height="15" fill="rgb(234,112,18)" fg:x="35857" fg:w="49"/><text x="48.3363%" y="1775.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (18 samples, 0.02%)</title><rect x="48.1574%" y="1765" width="0.0241%" height="15" fill="rgb(206,179,9)" fg:x="35910" fg:w="18"/><text x="48.4074%" y="1775.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (52 samples, 0.07%)</title><rect x="48.1815%" y="1765" width="0.0697%" height="15" fill="rgb(215,115,40)" fg:x="35928" fg:w="52"/><text x="48.4315%" y="1775.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (10 samples, 0.01%)</title><rect x="48.2513%" y="1765" width="0.0134%" height="15" fill="rgb(222,69,34)" fg:x="35980" fg:w="10"/><text x="48.5013%" y="1775.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (25 samples, 0.03%)</title><rect x="48.2647%" y="1765" width="0.0335%" height="15" fill="rgb(209,161,10)" fg:x="35990" fg:w="25"/><text x="48.5147%" y="1775.50"></text></g><g><title>tokio::sync::watch::big_notify::BigNotify::notified (16 samples, 0.02%)</title><rect x="48.2982%" y="1765" width="0.0215%" height="15" fill="rgb(217,6,38)" fg:x="36015" fg:w="16"/><text x="48.5482%" y="1775.50"></text></g><g><title>tokio::time::sleep::sleep (101 samples, 0.14%)</title><rect x="48.3237%" y="1765" width="0.1354%" height="15" fill="rgb(229,229,48)" fg:x="36034" fg:w="101"/><text x="48.5737%" y="1775.50"></text></g><g><title>tokio::time::instant::Instant::now (11 samples, 0.01%)</title><rect x="48.4444%" y="1749" width="0.0148%" height="15" fill="rgb(225,21,28)" fg:x="36124" fg:w="11"/><text x="48.6944%" y="1759.50"></text></g><g><title>tokio::time::instant::variant::now (11 samples, 0.01%)</title><rect x="48.4444%" y="1733" width="0.0148%" height="15" fill="rgb(206,33,13)" fg:x="36124" fg:w="11"/><text x="48.6944%" y="1743.50"></text></g><g><title>[anon] (2,890 samples, 3.88%)</title><rect x="44.5929%" y="1781" width="3.8757%" height="15" fill="rgb(242,178,17)" fg:x="33252" fg:w="2890"/><text x="44.8429%" y="1791.50">[ano..</text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (20 samples, 0.03%)</title><rect x="48.9204%" y="1205" width="0.0268%" height="15" fill="rgb(220,162,5)" fg:x="36479" fg:w="20"/><text x="49.1704%" y="1215.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (20 samples, 0.03%)</title><rect x="48.9204%" y="1189" width="0.0268%" height="15" fill="rgb(210,33,43)" fg:x="36479" fg:w="20"/><text x="49.1704%" y="1199.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (20 samples, 0.03%)</title><rect x="48.9204%" y="1173" width="0.0268%" height="15" fill="rgb(216,116,54)" fg:x="36479" fg:w="20"/><text x="49.1704%" y="1183.50"></text></g><g><title>mio::poll::Poll::poll (9 samples, 0.01%)</title><rect x="48.9754%" y="1141" width="0.0121%" height="15" fill="rgb(249,92,24)" fg:x="36520" fg:w="9"/><text x="49.2254%" y="1151.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (9 samples, 0.01%)</title><rect x="48.9754%" y="1125" width="0.0121%" height="15" fill="rgb(231,189,14)" fg:x="36520" fg:w="9"/><text x="49.2254%" y="1135.50"></text></g><g><title>tokio::runtime::io::Driver::turn (12 samples, 0.02%)</title><rect x="48.9727%" y="1157" width="0.0161%" height="15" fill="rgb(230,8,41)" fg:x="36518" fg:w="12"/><text x="49.2227%" y="1167.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process (9 samples, 0.01%)</title><rect x="48.9888%" y="1157" width="0.0121%" height="15" fill="rgb(249,7,27)" fg:x="36530" fg:w="9"/><text x="49.2388%" y="1167.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (38 samples, 0.05%)</title><rect x="48.9620%" y="1173" width="0.0510%" height="15" fill="rgb(232,86,5)" fg:x="36510" fg:w="38"/><text x="49.2120%" y="1183.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (57 samples, 0.08%)</title><rect x="48.9473%" y="1205" width="0.0764%" height="15" fill="rgb(224,175,18)" fg:x="36499" fg:w="57"/><text x="49.1973%" y="1215.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park_timeout (51 samples, 0.07%)</title><rect x="48.9553%" y="1189" width="0.0684%" height="15" fill="rgb(220,129,12)" fg:x="36505" fg:w="51"/><text x="49.2053%" y="1199.50"></text></g><g><title>tokio::util::try_lock::TryLock&lt;T&gt;::try_lock (8 samples, 0.01%)</title><rect x="49.0130%" y="1173" width="0.0107%" height="15" fill="rgb(210,19,36)" fg:x="36548" fg:w="8"/><text x="49.2630%" y="1183.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (8 samples, 0.01%)</title><rect x="49.0130%" y="1157" width="0.0107%" height="15" fill="rgb(219,96,14)" fg:x="36548" fg:w="8"/><text x="49.2630%" y="1167.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (8 samples, 0.01%)</title><rect x="49.0130%" y="1141" width="0.0107%" height="15" fill="rgb(249,106,1)" fg:x="36548" fg:w="8"/><text x="49.2630%" y="1151.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::maintenance (190 samples, 0.25%)</title><rect x="48.7729%" y="1221" width="0.2548%" height="15" fill="rgb(249,155,20)" fg:x="36369" fg:w="190"/><text x="49.0229%" y="1231.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (14 samples, 0.02%)</title><rect x="49.2276%" y="1205" width="0.0188%" height="15" fill="rgb(244,168,9)" fg:x="36708" fg:w="14"/><text x="49.4776%" y="1215.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (14 samples, 0.02%)</title><rect x="49.2276%" y="1189" width="0.0188%" height="15" fill="rgb(216,23,50)" fg:x="36708" fg:w="14"/><text x="49.4776%" y="1199.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (14 samples, 0.02%)</title><rect x="49.2276%" y="1173" width="0.0188%" height="15" fill="rgb(224,219,20)" fg:x="36708" fg:w="14"/><text x="49.4776%" y="1183.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (36 samples, 0.05%)</title><rect x="49.4663%" y="1189" width="0.0483%" height="15" fill="rgb(222,156,15)" fg:x="36886" fg:w="36"/><text x="49.7163%" y="1199.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (36 samples, 0.05%)</title><rect x="49.4663%" y="1173" width="0.0483%" height="15" fill="rgb(231,97,17)" fg:x="36886" fg:w="36"/><text x="49.7163%" y="1183.50"></text></g><g><title>core::cell::BorrowRefMut::new (36 samples, 0.05%)</title><rect x="49.4663%" y="1157" width="0.0483%" height="15" fill="rgb(218,70,48)" fg:x="36886" fg:w="36"/><text x="49.7163%" y="1167.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (12 samples, 0.02%)</title><rect x="49.5145%" y="1189" width="0.0161%" height="15" fill="rgb(212,196,52)" fg:x="36922" fg:w="12"/><text x="49.7645%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tokio::runtime::scheduler::multi_thread::park::Parker&gt;&gt; (27 samples, 0.04%)</title><rect x="49.5387%" y="1189" width="0.0362%" height="15" fill="rgb(243,203,18)" fg:x="36940" fg:w="27"/><text x="49.7887%" y="1199.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (14 samples, 0.02%)</title><rect x="49.6178%" y="1157" width="0.0188%" height="15" fill="rgb(252,125,41)" fg:x="36999" fg:w="14"/><text x="49.8678%" y="1167.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (14 samples, 0.02%)</title><rect x="49.6178%" y="1141" width="0.0188%" height="15" fill="rgb(223,180,33)" fg:x="36999" fg:w="14"/><text x="49.8678%" y="1151.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (14 samples, 0.02%)</title><rect x="49.6178%" y="1125" width="0.0188%" height="15" fill="rgb(254,159,46)" fg:x="36999" fg:w="14"/><text x="49.8678%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::util::try_lock::LockGuard&lt;tokio::runtime::driver::Driver&gt;&gt; (16 samples, 0.02%)</title><rect x="49.6366%" y="1157" width="0.0215%" height="15" fill="rgb(254,38,10)" fg:x="37013" fg:w="16"/><text x="49.8866%" y="1167.50"></text></g><g><title>&lt;tokio::util::try_lock::LockGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.02%)</title><rect x="49.6366%" y="1141" width="0.0215%" height="15" fill="rgb(208,217,32)" fg:x="37013" fg:w="16"/><text x="49.8866%" y="1151.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (103 samples, 0.14%)</title><rect x="49.6580%" y="1157" width="0.1381%" height="15" fill="rgb(221,120,13)" fg:x="37029" fg:w="103"/><text x="49.9080%" y="1167.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (103 samples, 0.14%)</title><rect x="49.6580%" y="1141" width="0.1381%" height="15" fill="rgb(246,54,52)" fg:x="37029" fg:w="103"/><text x="49.9080%" y="1151.50"></text></g><g><title>tokio::loom::std::thread::yield_now (504 samples, 0.68%)</title><rect x="49.7962%" y="1157" width="0.6759%" height="15" fill="rgb(242,34,25)" fg:x="37132" fg:w="504"/><text x="50.0462%" y="1167.50"></text></g><g><title>core::hint::spin_loop (504 samples, 0.68%)</title><rect x="49.7962%" y="1141" width="0.6759%" height="15" fill="rgb(247,209,9)" fg:x="37132" fg:w="504"/><text x="50.0462%" y="1151.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (504 samples, 0.68%)</title><rect x="49.7962%" y="1125" width="0.6759%" height="15" fill="rgb(228,71,26)" fg:x="37132" fg:w="504"/><text x="50.0462%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;()&gt;&gt; (14 samples, 0.02%)</title><rect x="50.4975%" y="1141" width="0.0188%" height="15" fill="rgb(222,145,49)" fg:x="37655" fg:w="14"/><text x="50.7475%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,()&gt;&gt; (14 samples, 0.02%)</title><rect x="50.4975%" y="1125" width="0.0188%" height="15" fill="rgb(218,121,17)" fg:x="37655" fg:w="14"/><text x="50.7475%" y="1135.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.02%)</title><rect x="50.4975%" y="1109" width="0.0188%" height="15" fill="rgb(244,50,7)" fg:x="37655" fg:w="14"/><text x="50.7475%" y="1119.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (14 samples, 0.02%)</title><rect x="50.4975%" y="1093" width="0.0188%" height="15" fill="rgb(246,229,37)" fg:x="37655" fg:w="14"/><text x="50.7475%" y="1103.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (14 samples, 0.02%)</title><rect x="50.4975%" y="1077" width="0.0188%" height="15" fill="rgb(225,18,5)" fg:x="37655" fg:w="14"/><text x="50.7475%" y="1087.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (14 samples, 0.02%)</title><rect x="50.4975%" y="1061" width="0.0188%" height="15" fill="rgb(213,204,8)" fg:x="37655" fg:w="14"/><text x="50.7475%" y="1071.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (95 samples, 0.13%)</title><rect x="50.5163%" y="1141" width="0.1274%" height="15" fill="rgb(238,103,6)" fg:x="37669" fg:w="95"/><text x="50.7663%" y="1151.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (95 samples, 0.13%)</title><rect x="50.5163%" y="1125" width="0.1274%" height="15" fill="rgb(222,25,35)" fg:x="37669" fg:w="95"/><text x="50.7663%" y="1135.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (107 samples, 0.14%)</title><rect x="50.6625%" y="1093" width="0.1435%" height="15" fill="rgb(213,203,35)" fg:x="37778" fg:w="107"/><text x="50.9125%" y="1103.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (107 samples, 0.14%)</title><rect x="50.6625%" y="1077" width="0.1435%" height="15" fill="rgb(221,79,53)" fg:x="37778" fg:w="107"/><text x="50.9125%" y="1087.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (107 samples, 0.14%)</title><rect x="50.6625%" y="1061" width="0.1435%" height="15" fill="rgb(243,200,35)" fg:x="37778" fg:w="107"/><text x="50.9125%" y="1071.50"></text></g><g><title>core::sync::atomic::AtomicI32::load (257 samples, 0.34%)</title><rect x="50.8958%" y="1029" width="0.3447%" height="15" fill="rgb(248,60,25)" fg:x="37952" fg:w="257"/><text x="51.1458%" y="1039.50"></text></g><g><title>core::sync::atomic::atomic_load (257 samples, 0.34%)</title><rect x="50.8958%" y="1013" width="0.3447%" height="15" fill="rgb(227,53,46)" fg:x="37952" fg:w="257"/><text x="51.1458%" y="1023.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (566 samples, 0.76%)</title><rect x="50.8918%" y="1045" width="0.7590%" height="15" fill="rgb(216,120,32)" fg:x="37949" fg:w="566"/><text x="51.1418%" y="1055.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (306 samples, 0.41%)</title><rect x="51.2405%" y="1029" width="0.4104%" height="15" fill="rgb(220,134,1)" fg:x="38209" fg:w="306"/><text x="51.4905%" y="1039.50"></text></g><g><title>syscall (306 samples, 0.41%)</title><rect x="51.2405%" y="1013" width="0.4104%" height="15" fill="rgb(237,168,5)" fg:x="38209" fg:w="306"/><text x="51.4905%" y="1023.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (10 samples, 0.01%)</title><rect x="51.6549%" y="1013" width="0.0134%" height="15" fill="rgb(231,100,33)" fg:x="38518" fg:w="10"/><text x="51.9049%" y="1023.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (10 samples, 0.01%)</title><rect x="51.6549%" y="997" width="0.0134%" height="15" fill="rgb(236,177,47)" fg:x="38518" fg:w="10"/><text x="51.9049%" y="1007.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (10 samples, 0.01%)</title><rect x="51.6549%" y="981" width="0.0134%" height="15" fill="rgb(235,7,49)" fg:x="38518" fg:w="10"/><text x="51.9049%" y="991.50"></text></g><g><title>core::ops::function::FnOnce::call_once (14 samples, 0.02%)</title><rect x="51.6535%" y="1045" width="0.0188%" height="15" fill="rgb(232,119,22)" fg:x="38517" fg:w="14"/><text x="51.9035%" y="1055.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal::{{closure}} (14 samples, 0.02%)</title><rect x="51.6535%" y="1029" width="0.0188%" height="15" fill="rgb(254,73,53)" fg:x="38517" fg:w="14"/><text x="51.9035%" y="1039.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket (145 samples, 0.19%)</title><rect x="51.6736%" y="1045" width="0.1945%" height="15" fill="rgb(251,35,20)" fg:x="38532" fg:w="145"/><text x="51.9236%" y="1055.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (103 samples, 0.14%)</title><rect x="51.7300%" y="1029" width="0.1381%" height="15" fill="rgb(241,119,20)" fg:x="38574" fg:w="103"/><text x="51.9800%" y="1039.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (103 samples, 0.14%)</title><rect x="51.7300%" y="1013" width="0.1381%" height="15" fill="rgb(207,102,14)" fg:x="38574" fg:w="103"/><text x="51.9800%" y="1023.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (103 samples, 0.14%)</title><rect x="51.7300%" y="997" width="0.1381%" height="15" fill="rgb(248,201,50)" fg:x="38574" fg:w="103"/><text x="51.9800%" y="1007.50"></text></g><g><title>parking_lot_core::parking_lot::park::{{closure}} (843 samples, 1.13%)</title><rect x="50.8274%" y="1061" width="1.1305%" height="15" fill="rgb(222,185,44)" fg:x="37901" fg:w="843"/><text x="51.0774%" y="1071.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (67 samples, 0.09%)</title><rect x="51.8681%" y="1045" width="0.0899%" height="15" fill="rgb(218,107,18)" fg:x="38677" fg:w="67"/><text x="52.1181%" y="1055.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (67 samples, 0.09%)</title><rect x="51.8681%" y="1029" width="0.0899%" height="15" fill="rgb(237,177,39)" fg:x="38677" fg:w="67"/><text x="52.1181%" y="1039.50"></text></g><g><title>core::sync::atomic::atomic_sub (67 samples, 0.09%)</title><rect x="51.8681%" y="1013" width="0.0899%" height="15" fill="rgb(246,69,6)" fg:x="38677" fg:w="67"/><text x="52.1181%" y="1023.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (988 samples, 1.32%)</title><rect x="50.6437%" y="1141" width="1.3250%" height="15" fill="rgb(234,208,37)" fg:x="37764" fg:w="988"/><text x="50.8937%" y="1151.50"></text></g><g><title>parking_lot::condvar::Condvar::wait (988 samples, 1.32%)</title><rect x="50.6437%" y="1125" width="1.3250%" height="15" fill="rgb(225,4,6)" fg:x="37764" fg:w="988"/><text x="50.8937%" y="1135.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (988 samples, 1.32%)</title><rect x="50.6437%" y="1109" width="1.3250%" height="15" fill="rgb(233,45,0)" fg:x="37764" fg:w="988"/><text x="50.8937%" y="1119.50"></text></g><g><title>parking_lot_core::parking_lot::park (866 samples, 1.16%)</title><rect x="50.8073%" y="1093" width="1.1614%" height="15" fill="rgb(226,136,5)" fg:x="37886" fg:w="866"/><text x="51.0573%" y="1103.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (866 samples, 1.16%)</title><rect x="50.8073%" y="1077" width="1.1614%" height="15" fill="rgb(211,91,47)" fg:x="37886" fg:w="866"/><text x="51.0573%" y="1087.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (8 samples, 0.01%)</title><rect x="51.9579%" y="1061" width="0.0107%" height="15" fill="rgb(242,88,51)" fg:x="38744" fg:w="8"/><text x="52.2079%" y="1071.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (8 samples, 0.01%)</title><rect x="51.9579%" y="1045" width="0.0107%" height="15" fill="rgb(230,91,28)" fg:x="38744" fg:w="8"/><text x="52.2079%" y="1055.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (8 samples, 0.01%)</title><rect x="51.9579%" y="1029" width="0.0107%" height="15" fill="rgb(254,186,29)" fg:x="38744" fg:w="8"/><text x="52.2079%" y="1039.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (8 samples, 0.01%)</title><rect x="51.9579%" y="1013" width="0.0107%" height="15" fill="rgb(238,6,4)" fg:x="38744" fg:w="8"/><text x="52.2079%" y="1023.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (8 samples, 0.01%)</title><rect x="51.9579%" y="997" width="0.0107%" height="15" fill="rgb(221,151,16)" fg:x="38744" fg:w="8"/><text x="52.2079%" y="1007.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_condvar (1,130 samples, 1.52%)</title><rect x="50.4721%" y="1157" width="1.5154%" height="15" fill="rgb(251,143,52)" fg:x="37636" fg:w="1130"/><text x="50.7221%" y="1167.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (14 samples, 0.02%)</title><rect x="51.9687%" y="1141" width="0.0188%" height="15" fill="rgb(206,90,15)" fg:x="38752" fg:w="14"/><text x="52.2187%" y="1151.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (14 samples, 0.02%)</title><rect x="51.9687%" y="1125" width="0.0188%" height="15" fill="rgb(218,35,8)" fg:x="38752" fg:w="14"/><text x="52.2187%" y="1135.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (14 samples, 0.02%)</title><rect x="51.9687%" y="1109" width="0.0188%" height="15" fill="rgb(239,215,6)" fg:x="38752" fg:w="14"/><text x="52.2187%" y="1119.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (14 samples, 0.02%)</title><rect x="51.9687%" y="1093" width="0.0188%" height="15" fill="rgb(245,116,39)" fg:x="38752" fg:w="14"/><text x="52.2187%" y="1103.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (14 samples, 0.02%)</title><rect x="51.9687%" y="1077" width="0.0188%" height="15" fill="rgb(242,65,28)" fg:x="38752" fg:w="14"/><text x="52.2187%" y="1087.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (25 samples, 0.03%)</title><rect x="52.0451%" y="1141" width="0.0335%" height="15" fill="rgb(252,132,53)" fg:x="38809" fg:w="25"/><text x="52.2951%" y="1151.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (25 samples, 0.03%)</title><rect x="52.0451%" y="1125" width="0.0335%" height="15" fill="rgb(224,159,50)" fg:x="38809" fg:w="25"/><text x="52.2951%" y="1135.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (134 samples, 0.18%)</title><rect x="52.0786%" y="1141" width="0.1797%" height="15" fill="rgb(224,93,4)" fg:x="38834" fg:w="134"/><text x="52.3286%" y="1151.50"></text></g><g><title>core::sync::atomic::atomic_swap (134 samples, 0.18%)</title><rect x="52.0786%" y="1125" width="0.1797%" height="15" fill="rgb(208,81,34)" fg:x="38834" fg:w="134"/><text x="52.3286%" y="1135.50"></text></g><g><title>tokio::runtime::driver::Driver::park (27 samples, 0.04%)</title><rect x="52.2583%" y="1141" width="0.0362%" height="15" fill="rgb(233,92,54)" fg:x="38968" fg:w="27"/><text x="52.5083%" y="1151.50"></text></g><g><title>tokio::runtime::driver::TimeDriver::park (27 samples, 0.04%)</title><rect x="52.2583%" y="1125" width="0.0362%" height="15" fill="rgb(237,21,14)" fg:x="38968" fg:w="27"/><text x="52.5083%" y="1135.50"></text></g><g><title>core::mem::drop (31 samples, 0.04%)</title><rect x="52.3603%" y="1125" width="0.0416%" height="15" fill="rgb(249,128,51)" fg:x="39044" fg:w="31"/><text x="52.6103%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::time::InnerState&gt;&gt; (31 samples, 0.04%)</title><rect x="52.3603%" y="1109" width="0.0416%" height="15" fill="rgb(223,129,24)" fg:x="39044" fg:w="31"/><text x="52.6103%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::time::InnerState&gt;&gt; (31 samples, 0.04%)</title><rect x="52.3603%" y="1093" width="0.0416%" height="15" fill="rgb(231,168,25)" fg:x="39044" fg:w="31"/><text x="52.6103%" y="1103.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.04%)</title><rect x="52.3603%" y="1077" width="0.0416%" height="15" fill="rgb(224,39,20)" fg:x="39044" fg:w="31"/><text x="52.6103%" y="1087.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (31 samples, 0.04%)</title><rect x="52.3603%" y="1061" width="0.0416%" height="15" fill="rgb(225,152,53)" fg:x="39044" fg:w="31"/><text x="52.6103%" y="1071.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (31 samples, 0.04%)</title><rect x="52.3603%" y="1045" width="0.0416%" height="15" fill="rgb(252,17,24)" fg:x="39044" fg:w="31"/><text x="52.6103%" y="1055.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (31 samples, 0.04%)</title><rect x="52.3603%" y="1029" width="0.0416%" height="15" fill="rgb(250,114,30)" fg:x="39044" fg:w="31"/><text x="52.6103%" y="1039.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (25 samples, 0.03%)</title><rect x="52.4059%" y="1077" width="0.0335%" height="15" fill="rgb(229,5,4)" fg:x="39078" fg:w="25"/><text x="52.6559%" y="1087.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (25 samples, 0.03%)</title><rect x="52.4059%" y="1061" width="0.0335%" height="15" fill="rgb(225,176,49)" fg:x="39078" fg:w="25"/><text x="52.6559%" y="1071.50"></text></g><g><title>parking_lot_core::spinwait::cpu_relax (8 samples, 0.01%)</title><rect x="52.4434%" y="1045" width="0.0107%" height="15" fill="rgb(224,221,49)" fg:x="39106" fg:w="8"/><text x="52.6934%" y="1055.50"></text></g><g><title>core::hint::spin_loop (8 samples, 0.01%)</title><rect x="52.4434%" y="1029" width="0.0107%" height="15" fill="rgb(253,169,27)" fg:x="39106" fg:w="8"/><text x="52.6934%" y="1039.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (8 samples, 0.01%)</title><rect x="52.4434%" y="1013" width="0.0107%" height="15" fill="rgb(211,206,16)" fg:x="39106" fg:w="8"/><text x="52.6934%" y="1023.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (38 samples, 0.05%)</title><rect x="52.4045%" y="1125" width="0.0510%" height="15" fill="rgb(244,87,35)" fg:x="39077" fg:w="38"/><text x="52.6545%" y="1135.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (38 samples, 0.05%)</title><rect x="52.4045%" y="1109" width="0.0510%" height="15" fill="rgb(246,28,10)" fg:x="39077" fg:w="38"/><text x="52.6545%" y="1119.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (38 samples, 0.05%)</title><rect x="52.4045%" y="1093" width="0.0510%" height="15" fill="rgb(229,12,44)" fg:x="39077" fg:w="38"/><text x="52.6545%" y="1103.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (12 samples, 0.02%)</title><rect x="52.4394%" y="1077" width="0.0161%" height="15" fill="rgb(210,145,37)" fg:x="39103" fg:w="12"/><text x="52.6894%" y="1087.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (10 samples, 0.01%)</title><rect x="52.4421%" y="1061" width="0.0134%" height="15" fill="rgb(227,112,52)" fg:x="39105" fg:w="10"/><text x="52.6921%" y="1071.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (12 samples, 0.02%)</title><rect x="52.4769%" y="1109" width="0.0161%" height="15" fill="rgb(238,155,34)" fg:x="39131" fg:w="12"/><text x="52.7269%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;alloc::vec::Vec&lt;std::process::Child&gt;&gt;&gt; (11 samples, 0.01%)</title><rect x="52.4930%" y="1109" width="0.0148%" height="15" fill="rgb(239,226,36)" fg:x="39143" fg:w="11"/><text x="52.7430%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,alloc::vec::Vec&lt;std::process::Child&gt;&gt;&gt; (11 samples, 0.01%)</title><rect x="52.4930%" y="1093" width="0.0148%" height="15" fill="rgb(230,16,23)" fg:x="39143" fg:w="11"/><text x="52.7430%" y="1103.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.01%)</title><rect x="52.4930%" y="1077" width="0.0148%" height="15" fill="rgb(236,171,36)" fg:x="39143" fg:w="11"/><text x="52.7430%" y="1087.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (11 samples, 0.01%)</title><rect x="52.4930%" y="1061" width="0.0148%" height="15" fill="rgb(221,22,14)" fg:x="39143" fg:w="11"/><text x="52.7430%" y="1071.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (11 samples, 0.01%)</title><rect x="52.4930%" y="1045" width="0.0148%" height="15" fill="rgb(242,43,11)" fg:x="39143" fg:w="11"/><text x="52.7430%" y="1055.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (11 samples, 0.01%)</title><rect x="52.4930%" y="1029" width="0.0148%" height="15" fill="rgb(232,69,23)" fg:x="39143" fg:w="11"/><text x="52.7430%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;core::option::Option&lt;tokio::sync::watch::Receiver&lt;()&gt;&gt;&gt;&gt; (12 samples, 0.02%)</title><rect x="52.5078%" y="1109" width="0.0161%" height="15" fill="rgb(216,180,54)" fg:x="39154" fg:w="12"/><text x="52.7578%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,core::option::Option&lt;tokio::sync::watch::Receiver&lt;()&gt;&gt;&gt;&gt; (12 samples, 0.02%)</title><rect x="52.5078%" y="1093" width="0.0161%" height="15" fill="rgb(216,5,24)" fg:x="39154" fg:w="12"/><text x="52.7578%" y="1103.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.02%)</title><rect x="52.5078%" y="1077" width="0.0161%" height="15" fill="rgb(225,89,9)" fg:x="39154" fg:w="12"/><text x="52.7578%" y="1087.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (12 samples, 0.02%)</title><rect x="52.5078%" y="1061" width="0.0161%" height="15" fill="rgb(243,75,33)" fg:x="39154" fg:w="12"/><text x="52.7578%" y="1071.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (12 samples, 0.02%)</title><rect x="52.5078%" y="1045" width="0.0161%" height="15" fill="rgb(247,141,45)" fg:x="39154" fg:w="12"/><text x="52.7578%" y="1055.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (12 samples, 0.02%)</title><rect x="52.5078%" y="1029" width="0.0161%" height="15" fill="rgb(232,177,36)" fg:x="39154" fg:w="12"/><text x="52.7578%" y="1039.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (16 samples, 0.02%)</title><rect x="52.5239%" y="1109" width="0.0215%" height="15" fill="rgb(219,125,36)" fg:x="39166" fg:w="16"/><text x="52.7739%" y="1119.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (16 samples, 0.02%)</title><rect x="52.5239%" y="1093" width="0.0215%" height="15" fill="rgb(227,94,9)" fg:x="39166" fg:w="16"/><text x="52.7739%" y="1103.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (16 samples, 0.02%)</title><rect x="52.5239%" y="1077" width="0.0215%" height="15" fill="rgb(240,34,52)" fg:x="39166" fg:w="16"/><text x="52.7739%" y="1087.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (16 samples, 0.02%)</title><rect x="52.5239%" y="1061" width="0.0215%" height="15" fill="rgb(216,45,12)" fg:x="39166" fg:w="16"/><text x="52.7739%" y="1071.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (16 samples, 0.02%)</title><rect x="52.5239%" y="1045" width="0.0215%" height="15" fill="rgb(246,21,19)" fg:x="39166" fg:w="16"/><text x="52.7739%" y="1055.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (71 samples, 0.10%)</title><rect x="52.5467%" y="1061" width="0.0952%" height="15" fill="rgb(213,98,42)" fg:x="39183" fg:w="71"/><text x="52.7967%" y="1071.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (71 samples, 0.10%)</title><rect x="52.5467%" y="1045" width="0.0952%" height="15" fill="rgb(250,136,47)" fg:x="39183" fg:w="71"/><text x="52.7967%" y="1055.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (171 samples, 0.23%)</title><rect x="52.4555%" y="1125" width="0.2293%" height="15" fill="rgb(251,124,27)" fg:x="39115" fg:w="171"/><text x="52.7055%" y="1135.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::try_lock (104 samples, 0.14%)</title><rect x="52.5453%" y="1109" width="0.1395%" height="15" fill="rgb(229,180,14)" fg:x="39182" fg:w="104"/><text x="52.7953%" y="1119.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::try_lock (104 samples, 0.14%)</title><rect x="52.5453%" y="1093" width="0.1395%" height="15" fill="rgb(245,216,25)" fg:x="39182" fg:w="104"/><text x="52.7953%" y="1103.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::try_lock (104 samples, 0.14%)</title><rect x="52.5453%" y="1077" width="0.1395%" height="15" fill="rgb(251,43,5)" fg:x="39182" fg:w="104"/><text x="52.7953%" y="1087.50"></text></g><g><title>core::sync::atomic::AtomicU8::load (32 samples, 0.04%)</title><rect x="52.6419%" y="1061" width="0.0429%" height="15" fill="rgb(250,128,24)" fg:x="39254" fg:w="32"/><text x="52.8919%" y="1071.50"></text></g><g><title>core::sync::atomic::atomic_load (32 samples, 0.04%)</title><rect x="52.6419%" y="1045" width="0.0429%" height="15" fill="rgb(217,117,27)" fg:x="39254" fg:w="32"/><text x="52.8919%" y="1055.50"></text></g><g><title>tokio::runtime::driver::Handle::time (29 samples, 0.04%)</title><rect x="52.6848%" y="1125" width="0.0389%" height="15" fill="rgb(245,147,4)" fg:x="39286" fg:w="29"/><text x="52.9348%" y="1135.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (29 samples, 0.04%)</title><rect x="52.6848%" y="1109" width="0.0389%" height="15" fill="rgb(242,201,35)" fg:x="39286" fg:w="29"/><text x="52.9348%" y="1119.50"></text></g><g><title>&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 0.08%)</title><rect x="52.8967%" y="1109" width="0.0791%" height="15" fill="rgb(218,181,1)" fg:x="39444" fg:w="59"/><text x="53.1467%" y="1119.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (11 samples, 0.01%)</title><rect x="52.9611%" y="1093" width="0.0148%" height="15" fill="rgb(222,6,29)" fg:x="39492" fg:w="11"/><text x="53.2111%" y="1103.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (11 samples, 0.01%)</title><rect x="52.9611%" y="1077" width="0.0148%" height="15" fill="rgb(208,186,3)" fg:x="39492" fg:w="11"/><text x="53.2111%" y="1087.50"></text></g><g><title>mio::event::event::Event::token (56 samples, 0.08%)</title><rect x="52.9758%" y="1109" width="0.0751%" height="15" fill="rgb(216,36,26)" fg:x="39503" fg:w="56"/><text x="53.2258%" y="1119.50"></text></g><g><title>mio::sys::unix::selector::epoll::event::token (56 samples, 0.08%)</title><rect x="52.9758%" y="1093" width="0.0751%" height="15" fill="rgb(248,201,23)" fg:x="39503" fg:w="56"/><text x="53.2258%" y="1103.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (29 samples, 0.04%)</title><rect x="53.2346%" y="1077" width="0.0389%" height="15" fill="rgb(251,170,31)" fg:x="39696" fg:w="29"/><text x="53.4846%" y="1087.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (29 samples, 0.04%)</title><rect x="53.2346%" y="1061" width="0.0389%" height="15" fill="rgb(207,110,25)" fg:x="39696" fg:w="29"/><text x="53.4846%" y="1071.50"></text></g><g><title>&lt;core::time::Duration as core::ops::arith::Add&gt;::add (22 samples, 0.03%)</title><rect x="53.2802%" y="1045" width="0.0295%" height="15" fill="rgb(250,54,15)" fg:x="39730" fg:w="22"/><text x="53.5302%" y="1055.50"></text></g><g><title>core::time::Duration::checked_add (14 samples, 0.02%)</title><rect x="53.2910%" y="1029" width="0.0188%" height="15" fill="rgb(227,68,33)" fg:x="39738" fg:w="14"/><text x="53.5410%" y="1039.50"></text></g><g><title>core::time::Duration::new (14 samples, 0.02%)</title><rect x="53.2910%" y="1013" width="0.0188%" height="15" fill="rgb(238,34,41)" fg:x="39738" fg:w="14"/><text x="53.5410%" y="1023.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (34 samples, 0.05%)</title><rect x="53.2735%" y="1077" width="0.0456%" height="15" fill="rgb(220,11,15)" fg:x="39725" fg:w="34"/><text x="53.5235%" y="1087.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select::{{closure}} (34 samples, 0.05%)</title><rect x="53.2735%" y="1061" width="0.0456%" height="15" fill="rgb(246,111,35)" fg:x="39725" fg:w="34"/><text x="53.5235%" y="1071.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (24 samples, 0.03%)</title><rect x="53.3191%" y="1077" width="0.0322%" height="15" fill="rgb(209,88,53)" fg:x="39759" fg:w="24"/><text x="53.5691%" y="1087.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select::{{closure}} (24 samples, 0.03%)</title><rect x="53.3191%" y="1061" width="0.0322%" height="15" fill="rgb(231,185,47)" fg:x="39759" fg:w="24"/><text x="53.5691%" y="1071.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (24 samples, 0.03%)</title><rect x="53.3191%" y="1045" width="0.0322%" height="15" fill="rgb(233,154,1)" fg:x="39759" fg:w="24"/><text x="53.5691%" y="1055.50"></text></g><g><title>mio::poll::Poll::poll (734 samples, 0.98%)</title><rect x="53.0603%" y="1109" width="0.9843%" height="15" fill="rgb(225,15,46)" fg:x="39566" fg:w="734"/><text x="53.3103%" y="1119.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (734 samples, 0.98%)</title><rect x="53.0603%" y="1093" width="0.9843%" height="15" fill="rgb(211,135,41)" fg:x="39566" fg:w="734"/><text x="53.3103%" y="1103.50"></text></g><g><title>epoll_wait (517 samples, 0.69%)</title><rect x="53.3513%" y="1077" width="0.6933%" height="15" fill="rgb(208,54,0)" fg:x="39783" fg:w="517"/><text x="53.6013%" y="1087.50"></text></g><g><title>[libc.so.6] (172 samples, 0.23%)</title><rect x="53.8140%" y="1061" width="0.2307%" height="15" fill="rgb(244,136,14)" fg:x="40128" fg:w="172"/><text x="54.0640%" y="1071.50"></text></g><g><title>mio::event::event::Event::is_read_closed (8 samples, 0.01%)</title><rect x="54.0473%" y="1093" width="0.0107%" height="15" fill="rgb(241,56,14)" fg:x="40302" fg:w="8"/><text x="54.2973%" y="1103.50"></text></g><g><title>mio::sys::unix::selector::epoll::event::is_read_closed (8 samples, 0.01%)</title><rect x="54.0473%" y="1077" width="0.0107%" height="15" fill="rgb(205,80,24)" fg:x="40302" fg:w="8"/><text x="54.2973%" y="1087.50"></text></g><g><title>tokio::io::ready::Ready::from_mio (27 samples, 0.04%)</title><rect x="54.0446%" y="1109" width="0.0362%" height="15" fill="rgb(220,57,4)" fg:x="40300" fg:w="27"/><text x="54.2946%" y="1119.50"></text></g><g><title>mio::event::event::Event::is_write_closed (8 samples, 0.01%)</title><rect x="54.0701%" y="1093" width="0.0107%" height="15" fill="rgb(226,193,50)" fg:x="40319" fg:w="8"/><text x="54.3201%" y="1103.50"></text></g><g><title>mio::sys::unix::selector::epoll::event::is_write_closed (8 samples, 0.01%)</title><rect x="54.0701%" y="1077" width="0.0107%" height="15" fill="rgb(231,168,22)" fg:x="40319" fg:w="8"/><text x="54.3201%" y="1087.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (14 samples, 0.02%)</title><rect x="54.0835%" y="1077" width="0.0188%" height="15" fill="rgb(254,215,14)" fg:x="40329" fg:w="14"/><text x="54.3335%" y="1087.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (14 samples, 0.02%)</title><rect x="54.0835%" y="1061" width="0.0188%" height="15" fill="rgb(211,115,16)" fg:x="40329" fg:w="14"/><text x="54.3335%" y="1071.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::set_readiness (43 samples, 0.06%)</title><rect x="54.0835%" y="1093" width="0.0577%" height="15" fill="rgb(236,210,16)" fg:x="40329" fg:w="43"/><text x="54.3335%" y="1103.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (29 samples, 0.04%)</title><rect x="54.1023%" y="1077" width="0.0389%" height="15" fill="rgb(221,94,12)" fg:x="40343" fg:w="29"/><text x="54.3523%" y="1087.50"></text></g><g><title>core::sync::atomic::atomic_load (29 samples, 0.04%)</title><rect x="54.1023%" y="1061" width="0.0389%" height="15" fill="rgb(235,218,49)" fg:x="40343" fg:w="29"/><text x="54.3523%" y="1071.50"></text></g><g><title>core::mem::drop (9 samples, 0.01%)</title><rect x="54.1613%" y="1077" width="0.0121%" height="15" fill="rgb(217,114,14)" fg:x="40387" fg:w="9"/><text x="54.4113%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::io::scheduled_io::Waiters&gt;&gt; (9 samples, 0.01%)</title><rect x="54.1613%" y="1061" width="0.0121%" height="15" fill="rgb(216,145,22)" fg:x="40387" fg:w="9"/><text x="54.4113%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::io::scheduled_io::Waiters&gt;&gt; (9 samples, 0.01%)</title><rect x="54.1613%" y="1045" width="0.0121%" height="15" fill="rgb(217,112,39)" fg:x="40387" fg:w="9"/><text x="54.4113%" y="1055.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="54.1613%" y="1029" width="0.0121%" height="15" fill="rgb(225,85,32)" fg:x="40387" fg:w="9"/><text x="54.4113%" y="1039.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (9 samples, 0.01%)</title><rect x="54.1613%" y="1013" width="0.0121%" height="15" fill="rgb(245,209,47)" fg:x="40387" fg:w="9"/><text x="54.4113%" y="1023.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (9 samples, 0.01%)</title><rect x="54.1613%" y="997" width="0.0121%" height="15" fill="rgb(218,220,15)" fg:x="40387" fg:w="9"/><text x="54.4113%" y="1007.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (9 samples, 0.01%)</title><rect x="54.1613%" y="981" width="0.0121%" height="15" fill="rgb(222,202,31)" fg:x="40387" fg:w="9"/><text x="54.4113%" y="991.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::drop_reference (10 samples, 0.01%)</title><rect x="54.2042%" y="1013" width="0.0134%" height="15" fill="rgb(243,203,4)" fg:x="40419" fg:w="10"/><text x="54.4542%" y="1023.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (10 samples, 0.01%)</title><rect x="54.2042%" y="997" width="0.0134%" height="15" fill="rgb(237,92,17)" fg:x="40419" fg:w="10"/><text x="54.4542%" y="1007.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (9 samples, 0.01%)</title><rect x="54.2056%" y="981" width="0.0121%" height="15" fill="rgb(231,119,7)" fg:x="40420" fg:w="9"/><text x="54.4556%" y="991.50"></text></g><g><title>core::sync::atomic::atomic_sub (9 samples, 0.01%)</title><rect x="54.2056%" y="965" width="0.0121%" height="15" fill="rgb(237,82,41)" fg:x="40420" fg:w="9"/><text x="54.4556%" y="975.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (12 samples, 0.02%)</title><rect x="54.2605%" y="949" width="0.0161%" height="15" fill="rgb(226,81,48)" fg:x="40461" fg:w="12"/><text x="54.5105%" y="959.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (12 samples, 0.02%)</title><rect x="54.2605%" y="933" width="0.0161%" height="15" fill="rgb(234,70,51)" fg:x="40461" fg:w="12"/><text x="54.5105%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (58 samples, 0.08%)</title><rect x="54.2793%" y="933" width="0.0778%" height="15" fill="rgb(251,86,4)" fg:x="40475" fg:w="58"/><text x="54.5293%" y="943.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (56 samples, 0.08%)</title><rect x="54.2820%" y="917" width="0.0751%" height="15" fill="rgb(244,144,28)" fg:x="40477" fg:w="56"/><text x="54.5320%" y="927.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (56 samples, 0.08%)</title><rect x="54.2820%" y="901" width="0.0751%" height="15" fill="rgb(232,161,39)" fg:x="40477" fg:w="56"/><text x="54.5320%" y="911.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (164 samples, 0.22%)</title><rect x="54.2176%" y="997" width="0.2199%" height="15" fill="rgb(247,34,51)" fg:x="40429" fg:w="164"/><text x="54.4676%" y="1007.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (161 samples, 0.22%)</title><rect x="54.2217%" y="981" width="0.2159%" height="15" fill="rgb(225,132,2)" fg:x="40432" fg:w="161"/><text x="54.4717%" y="991.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (161 samples, 0.22%)</title><rect x="54.2217%" y="965" width="0.2159%" height="15" fill="rgb(209,159,44)" fg:x="40432" fg:w="161"/><text x="54.4717%" y="975.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::{{closure}} (120 samples, 0.16%)</title><rect x="54.2766%" y="949" width="0.1609%" height="15" fill="rgb(251,214,1)" fg:x="40473" fg:w="120"/><text x="54.5266%" y="959.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (52 samples, 0.07%)</title><rect x="54.3678%" y="933" width="0.0697%" height="15" fill="rgb(247,84,47)" fg:x="40541" fg:w="52"/><text x="54.6178%" y="943.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (19 samples, 0.03%)</title><rect x="54.4121%" y="917" width="0.0255%" height="15" fill="rgb(240,111,43)" fg:x="40574" fg:w="19"/><text x="54.6621%" y="927.50"></text></g><g><title>core::mem::replace (19 samples, 0.03%)</title><rect x="54.4121%" y="901" width="0.0255%" height="15" fill="rgb(215,214,35)" fg:x="40574" fg:w="19"/><text x="54.6621%" y="911.50"></text></g><g><title>core::ptr::read (19 samples, 0.03%)</title><rect x="54.4121%" y="885" width="0.0255%" height="15" fill="rgb(248,207,23)" fg:x="40574" fg:w="19"/><text x="54.6621%" y="895.50"></text></g><g><title>tokio::runtime::task::Task&lt;S&gt;::from_raw (26 samples, 0.03%)</title><rect x="54.4630%" y="981" width="0.0349%" height="15" fill="rgb(214,186,4)" fg:x="40612" fg:w="26"/><text x="54.7130%" y="991.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::from_raw (26 samples, 0.03%)</title><rect x="54.4630%" y="965" width="0.0349%" height="15" fill="rgb(220,133,22)" fg:x="40612" fg:w="26"/><text x="54.7130%" y="975.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (210 samples, 0.28%)</title><rect x="54.2176%" y="1013" width="0.2816%" height="15" fill="rgb(239,134,19)" fg:x="40429" fg:w="210"/><text x="54.4676%" y="1023.50"></text></g><g><title>tokio::runtime::task::raw::schedule (46 samples, 0.06%)</title><rect x="54.4376%" y="997" width="0.0617%" height="15" fill="rgb(250,140,9)" fg:x="40593" fg:w="46"/><text x="54.6876%" y="1007.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (16 samples, 0.02%)</title><rect x="54.5046%" y="981" width="0.0215%" height="15" fill="rgb(225,59,14)" fg:x="40643" fg:w="16"/><text x="54.7546%" y="991.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (16 samples, 0.02%)</title><rect x="54.5046%" y="965" width="0.0215%" height="15" fill="rgb(214,152,51)" fg:x="40643" fg:w="16"/><text x="54.7546%" y="975.50"></text></g><g><title>tokio::runtime::task::state::State::load (48 samples, 0.06%)</title><rect x="54.5261%" y="981" width="0.0644%" height="15" fill="rgb(251,227,43)" fg:x="40659" fg:w="48"/><text x="54.7761%" y="991.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (48 samples, 0.06%)</title><rect x="54.5261%" y="965" width="0.0644%" height="15" fill="rgb(241,96,17)" fg:x="40659" fg:w="48"/><text x="54.7761%" y="975.50"></text></g><g><title>core::sync::atomic::atomic_load (48 samples, 0.06%)</title><rect x="54.5261%" y="949" width="0.0644%" height="15" fill="rgb(234,198,43)" fg:x="40659" fg:w="48"/><text x="54.7761%" y="959.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (353 samples, 0.47%)</title><rect x="54.1412%" y="1093" width="0.4734%" height="15" fill="rgb(220,108,29)" fg:x="40372" fg:w="353"/><text x="54.3912%" y="1103.50"></text></g><g><title>tokio::util::wake_list::WakeList::wake_all (314 samples, 0.42%)</title><rect x="54.1935%" y="1077" width="0.4211%" height="15" fill="rgb(226,163,33)" fg:x="40411" fg:w="314"/><text x="54.4435%" y="1087.50"></text></g><g><title>core::task::wake::Waker::wake (309 samples, 0.41%)</title><rect x="54.2002%" y="1061" width="0.4144%" height="15" fill="rgb(205,194,45)" fg:x="40416" fg:w="309"/><text x="54.4502%" y="1071.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (308 samples, 0.41%)</title><rect x="54.2015%" y="1045" width="0.4130%" height="15" fill="rgb(206,143,44)" fg:x="40417" fg:w="308"/><text x="54.4515%" y="1055.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (308 samples, 0.41%)</title><rect x="54.2015%" y="1029" width="0.4130%" height="15" fill="rgb(236,136,36)" fg:x="40417" fg:w="308"/><text x="54.4515%" y="1039.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (86 samples, 0.12%)</title><rect x="54.4992%" y="1013" width="0.1153%" height="15" fill="rgb(249,172,42)" fg:x="40639" fg:w="86"/><text x="54.7492%" y="1023.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (82 samples, 0.11%)</title><rect x="54.5046%" y="997" width="0.1100%" height="15" fill="rgb(216,139,23)" fg:x="40643" fg:w="82"/><text x="54.7546%" y="1007.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val::{{closure}} (18 samples, 0.02%)</title><rect x="54.5904%" y="981" width="0.0241%" height="15" fill="rgb(207,166,20)" fg:x="40707" fg:w="18"/><text x="54.8404%" y="991.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::ref_inc (12 samples, 0.02%)</title><rect x="54.5985%" y="965" width="0.0161%" height="15" fill="rgb(210,209,22)" fg:x="40713" fg:w="12"/><text x="54.8485%" y="975.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (18 samples, 0.02%)</title><rect x="54.6280%" y="1077" width="0.0241%" height="15" fill="rgb(232,118,20)" fg:x="40735" fg:w="18"/><text x="54.8780%" y="1087.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (18 samples, 0.02%)</title><rect x="54.6280%" y="1061" width="0.0241%" height="15" fill="rgb(238,113,42)" fg:x="40735" fg:w="18"/><text x="54.8780%" y="1071.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (18 samples, 0.02%)</title><rect x="54.6280%" y="1045" width="0.0241%" height="15" fill="rgb(231,42,5)" fg:x="40735" fg:w="18"/><text x="54.8780%" y="1055.50"></text></g><g><title>tokio::runtime::io::Driver::dispatch (445 samples, 0.60%)</title><rect x="54.0808%" y="1109" width="0.5968%" height="15" fill="rgb(243,166,24)" fg:x="40327" fg:w="445"/><text x="54.3308%" y="1119.50"></text></g><g><title>tokio::util::slab::Slab&lt;T&gt;::get (47 samples, 0.06%)</title><rect x="54.6146%" y="1093" width="0.0630%" height="15" fill="rgb(237,226,12)" fg:x="40725" fg:w="47"/><text x="54.8646%" y="1103.50"></text></g><g><title>tokio::util::slab::Page&lt;T&gt;::slot (17 samples, 0.02%)</title><rect x="54.6548%" y="1077" width="0.0228%" height="15" fill="rgb(229,133,24)" fg:x="40755" fg:w="17"/><text x="54.9048%" y="1087.50"></text></g><g><title>tokio::runtime::io::Driver::turn (1,459 samples, 1.96%)</title><rect x="52.7237%" y="1125" width="1.9566%" height="15" fill="rgb(238,33,43)" fg:x="39315" fg:w="1459"/><text x="52.9737%" y="1135.50">t..</text></g><g><title>tokio::runtime::signal::Driver::process (53 samples, 0.07%)</title><rect x="54.6803%" y="1125" width="0.0711%" height="15" fill="rgb(227,59,38)" fg:x="40774" fg:w="53"/><text x="54.9303%" y="1135.50"></text></g><g><title>tokio::runtime::io::Driver::consume_signal_ready (36 samples, 0.05%)</title><rect x="54.7031%" y="1109" width="0.0483%" height="15" fill="rgb(230,97,0)" fg:x="40791" fg:w="36"/><text x="54.9531%" y="1119.50"></text></g><g><title>core::array::&lt;impl core::default::Default for [T: 32]&gt;::default (35 samples, 0.05%)</title><rect x="54.8238%" y="1093" width="0.0469%" height="15" fill="rgb(250,173,50)" fg:x="40881" fg:w="35"/><text x="55.0738%" y="1103.50"></text></g><g><title>core::mem::drop (18 samples, 0.02%)</title><rect x="54.8801%" y="1093" width="0.0241%" height="15" fill="rgb(240,15,50)" fg:x="40923" fg:w="18"/><text x="55.1301%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::time::InnerState&gt;&gt; (18 samples, 0.02%)</title><rect x="54.8801%" y="1077" width="0.0241%" height="15" fill="rgb(221,93,22)" fg:x="40923" fg:w="18"/><text x="55.1301%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::time::InnerState&gt;&gt; (18 samples, 0.02%)</title><rect x="54.8801%" y="1061" width="0.0241%" height="15" fill="rgb(245,180,53)" fg:x="40923" fg:w="18"/><text x="55.1301%" y="1071.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.02%)</title><rect x="54.8801%" y="1045" width="0.0241%" height="15" fill="rgb(231,88,51)" fg:x="40923" fg:w="18"/><text x="55.1301%" y="1055.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (18 samples, 0.02%)</title><rect x="54.8801%" y="1029" width="0.0241%" height="15" fill="rgb(240,58,21)" fg:x="40923" fg:w="18"/><text x="55.1301%" y="1039.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (18 samples, 0.02%)</title><rect x="54.8801%" y="1013" width="0.0241%" height="15" fill="rgb(237,21,10)" fg:x="40923" fg:w="18"/><text x="55.1301%" y="1023.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (18 samples, 0.02%)</title><rect x="54.8801%" y="997" width="0.0241%" height="15" fill="rgb(218,43,11)" fg:x="40923" fg:w="18"/><text x="55.1301%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt;: 32]&gt; (79 samples, 0.11%)</title><rect x="54.9042%" y="1093" width="0.1059%" height="15" fill="rgb(218,221,29)" fg:x="40941" fg:w="79"/><text x="55.1542%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (49 samples, 0.07%)</title><rect x="54.9445%" y="1077" width="0.0657%" height="15" fill="rgb(214,118,42)" fg:x="40971" fg:w="49"/><text x="55.1945%" y="1087.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (78 samples, 0.10%)</title><rect x="55.0142%" y="1029" width="0.1046%" height="15" fill="rgb(251,200,26)" fg:x="41023" fg:w="78"/><text x="55.2642%" y="1039.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (78 samples, 0.10%)</title><rect x="55.0142%" y="1013" width="0.1046%" height="15" fill="rgb(237,101,39)" fg:x="41023" fg:w="78"/><text x="55.2642%" y="1023.50"></text></g><g><title>tokio::runtime::time::Inner::lock (82 samples, 0.11%)</title><rect x="55.0102%" y="1093" width="0.1100%" height="15" fill="rgb(251,117,11)" fg:x="41020" fg:w="82"/><text x="55.2602%" y="1103.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (82 samples, 0.11%)</title><rect x="55.0102%" y="1077" width="0.1100%" height="15" fill="rgb(216,223,23)" fg:x="41020" fg:w="82"/><text x="55.2602%" y="1087.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (82 samples, 0.11%)</title><rect x="55.0102%" y="1061" width="0.1100%" height="15" fill="rgb(251,54,12)" fg:x="41020" fg:w="82"/><text x="55.2602%" y="1071.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (82 samples, 0.11%)</title><rect x="55.0102%" y="1045" width="0.1100%" height="15" fill="rgb(254,176,54)" fg:x="41020" fg:w="82"/><text x="55.2602%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (8 samples, 0.01%)</title><rect x="55.1805%" y="1061" width="0.0107%" height="15" fill="rgb(210,32,8)" fg:x="41147" fg:w="8"/><text x="55.4305%" y="1071.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (8 samples, 0.01%)</title><rect x="55.1805%" y="1045" width="0.0107%" height="15" fill="rgb(235,52,38)" fg:x="41147" fg:w="8"/><text x="55.4305%" y="1055.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.01%)</title><rect x="55.1805%" y="1029" width="0.0107%" height="15" fill="rgb(231,4,44)" fg:x="41147" fg:w="8"/><text x="55.4305%" y="1039.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_occupied_slot (54 samples, 0.07%)</title><rect x="55.3025%" y="1045" width="0.0724%" height="15" fill="rgb(249,2,32)" fg:x="41238" fg:w="54"/><text x="55.5525%" y="1055.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (145 samples, 0.19%)</title><rect x="55.1912%" y="1061" width="0.1945%" height="15" fill="rgb(224,65,26)" fg:x="41155" fg:w="145"/><text x="55.4412%" y="1071.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (188 samples, 0.25%)</title><rect x="55.1349%" y="1077" width="0.2521%" height="15" fill="rgb(250,73,40)" fg:x="41113" fg:w="188"/><text x="55.3849%" y="1087.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (208 samples, 0.28%)</title><rect x="55.1202%" y="1093" width="0.2789%" height="15" fill="rgb(253,177,16)" fg:x="41102" fg:w="208"/><text x="55.3702%" y="1103.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_occupied_slot (34 samples, 0.05%)</title><rect x="55.4822%" y="1045" width="0.0456%" height="15" fill="rgb(217,32,34)" fg:x="41372" fg:w="34"/><text x="55.7322%" y="1055.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (584 samples, 0.78%)</title><rect x="54.7514%" y="1109" width="0.7832%" height="15" fill="rgb(212,7,10)" fg:x="40827" fg:w="584"/><text x="55.0014%" y="1119.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll_at (101 samples, 0.14%)</title><rect x="55.3991%" y="1093" width="0.1354%" height="15" fill="rgb(245,89,8)" fg:x="41310" fg:w="101"/><text x="55.6491%" y="1103.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (99 samples, 0.13%)</title><rect x="55.4018%" y="1077" width="0.1328%" height="15" fill="rgb(237,16,53)" fg:x="41312" fg:w="99"/><text x="55.6518%" y="1087.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (47 samples, 0.06%)</title><rect x="55.4715%" y="1061" width="0.0630%" height="15" fill="rgb(250,204,30)" fg:x="41364" fg:w="47"/><text x="55.7215%" y="1071.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::instant_to_tick (28 samples, 0.04%)</title><rect x="55.5828%" y="1093" width="0.0375%" height="15" fill="rgb(208,77,27)" fg:x="41447" fg:w="28"/><text x="55.8328%" y="1103.50"></text></g><g><title>tokio::time::instant::Instant::checked_duration_since (19 samples, 0.03%)</title><rect x="55.5949%" y="1077" width="0.0255%" height="15" fill="rgb(250,204,28)" fg:x="41456" fg:w="19"/><text x="55.8449%" y="1087.50"></text></g><g><title>std::time::Instant::checked_duration_since (19 samples, 0.03%)</title><rect x="55.5949%" y="1061" width="0.0255%" height="15" fill="rgb(244,63,21)" fg:x="41456" fg:w="19"/><text x="55.8449%" y="1071.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (17 samples, 0.02%)</title><rect x="55.5976%" y="1045" width="0.0228%" height="15" fill="rgb(236,85,44)" fg:x="41458" fg:w="17"/><text x="55.8476%" y="1055.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (15 samples, 0.02%)</title><rect x="55.6003%" y="1029" width="0.0201%" height="15" fill="rgb(215,98,4)" fg:x="41460" fg:w="15"/><text x="55.8503%" y="1039.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (314 samples, 0.42%)</title><rect x="55.6204%" y="1061" width="0.4211%" height="15" fill="rgb(235,38,11)" fg:x="41475" fg:w="314"/><text x="55.8704%" y="1071.50"></text></g><g><title>clock_gettime (310 samples, 0.42%)</title><rect x="55.6257%" y="1045" width="0.4157%" height="15" fill="rgb(254,186,25)" fg:x="41479" fg:w="310"/><text x="55.8757%" y="1055.50"></text></g><g><title>__vdso_clock_gettime (178 samples, 0.24%)</title><rect x="55.8028%" y="1029" width="0.2387%" height="15" fill="rgb(225,55,31)" fg:x="41611" fg:w="178"/><text x="56.0528%" y="1039.50"></text></g><g><title>[[vdso]] (28 samples, 0.04%)</title><rect x="56.0039%" y="1013" width="0.0375%" height="15" fill="rgb(211,15,21)" fg:x="41761" fg:w="28"/><text x="56.2539%" y="1023.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process (1,012 samples, 1.36%)</title><rect x="54.7514%" y="1125" width="1.3572%" height="15" fill="rgb(215,187,41)" fg:x="40827" fg:w="1012"/><text x="55.0014%" y="1135.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::now (428 samples, 0.57%)</title><rect x="55.5345%" y="1109" width="0.5740%" height="15" fill="rgb(248,69,32)" fg:x="41411" fg:w="428"/><text x="55.7845%" y="1119.50"></text></g><g><title>tokio::time::clock::Clock::now (364 samples, 0.49%)</title><rect x="55.6204%" y="1093" width="0.4881%" height="15" fill="rgb(252,102,52)" fg:x="41475" fg:w="364"/><text x="55.8704%" y="1103.50"></text></g><g><title>tokio::time::clock::now (364 samples, 0.49%)</title><rect x="55.6204%" y="1077" width="0.4881%" height="15" fill="rgb(253,140,32)" fg:x="41475" fg:w="364"/><text x="55.8704%" y="1087.50"></text></g><g><title>std::time::Instant::now (50 samples, 0.07%)</title><rect x="56.0415%" y="1061" width="0.0671%" height="15" fill="rgb(216,56,42)" fg:x="41789" fg:w="50"/><text x="56.2915%" y="1071.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (50 samples, 0.07%)</title><rect x="56.0415%" y="1045" width="0.0671%" height="15" fill="rgb(216,184,14)" fg:x="41789" fg:w="50"/><text x="56.2915%" y="1055.50"></text></g><g><title>tokio::runtime::time::Driver::park_thread_timeout (33 samples, 0.04%)</title><rect x="56.1085%" y="1125" width="0.0443%" height="15" fill="rgb(237,187,27)" fg:x="41839" fg:w="33"/><text x="56.3585%" y="1135.50"></text></g><g><title>tokio::runtime::driver::IoStack::park_timeout (33 samples, 0.04%)</title><rect x="56.1085%" y="1109" width="0.0443%" height="15" fill="rgb(219,65,3)" fg:x="41839" fg:w="33"/><text x="56.3585%" y="1119.50"></text></g><g><title>tokio::runtime::process::Driver::park_timeout (22 samples, 0.03%)</title><rect x="56.1233%" y="1093" width="0.0295%" height="15" fill="rgb(245,83,25)" fg:x="41850" fg:w="22"/><text x="56.3733%" y="1103.50"></text></g><g><title>tokio::runtime::signal::Driver::park_timeout (22 samples, 0.03%)</title><rect x="56.1233%" y="1077" width="0.0295%" height="15" fill="rgb(214,205,45)" fg:x="41850" fg:w="22"/><text x="56.3733%" y="1087.50"></text></g><g><title>tokio::runtime::io::Driver::park_timeout (22 samples, 0.03%)</title><rect x="56.1233%" y="1061" width="0.0295%" height="15" fill="rgb(241,20,18)" fg:x="41850" fg:w="22"/><text x="56.3733%" y="1071.50"></text></g><g><title>tokio::runtime::driver::Handle::io (22 samples, 0.03%)</title><rect x="56.1233%" y="1045" width="0.0295%" height="15" fill="rgb(232,163,23)" fg:x="41850" fg:w="22"/><text x="56.3733%" y="1055.50"></text></g><g><title>tokio::runtime::driver::IoHandle::as_ref (20 samples, 0.03%)</title><rect x="56.1260%" y="1029" width="0.0268%" height="15" fill="rgb(214,5,46)" fg:x="41852" fg:w="20"/><text x="56.3760%" y="1039.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::instant_to_tick (27 samples, 0.04%)</title><rect x="56.1581%" y="1109" width="0.0362%" height="15" fill="rgb(229,78,17)" fg:x="41876" fg:w="27"/><text x="56.4081%" y="1119.50"></text></g><g><title>tokio::time::instant::Instant::checked_duration_since (19 samples, 0.03%)</title><rect x="56.1689%" y="1093" width="0.0255%" height="15" fill="rgb(248,89,10)" fg:x="41884" fg:w="19"/><text x="56.4189%" y="1103.50"></text></g><g><title>std::time::Instant::checked_duration_since (19 samples, 0.03%)</title><rect x="56.1689%" y="1077" width="0.0255%" height="15" fill="rgb(248,54,15)" fg:x="41884" fg:w="19"/><text x="56.4189%" y="1087.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (14 samples, 0.02%)</title><rect x="56.1756%" y="1061" width="0.0188%" height="15" fill="rgb(223,116,6)" fg:x="41889" fg:w="14"/><text x="56.4256%" y="1071.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (13 samples, 0.02%)</title><rect x="56.1769%" y="1045" width="0.0174%" height="15" fill="rgb(205,125,38)" fg:x="41890" fg:w="13"/><text x="56.4269%" y="1055.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (104 samples, 0.14%)</title><rect x="56.1943%" y="1077" width="0.1395%" height="15" fill="rgb(251,78,38)" fg:x="41903" fg:w="104"/><text x="56.4443%" y="1087.50"></text></g><g><title>clock_gettime (101 samples, 0.14%)</title><rect x="56.1984%" y="1061" width="0.1354%" height="15" fill="rgb(253,78,28)" fg:x="41906" fg:w="101"/><text x="56.4484%" y="1071.50"></text></g><g><title>__vdso_clock_gettime (78 samples, 0.10%)</title><rect x="56.2292%" y="1045" width="0.1046%" height="15" fill="rgb(209,120,3)" fg:x="41929" fg:w="78"/><text x="56.4792%" y="1055.50"></text></g><g><title>[[vdso]] (26 samples, 0.03%)</title><rect x="56.2989%" y="1029" width="0.0349%" height="15" fill="rgb(238,229,9)" fg:x="41981" fg:w="26"/><text x="56.5489%" y="1039.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::now (143 samples, 0.19%)</title><rect x="56.1528%" y="1125" width="0.1918%" height="15" fill="rgb(253,159,18)" fg:x="41872" fg:w="143"/><text x="56.4028%" y="1135.50"></text></g><g><title>tokio::time::clock::Clock::now (112 samples, 0.15%)</title><rect x="56.1943%" y="1109" width="0.1502%" height="15" fill="rgb(244,42,34)" fg:x="41903" fg:w="112"/><text x="56.4443%" y="1119.50"></text></g><g><title>tokio::time::clock::now (112 samples, 0.15%)</title><rect x="56.1943%" y="1093" width="0.1502%" height="15" fill="rgb(224,8,7)" fg:x="41903" fg:w="112"/><text x="56.4443%" y="1103.50"></text></g><g><title>std::time::Instant::now (8 samples, 0.01%)</title><rect x="56.3338%" y="1077" width="0.0107%" height="15" fill="rgb(210,201,45)" fg:x="42007" fg:w="8"/><text x="56.5838%" y="1087.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (8 samples, 0.01%)</title><rect x="56.3338%" y="1061" width="0.0107%" height="15" fill="rgb(252,185,21)" fg:x="42007" fg:w="8"/><text x="56.5838%" y="1071.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::tick_to_duration (15 samples, 0.02%)</title><rect x="56.3445%" y="1125" width="0.0201%" height="15" fill="rgb(223,131,1)" fg:x="42015" fg:w="15"/><text x="56.5945%" y="1135.50"></text></g><g><title>core::time::Duration::from_millis (15 samples, 0.02%)</title><rect x="56.3445%" y="1109" width="0.0201%" height="15" fill="rgb(245,141,16)" fg:x="42015" fg:w="15"/><text x="56.5945%" y="1119.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_occupied_slot (36 samples, 0.05%)</title><rect x="56.4773%" y="1077" width="0.0483%" height="15" fill="rgb(229,55,45)" fg:x="42114" fg:w="36"/><text x="56.7273%" y="1087.50"></text></g><g><title>tokio::runtime::time::wheel::level::slot_range (8 samples, 0.01%)</title><rect x="56.5149%" y="1061" width="0.0107%" height="15" fill="rgb(208,92,15)" fg:x="42142" fg:w="8"/><text x="56.7649%" y="1071.50"></text></g><g><title>core::num::&lt;impl usize&gt;::pow (8 samples, 0.01%)</title><rect x="56.5149%" y="1045" width="0.0107%" height="15" fill="rgb(234,185,47)" fg:x="42142" fg:w="8"/><text x="56.7649%" y="1055.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (108 samples, 0.14%)</title><rect x="56.3901%" y="1093" width="0.1448%" height="15" fill="rgb(253,104,50)" fg:x="42049" fg:w="108"/><text x="56.6401%" y="1103.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_driver (3,393 samples, 4.55%)</title><rect x="51.9874%" y="1157" width="4.5502%" height="15" fill="rgb(205,70,7)" fg:x="38766" fg:w="3393"/><text x="52.2374%" y="1167.50">tokio..</text></g><g><title>tokio::runtime::time::Driver::park_internal (3,164 samples, 4.24%)</title><rect x="52.2945%" y="1141" width="4.2431%" height="15" fill="rgb(240,178,43)" fg:x="38995" fg:w="3164"/><text x="52.5445%" y="1151.50">tokio..</text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration_time (129 samples, 0.17%)</title><rect x="56.3647%" y="1125" width="0.1730%" height="15" fill="rgb(214,112,2)" fg:x="42030" fg:w="129"/><text x="56.6147%" y="1135.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (129 samples, 0.17%)</title><rect x="56.3647%" y="1109" width="0.1730%" height="15" fill="rgb(206,46,17)" fg:x="42030" fg:w="129"/><text x="56.6147%" y="1119.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (5,382 samples, 7.22%)</title><rect x="49.5749%" y="1189" width="7.2176%" height="15" fill="rgb(225,220,16)" fg:x="36967" fg:w="5382"/><text x="49.8249%" y="1199.50">tokio::run..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (5,381 samples, 7.22%)</title><rect x="49.5762%" y="1173" width="7.2162%" height="15" fill="rgb(238,65,40)" fg:x="36968" fg:w="5381"/><text x="49.8262%" y="1183.50">tokio::run..</text></g><g><title>tokio::util::try_lock::TryLock&lt;T&gt;::try_lock (190 samples, 0.25%)</title><rect x="56.5377%" y="1157" width="0.2548%" height="15" fill="rgb(230,151,21)" fg:x="42159" fg:w="190"/><text x="56.7877%" y="1167.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (190 samples, 0.25%)</title><rect x="56.5377%" y="1141" width="0.2548%" height="15" fill="rgb(218,58,49)" fg:x="42159" fg:w="190"/><text x="56.7877%" y="1151.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (190 samples, 0.25%)</title><rect x="56.5377%" y="1125" width="0.2548%" height="15" fill="rgb(219,179,14)" fg:x="42159" fg:w="190"/><text x="56.7877%" y="1135.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::is_stealable (42 samples, 0.06%)</title><rect x="56.7925%" y="1189" width="0.0563%" height="15" fill="rgb(223,72,1)" fg:x="42349" fg:w="42"/><text x="57.0425%" y="1199.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Inner&lt;T&gt;::is_empty (41 samples, 0.05%)</title><rect x="56.7938%" y="1173" width="0.0550%" height="15" fill="rgb(238,126,10)" fg:x="42350" fg:w="41"/><text x="57.0438%" y="1183.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Inner&lt;T&gt;::len (41 samples, 0.05%)</title><rect x="56.7938%" y="1157" width="0.0550%" height="15" fill="rgb(224,206,38)" fg:x="42350" fg:w="41"/><text x="57.0438%" y="1167.50"></text></g><g><title>core::sync::atomic::AtomicU64::load (39 samples, 0.05%)</title><rect x="56.7965%" y="1141" width="0.0523%" height="15" fill="rgb(212,201,54)" fg:x="42352" fg:w="39"/><text x="57.0465%" y="1151.50"></text></g><g><title>core::sync::atomic::atomic_load (39 samples, 0.05%)</title><rect x="56.7965%" y="1125" width="0.0523%" height="15" fill="rgb(218,154,48)" fg:x="42352" fg:w="39"/><text x="57.0465%" y="1135.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (60 samples, 0.08%)</title><rect x="56.8488%" y="1125" width="0.0805%" height="15" fill="rgb(232,93,24)" fg:x="42391" fg:w="60"/><text x="57.0988%" y="1135.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (60 samples, 0.08%)</title><rect x="56.8488%" y="1109" width="0.0805%" height="15" fill="rgb(245,30,21)" fg:x="42391" fg:w="60"/><text x="57.0988%" y="1119.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (58 samples, 0.08%)</title><rect x="56.8515%" y="1093" width="0.0778%" height="15" fill="rgb(242,148,29)" fg:x="42393" fg:w="58"/><text x="57.1015%" y="1103.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (58 samples, 0.08%)</title><rect x="56.8515%" y="1077" width="0.0778%" height="15" fill="rgb(244,153,54)" fg:x="42393" fg:w="58"/><text x="57.1015%" y="1087.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (41 samples, 0.05%)</title><rect x="56.9373%" y="1109" width="0.0550%" height="15" fill="rgb(252,87,22)" fg:x="42457" fg:w="41"/><text x="57.1873%" y="1119.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::wake_deferred_tasks::{{closure}} (41 samples, 0.05%)</title><rect x="56.9373%" y="1093" width="0.0550%" height="15" fill="rgb(210,51,29)" fg:x="42457" fg:w="41"/><text x="57.1873%" y="1103.50"></text></g><g><title>tokio::runtime::defer::Defer::wake (40 samples, 0.05%)</title><rect x="56.9386%" y="1077" width="0.0536%" height="15" fill="rgb(242,136,47)" fg:x="42458" fg:w="40"/><text x="57.1886%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;core::task::wake::Waker&gt;&gt; (30 samples, 0.04%)</title><rect x="56.9520%" y="1061" width="0.0402%" height="15" fill="rgb(238,68,4)" fg:x="42468" fg:w="30"/><text x="57.2020%" y="1071.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.04%)</title><rect x="56.9520%" y="1045" width="0.0402%" height="15" fill="rgb(242,161,30)" fg:x="42468" fg:w="30"/><text x="57.2020%" y="1055.50"></text></g><g><title>core::mem::replace (9 samples, 0.01%)</title><rect x="56.9802%" y="1029" width="0.0121%" height="15" fill="rgb(218,58,44)" fg:x="42489" fg:w="9"/><text x="57.2302%" y="1039.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (5,787 samples, 7.76%)</title><rect x="49.2463%" y="1205" width="7.7607%" height="15" fill="rgb(252,125,32)" fg:x="36722" fg:w="5787"/><text x="49.4963%" y="1215.50">tokio::runt..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::wake_deferred_tasks (118 samples, 0.16%)</title><rect x="56.8488%" y="1189" width="0.1582%" height="15" fill="rgb(219,178,0)" fg:x="42391" fg:w="118"/><text x="57.0988%" y="1199.50"></text></g><g><title>tokio::runtime::context::with_defer (118 samples, 0.16%)</title><rect x="56.8488%" y="1173" width="0.1582%" height="15" fill="rgb(213,152,7)" fg:x="42391" fg:w="118"/><text x="57.0988%" y="1183.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (118 samples, 0.16%)</title><rect x="56.8488%" y="1157" width="0.1582%" height="15" fill="rgb(249,109,34)" fg:x="42391" fg:w="118"/><text x="57.0988%" y="1167.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (118 samples, 0.16%)</title><rect x="56.8488%" y="1141" width="0.1582%" height="15" fill="rgb(232,96,21)" fg:x="42391" fg:w="118"/><text x="57.0988%" y="1151.50"></text></g><g><title>tokio::runtime::context::with_defer::{{closure}} (58 samples, 0.08%)</title><rect x="56.9292%" y="1125" width="0.0778%" height="15" fill="rgb(228,27,39)" fg:x="42451" fg:w="58"/><text x="57.1792%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;core::option::Option&lt;tokio::runtime::defer::Defer&gt;&gt;&gt; (11 samples, 0.01%)</title><rect x="56.9923%" y="1109" width="0.0148%" height="15" fill="rgb(211,182,52)" fg:x="42498" fg:w="11"/><text x="57.2423%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (11 samples, 0.01%)</title><rect x="56.9923%" y="1093" width="0.0148%" height="15" fill="rgb(234,178,38)" fg:x="42498" fg:w="11"/><text x="57.2423%" y="1103.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (11 samples, 0.01%)</title><rect x="56.9923%" y="1077" width="0.0148%" height="15" fill="rgb(221,111,3)" fg:x="42498" fg:w="11"/><text x="57.2423%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::task::inject::Pointers&gt;&gt; (62 samples, 0.08%)</title><rect x="57.3316%" y="1173" width="0.0831%" height="15" fill="rgb(228,175,21)" fg:x="42751" fg:w="62"/><text x="57.5816%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::task::inject::Pointers&gt;&gt; (62 samples, 0.08%)</title><rect x="57.3316%" y="1157" width="0.0831%" height="15" fill="rgb(228,174,43)" fg:x="42751" fg:w="62"/><text x="57.5816%" y="1167.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (62 samples, 0.08%)</title><rect x="57.3316%" y="1141" width="0.0831%" height="15" fill="rgb(211,191,0)" fg:x="42751" fg:w="62"/><text x="57.5816%" y="1151.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (62 samples, 0.08%)</title><rect x="57.3316%" y="1125" width="0.0831%" height="15" fill="rgb(253,117,3)" fg:x="42751" fg:w="62"/><text x="57.5816%" y="1135.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (61 samples, 0.08%)</title><rect x="57.3329%" y="1109" width="0.0818%" height="15" fill="rgb(241,127,19)" fg:x="42752" fg:w="61"/><text x="57.5829%" y="1119.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (61 samples, 0.08%)</title><rect x="57.3329%" y="1093" width="0.0818%" height="15" fill="rgb(218,103,12)" fg:x="42752" fg:w="61"/><text x="57.5829%" y="1103.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (243 samples, 0.33%)</title><rect x="57.4201%" y="1125" width="0.3259%" height="15" fill="rgb(236,214,43)" fg:x="42817" fg:w="243"/><text x="57.6701%" y="1135.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (243 samples, 0.33%)</title><rect x="57.4201%" y="1109" width="0.3259%" height="15" fill="rgb(244,144,19)" fg:x="42817" fg:w="243"/><text x="57.6701%" y="1119.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::maintenance (552 samples, 0.74%)</title><rect x="57.0070%" y="1205" width="0.7403%" height="15" fill="rgb(246,188,10)" fg:x="42509" fg:w="552"/><text x="57.2570%" y="1215.50"></text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::is_closed (354 samples, 0.47%)</title><rect x="57.2726%" y="1189" width="0.4747%" height="15" fill="rgb(212,193,33)" fg:x="42707" fg:w="354"/><text x="57.5226%" y="1199.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (248 samples, 0.33%)</title><rect x="57.4147%" y="1173" width="0.3326%" height="15" fill="rgb(241,51,29)" fg:x="42813" fg:w="248"/><text x="57.6647%" y="1183.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (248 samples, 0.33%)</title><rect x="57.4147%" y="1157" width="0.3326%" height="15" fill="rgb(211,58,19)" fg:x="42813" fg:w="248"/><text x="57.6647%" y="1167.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (248 samples, 0.33%)</title><rect x="57.4147%" y="1141" width="0.3326%" height="15" fill="rgb(229,111,26)" fg:x="42813" fg:w="248"/><text x="57.6647%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt; (15 samples, 0.02%)</title><rect x="57.7848%" y="1173" width="0.0201%" height="15" fill="rgb(213,115,40)" fg:x="43089" fg:w="15"/><text x="58.0348%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,alloc::vec::Vec&lt;usize&gt;&gt;&gt; (15 samples, 0.02%)</title><rect x="57.7848%" y="1157" width="0.0201%" height="15" fill="rgb(209,56,44)" fg:x="43089" fg:w="15"/><text x="58.0348%" y="1167.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.02%)</title><rect x="57.7848%" y="1141" width="0.0201%" height="15" fill="rgb(230,108,32)" fg:x="43089" fg:w="15"/><text x="58.0348%" y="1151.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (15 samples, 0.02%)</title><rect x="57.7848%" y="1125" width="0.0201%" height="15" fill="rgb(216,165,31)" fg:x="43089" fg:w="15"/><text x="58.0348%" y="1135.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (15 samples, 0.02%)</title><rect x="57.7848%" y="1109" width="0.0201%" height="15" fill="rgb(218,122,21)" fg:x="43089" fg:w="15"/><text x="58.0348%" y="1119.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (15 samples, 0.02%)</title><rect x="57.7848%" y="1093" width="0.0201%" height="15" fill="rgb(223,224,47)" fg:x="43089" fg:w="15"/><text x="58.0348%" y="1103.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (210 samples, 0.28%)</title><rect x="57.8050%" y="1173" width="0.2816%" height="15" fill="rgb(238,102,44)" fg:x="43104" fg:w="210"/><text x="58.0550%" y="1183.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (210 samples, 0.28%)</title><rect x="57.8050%" y="1157" width="0.2816%" height="15" fill="rgb(236,46,40)" fg:x="43104" fg:w="210"/><text x="58.0550%" y="1167.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (210 samples, 0.28%)</title><rect x="57.8050%" y="1141" width="0.2816%" height="15" fill="rgb(247,202,50)" fg:x="43104" fg:w="210"/><text x="58.0550%" y="1151.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 0.06%)</title><rect x="58.0235%" y="1125" width="0.0630%" height="15" fill="rgb(209,99,20)" fg:x="43267" fg:w="47"/><text x="58.2735%" y="1135.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::is_parked (317 samples, 0.43%)</title><rect x="57.7674%" y="1189" width="0.4251%" height="15" fill="rgb(252,27,34)" fg:x="43076" fg:w="317"/><text x="58.0174%" y="1199.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (79 samples, 0.11%)</title><rect x="58.0866%" y="1173" width="0.1059%" height="15" fill="rgb(215,206,23)" fg:x="43314" fg:w="79"/><text x="58.3366%" y="1183.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (79 samples, 0.11%)</title><rect x="58.0866%" y="1157" width="0.1059%" height="15" fill="rgb(212,135,36)" fg:x="43314" fg:w="79"/><text x="58.3366%" y="1167.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (79 samples, 0.11%)</title><rect x="58.0866%" y="1141" width="0.1059%" height="15" fill="rgb(240,189,1)" fg:x="43314" fg:w="79"/><text x="58.3366%" y="1151.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (79 samples, 0.11%)</title><rect x="58.0866%" y="1125" width="0.1059%" height="15" fill="rgb(242,56,20)" fg:x="43314" fg:w="79"/><text x="58.3366%" y="1135.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (79 samples, 0.11%)</title><rect x="58.0866%" y="1109" width="0.1059%" height="15" fill="rgb(247,132,33)" fg:x="43314" fg:w="79"/><text x="58.3366%" y="1119.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (23 samples, 0.03%)</title><rect x="58.2609%" y="1173" width="0.0308%" height="15" fill="rgb(208,149,11)" fg:x="43444" fg:w="23"/><text x="58.5109%" y="1183.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (23 samples, 0.03%)</title><rect x="58.2609%" y="1157" width="0.0308%" height="15" fill="rgb(211,33,11)" fg:x="43444" fg:w="23"/><text x="58.5109%" y="1167.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (23 samples, 0.03%)</title><rect x="58.2609%" y="1141" width="0.0308%" height="15" fill="rgb(221,29,38)" fg:x="43444" fg:w="23"/><text x="58.5109%" y="1151.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (25 samples, 0.03%)</title><rect x="58.2985%" y="1173" width="0.0335%" height="15" fill="rgb(206,182,49)" fg:x="43472" fg:w="25"/><text x="58.5485%" y="1183.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (25 samples, 0.03%)</title><rect x="58.2985%" y="1157" width="0.0335%" height="15" fill="rgb(216,140,1)" fg:x="43472" fg:w="25"/><text x="58.5485%" y="1167.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (25 samples, 0.03%)</title><rect x="58.2985%" y="1141" width="0.0335%" height="15" fill="rgb(232,57,40)" fg:x="43472" fg:w="25"/><text x="58.5485%" y="1151.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (25 samples, 0.03%)</title><rect x="58.2985%" y="1125" width="0.0335%" height="15" fill="rgb(224,186,18)" fg:x="43472" fg:w="25"/><text x="58.5485%" y="1135.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (25 samples, 0.03%)</title><rect x="58.2985%" y="1109" width="0.0335%" height="15" fill="rgb(215,121,11)" fg:x="43472" fg:w="25"/><text x="58.5485%" y="1119.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_from_parked (445 samples, 0.60%)</title><rect x="57.7473%" y="1205" width="0.5968%" height="15" fill="rgb(245,147,10)" fg:x="43061" fg:w="445"/><text x="57.9973%" y="1215.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::unpark_worker_by_id (113 samples, 0.15%)</title><rect x="58.1925%" y="1189" width="0.1515%" height="15" fill="rgb(238,153,13)" fg:x="43393" fg:w="113"/><text x="58.4425%" y="1199.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::State::unpark_one (9 samples, 0.01%)</title><rect x="58.3320%" y="1173" width="0.0121%" height="15" fill="rgb(233,108,0)" fg:x="43497" fg:w="9"/><text x="58.5820%" y="1183.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (9 samples, 0.01%)</title><rect x="58.3320%" y="1157" width="0.0121%" height="15" fill="rgb(212,157,17)" fg:x="43497" fg:w="9"/><text x="58.5820%" y="1167.50"></text></g><g><title>core::sync::atomic::atomic_add (9 samples, 0.01%)</title><rect x="58.3320%" y="1141" width="0.0121%" height="15" fill="rgb(225,213,38)" fg:x="43497" fg:w="9"/><text x="58.5820%" y="1151.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (11 samples, 0.01%)</title><rect x="58.3467%" y="1189" width="0.0148%" height="15" fill="rgb(248,16,11)" fg:x="43508" fg:w="11"/><text x="58.5967%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt; (194 samples, 0.26%)</title><rect x="58.3776%" y="1173" width="0.2602%" height="15" fill="rgb(241,33,4)" fg:x="43531" fg:w="194"/><text x="58.6276%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,alloc::vec::Vec&lt;usize&gt;&gt;&gt; (194 samples, 0.26%)</title><rect x="58.3776%" y="1157" width="0.2602%" height="15" fill="rgb(222,26,43)" fg:x="43531" fg:w="194"/><text x="58.6276%" y="1167.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (194 samples, 0.26%)</title><rect x="58.3776%" y="1141" width="0.2602%" height="15" fill="rgb(243,29,36)" fg:x="43531" fg:w="194"/><text x="58.6276%" y="1151.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (194 samples, 0.26%)</title><rect x="58.3776%" y="1125" width="0.2602%" height="15" fill="rgb(241,9,27)" fg:x="43531" fg:w="194"/><text x="58.6276%" y="1135.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (193 samples, 0.26%)</title><rect x="58.3789%" y="1109" width="0.2588%" height="15" fill="rgb(205,117,26)" fg:x="43532" fg:w="193"/><text x="58.6289%" y="1119.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (193 samples, 0.26%)</title><rect x="58.3789%" y="1093" width="0.2588%" height="15" fill="rgb(209,80,39)" fg:x="43532" fg:w="193"/><text x="58.6289%" y="1103.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (55 samples, 0.07%)</title><rect x="58.6378%" y="1125" width="0.0738%" height="15" fill="rgb(239,155,6)" fg:x="43725" fg:w="55"/><text x="58.8878%" y="1135.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (55 samples, 0.07%)</title><rect x="58.6378%" y="1109" width="0.0738%" height="15" fill="rgb(212,104,12)" fg:x="43725" fg:w="55"/><text x="58.8878%" y="1119.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (59 samples, 0.08%)</title><rect x="58.6378%" y="1173" width="0.0791%" height="15" fill="rgb(234,204,3)" fg:x="43725" fg:w="59"/><text x="58.8878%" y="1183.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (59 samples, 0.08%)</title><rect x="58.6378%" y="1157" width="0.0791%" height="15" fill="rgb(251,218,7)" fg:x="43725" fg:w="59"/><text x="58.8878%" y="1167.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (59 samples, 0.08%)</title><rect x="58.6378%" y="1141" width="0.0791%" height="15" fill="rgb(221,81,32)" fg:x="43725" fg:w="59"/><text x="58.8878%" y="1151.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (298 samples, 0.40%)</title><rect x="58.3615%" y="1189" width="0.3996%" height="15" fill="rgb(214,152,26)" fg:x="43519" fg:w="298"/><text x="58.6115%" y="1199.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::State::dec_num_unparked (33 samples, 0.04%)</title><rect x="58.7169%" y="1173" width="0.0443%" height="15" fill="rgb(223,22,3)" fg:x="43784" fg:w="33"/><text x="58.9669%" y="1183.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (31 samples, 0.04%)</title><rect x="58.7196%" y="1157" width="0.0416%" height="15" fill="rgb(207,174,7)" fg:x="43786" fg:w="31"/><text x="58.9696%" y="1167.50"></text></g><g><title>core::sync::atomic::atomic_sub (31 samples, 0.04%)</title><rect x="58.7196%" y="1141" width="0.0416%" height="15" fill="rgb(224,19,52)" fg:x="43786" fg:w="31"/><text x="58.9696%" y="1151.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.02%)</title><rect x="58.7933%" y="1173" width="0.0188%" height="15" fill="rgb(228,24,14)" fg:x="43841" fg:w="14"/><text x="59.0433%" y="1183.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::is_empty (18 samples, 0.02%)</title><rect x="58.8134%" y="1173" width="0.0241%" height="15" fill="rgb(230,153,43)" fg:x="43856" fg:w="18"/><text x="59.0634%" y="1183.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Inner&lt;T&gt;::is_empty (13 samples, 0.02%)</title><rect x="58.8201%" y="1157" width="0.0174%" height="15" fill="rgb(231,106,12)" fg:x="43861" fg:w="13"/><text x="59.0701%" y="1167.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Inner&lt;T&gt;::len (13 samples, 0.02%)</title><rect x="58.8201%" y="1141" width="0.0174%" height="15" fill="rgb(215,92,2)" fg:x="43861" fg:w="13"/><text x="59.0701%" y="1151.50"></text></g><g><title>core::sync::atomic::AtomicU64::load (11 samples, 0.01%)</title><rect x="58.8228%" y="1125" width="0.0148%" height="15" fill="rgb(249,143,25)" fg:x="43863" fg:w="11"/><text x="59.0728%" y="1135.50"></text></g><g><title>core::sync::atomic::atomic_load (11 samples, 0.01%)</title><rect x="58.8228%" y="1109" width="0.0148%" height="15" fill="rgb(252,7,35)" fg:x="43863" fg:w="11"/><text x="59.0728%" y="1119.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (7,319 samples, 9.82%)</title><rect x="49.0277%" y="1221" width="9.8152%" height="15" fill="rgb(216,69,40)" fg:x="36559" fg:w="7319"/><text x="49.2777%" y="1231.50">tokio::runtime..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_to_parked (372 samples, 0.50%)</title><rect x="58.3441%" y="1205" width="0.4989%" height="15" fill="rgb(240,36,33)" fg:x="43506" fg:w="372"/><text x="58.5941%" y="1215.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_if_work_pending (56 samples, 0.08%)</title><rect x="58.7678%" y="1189" width="0.0751%" height="15" fill="rgb(231,128,14)" fg:x="43822" fg:w="56"/><text x="59.0178%" y="1199.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (25 samples, 0.03%)</title><rect x="58.9636%" y="1093" width="0.0335%" height="15" fill="rgb(245,143,14)" fg:x="43968" fg:w="25"/><text x="59.2136%" y="1103.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (25 samples, 0.03%)</title><rect x="58.9636%" y="1077" width="0.0335%" height="15" fill="rgb(222,130,28)" fg:x="43968" fg:w="25"/><text x="59.2136%" y="1087.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (23 samples, 0.03%)</title><rect x="58.9663%" y="1061" width="0.0308%" height="15" fill="rgb(212,10,48)" fg:x="43970" fg:w="23"/><text x="59.2163%" y="1071.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (23 samples, 0.03%)</title><rect x="58.9663%" y="1045" width="0.0308%" height="15" fill="rgb(254,118,45)" fg:x="43970" fg:w="23"/><text x="59.2163%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;tokio::runtime::coop::with_budget::ResetGuard,std::thread::local::AccessError&gt;&gt; (52 samples, 0.07%)</title><rect x="58.9368%" y="1173" width="0.0697%" height="15" fill="rgb(228,6,45)" fg:x="43948" fg:w="52"/><text x="59.1868%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::coop::with_budget::ResetGuard&gt; (32 samples, 0.04%)</title><rect x="58.9636%" y="1157" width="0.0429%" height="15" fill="rgb(241,18,35)" fg:x="43968" fg:w="32"/><text x="59.2136%" y="1167.50"></text></g><g><title>&lt;tokio::runtime::coop::with_budget::ResetGuard as core::ops::drop::Drop&gt;::drop (32 samples, 0.04%)</title><rect x="58.9636%" y="1141" width="0.0429%" height="15" fill="rgb(227,214,53)" fg:x="43968" fg:w="32"/><text x="59.2136%" y="1151.50"></text></g><g><title>tokio::runtime::context::budget (32 samples, 0.04%)</title><rect x="58.9636%" y="1125" width="0.0429%" height="15" fill="rgb(224,107,51)" fg:x="43968" fg:w="32"/><text x="59.2136%" y="1135.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (32 samples, 0.04%)</title><rect x="58.9636%" y="1109" width="0.0429%" height="15" fill="rgb(248,60,28)" fg:x="43968" fg:w="32"/><text x="59.2136%" y="1119.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (51 samples, 0.07%)</title><rect x="59.0119%" y="1109" width="0.0684%" height="15" fill="rgb(249,101,23)" fg:x="44004" fg:w="51"/><text x="59.2619%" y="1119.50"></text></g><g><title>tokio::runtime::context::budget (56 samples, 0.08%)</title><rect x="59.0065%" y="1173" width="0.0751%" height="15" fill="rgb(228,51,19)" fg:x="44000" fg:w="56"/><text x="59.2565%" y="1183.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (56 samples, 0.08%)</title><rect x="59.0065%" y="1157" width="0.0751%" height="15" fill="rgb(213,20,6)" fg:x="44000" fg:w="56"/><text x="59.2565%" y="1167.50"></text></g><g><title>tokio::runtime::context::budget::{{closure}} (52 samples, 0.07%)</title><rect x="59.0119%" y="1141" width="0.0697%" height="15" fill="rgb(212,124,10)" fg:x="44004" fg:w="52"/><text x="59.2619%" y="1151.50"></text></g><g><title>tokio::runtime::coop::with_budget::{{closure}} (52 samples, 0.07%)</title><rect x="59.0119%" y="1125" width="0.0697%" height="15" fill="rgb(248,3,40)" fg:x="44004" fg:w="52"/><text x="59.2619%" y="1135.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (62 samples, 0.08%)</title><rect x="59.1447%" y="1157" width="0.0831%" height="15" fill="rgb(223,178,23)" fg:x="44103" fg:w="62"/><text x="59.3947%" y="1167.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (62 samples, 0.08%)</title><rect x="59.1447%" y="1141" width="0.0831%" height="15" fill="rgb(240,132,45)" fg:x="44103" fg:w="62"/><text x="59.3947%" y="1151.50"></text></g><g><title>core::cell::BorrowRefMut::new (62 samples, 0.08%)</title><rect x="59.1447%" y="1125" width="0.0831%" height="15" fill="rgb(245,164,36)" fg:x="44103" fg:w="62"/><text x="59.3947%" y="1135.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (28 samples, 0.04%)</title><rect x="59.1903%" y="1109" width="0.0375%" height="15" fill="rgb(231,188,53)" fg:x="44137" fg:w="28"/><text x="59.4403%" y="1119.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (28 samples, 0.04%)</title><rect x="59.1903%" y="1093" width="0.0375%" height="15" fill="rgb(237,198,39)" fg:x="44137" fg:w="28"/><text x="59.4403%" y="1103.50"></text></g><g><title>core::mem::replace (28 samples, 0.04%)</title><rect x="59.1903%" y="1077" width="0.0375%" height="15" fill="rgb(223,120,35)" fg:x="44137" fg:w="28"/><text x="59.4403%" y="1087.50"></text></g><g><title>core::ptr::write (28 samples, 0.04%)</title><rect x="59.1903%" y="1061" width="0.0375%" height="15" fill="rgb(253,107,49)" fg:x="44137" fg:w="28"/><text x="59.4403%" y="1071.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (11 samples, 0.01%)</title><rect x="59.2278%" y="1157" width="0.0148%" height="15" fill="rgb(216,44,31)" fg:x="44165" fg:w="11"/><text x="59.4778%" y="1167.50"></text></g><g><title>core::mem::replace (11 samples, 0.01%)</title><rect x="59.2278%" y="1141" width="0.0148%" height="15" fill="rgb(253,87,21)" fg:x="44165" fg:w="11"/><text x="59.4778%" y="1151.50"></text></g><g><title>tokio::runtime::coop::has_budget_remaining (11 samples, 0.01%)</title><rect x="59.2493%" y="1157" width="0.0148%" height="15" fill="rgb(226,18,2)" fg:x="44181" fg:w="11"/><text x="59.4993%" y="1167.50"></text></g><g><title>tokio::runtime::context::budget (11 samples, 0.01%)</title><rect x="59.2493%" y="1141" width="0.0148%" height="15" fill="rgb(216,8,46)" fg:x="44181" fg:w="11"/><text x="59.4993%" y="1151.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (11 samples, 0.01%)</title><rect x="59.2493%" y="1125" width="0.0148%" height="15" fill="rgb(226,140,39)" fg:x="44181" fg:w="11"/><text x="59.4993%" y="1135.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.01%)</title><rect x="59.2640%" y="1093" width="0.0107%" height="15" fill="rgb(221,194,54)" fg:x="44192" fg:w="8"/><text x="59.5140%" y="1103.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.02%)</title><rect x="59.3257%" y="1045" width="0.0174%" height="15" fill="rgb(213,92,11)" fg:x="44238" fg:w="13"/><text x="59.5757%" y="1055.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (13 samples, 0.02%)</title><rect x="59.3257%" y="1029" width="0.0174%" height="15" fill="rgb(229,162,46)" fg:x="44238" fg:w="13"/><text x="59.5757%" y="1039.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (13 samples, 0.02%)</title><rect x="59.3257%" y="1013" width="0.0174%" height="15" fill="rgb(214,111,36)" fg:x="44238" fg:w="13"/><text x="59.5757%" y="1023.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (63 samples, 0.08%)</title><rect x="59.3794%" y="1013" width="0.0845%" height="15" fill="rgb(207,6,21)" fg:x="44278" fg:w="63"/><text x="59.6294%" y="1023.50"></text></g><g><title>syscall (54 samples, 0.07%)</title><rect x="59.3914%" y="997" width="0.0724%" height="15" fill="rgb(213,127,38)" fg:x="44287" fg:w="54"/><text x="59.6414%" y="1007.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (8 samples, 0.01%)</title><rect x="59.4638%" y="1013" width="0.0107%" height="15" fill="rgb(238,118,32)" fg:x="44341" fg:w="8"/><text x="59.7138%" y="1023.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (8 samples, 0.01%)</title><rect x="59.4638%" y="997" width="0.0107%" height="15" fill="rgb(240,139,39)" fg:x="44341" fg:w="8"/><text x="59.7138%" y="1007.50"></text></g><g><title>core::mem::replace (8 samples, 0.01%)</title><rect x="59.4638%" y="981" width="0.0107%" height="15" fill="rgb(235,10,37)" fg:x="44341" fg:w="8"/><text x="59.7138%" y="991.50"></text></g><g><title>core::ptr::write (8 samples, 0.01%)</title><rect x="59.4638%" y="965" width="0.0107%" height="15" fill="rgb(249,171,38)" fg:x="44341" fg:w="8"/><text x="59.7138%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (49 samples, 0.07%)</title><rect x="59.4773%" y="1013" width="0.0657%" height="15" fill="rgb(242,144,32)" fg:x="44351" fg:w="49"/><text x="59.7273%" y="1023.50"></text></g><g><title>core::sync::atomic::atomic_load (49 samples, 0.07%)</title><rect x="59.4773%" y="997" width="0.0657%" height="15" fill="rgb(217,117,21)" fg:x="44351" fg:w="49"/><text x="59.7273%" y="1007.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::gen_u32 (23 samples, 0.03%)</title><rect x="59.5564%" y="997" width="0.0308%" height="15" fill="rgb(249,87,1)" fg:x="44410" fg:w="23"/><text x="59.8064%" y="1007.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (63 samples, 0.08%)</title><rect x="59.5430%" y="1013" width="0.0845%" height="15" fill="rgb(248,196,48)" fg:x="44400" fg:w="63"/><text x="59.7930%" y="1023.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (30 samples, 0.04%)</title><rect x="59.5872%" y="997" width="0.0402%" height="15" fill="rgb(251,206,33)" fg:x="44433" fg:w="30"/><text x="59.8372%" y="1007.50"></text></g><g><title>clock_gettime (30 samples, 0.04%)</title><rect x="59.5872%" y="981" width="0.0402%" height="15" fill="rgb(232,141,28)" fg:x="44433" fg:w="30"/><text x="59.8372%" y="991.50"></text></g><g><title>__vdso_clock_gettime (22 samples, 0.03%)</title><rect x="59.5980%" y="965" width="0.0295%" height="15" fill="rgb(209,167,14)" fg:x="44441" fg:w="22"/><text x="59.8480%" y="975.50"></text></g><g><title>[[vdso]] (10 samples, 0.01%)</title><rect x="59.6140%" y="949" width="0.0134%" height="15" fill="rgb(225,11,50)" fg:x="44453" fg:w="10"/><text x="59.8640%" y="959.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (104 samples, 0.14%)</title><rect x="59.6275%" y="1013" width="0.1395%" height="15" fill="rgb(209,50,20)" fg:x="44463" fg:w="104"/><text x="59.8775%" y="1023.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (54 samples, 0.07%)</title><rect x="59.6945%" y="997" width="0.0724%" height="15" fill="rgb(212,17,46)" fg:x="44513" fg:w="54"/><text x="59.9445%" y="1007.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (54 samples, 0.07%)</title><rect x="59.6945%" y="981" width="0.0724%" height="15" fill="rgb(216,101,39)" fg:x="44513" fg:w="54"/><text x="59.9445%" y="991.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (54 samples, 0.07%)</title><rect x="59.6945%" y="965" width="0.0724%" height="15" fill="rgb(212,228,48)" fg:x="44513" fg:w="54"/><text x="59.9445%" y="975.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (326 samples, 0.44%)</title><rect x="59.3525%" y="1045" width="0.4372%" height="15" fill="rgb(250,6,50)" fg:x="44258" fg:w="326"/><text x="59.6025%" y="1055.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (325 samples, 0.44%)</title><rect x="59.3539%" y="1029" width="0.4358%" height="15" fill="rgb(250,160,48)" fg:x="44259" fg:w="325"/><text x="59.6039%" y="1039.50"></text></g><g><title>parking_lot_core::parking_lot::unlock_bucket_pair (17 samples, 0.02%)</title><rect x="59.7669%" y="1013" width="0.0228%" height="15" fill="rgb(244,216,33)" fg:x="44567" fg:w="17"/><text x="60.0169%" y="1023.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (17 samples, 0.02%)</title><rect x="59.7669%" y="997" width="0.0228%" height="15" fill="rgb(207,157,5)" fg:x="44567" fg:w="17"/><text x="60.0169%" y="1007.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (17 samples, 0.02%)</title><rect x="59.7669%" y="981" width="0.0228%" height="15" fill="rgb(228,199,8)" fg:x="44567" fg:w="17"/><text x="60.0169%" y="991.50"></text></g><g><title>core::sync::atomic::atomic_sub (17 samples, 0.02%)</title><rect x="59.7669%" y="965" width="0.0228%" height="15" fill="rgb(227,80,20)" fg:x="44567" fg:w="17"/><text x="60.0169%" y="975.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (46 samples, 0.06%)</title><rect x="59.7951%" y="981" width="0.0617%" height="15" fill="rgb(222,9,33)" fg:x="44588" fg:w="46"/><text x="60.0451%" y="991.50"></text></g><g><title>std::sys::unix::fs::File::write (44 samples, 0.06%)</title><rect x="59.7978%" y="965" width="0.0590%" height="15" fill="rgb(239,44,28)" fg:x="44590" fg:w="44"/><text x="60.0478%" y="975.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (44 samples, 0.06%)</title><rect x="59.7978%" y="949" width="0.0590%" height="15" fill="rgb(249,187,43)" fg:x="44590" fg:w="44"/><text x="60.0478%" y="959.50"></text></g><g><title>write (43 samples, 0.06%)</title><rect x="59.7991%" y="933" width="0.0577%" height="15" fill="rgb(216,141,28)" fg:x="44591" fg:w="43"/><text x="60.0491%" y="943.50"></text></g><g><title>[libc.so.6] (13 samples, 0.02%)</title><rect x="59.8393%" y="917" width="0.0174%" height="15" fill="rgb(230,154,53)" fg:x="44621" fg:w="13"/><text x="60.0893%" y="927.50"></text></g><g><title>mio::sys::unix::waker::eventfd::Waker::wake (49 samples, 0.07%)</title><rect x="59.7924%" y="997" width="0.0657%" height="15" fill="rgb(227,82,4)" fg:x="44586" fg:w="49"/><text x="60.0424%" y="1007.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (52 samples, 0.07%)</title><rect x="59.7897%" y="1045" width="0.0697%" height="15" fill="rgb(220,107,16)" fg:x="44584" fg:w="52"/><text x="60.0397%" y="1055.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (52 samples, 0.07%)</title><rect x="59.7897%" y="1029" width="0.0697%" height="15" fill="rgb(207,187,2)" fg:x="44584" fg:w="52"/><text x="60.0397%" y="1039.50"></text></g><g><title>tokio::runtime::io::Handle::unpark (50 samples, 0.07%)</title><rect x="59.7924%" y="1013" width="0.0671%" height="15" fill="rgb(210,162,52)" fg:x="44586" fg:w="50"/><text x="60.0424%" y="1023.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (23 samples, 0.03%)</title><rect x="59.8595%" y="1029" width="0.0308%" height="15" fill="rgb(217,216,49)" fg:x="44636" fg:w="23"/><text x="60.1095%" y="1039.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (23 samples, 0.03%)</title><rect x="59.8595%" y="1013" width="0.0308%" height="15" fill="rgb(218,146,49)" fg:x="44636" fg:w="23"/><text x="60.1095%" y="1023.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (23 samples, 0.03%)</title><rect x="59.8595%" y="997" width="0.0308%" height="15" fill="rgb(216,55,40)" fg:x="44636" fg:w="23"/><text x="60.1095%" y="1007.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (56 samples, 0.08%)</title><rect x="59.9466%" y="1013" width="0.0751%" height="15" fill="rgb(208,196,21)" fg:x="44701" fg:w="56"/><text x="60.1966%" y="1023.50"></text></g><g><title>core::sync::atomic::atomic_swap (56 samples, 0.08%)</title><rect x="59.9466%" y="997" width="0.0751%" height="15" fill="rgb(242,117,42)" fg:x="44701" fg:w="56"/><text x="60.1966%" y="1007.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::notify_one (11 samples, 0.01%)</title><rect x="60.0284%" y="997" width="0.0148%" height="15" fill="rgb(210,11,23)" fg:x="44762" fg:w="11"/><text x="60.2784%" y="1007.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one (11 samples, 0.01%)</title><rect x="60.0284%" y="981" width="0.0148%" height="15" fill="rgb(217,110,2)" fg:x="44762" fg:w="11"/><text x="60.2784%" y="991.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (157 samples, 0.21%)</title><rect x="59.8595%" y="1045" width="0.2105%" height="15" fill="rgb(229,77,54)" fg:x="44636" fg:w="157"/><text x="60.1095%" y="1055.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (134 samples, 0.18%)</title><rect x="59.8903%" y="1029" width="0.1797%" height="15" fill="rgb(218,53,16)" fg:x="44659" fg:w="134"/><text x="60.1403%" y="1039.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark_condvar (36 samples, 0.05%)</title><rect x="60.0217%" y="1013" width="0.0483%" height="15" fill="rgb(215,38,13)" fg:x="44757" fg:w="36"/><text x="60.2717%" y="1023.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (20 samples, 0.03%)</title><rect x="60.0432%" y="997" width="0.0268%" height="15" fill="rgb(235,42,18)" fg:x="44773" fg:w="20"/><text x="60.2932%" y="1007.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (20 samples, 0.03%)</title><rect x="60.0432%" y="981" width="0.0268%" height="15" fill="rgb(219,66,54)" fg:x="44773" fg:w="20"/><text x="60.2932%" y="991.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (20 samples, 0.03%)</title><rect x="60.0432%" y="965" width="0.0268%" height="15" fill="rgb(222,205,4)" fg:x="44773" fg:w="20"/><text x="60.2932%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (20 samples, 0.03%)</title><rect x="60.0432%" y="949" width="0.0268%" height="15" fill="rgb(227,213,46)" fg:x="44773" fg:w="20"/><text x="60.2932%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (20 samples, 0.03%)</title><rect x="60.0432%" y="933" width="0.0268%" height="15" fill="rgb(250,145,42)" fg:x="44773" fg:w="20"/><text x="60.2932%" y="943.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (11 samples, 0.01%)</title><rect x="60.0700%" y="1029" width="0.0148%" height="15" fill="rgb(219,15,2)" fg:x="44793" fg:w="11"/><text x="60.3200%" y="1039.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (10 samples, 0.01%)</title><rect x="60.0982%" y="1013" width="0.0134%" height="15" fill="rgb(231,181,52)" fg:x="44814" fg:w="10"/><text x="60.3482%" y="1023.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (10 samples, 0.01%)</title><rect x="60.0982%" y="997" width="0.0134%" height="15" fill="rgb(235,1,42)" fg:x="44814" fg:w="10"/><text x="60.3482%" y="1007.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (10 samples, 0.01%)</title><rect x="60.0982%" y="981" width="0.0134%" height="15" fill="rgb(249,88,27)" fg:x="44814" fg:w="10"/><text x="60.3482%" y="991.50"></text></g><g><title>core::sync::atomic::AtomicU64::load (12 samples, 0.02%)</title><rect x="60.1116%" y="1013" width="0.0161%" height="15" fill="rgb(235,145,16)" fg:x="44824" fg:w="12"/><text x="60.3616%" y="1023.50"></text></g><g><title>core::sync::atomic::atomic_load (12 samples, 0.02%)</title><rect x="60.1116%" y="997" width="0.0161%" height="15" fill="rgb(237,114,19)" fg:x="44824" fg:w="12"/><text x="60.3616%" y="1007.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::push_back (39 samples, 0.05%)</title><rect x="60.0848%" y="1029" width="0.0523%" height="15" fill="rgb(238,51,50)" fg:x="44804" fg:w="39"/><text x="60.3348%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt; (25 samples, 0.03%)</title><rect x="60.1491%" y="997" width="0.0335%" height="15" fill="rgb(205,194,25)" fg:x="44852" fg:w="25"/><text x="60.3991%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,alloc::vec::Vec&lt;usize&gt;&gt;&gt; (25 samples, 0.03%)</title><rect x="60.1491%" y="981" width="0.0335%" height="15" fill="rgb(215,203,17)" fg:x="44852" fg:w="25"/><text x="60.3991%" y="991.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.03%)</title><rect x="60.1491%" y="965" width="0.0335%" height="15" fill="rgb(233,112,49)" fg:x="44852" fg:w="25"/><text x="60.3991%" y="975.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (25 samples, 0.03%)</title><rect x="60.1491%" y="949" width="0.0335%" height="15" fill="rgb(241,130,26)" fg:x="44852" fg:w="25"/><text x="60.3991%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (25 samples, 0.03%)</title><rect x="60.1491%" y="933" width="0.0335%" height="15" fill="rgb(252,223,19)" fg:x="44852" fg:w="25"/><text x="60.3991%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (25 samples, 0.03%)</title><rect x="60.1491%" y="917" width="0.0335%" height="15" fill="rgb(211,95,25)" fg:x="44852" fg:w="25"/><text x="60.3991%" y="927.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (31 samples, 0.04%)</title><rect x="60.1827%" y="997" width="0.0416%" height="15" fill="rgb(251,182,27)" fg:x="44877" fg:w="31"/><text x="60.4327%" y="1007.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (31 samples, 0.04%)</title><rect x="60.1827%" y="981" width="0.0416%" height="15" fill="rgb(238,24,4)" fg:x="44877" fg:w="31"/><text x="60.4327%" y="991.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (31 samples, 0.04%)</title><rect x="60.1827%" y="965" width="0.0416%" height="15" fill="rgb(224,220,25)" fg:x="44877" fg:w="31"/><text x="60.4327%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (31 samples, 0.04%)</title><rect x="60.1827%" y="949" width="0.0416%" height="15" fill="rgb(239,133,26)" fg:x="44877" fg:w="31"/><text x="60.4327%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (31 samples, 0.04%)</title><rect x="60.1827%" y="933" width="0.0416%" height="15" fill="rgb(211,94,48)" fg:x="44877" fg:w="31"/><text x="60.4327%" y="943.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::notify_should_wakeup (117 samples, 0.16%)</title><rect x="60.2242%" y="997" width="0.1569%" height="15" fill="rgb(239,87,6)" fg:x="44908" fg:w="117"/><text x="60.4742%" y="1007.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (117 samples, 0.16%)</title><rect x="60.2242%" y="981" width="0.1569%" height="15" fill="rgb(227,62,0)" fg:x="44908" fg:w="117"/><text x="60.4742%" y="991.50"></text></g><g><title>core::sync::atomic::atomic_add (117 samples, 0.16%)</title><rect x="60.2242%" y="965" width="0.1569%" height="15" fill="rgb(211,226,4)" fg:x="44908" fg:w="117"/><text x="60.4742%" y="975.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::yield_now (879 samples, 1.18%)</title><rect x="59.2640%" y="1109" width="1.1788%" height="15" fill="rgb(253,38,52)" fg:x="44192" fg:w="879"/><text x="59.5140%" y="1119.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (871 samples, 1.17%)</title><rect x="59.2748%" y="1093" width="1.1681%" height="15" fill="rgb(229,126,40)" fg:x="44200" fg:w="871"/><text x="59.5248%" y="1103.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (848 samples, 1.14%)</title><rect x="59.3056%" y="1077" width="1.1372%" height="15" fill="rgb(229,165,44)" fg:x="44223" fg:w="848"/><text x="59.5556%" y="1087.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::{{closure}} (834 samples, 1.12%)</title><rect x="59.3244%" y="1061" width="1.1184%" height="15" fill="rgb(247,95,47)" fg:x="44237" fg:w="834"/><text x="59.5744%" y="1071.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (278 samples, 0.37%)</title><rect x="60.0700%" y="1045" width="0.3728%" height="15" fill="rgb(216,140,30)" fg:x="44793" fg:w="278"/><text x="60.3200%" y="1055.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked (228 samples, 0.31%)</title><rect x="60.1371%" y="1029" width="0.3058%" height="15" fill="rgb(246,214,8)" fg:x="44843" fg:w="228"/><text x="60.3871%" y="1039.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (220 samples, 0.30%)</title><rect x="60.1478%" y="1013" width="0.2950%" height="15" fill="rgb(227,224,15)" fg:x="44851" fg:w="220"/><text x="60.3978%" y="1023.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::State::unpark_one (46 samples, 0.06%)</title><rect x="60.3811%" y="997" width="0.0617%" height="15" fill="rgb(233,175,4)" fg:x="45025" fg:w="46"/><text x="60.6311%" y="1007.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (46 samples, 0.06%)</title><rect x="60.3811%" y="981" width="0.0617%" height="15" fill="rgb(221,66,45)" fg:x="45025" fg:w="46"/><text x="60.6311%" y="991.50"></text></g><g><title>core::sync::atomic::atomic_add (46 samples, 0.06%)</title><rect x="60.3811%" y="965" width="0.0617%" height="15" fill="rgb(221,178,18)" fg:x="45025" fg:w="46"/><text x="60.6311%" y="975.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_reference (20 samples, 0.03%)</title><rect x="60.4428%" y="1109" width="0.0268%" height="15" fill="rgb(213,81,29)" fg:x="45071" fg:w="20"/><text x="60.6928%" y="1119.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (18 samples, 0.02%)</title><rect x="60.4455%" y="1093" width="0.0241%" height="15" fill="rgb(220,89,49)" fg:x="45073" fg:w="18"/><text x="60.6955%" y="1103.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (17 samples, 0.02%)</title><rect x="60.4468%" y="1077" width="0.0228%" height="15" fill="rgb(227,60,33)" fg:x="45074" fg:w="17"/><text x="60.6968%" y="1087.50"></text></g><g><title>core::sync::atomic::atomic_sub (17 samples, 0.02%)</title><rect x="60.4468%" y="1061" width="0.0228%" height="15" fill="rgb(205,113,12)" fg:x="45074" fg:w="17"/><text x="60.6968%" y="1071.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::get_new_task (17 samples, 0.02%)</title><rect x="60.4696%" y="1109" width="0.0228%" height="15" fill="rgb(211,32,1)" fg:x="45091" fg:w="17"/><text x="60.7196%" y="1119.50"></text></g><g><title>tokio::runtime::task::Task&lt;S&gt;::from_raw (17 samples, 0.02%)</title><rect x="60.4696%" y="1093" width="0.0228%" height="15" fill="rgb(246,2,12)" fg:x="45091" fg:w="17"/><text x="60.7196%" y="1103.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::from_raw (11 samples, 0.01%)</title><rect x="60.4777%" y="1077" width="0.0148%" height="15" fill="rgb(243,37,27)" fg:x="45097" fg:w="11"/><text x="60.7277%" y="1087.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (26 samples, 0.03%)</title><rect x="61.3373%" y="725" width="0.0349%" height="15" fill="rgb(248,211,31)" fg:x="45738" fg:w="26"/><text x="61.5873%" y="735.50"></text></g><g><title>&lt;remoc::chmux::receiver::DataBuf as bytes::buf::buf_impl::Buf&gt;::advance (14 samples, 0.02%)</title><rect x="61.4057%" y="533" width="0.0188%" height="15" fill="rgb(242,146,47)" fg:x="45789" fg:w="14"/><text x="61.6557%" y="543.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::copy_to_slice (60 samples, 0.08%)</title><rect x="61.3842%" y="565" width="0.0805%" height="15" fill="rgb(206,70,20)" fg:x="45773" fg:w="60"/><text x="61.6342%" y="575.50"></text></g><g><title>bytes::buf::buf_impl::Buf::copy_to_slice (60 samples, 0.08%)</title><rect x="61.3842%" y="549" width="0.0805%" height="15" fill="rgb(215,10,51)" fg:x="45773" fg:w="60"/><text x="61.6342%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (29 samples, 0.04%)</title><rect x="61.4258%" y="533" width="0.0389%" height="15" fill="rgb(243,178,53)" fg:x="45804" fg:w="29"/><text x="61.6758%" y="543.50"></text></g><g><title>[libc.so.6] (29 samples, 0.04%)</title><rect x="61.4258%" y="517" width="0.0389%" height="15" fill="rgb(233,221,20)" fg:x="45804" fg:w="29"/><text x="61.6758%" y="527.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (68 samples, 0.09%)</title><rect x="61.3842%" y="581" width="0.0912%" height="15" fill="rgb(218,95,35)" fg:x="45773" fg:w="68"/><text x="61.6342%" y="591.50"></text></g><g><title>bincode::config::int::VarintEncoding::deserialize_varint (77 samples, 0.10%)</title><rect x="61.3735%" y="677" width="0.1033%" height="15" fill="rgb(229,13,5)" fg:x="45765" fg:w="77"/><text x="61.6235%" y="687.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_byte (74 samples, 0.10%)</title><rect x="61.3775%" y="661" width="0.0992%" height="15" fill="rgb(252,164,30)" fg:x="45768" fg:w="74"/><text x="61.6275%" y="671.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u8 (74 samples, 0.10%)</title><rect x="61.3775%" y="645" width="0.0992%" height="15" fill="rgb(232,68,36)" fg:x="45768" fg:w="74"/><text x="61.6275%" y="655.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (70 samples, 0.09%)</title><rect x="61.3829%" y="629" width="0.0939%" height="15" fill="rgb(219,59,54)" fg:x="45772" fg:w="70"/><text x="61.6329%" y="639.50"></text></g><g><title>std::io::Read::read_exact (70 samples, 0.09%)</title><rect x="61.3829%" y="613" width="0.0939%" height="15" fill="rgb(250,92,33)" fg:x="45772" fg:w="70"/><text x="61.6329%" y="623.50"></text></g><g><title>std::io::default_read_exact (70 samples, 0.09%)</title><rect x="61.3829%" y="597" width="0.0939%" height="15" fill="rgb(229,162,54)" fg:x="45772" fg:w="70"/><text x="61.6329%" y="607.50"></text></g><g><title>serde::de::EnumAccess::variant (92 samples, 0.12%)</title><rect x="61.3722%" y="725" width="0.1234%" height="15" fill="rgb(244,114,52)" fg:x="45764" fg:w="92"/><text x="61.6222%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_enum::&lt;impl serde::de::EnumAccess for &amp;mut bincode::de::Deserializer&lt;R,O&gt;&gt;::variant_seed (92 samples, 0.12%)</title><rect x="61.3722%" y="709" width="0.1234%" height="15" fill="rgb(212,211,43)" fg:x="45764" fg:w="92"/><text x="61.6222%" y="719.50"></text></g><g><title>&lt;bincode::config::int::VarintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (91 samples, 0.12%)</title><rect x="61.3735%" y="693" width="0.1220%" height="15" fill="rgb(226,147,8)" fg:x="45765" fg:w="91"/><text x="61.6235%" y="703.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (14 samples, 0.02%)</title><rect x="61.4768%" y="677" width="0.0188%" height="15" fill="rgb(226,23,13)" fg:x="45842" fg:w="14"/><text x="61.7268%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (11 samples, 0.01%)</title><rect x="61.5599%" y="357" width="0.0148%" height="15" fill="rgb(240,63,4)" fg:x="45904" fg:w="11"/><text x="61.8099%" y="367.50"></text></g><g><title>__rust_alloc (8 samples, 0.01%)</title><rect x="61.5827%" y="245" width="0.0107%" height="15" fill="rgb(221,1,32)" fg:x="45921" fg:w="8"/><text x="61.8327%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (148 samples, 0.20%)</title><rect x="61.5760%" y="293" width="0.1985%" height="15" fill="rgb(242,117,10)" fg:x="45916" fg:w="148"/><text x="61.8260%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (148 samples, 0.20%)</title><rect x="61.5760%" y="277" width="0.1985%" height="15" fill="rgb(249,172,44)" fg:x="45916" fg:w="148"/><text x="61.8260%" y="287.50"></text></g><g><title>alloc::alloc::alloc (148 samples, 0.20%)</title><rect x="61.5760%" y="261" width="0.1985%" height="15" fill="rgb(244,46,45)" fg:x="45916" fg:w="148"/><text x="61.8260%" y="271.50"></text></g><g><title>malloc (135 samples, 0.18%)</title><rect x="61.5934%" y="245" width="0.1810%" height="15" fill="rgb(206,43,17)" fg:x="45929" fg:w="135"/><text x="61.8434%" y="255.50"></text></g><g><title>[libc.so.6] (38 samples, 0.05%)</title><rect x="61.7235%" y="229" width="0.0510%" height="15" fill="rgb(239,218,39)" fg:x="46026" fg:w="38"/><text x="61.9735%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (150 samples, 0.20%)</title><rect x="61.5747%" y="357" width="0.2012%" height="15" fill="rgb(208,169,54)" fg:x="45915" fg:w="150"/><text x="61.8247%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (150 samples, 0.20%)</title><rect x="61.5747%" y="341" width="0.2012%" height="15" fill="rgb(247,25,42)" fg:x="45915" fg:w="150"/><text x="61.8247%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (149 samples, 0.20%)</title><rect x="61.5760%" y="325" width="0.1998%" height="15" fill="rgb(226,23,31)" fg:x="45916" fg:w="149"/><text x="61.8260%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (149 samples, 0.20%)</title><rect x="61.5760%" y="309" width="0.1998%" height="15" fill="rgb(247,16,28)" fg:x="45916" fg:w="149"/><text x="61.8260%" y="319.50"></text></g><g><title>&lt;remoc::chmux::receiver::DataBuf as bytes::buf::buf_impl::Buf&gt;::advance (25 samples, 0.03%)</title><rect x="61.8657%" y="117" width="0.0335%" height="15" fill="rgb(231,147,38)" fg:x="46132" fg:w="25"/><text x="62.1157%" y="127.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::front_mut (10 samples, 0.01%)</title><rect x="61.8858%" y="101" width="0.0134%" height="15" fill="rgb(253,81,48)" fg:x="46147" fg:w="10"/><text x="62.1358%" y="111.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::get_mut (10 samples, 0.01%)</title><rect x="61.8858%" y="85" width="0.0134%" height="15" fill="rgb(249,222,43)" fg:x="46147" fg:w="10"/><text x="62.1358%" y="95.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (10 samples, 0.01%)</title><rect x="61.8858%" y="69" width="0.0134%" height="15" fill="rgb(221,3,27)" fg:x="46147" fg:w="10"/><text x="62.1358%" y="79.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (8 samples, 0.01%)</title><rect x="61.8885%" y="53" width="0.0107%" height="15" fill="rgb(228,180,5)" fg:x="46149" fg:w="8"/><text x="62.1385%" y="63.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (8 samples, 0.01%)</title><rect x="61.8885%" y="37" width="0.0107%" height="15" fill="rgb(227,131,42)" fg:x="46149" fg:w="8"/><text x="62.1385%" y="47.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::copy_to_slice (46 samples, 0.06%)</title><rect x="61.8550%" y="149" width="0.0617%" height="15" fill="rgb(212,3,39)" fg:x="46124" fg:w="46"/><text x="62.1050%" y="159.50"></text></g><g><title>bytes::buf::buf_impl::Buf::copy_to_slice (46 samples, 0.06%)</title><rect x="61.8550%" y="133" width="0.0617%" height="15" fill="rgb(226,45,5)" fg:x="46124" fg:w="46"/><text x="62.1050%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.01%)</title><rect x="61.9032%" y="117" width="0.0134%" height="15" fill="rgb(215,167,45)" fg:x="46160" fg:w="10"/><text x="62.1532%" y="127.50"></text></g><g><title>[libc.so.6] (10 samples, 0.01%)</title><rect x="61.9032%" y="101" width="0.0134%" height="15" fill="rgb(250,218,53)" fg:x="46160" fg:w="10"/><text x="62.1532%" y="111.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_byte (56 samples, 0.08%)</title><rect x="61.8429%" y="245" width="0.0751%" height="15" fill="rgb(207,140,0)" fg:x="46115" fg:w="56"/><text x="62.0929%" y="255.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u8 (56 samples, 0.08%)</title><rect x="61.8429%" y="229" width="0.0751%" height="15" fill="rgb(238,133,51)" fg:x="46115" fg:w="56"/><text x="62.0929%" y="239.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (51 samples, 0.07%)</title><rect x="61.8496%" y="213" width="0.0684%" height="15" fill="rgb(218,203,53)" fg:x="46120" fg:w="51"/><text x="62.0996%" y="223.50"></text></g><g><title>std::io::Read::read_exact (51 samples, 0.07%)</title><rect x="61.8496%" y="197" width="0.0684%" height="15" fill="rgb(226,184,25)" fg:x="46120" fg:w="51"/><text x="62.0996%" y="207.50"></text></g><g><title>std::io::default_read_exact (49 samples, 0.07%)</title><rect x="61.8523%" y="181" width="0.0657%" height="15" fill="rgb(231,121,21)" fg:x="46122" fg:w="49"/><text x="62.1023%" y="191.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (47 samples, 0.06%)</title><rect x="61.8550%" y="165" width="0.0630%" height="15" fill="rgb(251,14,34)" fg:x="46124" fg:w="47"/><text x="62.1050%" y="175.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u16 (12 samples, 0.02%)</title><rect x="61.9180%" y="245" width="0.0161%" height="15" fill="rgb(249,193,11)" fg:x="46171" fg:w="12"/><text x="62.1680%" y="255.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u16 (12 samples, 0.02%)</title><rect x="61.9180%" y="229" width="0.0161%" height="15" fill="rgb(220,172,37)" fg:x="46171" fg:w="12"/><text x="62.1680%" y="239.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u32 (27 samples, 0.04%)</title><rect x="61.9341%" y="245" width="0.0362%" height="15" fill="rgb(231,229,43)" fg:x="46183" fg:w="27"/><text x="62.1841%" y="255.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u32 (27 samples, 0.04%)</title><rect x="61.9341%" y="229" width="0.0362%" height="15" fill="rgb(250,161,5)" fg:x="46183" fg:w="27"/><text x="62.1841%" y="239.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (21 samples, 0.03%)</title><rect x="61.9421%" y="213" width="0.0282%" height="15" fill="rgb(218,225,18)" fg:x="46189" fg:w="21"/><text x="62.1921%" y="223.50"></text></g><g><title>std::io::Read::read_exact (21 samples, 0.03%)</title><rect x="61.9421%" y="197" width="0.0282%" height="15" fill="rgb(245,45,42)" fg:x="46189" fg:w="21"/><text x="62.1921%" y="207.50"></text></g><g><title>std::io::default_read_exact (21 samples, 0.03%)</title><rect x="61.9421%" y="181" width="0.0282%" height="15" fill="rgb(211,115,1)" fg:x="46189" fg:w="21"/><text x="62.1921%" y="191.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (20 samples, 0.03%)</title><rect x="61.9435%" y="165" width="0.0268%" height="15" fill="rgb(248,133,52)" fg:x="46190" fg:w="20"/><text x="62.1935%" y="175.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::copy_to_slice (20 samples, 0.03%)</title><rect x="61.9435%" y="149" width="0.0268%" height="15" fill="rgb(238,100,21)" fg:x="46190" fg:w="20"/><text x="62.1935%" y="159.50"></text></g><g><title>bytes::buf::buf_impl::Buf::copy_to_slice (20 samples, 0.03%)</title><rect x="61.9435%" y="133" width="0.0268%" height="15" fill="rgb(247,144,11)" fg:x="46190" fg:w="20"/><text x="62.1935%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.01%)</title><rect x="61.9582%" y="117" width="0.0121%" height="15" fill="rgb(206,164,16)" fg:x="46201" fg:w="9"/><text x="62.2082%" y="127.50"></text></g><g><title>[libc.so.6] (9 samples, 0.01%)</title><rect x="61.9582%" y="101" width="0.0121%" height="15" fill="rgb(222,34,3)" fg:x="46201" fg:w="9"/><text x="62.2082%" y="111.50"></text></g><g><title>&lt;remoc::chmux::receiver::DataBuf as bytes::buf::buf_impl::Buf&gt;::advance (16 samples, 0.02%)</title><rect x="62.0025%" y="117" width="0.0215%" height="15" fill="rgb(248,82,4)" fg:x="46234" fg:w="16"/><text x="62.2525%" y="127.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::copy_to_slice (42 samples, 0.06%)</title><rect x="61.9891%" y="149" width="0.0563%" height="15" fill="rgb(228,81,46)" fg:x="46224" fg:w="42"/><text x="62.2391%" y="159.50"></text></g><g><title>bytes::buf::buf_impl::Buf::copy_to_slice (42 samples, 0.06%)</title><rect x="61.9891%" y="133" width="0.0563%" height="15" fill="rgb(227,67,47)" fg:x="46224" fg:w="42"/><text x="62.2391%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.02%)</title><rect x="62.0266%" y="117" width="0.0188%" height="15" fill="rgb(215,93,53)" fg:x="46252" fg:w="14"/><text x="62.2766%" y="127.50"></text></g><g><title>[libc.so.6] (14 samples, 0.02%)</title><rect x="62.0266%" y="101" width="0.0188%" height="15" fill="rgb(248,194,39)" fg:x="46252" fg:w="14"/><text x="62.2766%" y="111.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (43 samples, 0.06%)</title><rect x="61.9891%" y="165" width="0.0577%" height="15" fill="rgb(215,5,19)" fg:x="46224" fg:w="43"/><text x="62.2391%" y="175.50"></text></g><g><title>&lt;bincode::config::int::VarintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u64 (202 samples, 0.27%)</title><rect x="61.7785%" y="277" width="0.2709%" height="15" fill="rgb(226,215,51)" fg:x="46067" fg:w="202"/><text x="62.0285%" y="287.50"></text></g><g><title>bincode::config::int::VarintEncoding::deserialize_varint (202 samples, 0.27%)</title><rect x="61.7785%" y="261" width="0.2709%" height="15" fill="rgb(225,56,26)" fg:x="46067" fg:w="202"/><text x="62.0285%" y="271.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_literal_u64 (59 samples, 0.08%)</title><rect x="61.9703%" y="245" width="0.0791%" height="15" fill="rgb(222,75,29)" fg:x="46210" fg:w="59"/><text x="62.2203%" y="255.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u64 (59 samples, 0.08%)</title><rect x="61.9703%" y="229" width="0.0791%" height="15" fill="rgb(236,139,6)" fg:x="46210" fg:w="59"/><text x="62.2203%" y="239.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (48 samples, 0.06%)</title><rect x="61.9850%" y="213" width="0.0644%" height="15" fill="rgb(223,137,36)" fg:x="46221" fg:w="48"/><text x="62.2350%" y="223.50"></text></g><g><title>std::io::Read::read_exact (48 samples, 0.06%)</title><rect x="61.9850%" y="197" width="0.0644%" height="15" fill="rgb(226,99,2)" fg:x="46221" fg:w="48"/><text x="62.2350%" y="207.50"></text></g><g><title>std::io::default_read_exact (48 samples, 0.06%)</title><rect x="61.9850%" y="181" width="0.0644%" height="15" fill="rgb(206,133,23)" fg:x="46221" fg:w="48"/><text x="62.2350%" y="191.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (391 samples, 0.52%)</title><rect x="61.5277%" y="389" width="0.5244%" height="15" fill="rgb(243,173,15)" fg:x="45880" fg:w="391"/><text x="61.7777%" y="399.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (391 samples, 0.52%)</title><rect x="61.5277%" y="373" width="0.5244%" height="15" fill="rgb(228,69,28)" fg:x="45880" fg:w="391"/><text x="61.7777%" y="383.50"></text></g><g><title>serde::de::SeqAccess::next_element (205 samples, 0.27%)</title><rect x="61.7772%" y="357" width="0.2749%" height="15" fill="rgb(212,51,22)" fg:x="46066" fg:w="205"/><text x="62.0272%" y="367.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (205 samples, 0.27%)</title><rect x="61.7772%" y="341" width="0.2749%" height="15" fill="rgb(227,113,0)" fg:x="46066" fg:w="205"/><text x="62.0272%" y="351.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (205 samples, 0.27%)</title><rect x="61.7772%" y="325" width="0.2749%" height="15" fill="rgb(252,84,27)" fg:x="46066" fg:w="205"/><text x="62.0272%" y="335.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for usize&gt;::deserialize (205 samples, 0.27%)</title><rect x="61.7772%" y="309" width="0.2749%" height="15" fill="rgb(223,145,39)" fg:x="46066" fg:w="205"/><text x="62.0272%" y="319.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u64 (205 samples, 0.27%)</title><rect x="61.7772%" y="293" width="0.2749%" height="15" fill="rgb(239,219,30)" fg:x="46066" fg:w="205"/><text x="62.0272%" y="303.50"></text></g><g><title>&lt;remoc::chmux::receiver::DataBuf as bytes::buf::buf_impl::Buf&gt;::advance (9 samples, 0.01%)</title><rect x="62.0802%" y="213" width="0.0121%" height="15" fill="rgb(224,196,39)" fg:x="46292" fg:w="9"/><text x="62.3302%" y="223.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::copy_to_slice (19 samples, 0.03%)</title><rect x="62.0722%" y="245" width="0.0255%" height="15" fill="rgb(205,35,43)" fg:x="46286" fg:w="19"/><text x="62.3222%" y="255.50"></text></g><g><title>bytes::buf::buf_impl::Buf::copy_to_slice (19 samples, 0.03%)</title><rect x="62.0722%" y="229" width="0.0255%" height="15" fill="rgb(228,201,21)" fg:x="46286" fg:w="19"/><text x="62.3222%" y="239.50"></text></g><g><title>&lt;bincode::config::int::VarintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u64 (37 samples, 0.05%)</title><rect x="62.0521%" y="373" width="0.0496%" height="15" fill="rgb(237,118,16)" fg:x="46271" fg:w="37"/><text x="62.3021%" y="383.50"></text></g><g><title>bincode::config::int::VarintEncoding::deserialize_varint (37 samples, 0.05%)</title><rect x="62.0521%" y="357" width="0.0496%" height="15" fill="rgb(241,17,19)" fg:x="46271" fg:w="37"/><text x="62.3021%" y="367.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_byte (29 samples, 0.04%)</title><rect x="62.0628%" y="341" width="0.0389%" height="15" fill="rgb(214,10,25)" fg:x="46279" fg:w="29"/><text x="62.3128%" y="351.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u8 (29 samples, 0.04%)</title><rect x="62.0628%" y="325" width="0.0389%" height="15" fill="rgb(238,37,29)" fg:x="46279" fg:w="29"/><text x="62.3128%" y="335.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (25 samples, 0.03%)</title><rect x="62.0682%" y="309" width="0.0335%" height="15" fill="rgb(253,83,25)" fg:x="46283" fg:w="25"/><text x="62.3182%" y="319.50"></text></g><g><title>std::io::Read::read_exact (25 samples, 0.03%)</title><rect x="62.0682%" y="293" width="0.0335%" height="15" fill="rgb(234,192,12)" fg:x="46283" fg:w="25"/><text x="62.3182%" y="303.50"></text></g><g><title>std::io::default_read_exact (23 samples, 0.03%)</title><rect x="62.0709%" y="277" width="0.0308%" height="15" fill="rgb(241,216,45)" fg:x="46285" fg:w="23"/><text x="62.3209%" y="287.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (22 samples, 0.03%)</title><rect x="62.0722%" y="261" width="0.0295%" height="15" fill="rgb(242,22,33)" fg:x="46286" fg:w="22"/><text x="62.3222%" y="271.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (453 samples, 0.61%)</title><rect x="61.5277%" y="421" width="0.6075%" height="15" fill="rgb(231,105,49)" fg:x="45880" fg:w="453"/><text x="61.7777%" y="431.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (453 samples, 0.61%)</title><rect x="61.5277%" y="405" width="0.6075%" height="15" fill="rgb(218,204,15)" fg:x="45880" fg:w="453"/><text x="61.7777%" y="415.50"></text></g><g><title>bincode::config::int::IntEncoding::deserialize_len (62 samples, 0.08%)</title><rect x="62.0521%" y="389" width="0.0831%" height="15" fill="rgb(235,138,41)" fg:x="46271" fg:w="62"/><text x="62.3021%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (25 samples, 0.03%)</title><rect x="62.1017%" y="373" width="0.0335%" height="15" fill="rgb(246,0,9)" fg:x="46308" fg:w="25"/><text x="62.3517%" y="383.50"></text></g><g><title>core::ops::function::FnOnce::call_once (9 samples, 0.01%)</title><rect x="62.1232%" y="357" width="0.0121%" height="15" fill="rgb(210,74,4)" fg:x="46324" fg:w="9"/><text x="62.3732%" y="367.50"></text></g><g><title>bincode::config::int::cast_u64_to_usize (9 samples, 0.01%)</title><rect x="62.1232%" y="341" width="0.0121%" height="15" fill="rgb(250,60,41)" fg:x="46324" fg:w="9"/><text x="62.3732%" y="351.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::copy_to_slice (10 samples, 0.01%)</title><rect x="62.1460%" y="261" width="0.0134%" height="15" fill="rgb(220,115,12)" fg:x="46341" fg:w="10"/><text x="62.3960%" y="271.50"></text></g><g><title>bytes::buf::buf_impl::Buf::copy_to_slice (10 samples, 0.01%)</title><rect x="62.1460%" y="245" width="0.0134%" height="15" fill="rgb(237,100,13)" fg:x="46341" fg:w="10"/><text x="62.3960%" y="255.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (472 samples, 0.63%)</title><rect x="61.5277%" y="437" width="0.6330%" height="15" fill="rgb(213,55,26)" fg:x="45880" fg:w="472"/><text x="61.7777%" y="447.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for usize&gt;::deserialize (19 samples, 0.03%)</title><rect x="62.1352%" y="421" width="0.0255%" height="15" fill="rgb(216,17,4)" fg:x="46333" fg:w="19"/><text x="62.3852%" y="431.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u64 (19 samples, 0.03%)</title><rect x="62.1352%" y="405" width="0.0255%" height="15" fill="rgb(220,153,47)" fg:x="46333" fg:w="19"/><text x="62.3852%" y="415.50"></text></g><g><title>&lt;bincode::config::int::VarintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u64 (18 samples, 0.02%)</title><rect x="62.1366%" y="389" width="0.0241%" height="15" fill="rgb(215,131,9)" fg:x="46334" fg:w="18"/><text x="62.3866%" y="399.50"></text></g><g><title>bincode::config::int::VarintEncoding::deserialize_varint (18 samples, 0.02%)</title><rect x="62.1366%" y="373" width="0.0241%" height="15" fill="rgb(233,46,42)" fg:x="46334" fg:w="18"/><text x="62.3866%" y="383.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_byte (16 samples, 0.02%)</title><rect x="62.1393%" y="357" width="0.0215%" height="15" fill="rgb(226,86,7)" fg:x="46336" fg:w="16"/><text x="62.3893%" y="367.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u8 (16 samples, 0.02%)</title><rect x="62.1393%" y="341" width="0.0215%" height="15" fill="rgb(239,226,21)" fg:x="46336" fg:w="16"/><text x="62.3893%" y="351.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (13 samples, 0.02%)</title><rect x="62.1433%" y="325" width="0.0174%" height="15" fill="rgb(244,137,22)" fg:x="46339" fg:w="13"/><text x="62.3933%" y="335.50"></text></g><g><title>std::io::Read::read_exact (13 samples, 0.02%)</title><rect x="62.1433%" y="309" width="0.0174%" height="15" fill="rgb(211,139,35)" fg:x="46339" fg:w="13"/><text x="62.3933%" y="319.50"></text></g><g><title>std::io::default_read_exact (13 samples, 0.02%)</title><rect x="62.1433%" y="293" width="0.0174%" height="15" fill="rgb(214,62,50)" fg:x="46339" fg:w="13"/><text x="62.3933%" y="303.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (11 samples, 0.01%)</title><rect x="62.1460%" y="277" width="0.0148%" height="15" fill="rgb(212,113,44)" fg:x="46341" fg:w="11"/><text x="62.3960%" y="287.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::VariantAccess&gt;::struct_variant (489 samples, 0.66%)</title><rect x="61.5076%" y="517" width="0.6558%" height="15" fill="rgb(226,150,43)" fg:x="45865" fg:w="489"/><text x="61.7576%" y="527.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (489 samples, 0.66%)</title><rect x="61.5076%" y="501" width="0.6558%" height="15" fill="rgb(250,71,37)" fg:x="45865" fg:w="489"/><text x="61.7576%" y="511.50"></text></g><g><title>&lt;&lt;gmw::protocols::boolean_gmw::_::&lt;impl serde::de::Deserialize for gmw::protocols::boolean_gmw::Msg&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum::__Visitor as serde::de::Visitor&gt;::visit_seq (489 samples, 0.66%)</title><rect x="61.5076%" y="485" width="0.6558%" height="15" fill="rgb(219,76,19)" fg:x="45865" fg:w="489"/><text x="61.7576%" y="495.50"></text></g><g><title>serde::de::SeqAccess::next_element (478 samples, 0.64%)</title><rect x="61.5224%" y="469" width="0.6410%" height="15" fill="rgb(250,39,11)" fg:x="45876" fg:w="478"/><text x="61.7724%" y="479.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (478 samples, 0.64%)</title><rect x="61.5224%" y="453" width="0.6410%" height="15" fill="rgb(230,64,31)" fg:x="45876" fg:w="478"/><text x="61.7724%" y="463.50"></text></g><g><title>bincode::config::int::VarintEncoding::deserialize_varint (24 samples, 0.03%)</title><rect x="62.1688%" y="469" width="0.0322%" height="15" fill="rgb(208,222,23)" fg:x="46358" fg:w="24"/><text x="62.4188%" y="479.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_byte (22 samples, 0.03%)</title><rect x="62.1714%" y="453" width="0.0295%" height="15" fill="rgb(227,125,18)" fg:x="46360" fg:w="22"/><text x="62.4214%" y="463.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u8 (22 samples, 0.03%)</title><rect x="62.1714%" y="437" width="0.0295%" height="15" fill="rgb(234,210,9)" fg:x="46360" fg:w="22"/><text x="62.4214%" y="447.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (18 samples, 0.02%)</title><rect x="62.1768%" y="421" width="0.0241%" height="15" fill="rgb(217,127,24)" fg:x="46364" fg:w="18"/><text x="62.4268%" y="431.50"></text></g><g><title>std::io::Read::read_exact (18 samples, 0.02%)</title><rect x="62.1768%" y="405" width="0.0241%" height="15" fill="rgb(239,141,48)" fg:x="46364" fg:w="18"/><text x="62.4268%" y="415.50"></text></g><g><title>std::io::default_read_exact (18 samples, 0.02%)</title><rect x="62.1768%" y="389" width="0.0241%" height="15" fill="rgb(227,109,8)" fg:x="46364" fg:w="18"/><text x="62.4268%" y="399.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (18 samples, 0.02%)</title><rect x="62.1768%" y="373" width="0.0241%" height="15" fill="rgb(235,184,23)" fg:x="46364" fg:w="18"/><text x="62.4268%" y="383.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::copy_to_slice (18 samples, 0.02%)</title><rect x="62.1768%" y="357" width="0.0241%" height="15" fill="rgb(227,226,48)" fg:x="46364" fg:w="18"/><text x="62.4268%" y="367.50"></text></g><g><title>bytes::buf::buf_impl::Buf::copy_to_slice (18 samples, 0.02%)</title><rect x="62.1768%" y="341" width="0.0241%" height="15" fill="rgb(206,150,11)" fg:x="46364" fg:w="18"/><text x="62.4268%" y="351.50"></text></g><g><title>gmw::protocols::boolean_gmw::_::&lt;impl serde::de::Deserialize for gmw::protocols::boolean_gmw::Msg&gt;::deserialize (521 samples, 0.70%)</title><rect x="61.5076%" y="565" width="0.6987%" height="15" fill="rgb(254,2,33)" fg:x="45865" fg:w="521"/><text x="61.7576%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_enum (521 samples, 0.70%)</title><rect x="61.5076%" y="549" width="0.6987%" height="15" fill="rgb(243,160,20)" fg:x="45865" fg:w="521"/><text x="61.7576%" y="559.50"></text></g><g><title>&lt;gmw::protocols::boolean_gmw::_::&lt;impl serde::de::Deserialize for gmw::protocols::boolean_gmw::Msg&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (521 samples, 0.70%)</title><rect x="61.5076%" y="533" width="0.6987%" height="15" fill="rgb(218,208,30)" fg:x="45865" fg:w="521"/><text x="61.7576%" y="543.50"></text></g><g><title>serde::de::EnumAccess::variant (32 samples, 0.04%)</title><rect x="62.1634%" y="517" width="0.0429%" height="15" fill="rgb(224,120,49)" fg:x="46354" fg:w="32"/><text x="62.4134%" y="527.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_enum::&lt;impl serde::de::EnumAccess for &amp;mut bincode::de::Deserializer&lt;R,O&gt;&gt;::variant_seed (32 samples, 0.04%)</title><rect x="62.1634%" y="501" width="0.0429%" height="15" fill="rgb(246,12,2)" fg:x="46354" fg:w="32"/><text x="62.4134%" y="511.50"></text></g><g><title>&lt;bincode::config::int::VarintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (28 samples, 0.04%)</title><rect x="62.1688%" y="485" width="0.0375%" height="15" fill="rgb(236,117,3)" fg:x="46358" fg:w="28"/><text x="62.4188%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (9 samples, 0.01%)</title><rect x="62.2076%" y="517" width="0.0121%" height="15" fill="rgb(216,128,52)" fg:x="46387" fg:w="9"/><text x="62.4576%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (14 samples, 0.02%)</title><rect x="62.2506%" y="197" width="0.0188%" height="15" fill="rgb(246,145,19)" fg:x="46419" fg:w="14"/><text x="62.5006%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.02%)</title><rect x="62.2506%" y="181" width="0.0188%" height="15" fill="rgb(222,11,46)" fg:x="46419" fg:w="14"/><text x="62.5006%" y="191.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (29 samples, 0.04%)</title><rect x="62.2318%" y="229" width="0.0389%" height="15" fill="rgb(245,82,36)" fg:x="46405" fg:w="29"/><text x="62.4818%" y="239.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (29 samples, 0.04%)</title><rect x="62.2318%" y="213" width="0.0389%" height="15" fill="rgb(250,73,51)" fg:x="46405" fg:w="29"/><text x="62.4818%" y="223.50"></text></g><g><title>&lt;remoc::chmux::receiver::DataBuf as bytes::buf::buf_impl::Buf&gt;::advance (8 samples, 0.01%)</title><rect x="62.2975%" y="53" width="0.0107%" height="15" fill="rgb(221,189,23)" fg:x="46454" fg:w="8"/><text x="62.5475%" y="63.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::copy_to_slice (16 samples, 0.02%)</title><rect x="62.2921%" y="85" width="0.0215%" height="15" fill="rgb(210,33,7)" fg:x="46450" fg:w="16"/><text x="62.5421%" y="95.50"></text></g><g><title>bytes::buf::buf_impl::Buf::copy_to_slice (16 samples, 0.02%)</title><rect x="62.2921%" y="69" width="0.0215%" height="15" fill="rgb(210,107,22)" fg:x="46450" fg:w="16"/><text x="62.5421%" y="79.50"></text></g><g><title>&lt;bincode::config::int::VarintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u64 (33 samples, 0.04%)</title><rect x="62.2720%" y="213" width="0.0443%" height="15" fill="rgb(222,116,37)" fg:x="46435" fg:w="33"/><text x="62.5220%" y="223.50"></text></g><g><title>bincode::config::int::VarintEncoding::deserialize_varint (33 samples, 0.04%)</title><rect x="62.2720%" y="197" width="0.0443%" height="15" fill="rgb(254,17,48)" fg:x="46435" fg:w="33"/><text x="62.5220%" y="207.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_byte (23 samples, 0.03%)</title><rect x="62.2854%" y="181" width="0.0308%" height="15" fill="rgb(224,36,32)" fg:x="46445" fg:w="23"/><text x="62.5354%" y="191.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u8 (23 samples, 0.03%)</title><rect x="62.2854%" y="165" width="0.0308%" height="15" fill="rgb(232,90,46)" fg:x="46445" fg:w="23"/><text x="62.5354%" y="175.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (21 samples, 0.03%)</title><rect x="62.2881%" y="149" width="0.0282%" height="15" fill="rgb(241,66,40)" fg:x="46447" fg:w="21"/><text x="62.5381%" y="159.50"></text></g><g><title>std::io::Read::read_exact (21 samples, 0.03%)</title><rect x="62.2881%" y="133" width="0.0282%" height="15" fill="rgb(249,184,29)" fg:x="46447" fg:w="21"/><text x="62.5381%" y="143.50"></text></g><g><title>std::io::default_read_exact (20 samples, 0.03%)</title><rect x="62.2895%" y="117" width="0.0268%" height="15" fill="rgb(231,181,1)" fg:x="46448" fg:w="20"/><text x="62.5395%" y="127.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (18 samples, 0.02%)</title><rect x="62.2921%" y="101" width="0.0241%" height="15" fill="rgb(224,94,2)" fg:x="46450" fg:w="18"/><text x="62.5421%" y="111.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (68 samples, 0.09%)</title><rect x="62.2318%" y="261" width="0.0912%" height="15" fill="rgb(229,170,15)" fg:x="46405" fg:w="68"/><text x="62.4818%" y="271.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (68 samples, 0.09%)</title><rect x="62.2318%" y="245" width="0.0912%" height="15" fill="rgb(240,127,35)" fg:x="46405" fg:w="68"/><text x="62.4818%" y="255.50"></text></g><g><title>bincode::config::int::IntEncoding::deserialize_len (38 samples, 0.05%)</title><rect x="62.2720%" y="229" width="0.0510%" height="15" fill="rgb(248,196,34)" fg:x="46435" fg:w="38"/><text x="62.5220%" y="239.50"></text></g><g><title>&lt;bincode::config::int::VarintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u64 (14 samples, 0.02%)</title><rect x="62.3230%" y="229" width="0.0188%" height="15" fill="rgb(236,137,7)" fg:x="46473" fg:w="14"/><text x="62.5730%" y="239.50"></text></g><g><title>bincode::config::int::VarintEncoding::deserialize_varint (14 samples, 0.02%)</title><rect x="62.3230%" y="213" width="0.0188%" height="15" fill="rgb(235,127,16)" fg:x="46473" fg:w="14"/><text x="62.5730%" y="223.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_byte (9 samples, 0.01%)</title><rect x="62.3297%" y="197" width="0.0121%" height="15" fill="rgb(250,192,54)" fg:x="46478" fg:w="9"/><text x="62.5797%" y="207.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u8 (9 samples, 0.01%)</title><rect x="62.3297%" y="181" width="0.0121%" height="15" fill="rgb(218,98,20)" fg:x="46478" fg:w="9"/><text x="62.5797%" y="191.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::VariantAccess&gt;::struct_variant (84 samples, 0.11%)</title><rect x="62.2304%" y="357" width="0.1126%" height="15" fill="rgb(230,176,47)" fg:x="46404" fg:w="84"/><text x="62.4804%" y="367.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (84 samples, 0.11%)</title><rect x="62.2304%" y="341" width="0.1126%" height="15" fill="rgb(244,2,33)" fg:x="46404" fg:w="84"/><text x="62.4804%" y="351.50"></text></g><g><title>&lt;&lt;gmw::protocols::boolean_gmw::_::&lt;impl serde::de::Deserialize for gmw::protocols::boolean_gmw::Msg&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum::__Visitor as serde::de::Visitor&gt;::visit_seq (84 samples, 0.11%)</title><rect x="62.2304%" y="325" width="0.1126%" height="15" fill="rgb(231,100,17)" fg:x="46404" fg:w="84"/><text x="62.4804%" y="335.50"></text></g><g><title>serde::de::SeqAccess::next_element (84 samples, 0.11%)</title><rect x="62.2304%" y="309" width="0.1126%" height="15" fill="rgb(245,23,12)" fg:x="46404" fg:w="84"/><text x="62.4804%" y="319.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (84 samples, 0.11%)</title><rect x="62.2304%" y="293" width="0.1126%" height="15" fill="rgb(249,55,22)" fg:x="46404" fg:w="84"/><text x="62.4804%" y="303.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (83 samples, 0.11%)</title><rect x="62.2318%" y="277" width="0.1113%" height="15" fill="rgb(207,134,9)" fg:x="46405" fg:w="83"/><text x="62.4818%" y="287.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for usize&gt;::deserialize (15 samples, 0.02%)</title><rect x="62.3230%" y="261" width="0.0201%" height="15" fill="rgb(218,134,0)" fg:x="46473" fg:w="15"/><text x="62.5730%" y="271.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u64 (15 samples, 0.02%)</title><rect x="62.3230%" y="245" width="0.0201%" height="15" fill="rgb(213,212,33)" fg:x="46473" fg:w="15"/><text x="62.5730%" y="255.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (9 samples, 0.01%)</title><rect x="62.3659%" y="213" width="0.0121%" height="15" fill="rgb(252,106,18)" fg:x="46505" fg:w="9"/><text x="62.6159%" y="223.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::copy_to_slice (9 samples, 0.01%)</title><rect x="62.3659%" y="197" width="0.0121%" height="15" fill="rgb(208,126,42)" fg:x="46505" fg:w="9"/><text x="62.6159%" y="207.50"></text></g><g><title>bytes::buf::buf_impl::Buf::copy_to_slice (9 samples, 0.01%)</title><rect x="62.3659%" y="181" width="0.0121%" height="15" fill="rgb(246,175,29)" fg:x="46505" fg:w="9"/><text x="62.6159%" y="191.50"></text></g><g><title>bincode::config::int::VarintEncoding::deserialize_varint (22 samples, 0.03%)</title><rect x="62.3498%" y="309" width="0.0295%" height="15" fill="rgb(215,13,50)" fg:x="46493" fg:w="22"/><text x="62.5998%" y="319.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_byte (12 samples, 0.02%)</title><rect x="62.3632%" y="293" width="0.0161%" height="15" fill="rgb(216,172,15)" fg:x="46503" fg:w="12"/><text x="62.6132%" y="303.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u8 (12 samples, 0.02%)</title><rect x="62.3632%" y="277" width="0.0161%" height="15" fill="rgb(212,103,13)" fg:x="46503" fg:w="12"/><text x="62.6132%" y="287.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (11 samples, 0.01%)</title><rect x="62.3646%" y="261" width="0.0148%" height="15" fill="rgb(231,171,36)" fg:x="46504" fg:w="11"/><text x="62.6146%" y="271.50"></text></g><g><title>std::io::Read::read_exact (11 samples, 0.01%)</title><rect x="62.3646%" y="245" width="0.0148%" height="15" fill="rgb(250,123,20)" fg:x="46504" fg:w="11"/><text x="62.6146%" y="255.50"></text></g><g><title>std::io::default_read_exact (10 samples, 0.01%)</title><rect x="62.3659%" y="229" width="0.0134%" height="15" fill="rgb(212,53,50)" fg:x="46505" fg:w="10"/><text x="62.6159%" y="239.50"></text></g><g><title>gmw::protocols::boolean_gmw::_::&lt;impl serde::de::Deserialize for gmw::protocols::boolean_gmw::Msg&gt;::deserialize (120 samples, 0.16%)</title><rect x="62.2304%" y="405" width="0.1609%" height="15" fill="rgb(243,54,12)" fg:x="46404" fg:w="120"/><text x="62.4804%" y="415.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_enum (120 samples, 0.16%)</title><rect x="62.2304%" y="389" width="0.1609%" height="15" fill="rgb(234,101,34)" fg:x="46404" fg:w="120"/><text x="62.4804%" y="399.50"></text></g><g><title>&lt;gmw::protocols::boolean_gmw::_::&lt;impl serde::de::Deserialize for gmw::protocols::boolean_gmw::Msg&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_enum (120 samples, 0.16%)</title><rect x="62.2304%" y="373" width="0.1609%" height="15" fill="rgb(254,67,22)" fg:x="46404" fg:w="120"/><text x="62.4804%" y="383.50"></text></g><g><title>serde::de::EnumAccess::variant (36 samples, 0.05%)</title><rect x="62.3431%" y="357" width="0.0483%" height="15" fill="rgb(250,35,47)" fg:x="46488" fg:w="36"/><text x="62.5931%" y="367.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_enum::&lt;impl serde::de::EnumAccess for &amp;mut bincode::de::Deserializer&lt;R,O&gt;&gt;::variant_seed (36 samples, 0.05%)</title><rect x="62.3431%" y="341" width="0.0483%" height="15" fill="rgb(226,126,38)" fg:x="46488" fg:w="36"/><text x="62.5931%" y="351.50"></text></g><g><title>&lt;bincode::config::int::VarintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u32 (31 samples, 0.04%)</title><rect x="62.3498%" y="325" width="0.0416%" height="15" fill="rgb(216,138,53)" fg:x="46493" fg:w="31"/><text x="62.5998%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (9 samples, 0.01%)</title><rect x="62.3793%" y="309" width="0.0121%" height="15" fill="rgb(246,199,43)" fg:x="46515" fg:w="9"/><text x="62.6293%" y="319.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (16 samples, 0.02%)</title><rect x="62.3914%" y="373" width="0.0215%" height="15" fill="rgb(232,125,11)" fg:x="46524" fg:w="16"/><text x="62.6414%" y="383.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (16 samples, 0.02%)</title><rect x="62.3914%" y="357" width="0.0215%" height="15" fill="rgb(218,219,45)" fg:x="46524" fg:w="16"/><text x="62.6414%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (16 samples, 0.02%)</title><rect x="62.4437%" y="69" width="0.0215%" height="15" fill="rgb(216,102,54)" fg:x="46563" fg:w="16"/><text x="62.6937%" y="79.50"></text></g><g><title>core::sync::atomic::atomic_sub (16 samples, 0.02%)</title><rect x="62.4437%" y="53" width="0.0215%" height="15" fill="rgb(250,228,7)" fg:x="46563" fg:w="16"/><text x="62.6937%" y="63.50"></text></g><g><title>&lt;remoc::chmux::receiver::DataBuf as bytes::buf::buf_impl::Buf&gt;::advance (31 samples, 0.04%)</title><rect x="62.4249%" y="197" width="0.0416%" height="15" fill="rgb(226,125,25)" fg:x="46549" fg:w="31"/><text x="62.6749%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;bytes::bytes::Bytes&gt;&gt; (21 samples, 0.03%)</title><rect x="62.4383%" y="181" width="0.0282%" height="15" fill="rgb(224,165,27)" fg:x="46559" fg:w="21"/><text x="62.6883%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (19 samples, 0.03%)</title><rect x="62.4410%" y="165" width="0.0255%" height="15" fill="rgb(233,86,3)" fg:x="46561" fg:w="19"/><text x="62.6910%" y="175.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (19 samples, 0.03%)</title><rect x="62.4410%" y="149" width="0.0255%" height="15" fill="rgb(228,116,20)" fg:x="46561" fg:w="19"/><text x="62.6910%" y="159.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (19 samples, 0.03%)</title><rect x="62.4410%" y="133" width="0.0255%" height="15" fill="rgb(209,192,17)" fg:x="46561" fg:w="19"/><text x="62.6910%" y="143.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (19 samples, 0.03%)</title><rect x="62.4410%" y="117" width="0.0255%" height="15" fill="rgb(224,88,34)" fg:x="46561" fg:w="19"/><text x="62.6910%" y="127.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop::{{closure}} (18 samples, 0.02%)</title><rect x="62.4423%" y="101" width="0.0241%" height="15" fill="rgb(233,38,6)" fg:x="46562" fg:w="18"/><text x="62.6923%" y="111.50"></text></g><g><title>bytes::bytes_mut::release_shared (18 samples, 0.02%)</title><rect x="62.4423%" y="85" width="0.0241%" height="15" fill="rgb(212,59,30)" fg:x="46562" fg:w="18"/><text x="62.6923%" y="95.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::copy_to_slice (37 samples, 0.05%)</title><rect x="62.4195%" y="229" width="0.0496%" height="15" fill="rgb(213,80,3)" fg:x="46545" fg:w="37"/><text x="62.6695%" y="239.50"></text></g><g><title>bytes::buf::buf_impl::Buf::copy_to_slice (37 samples, 0.05%)</title><rect x="62.4195%" y="213" width="0.0496%" height="15" fill="rgb(251,178,7)" fg:x="46545" fg:w="37"/><text x="62.6695%" y="223.50"></text></g><g><title>&lt;bincode::config::int::VarintEncoding as bincode::config::int::IntEncoding&gt;::deserialize_u64 (43 samples, 0.06%)</title><rect x="62.4128%" y="357" width="0.0577%" height="15" fill="rgb(213,154,26)" fg:x="46540" fg:w="43"/><text x="62.6628%" y="367.50"></text></g><g><title>bincode::config::int::VarintEncoding::deserialize_varint (43 samples, 0.06%)</title><rect x="62.4128%" y="341" width="0.0577%" height="15" fill="rgb(238,165,49)" fg:x="46540" fg:w="43"/><text x="62.6628%" y="351.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_byte (42 samples, 0.06%)</title><rect x="62.4142%" y="325" width="0.0563%" height="15" fill="rgb(248,91,46)" fg:x="46541" fg:w="42"/><text x="62.6642%" y="335.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u8 (42 samples, 0.06%)</title><rect x="62.4142%" y="309" width="0.0563%" height="15" fill="rgb(244,21,52)" fg:x="46541" fg:w="42"/><text x="62.6642%" y="319.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (40 samples, 0.05%)</title><rect x="62.4169%" y="293" width="0.0536%" height="15" fill="rgb(247,122,20)" fg:x="46543" fg:w="40"/><text x="62.6669%" y="303.50"></text></g><g><title>std::io::Read::read_exact (40 samples, 0.05%)</title><rect x="62.4169%" y="277" width="0.0536%" height="15" fill="rgb(218,27,9)" fg:x="46543" fg:w="40"/><text x="62.6669%" y="287.50"></text></g><g><title>std::io::default_read_exact (40 samples, 0.05%)</title><rect x="62.4169%" y="261" width="0.0536%" height="15" fill="rgb(246,7,6)" fg:x="46543" fg:w="40"/><text x="62.6669%" y="271.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (38 samples, 0.05%)</title><rect x="62.4195%" y="245" width="0.0510%" height="15" fill="rgb(227,135,54)" fg:x="46545" fg:w="38"/><text x="62.6695%" y="255.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (190 samples, 0.25%)</title><rect x="62.2304%" y="421" width="0.2548%" height="15" fill="rgb(247,14,11)" fg:x="46404" fg:w="190"/><text x="62.4804%" y="431.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (70 samples, 0.09%)</title><rect x="62.3914%" y="405" width="0.0939%" height="15" fill="rgb(206,149,34)" fg:x="46524" fg:w="70"/><text x="62.6414%" y="415.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_seq (70 samples, 0.09%)</title><rect x="62.3914%" y="389" width="0.0939%" height="15" fill="rgb(227,228,4)" fg:x="46524" fg:w="70"/><text x="62.6414%" y="399.50"></text></g><g><title>bincode::config::int::IntEncoding::deserialize_len (54 samples, 0.07%)</title><rect x="62.4128%" y="373" width="0.0724%" height="15" fill="rgb(238,218,28)" fg:x="46540" fg:w="54"/><text x="62.6628%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (11 samples, 0.01%)</title><rect x="62.4705%" y="357" width="0.0148%" height="15" fill="rgb(252,86,40)" fg:x="46583" fg:w="11"/><text x="62.7205%" y="367.50"></text></g><g><title>&lt;serde::de::impls::OptionVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_some (212 samples, 0.28%)</title><rect x="62.2076%" y="533" width="0.2843%" height="15" fill="rgb(251,225,11)" fg:x="46387" fg:w="212"/><text x="62.4576%" y="543.50"></text></g><g><title>gmw::protocols::boolean_gmw::_::&lt;impl serde::de::Deserialize for gmw::protocols::boolean_gmw::SimdMsg&gt;::deserialize (203 samples, 0.27%)</title><rect x="62.2197%" y="517" width="0.2722%" height="15" fill="rgb(206,46,49)" fg:x="46396" fg:w="203"/><text x="62.4697%" y="527.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (203 samples, 0.27%)</title><rect x="62.2197%" y="501" width="0.2722%" height="15" fill="rgb(245,128,24)" fg:x="46396" fg:w="203"/><text x="62.4697%" y="511.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (203 samples, 0.27%)</title><rect x="62.2197%" y="485" width="0.2722%" height="15" fill="rgb(219,177,34)" fg:x="46396" fg:w="203"/><text x="62.4697%" y="495.50"></text></g><g><title>&lt;gmw::protocols::boolean_gmw::_::&lt;impl serde::de::Deserialize for gmw::protocols::boolean_gmw::SimdMsg&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_seq (203 samples, 0.27%)</title><rect x="62.2197%" y="469" width="0.2722%" height="15" fill="rgb(218,60,48)" fg:x="46396" fg:w="203"/><text x="62.4697%" y="479.50"></text></g><g><title>serde::de::SeqAccess::next_element (197 samples, 0.26%)</title><rect x="62.2278%" y="453" width="0.2642%" height="15" fill="rgb(221,11,5)" fg:x="46402" fg:w="197"/><text x="62.4778%" y="463.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (197 samples, 0.26%)</title><rect x="62.2278%" y="437" width="0.2642%" height="15" fill="rgb(220,148,13)" fg:x="46402" fg:w="197"/><text x="62.4778%" y="447.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (757 samples, 1.02%)</title><rect x="61.5076%" y="581" width="1.0152%" height="15" fill="rgb(210,16,3)" fg:x="45865" fg:w="757"/><text x="61.7576%" y="591.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (236 samples, 0.32%)</title><rect x="62.2063%" y="565" width="0.3165%" height="15" fill="rgb(236,80,2)" fg:x="46386" fg:w="236"/><text x="62.4563%" y="575.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_option (236 samples, 0.32%)</title><rect x="62.2063%" y="549" width="0.3165%" height="15" fill="rgb(239,129,19)" fg:x="46386" fg:w="236"/><text x="62.4563%" y="559.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for u8&gt;::deserialize (23 samples, 0.03%)</title><rect x="62.4920%" y="533" width="0.0308%" height="15" fill="rgb(220,106,35)" fg:x="46599" fg:w="23"/><text x="62.7420%" y="543.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_u8 (23 samples, 0.03%)</title><rect x="62.4920%" y="517" width="0.0308%" height="15" fill="rgb(252,139,45)" fg:x="46599" fg:w="23"/><text x="62.7420%" y="527.50"></text></g><g><title>bincode::de::Deserializer&lt;R,O&gt;::deserialize_byte (23 samples, 0.03%)</title><rect x="62.4920%" y="501" width="0.0308%" height="15" fill="rgb(229,8,36)" fg:x="46599" fg:w="23"/><text x="62.7420%" y="511.50"></text></g><g><title>bincode::byteorder::ReadBytesExt::read_u8 (23 samples, 0.03%)</title><rect x="62.4920%" y="485" width="0.0308%" height="15" fill="rgb(230,126,33)" fg:x="46599" fg:w="23"/><text x="62.7420%" y="495.50"></text></g><g><title>&lt;bincode::de::read::IoReader&lt;R&gt; as std::io::Read&gt;::read_exact (13 samples, 0.02%)</title><rect x="62.5054%" y="469" width="0.0174%" height="15" fill="rgb(239,140,21)" fg:x="46609" fg:w="13"/><text x="62.7554%" y="479.50"></text></g><g><title>std::io::Read::read_exact (13 samples, 0.02%)</title><rect x="62.5054%" y="453" width="0.0174%" height="15" fill="rgb(254,104,9)" fg:x="46609" fg:w="13"/><text x="62.7554%" y="463.50"></text></g><g><title>std::io::default_read_exact (13 samples, 0.02%)</title><rect x="62.5054%" y="437" width="0.0174%" height="15" fill="rgb(239,52,14)" fg:x="46609" fg:w="13"/><text x="62.7554%" y="447.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (11 samples, 0.01%)</title><rect x="62.5080%" y="421" width="0.0148%" height="15" fill="rgb(208,227,44)" fg:x="46611" fg:w="11"/><text x="62.7580%" y="431.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::copy_to_slice (11 samples, 0.01%)</title><rect x="62.5080%" y="405" width="0.0148%" height="15" fill="rgb(246,18,19)" fg:x="46611" fg:w="11"/><text x="62.7580%" y="415.50"></text></g><g><title>bytes::buf::buf_impl::Buf::copy_to_slice (11 samples, 0.01%)</title><rect x="62.5080%" y="389" width="0.0148%" height="15" fill="rgb(235,228,25)" fg:x="46611" fg:w="11"/><text x="62.7580%" y="399.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (928 samples, 1.24%)</title><rect x="61.3306%" y="789" width="1.2445%" height="15" fill="rgb(240,156,20)" fg:x="45733" fg:w="928"/><text x="61.5806%" y="799.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for core::result::Result&lt;T,E&gt;&gt;::deserialize (928 samples, 1.24%)</title><rect x="61.3306%" y="773" width="1.2445%" height="15" fill="rgb(224,8,20)" fg:x="45733" fg:w="928"/><text x="61.5806%" y="783.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_enum (928 samples, 1.24%)</title><rect x="61.3306%" y="757" width="1.2445%" height="15" fill="rgb(214,12,52)" fg:x="45733" fg:w="928"/><text x="61.5806%" y="767.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for core::result::Result&lt;T,E&gt;&gt;::deserialize::ResultVisitor&lt;T,E&gt; as serde::de::Visitor&gt;::visit_enum (928 samples, 1.24%)</title><rect x="61.3306%" y="741" width="1.2445%" height="15" fill="rgb(211,220,47)" fg:x="45733" fg:w="928"/><text x="61.5806%" y="751.50"></text></g><g><title>serde::de::VariantAccess::newtype_variant (805 samples, 1.08%)</title><rect x="61.4955%" y="725" width="1.0796%" height="15" fill="rgb(250,173,5)" fg:x="45856" fg:w="805"/><text x="61.7455%" y="735.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::VariantAccess&gt;::newtype_variant_seed (805 samples, 1.08%)</title><rect x="61.4955%" y="709" width="1.0796%" height="15" fill="rgb(250,125,52)" fg:x="45856" fg:w="805"/><text x="61.7455%" y="719.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (805 samples, 1.08%)</title><rect x="61.4955%" y="693" width="1.0796%" height="15" fill="rgb(209,133,18)" fg:x="45856" fg:w="805"/><text x="61.7455%" y="703.50"></text></g><g><title>gmw::executor::_::&lt;impl serde::de::Deserialize for gmw::executor::ExecutorMsg&lt;Msg,SimdMsg&gt;&gt;::deserialize (805 samples, 1.08%)</title><rect x="61.4955%" y="677" width="1.0796%" height="15" fill="rgb(216,173,22)" fg:x="45856" fg:w="805"/><text x="61.7455%" y="687.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_struct (799 samples, 1.07%)</title><rect x="61.5036%" y="661" width="1.0715%" height="15" fill="rgb(205,3,22)" fg:x="45862" fg:w="799"/><text x="61.7536%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple (796 samples, 1.07%)</title><rect x="61.5076%" y="645" width="1.0675%" height="15" fill="rgb(248,22,20)" fg:x="45865" fg:w="796"/><text x="61.7576%" y="655.50"></text></g><g><title>&lt;gmw::executor::_::&lt;impl serde::de::Deserialize for gmw::executor::ExecutorMsg&lt;Msg,SimdMsg&gt;&gt;::deserialize::__Visitor&lt;Msg,SimdMsg&gt; as serde::de::Visitor&gt;::visit_seq (796 samples, 1.07%)</title><rect x="61.5076%" y="629" width="1.0675%" height="15" fill="rgb(233,6,29)" fg:x="45865" fg:w="796"/><text x="61.7576%" y="639.50"></text></g><g><title>serde::de::SeqAccess::next_element (796 samples, 1.07%)</title><rect x="61.5076%" y="613" width="1.0675%" height="15" fill="rgb(240,22,54)" fg:x="45865" fg:w="796"/><text x="61.7576%" y="623.50"></text></g><g><title>&lt;&lt;&amp;mut bincode::de::Deserializer&lt;R,O&gt; as serde::de::Deserializer&gt;::deserialize_tuple::Access&lt;R,O&gt; as serde::de::SeqAccess&gt;::next_element_seed (796 samples, 1.07%)</title><rect x="61.5076%" y="597" width="1.0675%" height="15" fill="rgb(231,133,32)" fg:x="45865" fg:w="796"/><text x="61.7576%" y="607.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (39 samples, 0.05%)</title><rect x="62.5228%" y="581" width="0.0523%" height="15" fill="rgb(248,193,4)" fg:x="46622" fg:w="39"/><text x="62.7728%" y="591.50"></text></g><g><title>bincode::config::Options::deserialize_from (930 samples, 1.25%)</title><rect x="61.3306%" y="853" width="1.2472%" height="15" fill="rgb(211,178,46)" fg:x="45733" fg:w="930"/><text x="61.5806%" y="863.50"></text></g><g><title>bincode::internal::deserialize_from (930 samples, 1.25%)</title><rect x="61.3306%" y="837" width="1.2472%" height="15" fill="rgb(224,5,42)" fg:x="45733" fg:w="930"/><text x="61.5806%" y="847.50"></text></g><g><title>bincode::internal::deserialize_from_seed (930 samples, 1.25%)</title><rect x="61.3306%" y="821" width="1.2472%" height="15" fill="rgb(239,176,25)" fg:x="45733" fg:w="930"/><text x="61.5806%" y="831.50"></text></g><g><title>bincode::internal::deserialize_from_custom_seed (930 samples, 1.25%)</title><rect x="61.3306%" y="805" width="1.2472%" height="15" fill="rgb(245,187,50)" fg:x="45733" fg:w="930"/><text x="61.5806%" y="815.50"></text></g><g><title>&lt;remoc::codec::bincode::Bincode as remoc::codec::Codec&gt;::deserialize (941 samples, 1.26%)</title><rect x="61.3306%" y="869" width="1.2619%" height="15" fill="rgb(248,24,15)" fg:x="45733" fg:w="941"/><text x="61.5806%" y="879.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (11 samples, 0.01%)</title><rect x="62.5778%" y="853" width="0.0148%" height="15" fill="rgb(205,166,13)" fg:x="46663" fg:w="11"/><text x="62.8278%" y="863.50"></text></g><g><title>cfree (22 samples, 0.03%)</title><rect x="62.6059%" y="869" width="0.0295%" height="15" fill="rgb(208,114,23)" fg:x="46684" fg:w="22"/><text x="62.8559%" y="879.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (40 samples, 0.05%)</title><rect x="62.6395%" y="869" width="0.0536%" height="15" fill="rgb(239,127,18)" fg:x="46709" fg:w="40"/><text x="62.8895%" y="879.50"></text></g><g><title>core::mem::replace (40 samples, 0.05%)</title><rect x="62.6395%" y="853" width="0.0536%" height="15" fill="rgb(219,154,28)" fg:x="46709" fg:w="40"/><text x="62.8895%" y="863.50"></text></g><g><title>core::ptr::read (40 samples, 0.05%)</title><rect x="62.6395%" y="837" width="0.0536%" height="15" fill="rgb(225,157,23)" fg:x="46709" fg:w="40"/><text x="62.8895%" y="847.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (40 samples, 0.05%)</title><rect x="62.6395%" y="821" width="0.0536%" height="15" fill="rgb(219,8,6)" fg:x="46709" fg:w="40"/><text x="62.8895%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::option::Option&lt;remoc::chmux::receiver::Received&gt;&gt;&gt; (18 samples, 0.02%)</title><rect x="62.7025%" y="869" width="0.0241%" height="15" fill="rgb(212,47,6)" fg:x="46756" fg:w="18"/><text x="62.9525%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;remoc::chmux::port_allocator::PortAllocator&gt; (12 samples, 0.02%)</title><rect x="62.7374%" y="837" width="0.0161%" height="15" fill="rgb(224,190,4)" fg:x="46782" fg:w="12"/><text x="62.9874%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;remoc::chmux::port_allocator::PortAllocatorInner&gt;&gt;&gt; (12 samples, 0.02%)</title><rect x="62.7374%" y="821" width="0.0161%" height="15" fill="rgb(239,183,29)" fg:x="46782" fg:w="12"/><text x="62.9874%" y="831.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.02%)</title><rect x="62.7374%" y="805" width="0.0161%" height="15" fill="rgb(213,57,7)" fg:x="46782" fg:w="12"/><text x="62.9874%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (11 samples, 0.01%)</title><rect x="62.7387%" y="789" width="0.0148%" height="15" fill="rgb(216,148,1)" fg:x="46783" fg:w="11"/><text x="62.9887%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_sub (11 samples, 0.01%)</title><rect x="62.7387%" y="773" width="0.0148%" height="15" fill="rgb(236,182,29)" fg:x="46783" fg:w="11"/><text x="62.9887%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;remoc::rch::base::receiver::PortDeserializer&gt;&gt; (44 samples, 0.06%)</title><rect x="62.7266%" y="869" width="0.0590%" height="15" fill="rgb(244,120,48)" fg:x="46774" fg:w="44"/><text x="62.9766%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;remoc::rch::base::receiver::PortDeserializer&gt; (42 samples, 0.06%)</title><rect x="62.7293%" y="853" width="0.0563%" height="15" fill="rgb(206,71,34)" fg:x="46776" fg:w="42"/><text x="62.9793%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u32,(remoc::chmux::port_allocator::PortNumber,alloc::boxed::Box&lt;dyn core::ops::function::FnOnce&lt;(remoc::chmux::port_allocator::PortNumber,remoc::chmux::listener::Request)&gt;+Output = core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = ()+core::marker::Send&gt;&gt;+core::marker::Send&gt;)&gt;&gt; (24 samples, 0.03%)</title><rect x="62.7535%" y="837" width="0.0322%" height="15" fill="rgb(242,32,6)" fg:x="46794" fg:w="24"/><text x="63.0035%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u32,(remoc::chmux::port_allocator::PortNumber,alloc::boxed::Box&lt;dyn core::ops::function::FnOnce&lt;(remoc::chmux::port_allocator::PortNumber,remoc::chmux::listener::Request)&gt;+Output = core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = ()+core::marker::Send&gt;&gt;+core::marker::Send&gt;),std::collections::hash::map::RandomState&gt;&gt; (24 samples, 0.03%)</title><rect x="62.7535%" y="821" width="0.0322%" height="15" fill="rgb(241,35,3)" fg:x="46794" fg:w="24"/><text x="63.0035%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u32,(remoc::chmux::port_allocator::PortNumber,alloc::boxed::Box&lt;dyn core::ops::function::FnOnce&lt;(remoc::chmux::port_allocator::PortNumber,remoc::chmux::listener::Request)&gt;+Output = core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = ()+core::marker::Send&gt;&gt;+core::marker::Send&gt;))&gt;&gt; (24 samples, 0.03%)</title><rect x="62.7535%" y="805" width="0.0322%" height="15" fill="rgb(222,62,19)" fg:x="46794" fg:w="24"/><text x="63.0035%" y="815.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.03%)</title><rect x="62.7535%" y="789" width="0.0322%" height="15" fill="rgb(223,110,41)" fg:x="46794" fg:w="24"/><text x="63.0035%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::is_empty_singleton (22 samples, 0.03%)</title><rect x="62.7561%" y="773" width="0.0295%" height="15" fill="rgb(208,224,4)" fg:x="46796" fg:w="22"/><text x="63.0061%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;remoc::rch::base::receiver::DataSource&lt;core::result::Result&lt;aes_cbc::Msg,remoc::rch::mpsc::receiver::RecvError&gt;&gt;&gt; (20 samples, 0.03%)</title><rect x="62.7856%" y="869" width="0.0268%" height="15" fill="rgb(241,137,19)" fg:x="46818" fg:w="20"/><text x="63.0356%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;remoc::chmux::receiver::DataBuf&gt;&gt; (14 samples, 0.02%)</title><rect x="62.7937%" y="853" width="0.0188%" height="15" fill="rgb(244,24,17)" fg:x="46824" fg:w="14"/><text x="63.0437%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;remoc::chmux::receiver::DataBuf&gt; (11 samples, 0.01%)</title><rect x="62.7977%" y="837" width="0.0148%" height="15" fill="rgb(245,178,49)" fg:x="46827" fg:w="11"/><text x="63.0477%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;bytes::bytes::Bytes&gt;&gt; (11 samples, 0.01%)</title><rect x="62.7977%" y="821" width="0.0148%" height="15" fill="rgb(219,160,38)" fg:x="46827" fg:w="11"/><text x="63.0477%" y="831.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.01%)</title><rect x="62.7991%" y="805" width="0.0134%" height="15" fill="rgb(228,137,14)" fg:x="46828" fg:w="10"/><text x="63.0491%" y="815.50"></text></g><g><title>remoc::chmux::receiver::Receiver::port_allocator (81 samples, 0.11%)</title><rect x="62.8125%" y="869" width="0.1086%" height="15" fill="rgb(237,134,11)" fg:x="46838" fg:w="81"/><text x="63.0625%" y="879.50"></text></g><g><title>&lt;remoc::chmux::port_allocator::PortAllocator as core::clone::Clone&gt;::clone (81 samples, 0.11%)</title><rect x="62.8125%" y="853" width="0.1086%" height="15" fill="rgb(211,126,44)" fg:x="46838" fg:w="81"/><text x="63.0625%" y="863.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (53 samples, 0.07%)</title><rect x="62.8500%" y="837" width="0.0711%" height="15" fill="rgb(226,171,33)" fg:x="46866" fg:w="53"/><text x="63.1000%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (52 samples, 0.07%)</title><rect x="62.8514%" y="821" width="0.0697%" height="15" fill="rgb(253,99,13)" fg:x="46867" fg:w="52"/><text x="63.1014%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_add (52 samples, 0.07%)</title><rect x="62.8514%" y="805" width="0.0697%" height="15" fill="rgb(244,48,7)" fg:x="46867" fg:w="52"/><text x="63.1014%" y="815.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (10 samples, 0.01%)</title><rect x="63.0793%" y="853" width="0.0134%" height="15" fill="rgb(244,217,54)" fg:x="47037" fg:w="10"/><text x="63.3293%" y="863.50"></text></g><g><title>&lt;remoc::chmux::receiver::Receiving as core::default::Default&gt;::default (9 samples, 0.01%)</title><rect x="63.0927%" y="837" width="0.0121%" height="15" fill="rgb(224,15,18)" fg:x="47047" fg:w="9"/><text x="63.3427%" y="847.50"></text></g><g><title>core::mem::take (21 samples, 0.03%)</title><rect x="63.0927%" y="853" width="0.0282%" height="15" fill="rgb(244,99,12)" fg:x="47047" fg:w="21"/><text x="63.3427%" y="863.50"></text></g><g><title>core::mem::replace (12 samples, 0.02%)</title><rect x="63.1048%" y="837" width="0.0161%" height="15" fill="rgb(233,226,8)" fg:x="47056" fg:w="12"/><text x="63.3548%" y="847.50"></text></g><g><title>core::ptr::read (12 samples, 0.02%)</title><rect x="63.1048%" y="821" width="0.0161%" height="15" fill="rgb(229,211,3)" fg:x="47056" fg:w="12"/><text x="63.3548%" y="831.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (12 samples, 0.02%)</title><rect x="63.1048%" y="805" width="0.0161%" height="15" fill="rgb(216,140,21)" fg:x="47056" fg:w="12"/><text x="63.3548%" y="815.50"></text></g><g><title>remoc::chmux::credit::ChannelCreditReturner::return_flush (23 samples, 0.03%)</title><rect x="63.1223%" y="853" width="0.0308%" height="15" fill="rgb(234,122,30)" fg:x="47069" fg:w="23"/><text x="63.3723%" y="863.50"></text></g><g><title>remoc::chmux::credit::ChannelCreditReturner::return_flush::{{closure}} (20 samples, 0.03%)</title><rect x="63.1531%" y="853" width="0.0268%" height="15" fill="rgb(236,25,46)" fg:x="47092" fg:w="20"/><text x="63.4031%" y="863.50"></text></g><g><title>alloc::sync::Weak&lt;T&gt;::upgrade (11 samples, 0.01%)</title><rect x="63.2255%" y="837" width="0.0148%" height="15" fill="rgb(217,52,54)" fg:x="47146" fg:w="11"/><text x="63.4755%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_update (8 samples, 0.01%)</title><rect x="63.2295%" y="821" width="0.0107%" height="15" fill="rgb(222,29,26)" fg:x="47149" fg:w="8"/><text x="63.4795%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (15 samples, 0.02%)</title><rect x="63.2403%" y="837" width="0.0201%" height="15" fill="rgb(216,177,29)" fg:x="47157" fg:w="15"/><text x="63.4903%" y="847.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (15 samples, 0.02%)</title><rect x="63.2403%" y="821" width="0.0201%" height="15" fill="rgb(247,136,51)" fg:x="47157" fg:w="15"/><text x="63.4903%" y="831.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (8 samples, 0.01%)</title><rect x="63.2604%" y="805" width="0.0107%" height="15" fill="rgb(231,47,47)" fg:x="47172" fg:w="8"/><text x="63.5104%" y="815.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (8 samples, 0.01%)</title><rect x="63.2604%" y="789" width="0.0107%" height="15" fill="rgb(211,192,36)" fg:x="47172" fg:w="8"/><text x="63.5104%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;remoc::chmux::credit::ChannelCreditMonitorInner&gt;&gt;&gt; (14 samples, 0.02%)</title><rect x="63.2604%" y="837" width="0.0188%" height="15" fill="rgb(229,156,32)" fg:x="47172" fg:w="14"/><text x="63.5104%" y="847.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.02%)</title><rect x="63.2604%" y="821" width="0.0188%" height="15" fill="rgb(248,213,20)" fg:x="47172" fg:w="14"/><text x="63.5104%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;remoc::chmux::credit::ChannelCreditMonitorInner&gt;&gt; (17 samples, 0.02%)</title><rect x="63.2792%" y="837" width="0.0228%" height="15" fill="rgb(217,64,7)" fg:x="47186" fg:w="17"/><text x="63.5292%" y="847.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.02%)</title><rect x="63.2792%" y="821" width="0.0228%" height="15" fill="rgb(232,142,8)" fg:x="47186" fg:w="17"/><text x="63.5292%" y="831.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (14 samples, 0.02%)</title><rect x="63.3020%" y="821" width="0.0188%" height="15" fill="rgb(224,92,44)" fg:x="47203" fg:w="14"/><text x="63.5520%" y="831.50"></text></g><g><title>std::sync::poison::Flag::guard (14 samples, 0.02%)</title><rect x="63.3020%" y="805" width="0.0188%" height="15" fill="rgb(214,169,17)" fg:x="47203" fg:w="14"/><text x="63.5520%" y="815.50"></text></g><g><title>std::thread::panicking (9 samples, 0.01%)</title><rect x="63.3087%" y="789" width="0.0121%" height="15" fill="rgb(210,59,37)" fg:x="47208" fg:w="9"/><text x="63.5587%" y="799.50"></text></g><g><title>std::panicking::panicking (9 samples, 0.01%)</title><rect x="63.3087%" y="773" width="0.0121%" height="15" fill="rgb(214,116,48)" fg:x="47208" fg:w="9"/><text x="63.5587%" y="783.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (9 samples, 0.01%)</title><rect x="63.3087%" y="757" width="0.0121%" height="15" fill="rgb(244,191,6)" fg:x="47208" fg:w="9"/><text x="63.5587%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (9 samples, 0.01%)</title><rect x="63.3087%" y="741" width="0.0121%" height="15" fill="rgb(241,50,52)" fg:x="47208" fg:w="9"/><text x="63.5587%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (9 samples, 0.01%)</title><rect x="63.3087%" y="725" width="0.0121%" height="15" fill="rgb(236,75,39)" fg:x="47208" fg:w="9"/><text x="63.5587%" y="735.50"></text></g><g><title>remoc::chmux::credit::ChannelCreditReturner::start_return (114 samples, 0.15%)</title><rect x="63.1799%" y="853" width="0.1529%" height="15" fill="rgb(236,99,0)" fg:x="47112" fg:w="114"/><text x="63.4299%" y="863.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (23 samples, 0.03%)</title><rect x="63.3020%" y="837" width="0.0308%" height="15" fill="rgb(207,202,15)" fg:x="47203" fg:w="23"/><text x="63.5520%" y="847.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (9 samples, 0.01%)</title><rect x="63.3207%" y="821" width="0.0121%" height="15" fill="rgb(233,207,14)" fg:x="47217" fg:w="9"/><text x="63.5707%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (9 samples, 0.01%)</title><rect x="63.3207%" y="805" width="0.0121%" height="15" fill="rgb(226,27,51)" fg:x="47217" fg:w="9"/><text x="63.5707%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (9 samples, 0.01%)</title><rect x="63.3207%" y="789" width="0.0121%" height="15" fill="rgb(206,104,42)" fg:x="47217" fg:w="9"/><text x="63.5707%" y="799.50"></text></g><g><title>remoc::chmux::receiver::DataBuf::new (35 samples, 0.05%)</title><rect x="63.3328%" y="853" width="0.0469%" height="15" fill="rgb(212,225,4)" fg:x="47226" fg:w="35"/><text x="63.5828%" y="863.50"></text></g><g><title>__rust_alloc (10 samples, 0.01%)</title><rect x="63.4133%" y="757" width="0.0134%" height="15" fill="rgb(233,96,42)" fg:x="47286" fg:w="10"/><text x="63.6633%" y="767.50"></text></g><g><title>alloc::raw_vec::finish_grow (44 samples, 0.06%)</title><rect x="63.4052%" y="773" width="0.0590%" height="15" fill="rgb(229,21,32)" fg:x="47280" fg:w="44"/><text x="63.6552%" y="783.50"></text></g><g><title>malloc (27 samples, 0.04%)</title><rect x="63.4280%" y="757" width="0.0362%" height="15" fill="rgb(226,216,24)" fg:x="47297" fg:w="27"/><text x="63.6780%" y="767.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (62 samples, 0.08%)</title><rect x="63.3864%" y="821" width="0.0831%" height="15" fill="rgb(221,163,17)" fg:x="47266" fg:w="62"/><text x="63.6364%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (58 samples, 0.08%)</title><rect x="63.3918%" y="805" width="0.0778%" height="15" fill="rgb(216,216,42)" fg:x="47270" fg:w="58"/><text x="63.6418%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (58 samples, 0.08%)</title><rect x="63.3918%" y="789" width="0.0778%" height="15" fill="rgb(240,118,7)" fg:x="47270" fg:w="58"/><text x="63.6418%" y="799.50"></text></g><g><title>remoc::chmux::receiver::DataBuf::try_push (68 samples, 0.09%)</title><rect x="63.3797%" y="853" width="0.0912%" height="15" fill="rgb(221,67,37)" fg:x="47261" fg:w="68"/><text x="63.6297%" y="863.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (67 samples, 0.09%)</title><rect x="63.3811%" y="837" width="0.0899%" height="15" fill="rgb(241,32,44)" fg:x="47262" fg:w="67"/><text x="63.6311%" y="847.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.02%)</title><rect x="63.5219%" y="773" width="0.0174%" height="15" fill="rgb(235,204,43)" fg:x="47367" fg:w="13"/><text x="63.7719%" y="783.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (13 samples, 0.02%)</title><rect x="63.5219%" y="757" width="0.0174%" height="15" fill="rgb(213,116,10)" fg:x="47367" fg:w="13"/><text x="63.7719%" y="767.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (13 samples, 0.02%)</title><rect x="63.5219%" y="741" width="0.0174%" height="15" fill="rgb(239,15,48)" fg:x="47367" fg:w="13"/><text x="63.7719%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::coop::RestoreOnPending&gt; (10 samples, 0.01%)</title><rect x="63.5393%" y="773" width="0.0134%" height="15" fill="rgb(207,123,36)" fg:x="47380" fg:w="10"/><text x="63.7893%" y="783.50"></text></g><g><title>&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (10 samples, 0.01%)</title><rect x="63.5393%" y="757" width="0.0134%" height="15" fill="rgb(209,103,30)" fg:x="47380" fg:w="10"/><text x="63.7893%" y="767.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::read (22 samples, 0.03%)</title><rect x="63.6292%" y="725" width="0.0295%" height="15" fill="rgb(238,100,19)" fg:x="47447" fg:w="22"/><text x="63.8792%" y="735.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::reclaim_blocks (8 samples, 0.01%)</title><rect x="63.6587%" y="725" width="0.0107%" height="15" fill="rgb(244,30,14)" fg:x="47469" fg:w="8"/><text x="63.9087%" y="735.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (66 samples, 0.09%)</title><rect x="63.6171%" y="741" width="0.0885%" height="15" fill="rgb(249,174,6)" fg:x="47438" fg:w="66"/><text x="63.8671%" y="751.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::try_advancing_head (27 samples, 0.04%)</title><rect x="63.6694%" y="725" width="0.0362%" height="15" fill="rgb(235,213,41)" fg:x="47477" fg:w="27"/><text x="63.9194%" y="735.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (124 samples, 0.17%)</title><rect x="63.5527%" y="773" width="0.1663%" height="15" fill="rgb(213,118,6)" fg:x="47390" fg:w="124"/><text x="63.8027%" y="783.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (124 samples, 0.17%)</title><rect x="63.5527%" y="757" width="0.1663%" height="15" fill="rgb(235,44,51)" fg:x="47390" fg:w="124"/><text x="63.8027%" y="767.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (10 samples, 0.01%)</title><rect x="63.7056%" y="741" width="0.0134%" height="15" fill="rgb(217,9,53)" fg:x="47504" fg:w="10"/><text x="63.9556%" y="751.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register (10 samples, 0.01%)</title><rect x="63.7056%" y="725" width="0.0134%" height="15" fill="rgb(237,172,34)" fg:x="47504" fg:w="10"/><text x="63.9556%" y="735.50"></text></g><g><title>tokio::runtime::context::budget (28 samples, 0.04%)</title><rect x="63.7257%" y="757" width="0.0375%" height="15" fill="rgb(206,206,11)" fg:x="47519" fg:w="28"/><text x="63.9757%" y="767.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (28 samples, 0.04%)</title><rect x="63.7257%" y="741" width="0.0375%" height="15" fill="rgb(214,149,29)" fg:x="47519" fg:w="28"/><text x="63.9757%" y="751.50"></text></g><g><title>tokio::runtime::context::budget::{{closure}} (23 samples, 0.03%)</title><rect x="63.7324%" y="725" width="0.0308%" height="15" fill="rgb(208,123,3)" fg:x="47524" fg:w="23"/><text x="63.9824%" y="735.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::{{closure}} (23 samples, 0.03%)</title><rect x="63.7324%" y="709" width="0.0308%" height="15" fill="rgb(229,126,4)" fg:x="47524" fg:w="23"/><text x="63.9824%" y="719.50"></text></g><g><title>tokio::runtime::coop::Budget::decrement (10 samples, 0.01%)</title><rect x="63.7499%" y="693" width="0.0134%" height="15" fill="rgb(222,92,36)" fg:x="47537" fg:w="10"/><text x="63.9999%" y="703.50"></text></g><g><title>remoc::chmux::receiver::Receiver::recv_any::{{closure}} (633 samples, 0.85%)</title><rect x="62.9211%" y="869" width="0.8489%" height="15" fill="rgb(216,39,41)" fg:x="46919" fg:w="633"/><text x="63.1711%" y="879.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (223 samples, 0.30%)</title><rect x="63.4709%" y="853" width="0.2991%" height="15" fill="rgb(253,127,28)" fg:x="47329" fg:w="223"/><text x="63.7209%" y="863.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (209 samples, 0.28%)</title><rect x="63.4897%" y="837" width="0.2803%" height="15" fill="rgb(249,152,51)" fg:x="47343" fg:w="209"/><text x="63.7397%" y="847.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (199 samples, 0.27%)</title><rect x="63.5031%" y="821" width="0.2669%" height="15" fill="rgb(209,123,42)" fg:x="47353" fg:w="199"/><text x="63.7531%" y="831.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (199 samples, 0.27%)</title><rect x="63.5031%" y="805" width="0.2669%" height="15" fill="rgb(241,118,22)" fg:x="47353" fg:w="199"/><text x="63.7531%" y="815.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (199 samples, 0.27%)</title><rect x="63.5031%" y="789" width="0.2669%" height="15" fill="rgb(208,25,7)" fg:x="47353" fg:w="199"/><text x="63.7531%" y="799.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (38 samples, 0.05%)</title><rect x="63.7190%" y="773" width="0.0510%" height="15" fill="rgb(243,144,39)" fg:x="47514" fg:w="38"/><text x="63.9690%" y="783.50"></text></g><g><title>remoc::chmux::receiver::Receiver::storage (11 samples, 0.01%)</title><rect x="63.7700%" y="869" width="0.0148%" height="15" fill="rgb(250,50,5)" fg:x="47552" fg:w="11"/><text x="64.0200%" y="879.50"></text></g><g><title>&lt;remoc::chmux::any_storage::AnyStorage as core::clone::Clone&gt;::clone (11 samples, 0.01%)</title><rect x="63.7700%" y="853" width="0.0148%" height="15" fill="rgb(207,67,11)" fg:x="47552" fg:w="11"/><text x="64.0200%" y="863.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (11 samples, 0.01%)</title><rect x="63.7700%" y="837" width="0.0148%" height="15" fill="rgb(245,204,40)" fg:x="47552" fg:w="11"/><text x="64.0200%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (11 samples, 0.01%)</title><rect x="63.7700%" y="821" width="0.0148%" height="15" fill="rgb(238,228,24)" fg:x="47552" fg:w="11"/><text x="64.0200%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_add (11 samples, 0.01%)</title><rect x="63.7700%" y="805" width="0.0148%" height="15" fill="rgb(217,116,22)" fg:x="47552" fg:w="11"/><text x="64.0200%" y="815.50"></text></g><g><title>remoc::rch::base::receiver::PortDeserializer::finish (17 samples, 0.02%)</title><rect x="63.7847%" y="869" width="0.0228%" height="15" fill="rgb(234,98,12)" fg:x="47563" fg:w="17"/><text x="64.0347%" y="879.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (27 samples, 0.04%)</title><rect x="63.8116%" y="853" width="0.0362%" height="15" fill="rgb(242,170,50)" fg:x="47583" fg:w="27"/><text x="64.0616%" y="863.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (25 samples, 0.03%)</title><rect x="63.8142%" y="837" width="0.0335%" height="15" fill="rgb(235,7,5)" fg:x="47585" fg:w="25"/><text x="64.0642%" y="847.50"></text></g><g><title>alloc::alloc::exchange_malloc (22 samples, 0.03%)</title><rect x="63.8183%" y="821" width="0.0295%" height="15" fill="rgb(241,114,28)" fg:x="47588" fg:w="22"/><text x="64.0683%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22 samples, 0.03%)</title><rect x="63.8183%" y="805" width="0.0295%" height="15" fill="rgb(246,112,42)" fg:x="47588" fg:w="22"/><text x="64.0683%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.03%)</title><rect x="63.8183%" y="789" width="0.0295%" height="15" fill="rgb(248,228,14)" fg:x="47588" fg:w="22"/><text x="64.0683%" y="799.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.03%)</title><rect x="63.8183%" y="773" width="0.0295%" height="15" fill="rgb(208,133,18)" fg:x="47588" fg:w="22"/><text x="64.0683%" y="783.50"></text></g><g><title>malloc (20 samples, 0.03%)</title><rect x="63.8209%" y="757" width="0.0268%" height="15" fill="rgb(207,35,49)" fg:x="47590" fg:w="20"/><text x="64.0709%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (29 samples, 0.04%)</title><rect x="63.8491%" y="821" width="0.0389%" height="15" fill="rgb(205,68,36)" fg:x="47611" fg:w="29"/><text x="64.0991%" y="831.50"></text></g><g><title>alloc::alloc::dealloc (29 samples, 0.04%)</title><rect x="63.8491%" y="805" width="0.0389%" height="15" fill="rgb(245,62,40)" fg:x="47611" fg:w="29"/><text x="64.0991%" y="815.50"></text></g><g><title>cfree (28 samples, 0.04%)</title><rect x="63.8504%" y="789" width="0.0375%" height="15" fill="rgb(228,27,24)" fg:x="47612" fg:w="28"/><text x="64.1004%" y="799.50"></text></g><g><title>[libc.so.6] (8 samples, 0.01%)</title><rect x="63.8773%" y="773" width="0.0107%" height="15" fill="rgb(253,19,12)" fg:x="47632" fg:w="8"/><text x="64.1273%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Weak&lt;core::cell::RefCell&lt;remoc::rch::base::receiver::PortDeserializer&gt;&gt;&gt; (43 samples, 0.06%)</title><rect x="63.8478%" y="853" width="0.0577%" height="15" fill="rgb(232,28,20)" fg:x="47610" fg:w="43"/><text x="64.0978%" y="863.50"></text></g><g><title>&lt;alloc::rc::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.06%)</title><rect x="63.8478%" y="837" width="0.0577%" height="15" fill="rgb(218,35,51)" fg:x="47610" fg:w="43"/><text x="64.0978%" y="847.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_weak (13 samples, 0.02%)</title><rect x="63.8880%" y="821" width="0.0174%" height="15" fill="rgb(212,90,40)" fg:x="47640" fg:w="13"/><text x="64.1380%" y="831.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (13 samples, 0.02%)</title><rect x="63.8880%" y="805" width="0.0174%" height="15" fill="rgb(220,172,12)" fg:x="47640" fg:w="13"/><text x="64.1380%" y="815.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (13 samples, 0.02%)</title><rect x="63.8880%" y="789" width="0.0174%" height="15" fill="rgb(226,159,20)" fg:x="47640" fg:w="13"/><text x="64.1380%" y="799.50"></text></g><g><title>core::mem::replace (13 samples, 0.02%)</title><rect x="63.8880%" y="773" width="0.0174%" height="15" fill="rgb(234,205,16)" fg:x="47640" fg:w="13"/><text x="64.1380%" y="783.50"></text></g><g><title>core::ptr::write (13 samples, 0.02%)</title><rect x="63.8880%" y="757" width="0.0174%" height="15" fill="rgb(207,9,39)" fg:x="47640" fg:w="13"/><text x="64.1380%" y="767.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (12 samples, 0.02%)</title><rect x="63.9054%" y="757" width="0.0161%" height="15" fill="rgb(249,143,15)" fg:x="47653" fg:w="12"/><text x="64.1554%" y="767.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (12 samples, 0.02%)</title><rect x="63.9054%" y="741" width="0.0161%" height="15" fill="rgb(253,133,29)" fg:x="47653" fg:w="12"/><text x="64.1554%" y="751.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (12 samples, 0.02%)</title><rect x="63.9054%" y="725" width="0.0161%" height="15" fill="rgb(221,187,0)" fg:x="47653" fg:w="12"/><text x="64.1554%" y="735.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (12 samples, 0.02%)</title><rect x="63.9054%" y="709" width="0.0161%" height="15" fill="rgb(205,204,26)" fg:x="47653" fg:w="12"/><text x="64.1554%" y="719.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::new (15 samples, 0.02%)</title><rect x="63.9054%" y="853" width="0.0201%" height="15" fill="rgb(224,68,54)" fg:x="47653" fg:w="15"/><text x="64.1554%" y="863.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (15 samples, 0.02%)</title><rect x="63.9054%" y="837" width="0.0201%" height="15" fill="rgb(209,67,4)" fg:x="47653" fg:w="15"/><text x="64.1554%" y="847.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::default::Default&gt;::default (15 samples, 0.02%)</title><rect x="63.9054%" y="821" width="0.0201%" height="15" fill="rgb(228,229,18)" fg:x="47653" fg:w="15"/><text x="64.1554%" y="831.50"></text></g><g><title>std::collections::hash::map::RandomState::new (15 samples, 0.02%)</title><rect x="63.9054%" y="805" width="0.0201%" height="15" fill="rgb(231,89,13)" fg:x="47653" fg:w="15"/><text x="64.1554%" y="815.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (15 samples, 0.02%)</title><rect x="63.9054%" y="789" width="0.0201%" height="15" fill="rgb(210,182,18)" fg:x="47653" fg:w="15"/><text x="64.1554%" y="799.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (15 samples, 0.02%)</title><rect x="63.9054%" y="773" width="0.0201%" height="15" fill="rgb(240,105,2)" fg:x="47653" fg:w="15"/><text x="64.1554%" y="783.50"></text></g><g><title>remoc::rch::base::receiver::PortDeserializer::INSTANCE::__getit (19 samples, 0.03%)</title><rect x="63.9537%" y="821" width="0.0255%" height="15" fill="rgb(207,170,50)" fg:x="47689" fg:w="19"/><text x="64.2037%" y="831.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (19 samples, 0.03%)</title><rect x="63.9537%" y="805" width="0.0255%" height="15" fill="rgb(232,133,24)" fg:x="47689" fg:w="19"/><text x="64.2037%" y="815.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (19 samples, 0.03%)</title><rect x="63.9537%" y="789" width="0.0255%" height="15" fill="rgb(235,166,27)" fg:x="47689" fg:w="19"/><text x="64.2037%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (19 samples, 0.03%)</title><rect x="63.9537%" y="773" width="0.0255%" height="15" fill="rgb(209,19,13)" fg:x="47689" fg:w="19"/><text x="64.2037%" y="783.50"></text></g><g><title>remoc::rch::base::receiver::Receiver&lt;T,Codec&gt;::recv::{{closure}} (2,089 samples, 2.80%)</title><rect x="61.1817%" y="885" width="2.8015%" height="15" fill="rgb(226,79,39)" fg:x="45622" fg:w="2089"/><text x="61.4317%" y="895.50">re..</text></g><g><title>remoc::rch::base::receiver::PortDeserializer::start (131 samples, 0.18%)</title><rect x="63.8075%" y="869" width="0.1757%" height="15" fill="rgb(222,163,10)" fg:x="47580" fg:w="131"/><text x="64.0575%" y="879.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (43 samples, 0.06%)</title><rect x="63.9255%" y="853" width="0.0577%" height="15" fill="rgb(214,44,19)" fg:x="47668" fg:w="43"/><text x="64.1755%" y="863.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (24 samples, 0.03%)</title><rect x="63.9510%" y="837" width="0.0322%" height="15" fill="rgb(210,217,13)" fg:x="47687" fg:w="24"/><text x="64.2010%" y="847.50"></text></g><g><title>&lt;tokio::sync::notify::Notified as core::future::future::Future&gt;::poll (24 samples, 0.03%)</title><rect x="64.1240%" y="869" width="0.0322%" height="15" fill="rgb(237,61,54)" fg:x="47816" fg:w="24"/><text x="64.3740%" y="879.50"></text></g><g><title>core::task::wake::Context::waker (24 samples, 0.03%)</title><rect x="64.1240%" y="853" width="0.0322%" height="15" fill="rgb(226,184,24)" fg:x="47816" fg:w="24"/><text x="64.3740%" y="863.50"></text></g><g><title>core::mem::drop (23 samples, 0.03%)</title><rect x="64.2152%" y="853" width="0.0308%" height="15" fill="rgb(223,226,4)" fg:x="47884" fg:w="23"/><text x="64.4652%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::util::linked_list::LinkedList&lt;tokio::sync::notify::Waiter,tokio::sync::notify::Waiter&gt;&gt;&gt; (22 samples, 0.03%)</title><rect x="64.2166%" y="837" width="0.0295%" height="15" fill="rgb(210,26,41)" fg:x="47885" fg:w="22"/><text x="64.4666%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::util::linked_list::LinkedList&lt;tokio::sync::notify::Waiter,tokio::sync::notify::Waiter&gt;&gt;&gt; (22 samples, 0.03%)</title><rect x="64.2166%" y="821" width="0.0295%" height="15" fill="rgb(220,221,6)" fg:x="47885" fg:w="22"/><text x="64.4666%" y="831.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.03%)</title><rect x="64.2166%" y="805" width="0.0295%" height="15" fill="rgb(225,89,49)" fg:x="47885" fg:w="22"/><text x="64.4666%" y="815.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (22 samples, 0.03%)</title><rect x="64.2166%" y="789" width="0.0295%" height="15" fill="rgb(218,70,45)" fg:x="47885" fg:w="22"/><text x="64.4666%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (22 samples, 0.03%)</title><rect x="64.2166%" y="773" width="0.0295%" height="15" fill="rgb(238,166,21)" fg:x="47885" fg:w="22"/><text x="64.4666%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (22 samples, 0.03%)</title><rect x="64.2166%" y="757" width="0.0295%" height="15" fill="rgb(224,141,44)" fg:x="47885" fg:w="22"/><text x="64.4666%" y="767.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (12 samples, 0.02%)</title><rect x="64.2474%" y="853" width="0.0161%" height="15" fill="rgb(230,12,49)" fg:x="47908" fg:w="12"/><text x="64.4974%" y="863.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (11 samples, 0.01%)</title><rect x="64.2487%" y="837" width="0.0148%" height="15" fill="rgb(212,174,12)" fg:x="47909" fg:w="11"/><text x="64.4987%" y="847.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (8 samples, 0.01%)</title><rect x="64.2528%" y="821" width="0.0107%" height="15" fill="rgb(246,67,9)" fg:x="47912" fg:w="8"/><text x="64.5028%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (36 samples, 0.05%)</title><rect x="64.2635%" y="853" width="0.0483%" height="15" fill="rgb(239,35,23)" fg:x="47920" fg:w="36"/><text x="64.5135%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (36 samples, 0.05%)</title><rect x="64.2635%" y="837" width="0.0483%" height="15" fill="rgb(211,167,0)" fg:x="47920" fg:w="36"/><text x="64.5135%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (8 samples, 0.01%)</title><rect x="64.3118%" y="853" width="0.0107%" height="15" fill="rgb(225,119,45)" fg:x="47956" fg:w="8"/><text x="64.5618%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_load (8 samples, 0.01%)</title><rect x="64.3118%" y="837" width="0.0107%" height="15" fill="rgb(210,162,6)" fg:x="47956" fg:w="8"/><text x="64.5618%" y="847.50"></text></g><g><title>core::task::wake::Waker::will_wake (10 samples, 0.01%)</title><rect x="64.3225%" y="853" width="0.0134%" height="15" fill="rgb(208,118,35)" fg:x="47964" fg:w="10"/><text x="64.5725%" y="863.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (9 samples, 0.01%)</title><rect x="64.3238%" y="837" width="0.0121%" height="15" fill="rgb(239,4,53)" fg:x="47965" fg:w="9"/><text x="64.5738%" y="847.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (9 samples, 0.01%)</title><rect x="64.3238%" y="821" width="0.0121%" height="15" fill="rgb(213,130,21)" fg:x="47965" fg:w="9"/><text x="64.5738%" y="831.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (9 samples, 0.01%)</title><rect x="64.3238%" y="805" width="0.0121%" height="15" fill="rgb(235,148,0)" fg:x="47965" fg:w="9"/><text x="64.5738%" y="815.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (81 samples, 0.11%)</title><rect x="64.3359%" y="853" width="0.1086%" height="15" fill="rgb(244,224,18)" fg:x="47974" fg:w="81"/><text x="64.5859%" y="863.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (81 samples, 0.11%)</title><rect x="64.3359%" y="837" width="0.1086%" height="15" fill="rgb(211,214,4)" fg:x="47974" fg:w="81"/><text x="64.5859%" y="847.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (81 samples, 0.11%)</title><rect x="64.3359%" y="821" width="0.1086%" height="15" fill="rgb(206,119,25)" fg:x="47974" fg:w="81"/><text x="64.5859%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (81 samples, 0.11%)</title><rect x="64.3359%" y="805" width="0.1086%" height="15" fill="rgb(243,93,47)" fg:x="47974" fg:w="81"/><text x="64.5859%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (81 samples, 0.11%)</title><rect x="64.3359%" y="789" width="0.1086%" height="15" fill="rgb(224,194,6)" fg:x="47974" fg:w="81"/><text x="64.5859%" y="799.50"></text></g><g><title>tokio::sync::notify::Notified::project (23 samples, 0.03%)</title><rect x="64.4445%" y="853" width="0.0308%" height="15" fill="rgb(243,229,6)" fg:x="48055" fg:w="23"/><text x="64.6945%" y="863.50"></text></g><g><title>tokio::sync::notify::Notified::poll_notified (256 samples, 0.34%)</title><rect x="64.1575%" y="869" width="0.3433%" height="15" fill="rgb(207,23,50)" fg:x="47841" fg:w="256"/><text x="64.4075%" y="879.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (16 samples, 0.02%)</title><rect x="64.4794%" y="853" width="0.0215%" height="15" fill="rgb(253,192,32)" fg:x="48081" fg:w="16"/><text x="64.7294%" y="863.50"></text></g><g><title>tokio::runtime::context::thread_rng_n (10 samples, 0.01%)</title><rect x="64.5049%" y="853" width="0.0134%" height="15" fill="rgb(213,21,6)" fg:x="48100" fg:w="10"/><text x="64.7549%" y="863.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (10 samples, 0.01%)</title><rect x="64.5049%" y="837" width="0.0134%" height="15" fill="rgb(243,151,13)" fg:x="48100" fg:w="10"/><text x="64.7549%" y="847.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (10 samples, 0.01%)</title><rect x="64.5049%" y="821" width="0.0134%" height="15" fill="rgb(233,165,41)" fg:x="48100" fg:w="10"/><text x="64.7549%" y="831.50"></text></g><g><title>tokio::sync::watch::big_notify::BigNotify::notified (34 samples, 0.05%)</title><rect x="64.5009%" y="869" width="0.0456%" height="15" fill="rgb(246,176,45)" fg:x="48097" fg:w="34"/><text x="64.7509%" y="879.50"></text></g><g><title>tokio::sync::notify::Notify::notified (21 samples, 0.03%)</title><rect x="64.5183%" y="853" width="0.0282%" height="15" fill="rgb(217,170,52)" fg:x="48110" fg:w="21"/><text x="64.7683%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (19 samples, 0.03%)</title><rect x="64.5210%" y="837" width="0.0255%" height="15" fill="rgb(214,203,54)" fg:x="48112" fg:w="19"/><text x="64.7710%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_load (19 samples, 0.03%)</title><rect x="64.5210%" y="821" width="0.0255%" height="15" fill="rgb(248,215,49)" fg:x="48112" fg:w="19"/><text x="64.7710%" y="831.50"></text></g><g><title>tokio::sync::watch::state::AtomicState::load (50 samples, 0.07%)</title><rect x="64.5532%" y="853" width="0.0671%" height="15" fill="rgb(208,46,10)" fg:x="48136" fg:w="50"/><text x="64.8032%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (50 samples, 0.07%)</title><rect x="64.5532%" y="837" width="0.0671%" height="15" fill="rgb(254,5,31)" fg:x="48136" fg:w="50"/><text x="64.8032%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_load (50 samples, 0.07%)</title><rect x="64.5532%" y="821" width="0.0671%" height="15" fill="rgb(222,104,33)" fg:x="48136" fg:w="50"/><text x="64.8032%" y="831.50"></text></g><g><title>tokio::sync::watch::state::StateSnapshot::is_closed (8 samples, 0.01%)</title><rect x="64.6202%" y="853" width="0.0107%" height="15" fill="rgb(248,49,16)" fg:x="48186" fg:w="8"/><text x="64.8702%" y="863.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (2,613 samples, 3.50%)</title><rect x="61.1361%" y="917" width="3.5042%" height="15" fill="rgb(232,198,41)" fg:x="45588" fg:w="2613"/><text x="61.3861%" y="927.50">&lt;to..</text></g><g><title>&lt;remoc::rch::mpsc::receiver::Receiver&lt;T,Codec,_&gt; as serde::de::Deserialize&gt;::deserialize::{{closure}}::{{closure}}::{{closure}} (2,610 samples, 3.50%)</title><rect x="61.1402%" y="901" width="3.5002%" height="15" fill="rgb(214,125,3)" fg:x="45591" fg:w="2610"/><text x="61.3902%" y="911.50">&lt;re..</text></g><g><title>tokio::sync::watch::Receiver&lt;T&gt;::changed::{{closure}} (490 samples, 0.66%)</title><rect x="63.9832%" y="885" width="0.6571%" height="15" fill="rgb(229,220,28)" fg:x="47711" fg:w="490"/><text x="64.2332%" y="895.50"></text></g><g><title>tokio::sync::watch::maybe_changed (70 samples, 0.09%)</title><rect x="64.5465%" y="869" width="0.0939%" height="15" fill="rgb(222,64,37)" fg:x="48131" fg:w="70"/><text x="64.7965%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::util::linked_list::LinkedList&lt;tokio::sync::notify::Waiter,tokio::sync::notify::Waiter&gt;&gt;&gt; (10 samples, 0.01%)</title><rect x="64.6537%" y="853" width="0.0134%" height="15" fill="rgb(249,184,13)" fg:x="48211" fg:w="10"/><text x="64.9037%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::util::linked_list::LinkedList&lt;tokio::sync::notify::Waiter,tokio::sync::notify::Waiter&gt;&gt;&gt; (10 samples, 0.01%)</title><rect x="64.6537%" y="837" width="0.0134%" height="15" fill="rgb(252,176,6)" fg:x="48211" fg:w="10"/><text x="64.9037%" y="847.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.01%)</title><rect x="64.6537%" y="821" width="0.0134%" height="15" fill="rgb(228,153,7)" fg:x="48211" fg:w="10"/><text x="64.9037%" y="831.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (10 samples, 0.01%)</title><rect x="64.6537%" y="805" width="0.0134%" height="15" fill="rgb(242,193,5)" fg:x="48211" fg:w="10"/><text x="64.9037%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (10 samples, 0.01%)</title><rect x="64.6537%" y="789" width="0.0134%" height="15" fill="rgb(232,140,9)" fg:x="48211" fg:w="10"/><text x="64.9037%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (10 samples, 0.01%)</title><rect x="64.6537%" y="773" width="0.0134%" height="15" fill="rgb(213,222,16)" fg:x="48211" fg:w="10"/><text x="64.9037%" y="783.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (11 samples, 0.01%)</title><rect x="64.6712%" y="853" width="0.0148%" height="15" fill="rgb(222,75,50)" fg:x="48224" fg:w="11"/><text x="64.9212%" y="863.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (11 samples, 0.01%)</title><rect x="64.6712%" y="837" width="0.0148%" height="15" fill="rgb(205,180,2)" fg:x="48224" fg:w="11"/><text x="64.9212%" y="847.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (11 samples, 0.01%)</title><rect x="64.6712%" y="821" width="0.0148%" height="15" fill="rgb(216,34,7)" fg:x="48224" fg:w="11"/><text x="64.9212%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (11 samples, 0.01%)</title><rect x="64.6712%" y="805" width="0.0148%" height="15" fill="rgb(253,16,32)" fg:x="48224" fg:w="11"/><text x="64.9212%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (11 samples, 0.01%)</title><rect x="64.6712%" y="789" width="0.0148%" height="15" fill="rgb(208,97,28)" fg:x="48224" fg:w="11"/><text x="64.9212%" y="799.50"></text></g><g><title>&lt;tokio::sync::notify::Notified as core::ops::drop::Drop&gt;::drop (55 samples, 0.07%)</title><rect x="64.6430%" y="869" width="0.0738%" height="15" fill="rgb(225,92,11)" fg:x="48203" fg:w="55"/><text x="64.8930%" y="879.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (20 samples, 0.03%)</title><rect x="64.6899%" y="853" width="0.0268%" height="15" fill="rgb(243,38,12)" fg:x="48238" fg:w="20"/><text x="64.9399%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::watch::Receiver&lt;core::option::Option&lt;remoc::rch::ClosedReason&gt;&gt;::changed::{{closure}}&gt; (66 samples, 0.09%)</title><rect x="64.6403%" y="901" width="0.0885%" height="15" fill="rgb(208,139,16)" fg:x="48201" fg:w="66"/><text x="64.8903%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::notify::Notified&gt; (65 samples, 0.09%)</title><rect x="64.6417%" y="885" width="0.0872%" height="15" fill="rgb(227,24,9)" fg:x="48202" fg:w="65"/><text x="64.8917%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;tokio::sync::notify::Waiter&gt;&gt; (9 samples, 0.01%)</title><rect x="64.7168%" y="869" width="0.0121%" height="15" fill="rgb(206,62,11)" fg:x="48258" fg:w="9"/><text x="64.9668%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::notify::Waiter&gt; (9 samples, 0.01%)</title><rect x="64.7168%" y="853" width="0.0121%" height="15" fill="rgb(228,134,27)" fg:x="48258" fg:w="9"/><text x="64.9668%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (9 samples, 0.01%)</title><rect x="64.7168%" y="837" width="0.0121%" height="15" fill="rgb(205,55,33)" fg:x="48258" fg:w="9"/><text x="64.9668%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (9 samples, 0.01%)</title><rect x="64.7168%" y="821" width="0.0121%" height="15" fill="rgb(243,75,43)" fg:x="48258" fg:w="9"/><text x="64.9668%" y="831.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="64.7168%" y="805" width="0.0121%" height="15" fill="rgb(223,27,42)" fg:x="48258" fg:w="9"/><text x="64.9668%" y="815.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (9 samples, 0.01%)</title><rect x="64.7168%" y="789" width="0.0121%" height="15" fill="rgb(232,189,33)" fg:x="48258" fg:w="9"/><text x="64.9668%" y="799.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::drop_reference (9 samples, 0.01%)</title><rect x="64.7168%" y="773" width="0.0121%" height="15" fill="rgb(210,9,39)" fg:x="48258" fg:w="9"/><text x="64.9668%" y="783.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (9 samples, 0.01%)</title><rect x="64.7168%" y="757" width="0.0121%" height="15" fill="rgb(242,85,26)" fg:x="48258" fg:w="9"/><text x="64.9668%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (9 samples, 0.01%)</title><rect x="64.7168%" y="741" width="0.0121%" height="15" fill="rgb(248,44,4)" fg:x="48258" fg:w="9"/><text x="64.9668%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_sub (9 samples, 0.01%)</title><rect x="64.7168%" y="725" width="0.0121%" height="15" fill="rgb(250,96,46)" fg:x="48258" fg:w="9"/><text x="64.9668%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (8 samples, 0.01%)</title><rect x="64.7382%" y="853" width="0.0107%" height="15" fill="rgb(229,116,26)" fg:x="48274" fg:w="8"/><text x="64.9882%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_store (8 samples, 0.01%)</title><rect x="64.7382%" y="837" width="0.0107%" height="15" fill="rgb(246,94,34)" fg:x="48274" fg:w="8"/><text x="64.9882%" y="847.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (9 samples, 0.01%)</title><rect x="64.7490%" y="853" width="0.0121%" height="15" fill="rgb(251,73,21)" fg:x="48282" fg:w="9"/><text x="64.9990%" y="863.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (9 samples, 0.01%)</title><rect x="64.7490%" y="837" width="0.0121%" height="15" fill="rgb(254,121,25)" fg:x="48282" fg:w="9"/><text x="64.9990%" y="847.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (9 samples, 0.01%)</title><rect x="64.7490%" y="821" width="0.0121%" height="15" fill="rgb(215,161,49)" fg:x="48282" fg:w="9"/><text x="64.9990%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (9 samples, 0.01%)</title><rect x="64.7490%" y="805" width="0.0121%" height="15" fill="rgb(221,43,13)" fg:x="48282" fg:w="9"/><text x="64.9990%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (9 samples, 0.01%)</title><rect x="64.7490%" y="789" width="0.0121%" height="15" fill="rgb(249,5,37)" fg:x="48282" fg:w="9"/><text x="64.9990%" y="799.50"></text></g><g><title>&lt;tokio::sync::notify::Notified as core::ops::drop::Drop&gt;::drop (28 samples, 0.04%)</title><rect x="64.7288%" y="869" width="0.0375%" height="15" fill="rgb(226,25,44)" fg:x="48267" fg:w="28"/><text x="64.9788%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;(tokio::sync::watch::Receiver&lt;core::option::Option&lt;remoc::rch::ClosedReason&gt;&gt;::changed::{{closure}},tokio::sync::watch::Receiver&lt;core::option::Option&lt;remoc::rch::RemoteSendError&gt;&gt;::changed::{{closure}},remoc::rch::base::receiver::Receiver&lt;core::result::Result&lt;aes_cbc::Msg,remoc::rch::mpsc::receiver::RecvError&gt;,remoc::codec::bincode::Bincode&gt;::recv::{{closure}})&gt; (101 samples, 0.14%)</title><rect x="64.6403%" y="917" width="0.1354%" height="15" fill="rgb(238,189,16)" fg:x="48201" fg:w="101"/><text x="64.8903%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::watch::Receiver&lt;core::option::Option&lt;remoc::rch::RemoteSendError&gt;&gt;::changed::{{closure}}&gt; (35 samples, 0.05%)</title><rect x="64.7288%" y="901" width="0.0469%" height="15" fill="rgb(251,186,8)" fg:x="48267" fg:w="35"/><text x="64.9788%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::notify::Notified&gt; (35 samples, 0.05%)</title><rect x="64.7288%" y="885" width="0.0469%" height="15" fill="rgb(254,34,31)" fg:x="48267" fg:w="35"/><text x="64.9788%" y="895.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (10 samples, 0.01%)</title><rect x="64.9018%" y="757" width="0.0134%" height="15" fill="rgb(225,215,27)" fg:x="48396" fg:w="10"/><text x="65.1518%" y="767.50"></text></g><g><title>syscall (10 samples, 0.01%)</title><rect x="64.9018%" y="741" width="0.0134%" height="15" fill="rgb(221,192,48)" fg:x="48396" fg:w="10"/><text x="65.1518%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (30 samples, 0.04%)</title><rect x="64.9152%" y="757" width="0.0402%" height="15" fill="rgb(219,137,20)" fg:x="48406" fg:w="30"/><text x="65.1652%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_load (30 samples, 0.04%)</title><rect x="64.9152%" y="741" width="0.0402%" height="15" fill="rgb(219,84,11)" fg:x="48406" fg:w="30"/><text x="65.1652%" y="751.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (15 samples, 0.02%)</title><rect x="64.9555%" y="757" width="0.0201%" height="15" fill="rgb(224,10,23)" fg:x="48436" fg:w="15"/><text x="65.2055%" y="767.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (9 samples, 0.01%)</title><rect x="64.9635%" y="741" width="0.0121%" height="15" fill="rgb(248,22,39)" fg:x="48442" fg:w="9"/><text x="65.2135%" y="751.50"></text></g><g><title>clock_gettime (9 samples, 0.01%)</title><rect x="64.9635%" y="725" width="0.0121%" height="15" fill="rgb(212,154,20)" fg:x="48442" fg:w="9"/><text x="65.2135%" y="735.50"></text></g><g><title>__vdso_clock_gettime (8 samples, 0.01%)</title><rect x="64.9649%" y="709" width="0.0107%" height="15" fill="rgb(236,199,50)" fg:x="48443" fg:w="8"/><text x="65.2149%" y="719.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (49 samples, 0.07%)</title><rect x="64.9756%" y="757" width="0.0657%" height="15" fill="rgb(211,9,17)" fg:x="48451" fg:w="49"/><text x="65.2256%" y="767.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (27 samples, 0.04%)</title><rect x="65.0051%" y="741" width="0.0362%" height="15" fill="rgb(243,216,36)" fg:x="48473" fg:w="27"/><text x="65.2551%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (27 samples, 0.04%)</title><rect x="65.0051%" y="725" width="0.0362%" height="15" fill="rgb(250,2,10)" fg:x="48473" fg:w="27"/><text x="65.2551%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (27 samples, 0.04%)</title><rect x="65.0051%" y="709" width="0.0362%" height="15" fill="rgb(226,50,48)" fg:x="48473" fg:w="27"/><text x="65.2551%" y="719.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::notify_one (124 samples, 0.17%)</title><rect x="64.8898%" y="821" width="0.1663%" height="15" fill="rgb(243,81,16)" fg:x="48387" fg:w="124"/><text x="65.1398%" y="831.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one (124 samples, 0.17%)</title><rect x="64.8898%" y="805" width="0.1663%" height="15" fill="rgb(250,14,2)" fg:x="48387" fg:w="124"/><text x="65.1398%" y="815.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (117 samples, 0.16%)</title><rect x="64.8992%" y="789" width="0.1569%" height="15" fill="rgb(233,135,29)" fg:x="48394" fg:w="117"/><text x="65.1492%" y="799.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (117 samples, 0.16%)</title><rect x="64.8992%" y="773" width="0.1569%" height="15" fill="rgb(224,64,43)" fg:x="48394" fg:w="117"/><text x="65.1492%" y="783.50"></text></g><g><title>parking_lot_core::parking_lot::unlock_bucket_pair (11 samples, 0.01%)</title><rect x="65.0413%" y="757" width="0.0148%" height="15" fill="rgb(238,84,13)" fg:x="48500" fg:w="11"/><text x="65.2913%" y="767.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (11 samples, 0.01%)</title><rect x="65.0413%" y="741" width="0.0148%" height="15" fill="rgb(253,48,26)" fg:x="48500" fg:w="11"/><text x="65.2913%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (11 samples, 0.01%)</title><rect x="65.0413%" y="725" width="0.0148%" height="15" fill="rgb(205,223,31)" fg:x="48500" fg:w="11"/><text x="65.2913%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_sub (11 samples, 0.01%)</title><rect x="65.0413%" y="709" width="0.0148%" height="15" fill="rgb(221,41,32)" fg:x="48500" fg:w="11"/><text x="65.2913%" y="719.50"></text></g><g><title>tokio::runtime::park::wake (157 samples, 0.21%)</title><rect x="64.8616%" y="853" width="0.2105%" height="15" fill="rgb(213,158,31)" fg:x="48366" fg:w="157"/><text x="65.1116%" y="863.50"></text></g><g><title>tokio::runtime::park::Inner::unpark (150 samples, 0.20%)</title><rect x="64.8710%" y="837" width="0.2012%" height="15" fill="rgb(245,126,43)" fg:x="48373" fg:w="150"/><text x="65.1210%" y="847.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (12 samples, 0.02%)</title><rect x="65.0561%" y="821" width="0.0161%" height="15" fill="rgb(227,7,22)" fg:x="48511" fg:w="12"/><text x="65.3061%" y="831.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (12 samples, 0.02%)</title><rect x="65.0561%" y="805" width="0.0161%" height="15" fill="rgb(252,90,44)" fg:x="48511" fg:w="12"/><text x="65.3061%" y="815.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (12 samples, 0.02%)</title><rect x="65.0561%" y="789" width="0.0161%" height="15" fill="rgb(253,91,0)" fg:x="48511" fg:w="12"/><text x="65.3061%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (12 samples, 0.02%)</title><rect x="65.0561%" y="773" width="0.0161%" height="15" fill="rgb(252,175,49)" fg:x="48511" fg:w="12"/><text x="65.3061%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (12 samples, 0.02%)</title><rect x="65.0561%" y="757" width="0.0161%" height="15" fill="rgb(246,150,1)" fg:x="48511" fg:w="12"/><text x="65.3061%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (28 samples, 0.04%)</title><rect x="65.0815%" y="837" width="0.0375%" height="15" fill="rgb(241,192,25)" fg:x="48530" fg:w="28"/><text x="65.3315%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_add (28 samples, 0.04%)</title><rect x="65.0815%" y="821" width="0.0375%" height="15" fill="rgb(239,187,11)" fg:x="48530" fg:w="28"/><text x="65.3315%" y="831.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::write (65 samples, 0.09%)</title><rect x="65.1191%" y="837" width="0.0872%" height="15" fill="rgb(218,202,51)" fg:x="48558" fg:w="65"/><text x="65.3691%" y="847.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::set_ready (59 samples, 0.08%)</title><rect x="65.1271%" y="821" width="0.0791%" height="15" fill="rgb(225,176,8)" fg:x="48564" fg:w="59"/><text x="65.3771%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (57 samples, 0.08%)</title><rect x="65.1298%" y="805" width="0.0764%" height="15" fill="rgb(219,122,41)" fg:x="48566" fg:w="57"/><text x="65.3798%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_or (57 samples, 0.08%)</title><rect x="65.1298%" y="789" width="0.0764%" height="15" fill="rgb(248,140,20)" fg:x="48566" fg:w="57"/><text x="65.3798%" y="799.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::is_at_index (14 samples, 0.02%)</title><rect x="65.2103%" y="821" width="0.0188%" height="15" fill="rgb(245,41,37)" fg:x="48626" fg:w="14"/><text x="65.4603%" y="831.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::push (120 samples, 0.16%)</title><rect x="65.0721%" y="853" width="0.1609%" height="15" fill="rgb(235,82,39)" fg:x="48523" fg:w="120"/><text x="65.3221%" y="863.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (20 samples, 0.03%)</title><rect x="65.2063%" y="837" width="0.0268%" height="15" fill="rgb(230,108,42)" fg:x="48623" fg:w="20"/><text x="65.4563%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_and (12 samples, 0.02%)</title><rect x="65.2358%" y="821" width="0.0161%" height="15" fill="rgb(215,150,50)" fg:x="48645" fg:w="12"/><text x="65.4858%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_and (12 samples, 0.02%)</title><rect x="65.2358%" y="805" width="0.0161%" height="15" fill="rgb(233,212,5)" fg:x="48645" fg:w="12"/><text x="65.4858%" y="815.50"></text></g><g><title>tokio::sync::mpsc::bounded::Permit&lt;T&gt;::send (303 samples, 0.41%)</title><rect x="64.8536%" y="901" width="0.4063%" height="15" fill="rgb(245,80,22)" fg:x="48360" fg:w="303"/><text x="65.1036%" y="911.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (303 samples, 0.41%)</title><rect x="64.8536%" y="885" width="0.4063%" height="15" fill="rgb(238,129,16)" fg:x="48360" fg:w="303"/><text x="65.1036%" y="895.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (301 samples, 0.40%)</title><rect x="64.8562%" y="869" width="0.4037%" height="15" fill="rgb(240,19,0)" fg:x="48362" fg:w="301"/><text x="65.1062%" y="879.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (20 samples, 0.03%)</title><rect x="65.2331%" y="853" width="0.0268%" height="15" fill="rgb(232,42,35)" fg:x="48643" fg:w="20"/><text x="65.4831%" y="863.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::take_waker (19 samples, 0.03%)</title><rect x="65.2344%" y="837" width="0.0255%" height="15" fill="rgb(223,130,24)" fg:x="48644" fg:w="19"/><text x="65.4844%" y="847.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (14 samples, 0.02%)</title><rect x="65.2773%" y="869" width="0.0188%" height="15" fill="rgb(237,16,22)" fg:x="48676" fg:w="14"/><text x="65.5273%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (22 samples, 0.03%)</title><rect x="65.3095%" y="837" width="0.0295%" height="15" fill="rgb(248,192,20)" fg:x="48700" fg:w="22"/><text x="65.5595%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (22 samples, 0.03%)</title><rect x="65.3095%" y="821" width="0.0295%" height="15" fill="rgb(233,167,2)" fg:x="48700" fg:w="22"/><text x="65.5595%" y="831.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (54 samples, 0.07%)</title><rect x="65.2961%" y="869" width="0.0724%" height="15" fill="rgb(252,71,44)" fg:x="48690" fg:w="54"/><text x="65.5461%" y="879.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::poll_acquire (50 samples, 0.07%)</title><rect x="65.3015%" y="853" width="0.0671%" height="15" fill="rgb(238,37,47)" fg:x="48694" fg:w="50"/><text x="65.5515%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (22 samples, 0.03%)</title><rect x="65.3390%" y="837" width="0.0295%" height="15" fill="rgb(214,202,54)" fg:x="48722" fg:w="22"/><text x="65.5890%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_load (22 samples, 0.03%)</title><rect x="65.3390%" y="821" width="0.0295%" height="15" fill="rgb(254,165,40)" fg:x="48722" fg:w="22"/><text x="65.5890%" y="831.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::acquire (17 samples, 0.02%)</title><rect x="65.3685%" y="869" width="0.0228%" height="15" fill="rgb(246,173,38)" fg:x="48744" fg:w="17"/><text x="65.6185%" y="879.50"></text></g><g><title>tokio::sync::batch_semaphore::Acquire::new (8 samples, 0.01%)</title><rect x="65.3806%" y="853" width="0.0107%" height="15" fill="rgb(215,3,27)" fg:x="48753" fg:w="8"/><text x="65.6306%" y="863.50"></text></g><g><title>&lt;remoc::rch::mpsc::receiver::Receiver&lt;T,Codec,_&gt; as serde::de::Deserialize&gt;::deserialize::{{closure}}::{{closure}} (3,351 samples, 4.49%)</title><rect x="60.9001%" y="933" width="4.4939%" height="15" fill="rgb(239,169,51)" fg:x="45412" fg:w="3351"/><text x="61.1501%" y="943.50">&lt;remo..</text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::send::{{closure}} (458 samples, 0.61%)</title><rect x="64.7798%" y="917" width="0.6142%" height="15" fill="rgb(212,5,25)" fg:x="48305" fg:w="458"/><text x="65.0298%" y="927.50"></text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::reserve::{{closure}} (100 samples, 0.13%)</title><rect x="65.2599%" y="901" width="0.1341%" height="15" fill="rgb(243,45,17)" fg:x="48663" fg:w="100"/><text x="65.5099%" y="911.50"></text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::reserve_inner::{{closure}} (99 samples, 0.13%)</title><rect x="65.2612%" y="885" width="0.1328%" height="15" fill="rgb(242,97,9)" fg:x="48664" fg:w="99"/><text x="65.5112%" y="895.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (101 samples, 0.14%)</title><rect x="65.7641%" y="917" width="0.1354%" height="15" fill="rgb(228,71,31)" fg:x="49039" fg:w="101"/><text x="66.0141%" y="927.50"></text></g><g><title>[libc.so.6] (101 samples, 0.14%)</title><rect x="65.7641%" y="901" width="0.1354%" height="15" fill="rgb(252,184,16)" fg:x="49039" fg:w="101"/><text x="66.0141%" y="911.50"></text></g><g><title>remoc::chmux::credit::ChannelCreditReturner::return_flush (25 samples, 0.03%)</title><rect x="66.1504%" y="853" width="0.0335%" height="15" fill="rgb(236,169,46)" fg:x="49327" fg:w="25"/><text x="66.4004%" y="863.50"></text></g><g><title>remoc::chmux::credit::ChannelCreditReturner::return_flush::{{closure}} (35 samples, 0.05%)</title><rect x="66.1839%" y="853" width="0.0469%" height="15" fill="rgb(207,17,47)" fg:x="49352" fg:w="35"/><text x="66.4339%" y="863.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (19 samples, 0.03%)</title><rect x="66.3113%" y="773" width="0.0255%" height="15" fill="rgb(206,201,28)" fg:x="49447" fg:w="19"/><text x="66.5613%" y="783.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (19 samples, 0.03%)</title><rect x="66.3113%" y="757" width="0.0255%" height="15" fill="rgb(224,184,23)" fg:x="49447" fg:w="19"/><text x="66.5613%" y="767.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (19 samples, 0.03%)</title><rect x="66.3113%" y="741" width="0.0255%" height="15" fill="rgb(208,139,48)" fg:x="49447" fg:w="19"/><text x="66.5613%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::coop::RestoreOnPending&gt; (12 samples, 0.02%)</title><rect x="66.3368%" y="773" width="0.0161%" height="15" fill="rgb(208,130,10)" fg:x="49466" fg:w="12"/><text x="66.5868%" y="783.50"></text></g><g><title>&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (12 samples, 0.02%)</title><rect x="66.3368%" y="757" width="0.0161%" height="15" fill="rgb(211,213,45)" fg:x="49466" fg:w="12"/><text x="66.5868%" y="767.50"></text></g><g><title>&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (25 samples, 0.03%)</title><rect x="66.3904%" y="709" width="0.0335%" height="15" fill="rgb(235,100,30)" fg:x="49506" fg:w="25"/><text x="66.6404%" y="719.50"></text></g><g><title>tokio::sync::mpsc::block::is_ready (40 samples, 0.05%)</title><rect x="66.4280%" y="709" width="0.0536%" height="15" fill="rgb(206,144,31)" fg:x="49534" fg:w="40"/><text x="66.6780%" y="719.50"></text></g><g><title>tokio::sync::mpsc::block::is_tx_closed (10 samples, 0.01%)</title><rect x="66.4816%" y="709" width="0.0134%" height="15" fill="rgb(224,200,26)" fg:x="49574" fg:w="10"/><text x="66.7316%" y="719.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::read (86 samples, 0.12%)</title><rect x="66.3824%" y="725" width="0.1153%" height="15" fill="rgb(247,104,53)" fg:x="49500" fg:w="86"/><text x="66.6324%" y="735.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (188 samples, 0.25%)</title><rect x="66.3716%" y="741" width="0.2521%" height="15" fill="rgb(220,14,17)" fg:x="49492" fg:w="188"/><text x="66.6216%" y="751.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::try_advancing_head (87 samples, 0.12%)</title><rect x="66.5071%" y="725" width="0.1167%" height="15" fill="rgb(230,140,40)" fg:x="49593" fg:w="87"/><text x="66.7571%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (51 samples, 0.07%)</title><rect x="66.6331%" y="709" width="0.0684%" height="15" fill="rgb(229,2,41)" fg:x="49687" fg:w="51"/><text x="66.8831%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (51 samples, 0.07%)</title><rect x="66.6331%" y="693" width="0.0684%" height="15" fill="rgb(232,89,16)" fg:x="49687" fg:w="51"/><text x="66.8831%" y="703.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (18 samples, 0.02%)</title><rect x="66.7015%" y="565" width="0.0241%" height="15" fill="rgb(247,59,52)" fg:x="49738" fg:w="18"/><text x="66.9515%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (18 samples, 0.02%)</title><rect x="66.7015%" y="549" width="0.0241%" height="15" fill="rgb(226,110,21)" fg:x="49738" fg:w="18"/><text x="66.9515%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_add (18 samples, 0.02%)</title><rect x="66.7015%" y="533" width="0.0241%" height="15" fill="rgb(224,176,43)" fg:x="49738" fg:w="18"/><text x="66.9515%" y="543.50"></text></g><g><title>&lt;&amp;core::task::wake::Waker as tokio::sync::task::atomic_waker::WakerRef&gt;::into_waker (19 samples, 0.03%)</title><rect x="66.7015%" y="613" width="0.0255%" height="15" fill="rgb(221,73,6)" fg:x="49738" fg:w="19"/><text x="66.9515%" y="623.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (19 samples, 0.03%)</title><rect x="66.7015%" y="597" width="0.0255%" height="15" fill="rgb(232,78,19)" fg:x="49738" fg:w="19"/><text x="66.9515%" y="607.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (19 samples, 0.03%)</title><rect x="66.7015%" y="581" width="0.0255%" height="15" fill="rgb(233,112,48)" fg:x="49738" fg:w="19"/><text x="66.9515%" y="591.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (288 samples, 0.39%)</title><rect x="66.3529%" y="773" width="0.3862%" height="15" fill="rgb(243,131,47)" fg:x="49478" fg:w="288"/><text x="66.6029%" y="783.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (287 samples, 0.38%)</title><rect x="66.3542%" y="757" width="0.3849%" height="15" fill="rgb(226,51,1)" fg:x="49479" fg:w="287"/><text x="66.6042%" y="767.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (86 samples, 0.12%)</title><rect x="66.6238%" y="741" width="0.1153%" height="15" fill="rgb(247,58,7)" fg:x="49680" fg:w="86"/><text x="66.8738%" y="751.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register (86 samples, 0.12%)</title><rect x="66.6238%" y="725" width="0.1153%" height="15" fill="rgb(209,7,32)" fg:x="49680" fg:w="86"/><text x="66.8738%" y="735.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::catch_unwind (28 samples, 0.04%)</title><rect x="66.7015%" y="709" width="0.0375%" height="15" fill="rgb(209,39,41)" fg:x="49738" fg:w="28"/><text x="66.9515%" y="719.50"></text></g><g><title>std::panic::catch_unwind (28 samples, 0.04%)</title><rect x="66.7015%" y="693" width="0.0375%" height="15" fill="rgb(226,182,46)" fg:x="49738" fg:w="28"/><text x="66.9515%" y="703.50"></text></g><g><title>std::panicking::try (28 samples, 0.04%)</title><rect x="66.7015%" y="677" width="0.0375%" height="15" fill="rgb(230,219,10)" fg:x="49738" fg:w="28"/><text x="66.9515%" y="687.50"></text></g><g><title>std::panicking::try::do_call (28 samples, 0.04%)</title><rect x="66.7015%" y="661" width="0.0375%" height="15" fill="rgb(227,175,30)" fg:x="49738" fg:w="28"/><text x="66.9515%" y="671.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (28 samples, 0.04%)</title><rect x="66.7015%" y="645" width="0.0375%" height="15" fill="rgb(217,2,50)" fg:x="49738" fg:w="28"/><text x="66.9515%" y="655.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::{{closure}} (28 samples, 0.04%)</title><rect x="66.7015%" y="629" width="0.0375%" height="15" fill="rgb(229,160,0)" fg:x="49738" fg:w="28"/><text x="66.9515%" y="639.50"></text></g><g><title>core::mem::drop (9 samples, 0.01%)</title><rect x="66.7270%" y="613" width="0.0121%" height="15" fill="rgb(207,78,37)" fg:x="49757" fg:w="9"/><text x="66.9770%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (9 samples, 0.01%)</title><rect x="66.7270%" y="597" width="0.0121%" height="15" fill="rgb(225,57,0)" fg:x="49757" fg:w="9"/><text x="66.9770%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (9 samples, 0.01%)</title><rect x="66.7270%" y="581" width="0.0121%" height="15" fill="rgb(232,154,2)" fg:x="49757" fg:w="9"/><text x="66.9770%" y="591.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="66.7270%" y="565" width="0.0121%" height="15" fill="rgb(241,212,25)" fg:x="49757" fg:w="9"/><text x="66.9770%" y="575.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (9 samples, 0.01%)</title><rect x="66.7270%" y="549" width="0.0121%" height="15" fill="rgb(226,69,20)" fg:x="49757" fg:w="9"/><text x="66.9770%" y="559.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::drop_reference (9 samples, 0.01%)</title><rect x="66.7270%" y="533" width="0.0121%" height="15" fill="rgb(247,184,54)" fg:x="49757" fg:w="9"/><text x="66.9770%" y="543.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (9 samples, 0.01%)</title><rect x="66.7270%" y="517" width="0.0121%" height="15" fill="rgb(210,145,0)" fg:x="49757" fg:w="9"/><text x="66.9770%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (9 samples, 0.01%)</title><rect x="66.7270%" y="501" width="0.0121%" height="15" fill="rgb(253,82,12)" fg:x="49757" fg:w="9"/><text x="66.9770%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_sub (9 samples, 0.01%)</title><rect x="66.7270%" y="485" width="0.0121%" height="15" fill="rgb(245,42,11)" fg:x="49757" fg:w="9"/><text x="66.9770%" y="495.50"></text></g><g><title>tokio::runtime::context::budget (43 samples, 0.06%)</title><rect x="66.7538%" y="757" width="0.0577%" height="15" fill="rgb(219,147,32)" fg:x="49777" fg:w="43"/><text x="67.0038%" y="767.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (43 samples, 0.06%)</title><rect x="66.7538%" y="741" width="0.0577%" height="15" fill="rgb(246,12,7)" fg:x="49777" fg:w="43"/><text x="67.0038%" y="751.50"></text></g><g><title>tokio::runtime::context::budget::{{closure}} (40 samples, 0.05%)</title><rect x="66.7579%" y="725" width="0.0536%" height="15" fill="rgb(243,50,9)" fg:x="49780" fg:w="40"/><text x="67.0079%" y="735.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::{{closure}} (40 samples, 0.05%)</title><rect x="66.7579%" y="709" width="0.0536%" height="15" fill="rgb(219,149,6)" fg:x="49780" fg:w="40"/><text x="67.0079%" y="719.50"></text></g><g><title>tokio::runtime::coop::Budget::decrement (22 samples, 0.03%)</title><rect x="66.7820%" y="693" width="0.0295%" height="15" fill="rgb(241,51,42)" fg:x="49798" fg:w="22"/><text x="67.0320%" y="703.50"></text></g><g><title>remoc::chmux::receiver::Receiver::recv::{{closure}} (673 samples, 0.90%)</title><rect x="65.9371%" y="885" width="0.9025%" height="15" fill="rgb(226,128,27)" fg:x="49168" fg:w="673"/><text x="66.1871%" y="895.50"></text></g><g><title>remoc::chmux::receiver::Receiver::recv_any::{{closure}} (592 samples, 0.79%)</title><rect x="66.0458%" y="869" width="0.7939%" height="15" fill="rgb(244,144,4)" fg:x="49249" fg:w="592"/><text x="66.2958%" y="879.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (454 samples, 0.61%)</title><rect x="66.2308%" y="853" width="0.6088%" height="15" fill="rgb(221,4,13)" fg:x="49387" fg:w="454"/><text x="66.4808%" y="863.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (425 samples, 0.57%)</title><rect x="66.2697%" y="837" width="0.5699%" height="15" fill="rgb(208,170,28)" fg:x="49416" fg:w="425"/><text x="66.5197%" y="847.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (417 samples, 0.56%)</title><rect x="66.2804%" y="821" width="0.5592%" height="15" fill="rgb(226,131,13)" fg:x="49424" fg:w="417"/><text x="66.5304%" y="831.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (417 samples, 0.56%)</title><rect x="66.2804%" y="805" width="0.5592%" height="15" fill="rgb(215,72,41)" fg:x="49424" fg:w="417"/><text x="66.5304%" y="815.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (417 samples, 0.56%)</title><rect x="66.2804%" y="789" width="0.5592%" height="15" fill="rgb(243,108,20)" fg:x="49424" fg:w="417"/><text x="66.5304%" y="799.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (75 samples, 0.10%)</title><rect x="66.7391%" y="773" width="0.1006%" height="15" fill="rgb(230,189,17)" fg:x="49766" fg:w="75"/><text x="66.9891%" y="783.50"></text></g><g><title>tokio::runtime::coop::Budget::unconstrained (21 samples, 0.03%)</title><rect x="66.8115%" y="757" width="0.0282%" height="15" fill="rgb(220,50,17)" fg:x="49820" fg:w="21"/><text x="67.0615%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (10 samples, 0.01%)</title><rect x="66.9550%" y="821" width="0.0134%" height="15" fill="rgb(248,152,48)" fg:x="49927" fg:w="10"/><text x="67.2050%" y="831.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (10 samples, 0.01%)</title><rect x="66.9550%" y="805" width="0.0134%" height="15" fill="rgb(244,91,11)" fg:x="49927" fg:w="10"/><text x="67.2050%" y="815.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (10 samples, 0.01%)</title><rect x="66.9550%" y="789" width="0.0134%" height="15" fill="rgb(220,157,5)" fg:x="49927" fg:w="10"/><text x="67.2050%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::coop::RestoreOnPending&gt; (13 samples, 0.02%)</title><rect x="66.9684%" y="821" width="0.0174%" height="15" fill="rgb(253,137,8)" fg:x="49937" fg:w="13"/><text x="67.2184%" y="831.50"></text></g><g><title>&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (13 samples, 0.02%)</title><rect x="66.9684%" y="805" width="0.0174%" height="15" fill="rgb(217,137,51)" fg:x="49937" fg:w="13"/><text x="67.2184%" y="815.50"></text></g><g><title>&lt;tokio::sync::mpsc::bounded::Semaphore as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (41 samples, 0.05%)</title><rect x="67.0314%" y="789" width="0.0550%" height="15" fill="rgb(218,209,53)" fg:x="49984" fg:w="41"/><text x="67.2814%" y="799.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (41 samples, 0.05%)</title><rect x="67.0314%" y="773" width="0.0550%" height="15" fill="rgb(249,137,25)" fg:x="49984" fg:w="41"/><text x="67.2814%" y="783.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (39 samples, 0.05%)</title><rect x="67.0341%" y="757" width="0.0523%" height="15" fill="rgb(239,155,26)" fg:x="49986" fg:w="39"/><text x="67.2841%" y="767.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (39 samples, 0.05%)</title><rect x="67.0341%" y="741" width="0.0523%" height="15" fill="rgb(227,85,46)" fg:x="49986" fg:w="39"/><text x="67.2841%" y="751.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (39 samples, 0.05%)</title><rect x="67.0341%" y="725" width="0.0523%" height="15" fill="rgb(251,107,43)" fg:x="49986" fg:w="39"/><text x="67.2841%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (39 samples, 0.05%)</title><rect x="67.0341%" y="709" width="0.0523%" height="15" fill="rgb(234,170,33)" fg:x="49986" fg:w="39"/><text x="67.2841%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (39 samples, 0.05%)</title><rect x="67.0341%" y="693" width="0.0523%" height="15" fill="rgb(206,29,35)" fg:x="49986" fg:w="39"/><text x="67.2841%" y="703.50"></text></g><g><title>tokio::runtime::coop::RestoreOnPending::made_progress (8 samples, 0.01%)</title><rect x="67.0878%" y="789" width="0.0107%" height="15" fill="rgb(227,138,25)" fg:x="50026" fg:w="8"/><text x="67.3378%" y="799.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (8 samples, 0.01%)</title><rect x="67.0878%" y="773" width="0.0107%" height="15" fill="rgb(249,131,35)" fg:x="50026" fg:w="8"/><text x="67.3378%" y="783.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (8 samples, 0.01%)</title><rect x="67.0878%" y="757" width="0.0107%" height="15" fill="rgb(239,6,40)" fg:x="50026" fg:w="8"/><text x="67.3378%" y="767.50"></text></g><g><title>core::mem::replace (8 samples, 0.01%)</title><rect x="67.0878%" y="741" width="0.0107%" height="15" fill="rgb(246,136,47)" fg:x="50026" fg:w="8"/><text x="67.3378%" y="751.50"></text></g><g><title>core::ptr::write (8 samples, 0.01%)</title><rect x="67.0878%" y="725" width="0.0107%" height="15" fill="rgb(253,58,26)" fg:x="50026" fg:w="8"/><text x="67.3378%" y="735.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (38 samples, 0.05%)</title><rect x="67.0985%" y="789" width="0.0510%" height="15" fill="rgb(237,141,10)" fg:x="50034" fg:w="38"/><text x="67.3485%" y="799.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (95 samples, 0.13%)</title><rect x="67.1830%" y="757" width="0.1274%" height="15" fill="rgb(234,156,12)" fg:x="50097" fg:w="95"/><text x="67.4330%" y="767.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::read::{{closure}} (95 samples, 0.13%)</title><rect x="67.1830%" y="741" width="0.1274%" height="15" fill="rgb(243,224,36)" fg:x="50097" fg:w="95"/><text x="67.4330%" y="751.50"></text></g><g><title>core::ptr::read (95 samples, 0.13%)</title><rect x="67.1830%" y="725" width="0.1274%" height="15" fill="rgb(205,229,51)" fg:x="50097" fg:w="95"/><text x="67.4330%" y="735.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (95 samples, 0.13%)</title><rect x="67.1830%" y="709" width="0.1274%" height="15" fill="rgb(223,189,4)" fg:x="50097" fg:w="95"/><text x="67.4330%" y="719.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::read (117 samples, 0.16%)</title><rect x="67.1669%" y="773" width="0.1569%" height="15" fill="rgb(249,167,54)" fg:x="50085" fg:w="117"/><text x="67.4169%" y="783.50"></text></g><g><title>core::cmp::PartialEq::ne (11 samples, 0.01%)</title><rect x="67.3251%" y="757" width="0.0148%" height="15" fill="rgb(218,34,28)" fg:x="50203" fg:w="11"/><text x="67.5751%" y="767.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::reclaim_blocks (22 samples, 0.03%)</title><rect x="67.3238%" y="773" width="0.0295%" height="15" fill="rgb(232,109,42)" fg:x="50202" fg:w="22"/><text x="67.5738%" y="783.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (287 samples, 0.38%)</title><rect x="67.1494%" y="789" width="0.3849%" height="15" fill="rgb(248,214,46)" fg:x="50072" fg:w="287"/><text x="67.3994%" y="799.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::try_advancing_head (135 samples, 0.18%)</title><rect x="67.3533%" y="773" width="0.1810%" height="15" fill="rgb(244,216,40)" fg:x="50224" fg:w="135"/><text x="67.6033%" y="783.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::is_at_index (34 samples, 0.05%)</title><rect x="67.4887%" y="757" width="0.0456%" height="15" fill="rgb(231,226,31)" fg:x="50325" fg:w="34"/><text x="67.7387%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (64 samples, 0.09%)</title><rect x="67.5397%" y="757" width="0.0858%" height="15" fill="rgb(238,38,43)" fg:x="50363" fg:w="64"/><text x="67.7897%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (64 samples, 0.09%)</title><rect x="67.5397%" y="741" width="0.0858%" height="15" fill="rgb(208,88,43)" fg:x="50363" fg:w="64"/><text x="67.7897%" y="751.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (490 samples, 0.66%)</title><rect x="66.9858%" y="821" width="0.6571%" height="15" fill="rgb(205,136,37)" fg:x="49950" fg:w="490"/><text x="67.2358%" y="831.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (487 samples, 0.65%)</title><rect x="66.9899%" y="805" width="0.6531%" height="15" fill="rgb(237,34,14)" fg:x="49953" fg:w="487"/><text x="67.2399%" y="815.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (81 samples, 0.11%)</title><rect x="67.5343%" y="789" width="0.1086%" height="15" fill="rgb(236,193,44)" fg:x="50359" fg:w="81"/><text x="67.7843%" y="799.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register (80 samples, 0.11%)</title><rect x="67.5357%" y="773" width="0.1073%" height="15" fill="rgb(231,48,10)" fg:x="50360" fg:w="80"/><text x="67.7857%" y="783.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::catch_unwind (12 samples, 0.02%)</title><rect x="67.6269%" y="757" width="0.0161%" height="15" fill="rgb(213,141,34)" fg:x="50428" fg:w="12"/><text x="67.8769%" y="767.50"></text></g><g><title>std::panic::catch_unwind (12 samples, 0.02%)</title><rect x="67.6269%" y="741" width="0.0161%" height="15" fill="rgb(249,130,34)" fg:x="50428" fg:w="12"/><text x="67.8769%" y="751.50"></text></g><g><title>std::panicking::try (12 samples, 0.02%)</title><rect x="67.6269%" y="725" width="0.0161%" height="15" fill="rgb(219,42,41)" fg:x="50428" fg:w="12"/><text x="67.8769%" y="735.50"></text></g><g><title>std::panicking::try::do_call (12 samples, 0.02%)</title><rect x="67.6269%" y="709" width="0.0161%" height="15" fill="rgb(224,100,54)" fg:x="50428" fg:w="12"/><text x="67.8769%" y="719.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (12 samples, 0.02%)</title><rect x="67.6269%" y="693" width="0.0161%" height="15" fill="rgb(229,200,27)" fg:x="50428" fg:w="12"/><text x="67.8769%" y="703.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::{{closure}} (12 samples, 0.02%)</title><rect x="67.6269%" y="677" width="0.0161%" height="15" fill="rgb(217,118,10)" fg:x="50428" fg:w="12"/><text x="67.8769%" y="687.50"></text></g><g><title>&lt;&amp;core::task::wake::Waker as tokio::sync::task::atomic_waker::WakerRef&gt;::into_waker (12 samples, 0.02%)</title><rect x="67.6269%" y="661" width="0.0161%" height="15" fill="rgb(206,22,3)" fg:x="50428" fg:w="12"/><text x="67.8769%" y="671.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (12 samples, 0.02%)</title><rect x="67.6269%" y="645" width="0.0161%" height="15" fill="rgb(232,163,46)" fg:x="50428" fg:w="12"/><text x="67.8769%" y="655.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (12 samples, 0.02%)</title><rect x="67.6269%" y="629" width="0.0161%" height="15" fill="rgb(206,95,13)" fg:x="50428" fg:w="12"/><text x="67.8769%" y="639.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (12 samples, 0.02%)</title><rect x="67.6269%" y="613" width="0.0161%" height="15" fill="rgb(253,154,18)" fg:x="50428" fg:w="12"/><text x="67.8769%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (12 samples, 0.02%)</title><rect x="67.6269%" y="597" width="0.0161%" height="15" fill="rgb(219,32,23)" fg:x="50428" fg:w="12"/><text x="67.8769%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_add (12 samples, 0.02%)</title><rect x="67.6269%" y="581" width="0.0161%" height="15" fill="rgb(230,191,45)" fg:x="50428" fg:w="12"/><text x="67.8769%" y="591.50"></text></g><g><title>tokio::runtime::context::budget (38 samples, 0.05%)</title><rect x="67.6590%" y="805" width="0.0510%" height="15" fill="rgb(229,64,36)" fg:x="50452" fg:w="38"/><text x="67.9090%" y="815.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (38 samples, 0.05%)</title><rect x="67.6590%" y="789" width="0.0510%" height="15" fill="rgb(205,129,25)" fg:x="50452" fg:w="38"/><text x="67.9090%" y="799.50"></text></g><g><title>tokio::runtime::context::budget::{{closure}} (33 samples, 0.04%)</title><rect x="67.6658%" y="773" width="0.0443%" height="15" fill="rgb(254,112,7)" fg:x="50457" fg:w="33"/><text x="67.9158%" y="783.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::{{closure}} (33 samples, 0.04%)</title><rect x="67.6658%" y="757" width="0.0443%" height="15" fill="rgb(226,53,48)" fg:x="50457" fg:w="33"/><text x="67.9158%" y="767.50"></text></g><g><title>tokio::runtime::coop::Budget::decrement (13 samples, 0.02%)</title><rect x="67.6926%" y="741" width="0.0174%" height="15" fill="rgb(214,153,38)" fg:x="50477" fg:w="13"/><text x="67.9426%" y="751.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (1,354 samples, 1.82%)</title><rect x="65.8996%" y="917" width="1.8158%" height="15" fill="rgb(243,101,7)" fg:x="49140" fg:w="1354"/><text x="66.1496%" y="927.50">&lt;..</text></g><g><title>&lt;remoc::rch::mpsc::receiver::Receiver&lt;T,Codec,_&gt; as serde::ser::Serialize&gt;::serialize::{{closure}}::{{closure}}::{{closure}} (1,351 samples, 1.81%)</title><rect x="65.9036%" y="901" width="1.8118%" height="15" fill="rgb(240,140,22)" fg:x="49143" fg:w="1351"/><text x="66.1536%" y="911.50">&lt;..</text></g><g><title>tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::recv::{{closure}} (653 samples, 0.88%)</title><rect x="66.8397%" y="885" width="0.8757%" height="15" fill="rgb(235,114,2)" fg:x="49841" fg:w="653"/><text x="67.0897%" y="895.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (582 samples, 0.78%)</title><rect x="66.9349%" y="869" width="0.7805%" height="15" fill="rgb(242,59,12)" fg:x="49912" fg:w="582"/><text x="67.1849%" y="879.50"></text></g><g><title>tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::recv::{{closure}}::{{closure}} (578 samples, 0.78%)</title><rect x="66.9402%" y="853" width="0.7751%" height="15" fill="rgb(252,134,9)" fg:x="49916" fg:w="578"/><text x="67.1902%" y="863.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (575 samples, 0.77%)</title><rect x="66.9443%" y="837" width="0.7711%" height="15" fill="rgb(236,4,44)" fg:x="49919" fg:w="575"/><text x="67.1943%" y="847.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (54 samples, 0.07%)</title><rect x="67.6430%" y="821" width="0.0724%" height="15" fill="rgb(254,172,41)" fg:x="50440" fg:w="54"/><text x="67.8930%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;remoc::rch::base::sender::Sender&lt;core::result::Result&lt;gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;,remoc::rch::mpsc::receiver::RecvError&gt;,remoc::codec::bincode::Bincode&gt;::send::{{closure}}&gt; (24 samples, 0.03%)</title><rect x="67.7234%" y="917" width="0.0322%" height="15" fill="rgb(244,63,20)" fg:x="50500" fg:w="24"/><text x="67.9734%" y="927.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (9 samples, 0.01%)</title><rect x="68.0466%" y="901" width="0.0121%" height="15" fill="rgb(250,73,31)" fg:x="50741" fg:w="9"/><text x="68.2966%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (20 samples, 0.03%)</title><rect x="68.0667%" y="901" width="0.0268%" height="15" fill="rgb(241,38,36)" fg:x="50756" fg:w="20"/><text x="68.3167%" y="911.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (43 samples, 0.06%)</title><rect x="68.1043%" y="885" width="0.0577%" height="15" fill="rgb(245,211,2)" fg:x="50784" fg:w="43"/><text x="68.3543%" y="895.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (36 samples, 0.05%)</title><rect x="68.1137%" y="869" width="0.0483%" height="15" fill="rgb(206,120,28)" fg:x="50791" fg:w="36"/><text x="68.3637%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (24 samples, 0.03%)</title><rect x="68.1298%" y="853" width="0.0322%" height="15" fill="rgb(211,59,34)" fg:x="50803" fg:w="24"/><text x="68.3798%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (24 samples, 0.03%)</title><rect x="68.1298%" y="837" width="0.0322%" height="15" fill="rgb(233,168,5)" fg:x="50803" fg:w="24"/><text x="68.3798%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (24 samples, 0.03%)</title><rect x="68.1298%" y="821" width="0.0322%" height="15" fill="rgb(234,33,13)" fg:x="50803" fg:w="24"/><text x="68.3798%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (24 samples, 0.03%)</title><rect x="68.1298%" y="805" width="0.0322%" height="15" fill="rgb(231,150,26)" fg:x="50803" fg:w="24"/><text x="68.3798%" y="815.50"></text></g><g><title>alloc::alloc::alloc (24 samples, 0.03%)</title><rect x="68.1298%" y="789" width="0.0322%" height="15" fill="rgb(217,191,4)" fg:x="50803" fg:w="24"/><text x="68.3798%" y="799.50"></text></g><g><title>malloc (15 samples, 0.02%)</title><rect x="68.1418%" y="773" width="0.0201%" height="15" fill="rgb(246,198,38)" fg:x="50812" fg:w="15"/><text x="68.3918%" y="783.50"></text></g><g><title>bytes::bytes_mut::BytesMut::get_vec_pos (10 samples, 0.01%)</title><rect x="68.1713%" y="885" width="0.0134%" height="15" fill="rgb(245,64,37)" fg:x="50834" fg:w="10"/><text x="68.4213%" y="895.50"></text></g><g><title>bytes::bytes_mut::BytesMut::freeze (96 samples, 0.13%)</title><rect x="68.0936%" y="901" width="0.1287%" height="15" fill="rgb(250,30,36)" fg:x="50776" fg:w="96"/><text x="68.3436%" y="911.50"></text></g><g><title>bytes::bytes_mut::rebuild_vec (28 samples, 0.04%)</title><rect x="68.1847%" y="885" width="0.0375%" height="15" fill="rgb(217,86,53)" fg:x="50844" fg:w="28"/><text x="68.4347%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u32&gt;&gt; (8 samples, 0.01%)</title><rect x="68.2290%" y="821" width="0.0107%" height="15" fill="rgb(228,157,16)" fg:x="50877" fg:w="8"/><text x="68.4790%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u32&gt;&gt; (8 samples, 0.01%)</title><rect x="68.2290%" y="805" width="0.0107%" height="15" fill="rgb(217,59,31)" fg:x="50877" fg:w="8"/><text x="68.4790%" y="815.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="68.2290%" y="789" width="0.0107%" height="15" fill="rgb(237,138,41)" fg:x="50877" fg:w="8"/><text x="68.4790%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;gmw::protocols::boolean_gmw::SimdMsg&gt;&gt; (11 samples, 0.01%)</title><rect x="68.2277%" y="853" width="0.0148%" height="15" fill="rgb(227,91,49)" fg:x="50876" fg:w="11"/><text x="68.4777%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;gmw::protocols::boolean_gmw::SimdMsg&gt; (10 samples, 0.01%)</title><rect x="68.2290%" y="837" width="0.0134%" height="15" fill="rgb(247,21,44)" fg:x="50877" fg:w="10"/><text x="68.4790%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (111 samples, 0.15%)</title><rect x="68.2424%" y="789" width="0.1489%" height="15" fill="rgb(219,210,51)" fg:x="50887" fg:w="111"/><text x="68.4924%" y="799.50"></text></g><g><title>alloc::alloc::dealloc (111 samples, 0.15%)</title><rect x="68.2424%" y="773" width="0.1489%" height="15" fill="rgb(209,140,6)" fg:x="50887" fg:w="111"/><text x="68.4924%" y="783.50"></text></g><g><title>cfree (102 samples, 0.14%)</title><rect x="68.2545%" y="757" width="0.1368%" height="15" fill="rgb(221,188,24)" fg:x="50896" fg:w="102"/><text x="68.5045%" y="767.50"></text></g><g><title>[libc.so.6] (36 samples, 0.05%)</title><rect x="68.3430%" y="741" width="0.0483%" height="15" fill="rgb(232,154,20)" fg:x="50962" fg:w="36"/><text x="68.5930%" y="751.50"></text></g><g><title>core::mem::drop (125 samples, 0.17%)</title><rect x="68.2250%" y="901" width="0.1676%" height="15" fill="rgb(244,137,50)" fg:x="50874" fg:w="125"/><text x="68.4750%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;,remoc::rch::mpsc::receiver::RecvError&gt;&gt; (125 samples, 0.17%)</title><rect x="68.2250%" y="885" width="0.1676%" height="15" fill="rgb(225,185,43)" fg:x="50874" fg:w="125"/><text x="68.4750%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt; (123 samples, 0.16%)</title><rect x="68.2277%" y="869" width="0.1650%" height="15" fill="rgb(213,205,38)" fg:x="50876" fg:w="123"/><text x="68.4777%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;gmw::protocols::boolean_gmw::Msg&gt; (112 samples, 0.15%)</title><rect x="68.2424%" y="853" width="0.1502%" height="15" fill="rgb(236,73,12)" fg:x="50887" fg:w="112"/><text x="68.4924%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (112 samples, 0.15%)</title><rect x="68.2424%" y="837" width="0.1502%" height="15" fill="rgb(235,219,13)" fg:x="50887" fg:w="112"/><text x="68.4924%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (112 samples, 0.15%)</title><rect x="68.2424%" y="821" width="0.1502%" height="15" fill="rgb(218,59,36)" fg:x="50887" fg:w="112"/><text x="68.4924%" y="831.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (112 samples, 0.15%)</title><rect x="68.2424%" y="805" width="0.1502%" height="15" fill="rgb(205,110,39)" fg:x="50887" fg:w="112"/><text x="68.4924%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(remoc::chmux::port_allocator::PortNumber,alloc::boxed::Box&lt;dyn core::ops::function::FnOnce&lt;(remoc::chmux::client::Connect,)&gt;+Output = core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = ()+core::marker::Send&gt;&gt;+core::marker::Send&gt;)&gt;&gt; (14 samples, 0.02%)</title><rect x="68.3939%" y="901" width="0.0188%" height="15" fill="rgb(218,206,42)" fg:x="51000" fg:w="14"/><text x="68.6439%" y="911.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.02%)</title><rect x="68.3939%" y="885" width="0.0188%" height="15" fill="rgb(248,125,24)" fg:x="51000" fg:w="14"/><text x="68.6439%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(remoc::chmux::port_allocator::PortNumber,alloc::boxed::Box&lt;dyn core::ops::function::FnOnce&lt;(remoc::chmux::client::Connect,)&gt;+Output = core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = ()+core::marker::Send&gt;&gt;+core::marker::Send&gt;),alloc::alloc::Global&gt;&gt; (11 samples, 0.01%)</title><rect x="68.3980%" y="869" width="0.0148%" height="15" fill="rgb(242,28,27)" fg:x="51003" fg:w="11"/><text x="68.6480%" y="879.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.01%)</title><rect x="68.3980%" y="853" width="0.0148%" height="15" fill="rgb(216,228,15)" fg:x="51003" fg:w="11"/><text x="68.6480%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::zip::Zip&lt;alloc::vec::into_iter::IntoIter&lt;alloc::boxed::Box&lt;dyn core::ops::function::FnOnce&lt;(remoc::chmux::client::Connect,)&gt;+Output = core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = ()+core::marker::Send&gt;&gt;+core::marker::Send&gt;&gt;,alloc::vec::into_iter::IntoIter&lt;remoc::chmux::client::Connect&gt;&gt;&gt; (12 samples, 0.02%)</title><rect x="68.4127%" y="901" width="0.0161%" height="15" fill="rgb(235,116,46)" fg:x="51014" fg:w="12"/><text x="68.6627%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;remoc::chmux::client::Connect&gt;&gt; (8 samples, 0.01%)</title><rect x="68.4181%" y="885" width="0.0107%" height="15" fill="rgb(224,18,32)" fg:x="51018" fg:w="8"/><text x="68.6681%" y="895.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="68.4181%" y="869" width="0.0107%" height="15" fill="rgb(252,5,12)" fg:x="51018" fg:w="8"/><text x="68.6681%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;remoc::chmux::any_storage::AnyStorage&gt; (11 samples, 0.01%)</title><rect x="68.4288%" y="901" width="0.0148%" height="15" fill="rgb(251,36,5)" fg:x="51026" fg:w="11"/><text x="68.6788%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;std::collections::hash::map::HashMap&lt;uuid::Uuid,alloc::sync::Arc&lt;tokio::sync::rwlock::RwLock&lt;core::option::Option&lt;alloc::boxed::Box&lt;dyn core::any::Any+core::marker::Send+core::marker::Sync&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; (11 samples, 0.01%)</title><rect x="68.4288%" y="885" width="0.0148%" height="15" fill="rgb(217,53,14)" fg:x="51026" fg:w="11"/><text x="68.6788%" y="895.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.01%)</title><rect x="68.4288%" y="869" width="0.0148%" height="15" fill="rgb(215,86,45)" fg:x="51026" fg:w="11"/><text x="68.6788%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;remoc::chmux::port_allocator::PortAllocator&gt; (12 samples, 0.02%)</title><rect x="68.4436%" y="901" width="0.0161%" height="15" fill="rgb(242,169,11)" fg:x="51037" fg:w="12"/><text x="68.6936%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;remoc::chmux::port_allocator::PortAllocatorInner&gt;&gt;&gt; (12 samples, 0.02%)</title><rect x="68.4436%" y="885" width="0.0161%" height="15" fill="rgb(211,213,45)" fg:x="51037" fg:w="12"/><text x="68.6936%" y="895.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.02%)</title><rect x="68.4436%" y="869" width="0.0161%" height="15" fill="rgb(205,88,11)" fg:x="51037" fg:w="12"/><text x="68.6936%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (12 samples, 0.02%)</title><rect x="68.4436%" y="853" width="0.0161%" height="15" fill="rgb(252,69,26)" fg:x="51037" fg:w="12"/><text x="68.6936%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_sub (12 samples, 0.02%)</title><rect x="68.4436%" y="837" width="0.0161%" height="15" fill="rgb(246,123,37)" fg:x="51037" fg:w="12"/><text x="68.6936%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;remoc::chmux::sender::Sender::send::{{closure}}&gt; (18 samples, 0.02%)</title><rect x="68.4597%" y="901" width="0.0241%" height="15" fill="rgb(212,205,5)" fg:x="51049" fg:w="18"/><text x="68.7097%" y="911.50"></text></g><g><title>remoc::chmux::sender::Sender::port_allocator (146 samples, 0.20%)</title><rect x="68.4892%" y="901" width="0.1958%" height="15" fill="rgb(253,148,0)" fg:x="51071" fg:w="146"/><text x="68.7392%" y="911.50"></text></g><g><title>&lt;remoc::chmux::port_allocator::PortAllocator as core::clone::Clone&gt;::clone (146 samples, 0.20%)</title><rect x="68.4892%" y="885" width="0.1958%" height="15" fill="rgb(239,22,4)" fg:x="51071" fg:w="146"/><text x="68.7392%" y="895.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (83 samples, 0.11%)</title><rect x="68.5737%" y="869" width="0.1113%" height="15" fill="rgb(226,26,53)" fg:x="51134" fg:w="83"/><text x="68.8237%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (83 samples, 0.11%)</title><rect x="68.5737%" y="853" width="0.1113%" height="15" fill="rgb(225,229,45)" fg:x="51134" fg:w="83"/><text x="68.8237%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_add (83 samples, 0.11%)</title><rect x="68.5737%" y="837" width="0.1113%" height="15" fill="rgb(220,60,37)" fg:x="51134" fg:w="83"/><text x="68.8237%" y="847.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (16 samples, 0.02%)</title><rect x="68.8499%" y="885" width="0.0215%" height="15" fill="rgb(217,180,35)" fg:x="51340" fg:w="16"/><text x="69.0999%" y="895.50"></text></g><g><title>core::cmp::Ord::min (8 samples, 0.01%)</title><rect x="68.8808%" y="885" width="0.0107%" height="15" fill="rgb(229,7,53)" fg:x="51363" fg:w="8"/><text x="69.1308%" y="895.50"></text></g><g><title>remoc::chmux::credit::AssignedCredits::is_empty (50 samples, 0.07%)</title><rect x="68.9116%" y="885" width="0.0671%" height="15" fill="rgb(254,137,3)" fg:x="51386" fg:w="50"/><text x="69.1616%" y="895.50"></text></g><g><title>remoc::chmux::credit::CreditUser::request (23 samples, 0.03%)</title><rect x="68.9827%" y="885" width="0.0308%" height="15" fill="rgb(215,140,41)" fg:x="51439" fg:w="23"/><text x="69.2327%" y="895.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::clone::Clone&gt;::clone (10 samples, 0.01%)</title><rect x="69.0873%" y="869" width="0.0134%" height="15" fill="rgb(250,80,15)" fg:x="51517" fg:w="10"/><text x="69.3373%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (8 samples, 0.01%)</title><rect x="69.0900%" y="853" width="0.0107%" height="15" fill="rgb(252,191,6)" fg:x="51519" fg:w="8"/><text x="69.3400%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_add (8 samples, 0.01%)</title><rect x="69.0900%" y="837" width="0.0107%" height="15" fill="rgb(246,217,18)" fg:x="51519" fg:w="8"/><text x="69.3400%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (34 samples, 0.05%)</title><rect x="69.1047%" y="837" width="0.0456%" height="15" fill="rgb(223,93,7)" fg:x="51530" fg:w="34"/><text x="69.3547%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (34 samples, 0.05%)</title><rect x="69.1047%" y="821" width="0.0456%" height="15" fill="rgb(225,55,52)" fg:x="51530" fg:w="34"/><text x="69.3547%" y="831.50"></text></g><g><title>alloc::sync::Weak&lt;T&gt;::upgrade (74 samples, 0.10%)</title><rect x="69.1007%" y="869" width="0.0992%" height="15" fill="rgb(240,31,24)" fg:x="51527" fg:w="74"/><text x="69.3507%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_update (72 samples, 0.10%)</title><rect x="69.1034%" y="853" width="0.0966%" height="15" fill="rgb(205,56,52)" fg:x="51529" fg:w="72"/><text x="69.3534%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (37 samples, 0.05%)</title><rect x="69.1503%" y="837" width="0.0496%" height="15" fill="rgb(246,146,12)" fg:x="51564" fg:w="37"/><text x="69.4003%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_load (37 samples, 0.05%)</title><rect x="69.1503%" y="821" width="0.0496%" height="15" fill="rgb(239,84,36)" fg:x="51564" fg:w="37"/><text x="69.4003%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;remoc::chmux::credit::ChannelCreditsInner&gt;&gt;&gt; (10 samples, 0.01%)</title><rect x="69.1999%" y="869" width="0.0134%" height="15" fill="rgb(207,41,40)" fg:x="51601" fg:w="10"/><text x="69.4499%" y="879.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.01%)</title><rect x="69.1999%" y="853" width="0.0134%" height="15" fill="rgb(241,179,25)" fg:x="51601" fg:w="10"/><text x="69.4499%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;remoc::chmux::credit::ChannelCreditsInner&gt;&gt; (20 samples, 0.03%)</title><rect x="69.2133%" y="869" width="0.0268%" height="15" fill="rgb(210,0,34)" fg:x="51611" fg:w="20"/><text x="69.4633%" y="879.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.03%)</title><rect x="69.2133%" y="853" width="0.0268%" height="15" fill="rgb(225,217,29)" fg:x="51611" fg:w="20"/><text x="69.4633%" y="863.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (25 samples, 0.03%)</title><rect x="69.2455%" y="853" width="0.0335%" height="15" fill="rgb(216,191,38)" fg:x="51635" fg:w="25"/><text x="69.4955%" y="863.50"></text></g><g><title>std::sync::poison::Flag::guard (25 samples, 0.03%)</title><rect x="69.2455%" y="837" width="0.0335%" height="15" fill="rgb(232,140,52)" fg:x="51635" fg:w="25"/><text x="69.4955%" y="847.50"></text></g><g><title>std::thread::panicking (20 samples, 0.03%)</title><rect x="69.2522%" y="821" width="0.0268%" height="15" fill="rgb(223,158,51)" fg:x="51640" fg:w="20"/><text x="69.5022%" y="831.50"></text></g><g><title>std::panicking::panicking (20 samples, 0.03%)</title><rect x="69.2522%" y="805" width="0.0268%" height="15" fill="rgb(235,29,51)" fg:x="51640" fg:w="20"/><text x="69.5022%" y="815.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (20 samples, 0.03%)</title><rect x="69.2522%" y="789" width="0.0268%" height="15" fill="rgb(215,181,18)" fg:x="51640" fg:w="20"/><text x="69.5022%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (20 samples, 0.03%)</title><rect x="69.2522%" y="773" width="0.0268%" height="15" fill="rgb(227,125,34)" fg:x="51640" fg:w="20"/><text x="69.5022%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_load (20 samples, 0.03%)</title><rect x="69.2522%" y="757" width="0.0268%" height="15" fill="rgb(230,197,49)" fg:x="51640" fg:w="20"/><text x="69.5022%" y="767.50"></text></g><g><title>remoc::chmux::credit::CreditUser::request::{{closure}} (203 samples, 0.27%)</title><rect x="69.0135%" y="885" width="0.2722%" height="15" fill="rgb(239,141,16)" fg:x="51462" fg:w="203"/><text x="69.2635%" y="895.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (30 samples, 0.04%)</title><rect x="69.2455%" y="869" width="0.0402%" height="15" fill="rgb(225,105,43)" fg:x="51635" fg:w="30"/><text x="69.4955%" y="879.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::drop_reference (10 samples, 0.01%)</title><rect x="69.3448%" y="789" width="0.0134%" height="15" fill="rgb(214,131,14)" fg:x="51709" fg:w="10"/><text x="69.5948%" y="799.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (10 samples, 0.01%)</title><rect x="69.3448%" y="773" width="0.0134%" height="15" fill="rgb(229,177,11)" fg:x="51709" fg:w="10"/><text x="69.5948%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (10 samples, 0.01%)</title><rect x="69.3448%" y="757" width="0.0134%" height="15" fill="rgb(231,180,14)" fg:x="51709" fg:w="10"/><text x="69.5948%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_sub (10 samples, 0.01%)</title><rect x="69.3448%" y="741" width="0.0134%" height="15" fill="rgb(232,88,2)" fg:x="51709" fg:w="10"/><text x="69.5948%" y="751.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (97 samples, 0.13%)</title><rect x="69.3635%" y="773" width="0.1301%" height="15" fill="rgb(205,220,8)" fg:x="51723" fg:w="97"/><text x="69.6135%" y="783.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (91 samples, 0.12%)</title><rect x="69.3716%" y="757" width="0.1220%" height="15" fill="rgb(225,23,53)" fg:x="51729" fg:w="91"/><text x="69.6216%" y="767.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (89 samples, 0.12%)</title><rect x="69.3743%" y="741" width="0.1194%" height="15" fill="rgb(213,62,29)" fg:x="51731" fg:w="89"/><text x="69.6243%" y="751.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::{{closure}} (58 samples, 0.08%)</title><rect x="69.4158%" y="725" width="0.0778%" height="15" fill="rgb(227,75,7)" fg:x="51762" fg:w="58"/><text x="69.6658%" y="735.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (45 samples, 0.06%)</title><rect x="69.4333%" y="709" width="0.0603%" height="15" fill="rgb(207,105,14)" fg:x="51775" fg:w="45"/><text x="69.6833%" y="719.50"></text></g><g><title>tokio::runtime::task::Task&lt;S&gt;::from_raw (34 samples, 0.05%)</title><rect x="69.5084%" y="757" width="0.0456%" height="15" fill="rgb(245,62,29)" fg:x="51831" fg:w="34"/><text x="69.7584%" y="767.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::from_raw (34 samples, 0.05%)</title><rect x="69.5084%" y="741" width="0.0456%" height="15" fill="rgb(236,202,4)" fg:x="51831" fg:w="34"/><text x="69.7584%" y="751.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (148 samples, 0.20%)</title><rect x="69.3582%" y="789" width="0.1985%" height="15" fill="rgb(250,67,1)" fg:x="51719" fg:w="148"/><text x="69.6082%" y="799.50"></text></g><g><title>tokio::runtime::task::raw::schedule (47 samples, 0.06%)</title><rect x="69.4936%" y="773" width="0.0630%" height="15" fill="rgb(253,115,44)" fg:x="51820" fg:w="47"/><text x="69.7436%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (41 samples, 0.05%)</title><rect x="69.5607%" y="757" width="0.0550%" height="15" fill="rgb(251,139,18)" fg:x="51870" fg:w="41"/><text x="69.8107%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (41 samples, 0.05%)</title><rect x="69.5607%" y="741" width="0.0550%" height="15" fill="rgb(218,22,32)" fg:x="51870" fg:w="41"/><text x="69.8107%" y="751.50"></text></g><g><title>tokio::runtime::task::state::State::load (21 samples, 0.03%)</title><rect x="69.6157%" y="757" width="0.0282%" height="15" fill="rgb(243,53,5)" fg:x="51911" fg:w="21"/><text x="69.8657%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (21 samples, 0.03%)</title><rect x="69.6157%" y="741" width="0.0282%" height="15" fill="rgb(227,56,16)" fg:x="51911" fg:w="21"/><text x="69.8657%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (21 samples, 0.03%)</title><rect x="69.6157%" y="725" width="0.0282%" height="15" fill="rgb(245,53,0)" fg:x="51911" fg:w="21"/><text x="69.8657%" y="735.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (232 samples, 0.31%)</title><rect x="69.3448%" y="821" width="0.3111%" height="15" fill="rgb(216,170,35)" fg:x="51709" fg:w="232"/><text x="69.5948%" y="831.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (232 samples, 0.31%)</title><rect x="69.3448%" y="805" width="0.3111%" height="15" fill="rgb(211,200,8)" fg:x="51709" fg:w="232"/><text x="69.5948%" y="815.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (74 samples, 0.10%)</title><rect x="69.5566%" y="789" width="0.0992%" height="15" fill="rgb(228,204,44)" fg:x="51867" fg:w="74"/><text x="69.8066%" y="799.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (71 samples, 0.10%)</title><rect x="69.5607%" y="773" width="0.0952%" height="15" fill="rgb(214,121,17)" fg:x="51870" fg:w="71"/><text x="69.8107%" y="783.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val::{{closure}} (9 samples, 0.01%)</title><rect x="69.6438%" y="757" width="0.0121%" height="15" fill="rgb(233,64,38)" fg:x="51932" fg:w="9"/><text x="69.8938%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (46 samples, 0.06%)</title><rect x="69.6666%" y="805" width="0.0617%" height="15" fill="rgb(253,54,19)" fg:x="51949" fg:w="46"/><text x="69.9166%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_add (46 samples, 0.06%)</title><rect x="69.6666%" y="789" width="0.0617%" height="15" fill="rgb(253,94,18)" fg:x="51949" fg:w="46"/><text x="69.9166%" y="799.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::write (54 samples, 0.07%)</title><rect x="69.7283%" y="805" width="0.0724%" height="15" fill="rgb(227,57,52)" fg:x="51995" fg:w="54"/><text x="69.9783%" y="815.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::set_ready (52 samples, 0.07%)</title><rect x="69.7310%" y="789" width="0.0697%" height="15" fill="rgb(230,228,50)" fg:x="51997" fg:w="52"/><text x="69.9810%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (52 samples, 0.07%)</title><rect x="69.7310%" y="773" width="0.0697%" height="15" fill="rgb(217,205,27)" fg:x="51997" fg:w="52"/><text x="69.9810%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_or (52 samples, 0.07%)</title><rect x="69.7310%" y="757" width="0.0697%" height="15" fill="rgb(252,71,50)" fg:x="51997" fg:w="52"/><text x="69.9810%" y="767.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::is_at_index (39 samples, 0.05%)</title><rect x="69.8074%" y="789" width="0.0523%" height="15" fill="rgb(209,86,4)" fg:x="52054" fg:w="39"/><text x="70.0574%" y="799.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::push (153 samples, 0.21%)</title><rect x="69.6559%" y="821" width="0.2052%" height="15" fill="rgb(229,94,0)" fg:x="51941" fg:w="153"/><text x="69.9059%" y="831.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (45 samples, 0.06%)</title><rect x="69.8007%" y="805" width="0.0603%" height="15" fill="rgb(252,223,21)" fg:x="52049" fg:w="45"/><text x="70.0507%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (15 samples, 0.02%)</title><rect x="69.8731%" y="789" width="0.0201%" height="15" fill="rgb(230,210,4)" fg:x="52103" fg:w="15"/><text x="70.1231%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_or (15 samples, 0.02%)</title><rect x="69.8731%" y="773" width="0.0201%" height="15" fill="rgb(240,149,38)" fg:x="52103" fg:w="15"/><text x="70.1231%" y="783.50"></text></g><g><title>tokio::sync::mpsc::bounded::Permit&lt;T&gt;::send (414 samples, 0.56%)</title><rect x="69.3421%" y="869" width="0.5552%" height="15" fill="rgb(254,105,20)" fg:x="51707" fg:w="414"/><text x="69.5921%" y="879.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (414 samples, 0.56%)</title><rect x="69.3421%" y="853" width="0.5552%" height="15" fill="rgb(253,87,46)" fg:x="51707" fg:w="414"/><text x="69.5921%" y="863.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (414 samples, 0.56%)</title><rect x="69.3421%" y="837" width="0.5552%" height="15" fill="rgb(253,116,33)" fg:x="51707" fg:w="414"/><text x="69.5921%" y="847.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (27 samples, 0.04%)</title><rect x="69.8611%" y="821" width="0.0362%" height="15" fill="rgb(229,198,5)" fg:x="52094" fg:w="27"/><text x="70.1111%" y="831.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::take_waker (27 samples, 0.04%)</title><rect x="69.8611%" y="805" width="0.0362%" height="15" fill="rgb(242,38,37)" fg:x="52094" fg:w="27"/><text x="70.1111%" y="815.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (10 samples, 0.01%)</title><rect x="69.9201%" y="837" width="0.0134%" height="15" fill="rgb(242,69,53)" fg:x="52138" fg:w="10"/><text x="70.1701%" y="847.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (11 samples, 0.01%)</title><rect x="69.9362%" y="821" width="0.0148%" height="15" fill="rgb(249,80,16)" fg:x="52150" fg:w="11"/><text x="70.1862%" y="831.50"></text></g><g><title>tokio::runtime::context::budget (11 samples, 0.01%)</title><rect x="69.9362%" y="805" width="0.0148%" height="15" fill="rgb(206,128,11)" fg:x="52150" fg:w="11"/><text x="70.1862%" y="815.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (11 samples, 0.01%)</title><rect x="69.9362%" y="789" width="0.0148%" height="15" fill="rgb(212,35,20)" fg:x="52150" fg:w="11"/><text x="70.1862%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (36 samples, 0.05%)</title><rect x="69.9523%" y="805" width="0.0483%" height="15" fill="rgb(236,79,13)" fg:x="52162" fg:w="36"/><text x="70.2023%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (36 samples, 0.05%)</title><rect x="69.9523%" y="789" width="0.0483%" height="15" fill="rgb(233,123,3)" fg:x="52162" fg:w="36"/><text x="70.2023%" y="799.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (83 samples, 0.11%)</title><rect x="69.9335%" y="837" width="0.1113%" height="15" fill="rgb(214,93,52)" fg:x="52148" fg:w="83"/><text x="70.1835%" y="847.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::poll_acquire (70 samples, 0.09%)</title><rect x="69.9509%" y="821" width="0.0939%" height="15" fill="rgb(251,37,40)" fg:x="52161" fg:w="70"/><text x="70.2009%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (33 samples, 0.04%)</title><rect x="70.0005%" y="805" width="0.0443%" height="15" fill="rgb(227,80,54)" fg:x="52198" fg:w="33"/><text x="70.2505%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_load (33 samples, 0.04%)</title><rect x="70.0005%" y="789" width="0.0443%" height="15" fill="rgb(254,48,11)" fg:x="52198" fg:w="33"/><text x="70.2505%" y="799.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::acquire (21 samples, 0.03%)</title><rect x="70.0502%" y="837" width="0.0282%" height="15" fill="rgb(235,193,26)" fg:x="52235" fg:w="21"/><text x="70.3002%" y="847.50"></text></g><g><title>remoc::chmux::sender::Sender::send::{{closure}} (1,034 samples, 1.39%)</title><rect x="68.6943%" y="901" width="1.3867%" height="15" fill="rgb(229,99,21)" fg:x="51224" fg:w="1034"/><text x="68.9443%" y="911.50"></text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::send::{{closure}} (593 samples, 0.80%)</title><rect x="69.2858%" y="885" width="0.7952%" height="15" fill="rgb(211,140,41)" fg:x="51665" fg:w="593"/><text x="69.5358%" y="895.50"></text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::reserve::{{closure}} (137 samples, 0.18%)</title><rect x="69.8973%" y="869" width="0.1837%" height="15" fill="rgb(240,227,30)" fg:x="52121" fg:w="137"/><text x="70.1473%" y="879.50"></text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::reserve_inner::{{closure}} (132 samples, 0.18%)</title><rect x="69.9040%" y="853" width="0.1770%" height="15" fill="rgb(215,224,45)" fg:x="52126" fg:w="132"/><text x="70.1540%" y="863.50"></text></g><g><title>remoc::chmux::sender::Sender::storage (9 samples, 0.01%)</title><rect x="70.0810%" y="901" width="0.0121%" height="15" fill="rgb(206,123,31)" fg:x="52258" fg:w="9"/><text x="70.3310%" y="911.50"></text></g><g><title>&lt;remoc::chmux::any_storage::AnyStorage as core::clone::Clone&gt;::clone (9 samples, 0.01%)</title><rect x="70.0810%" y="885" width="0.0121%" height="15" fill="rgb(210,138,16)" fg:x="52258" fg:w="9"/><text x="70.3310%" y="895.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (9 samples, 0.01%)</title><rect x="70.0810%" y="869" width="0.0121%" height="15" fill="rgb(228,57,28)" fg:x="52258" fg:w="9"/><text x="70.3310%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (9 samples, 0.01%)</title><rect x="70.0810%" y="853" width="0.0121%" height="15" fill="rgb(242,170,10)" fg:x="52258" fg:w="9"/><text x="70.3310%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_add (9 samples, 0.01%)</title><rect x="70.0810%" y="837" width="0.0121%" height="15" fill="rgb(228,214,39)" fg:x="52258" fg:w="9"/><text x="70.3310%" y="847.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_struct_variant (20 samples, 0.03%)</title><rect x="70.1494%" y="773" width="0.0268%" height="15" fill="rgb(218,179,33)" fg:x="52309" fg:w="20"/><text x="70.3994%" y="783.50"></text></g><g><title>&lt;bincode::config::int::VarintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u32 (20 samples, 0.03%)</title><rect x="70.1494%" y="757" width="0.0268%" height="15" fill="rgb(235,193,39)" fg:x="52309" fg:w="20"/><text x="70.3994%" y="767.50"></text></g><g><title>bincode::config::int::VarintEncoding::serialize_varint (20 samples, 0.03%)</title><rect x="70.1494%" y="741" width="0.0268%" height="15" fill="rgb(219,221,36)" fg:x="52309" fg:w="20"/><text x="70.3994%" y="751.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_byte (20 samples, 0.03%)</title><rect x="70.1494%" y="725" width="0.0268%" height="15" fill="rgb(248,218,19)" fg:x="52309" fg:w="20"/><text x="70.3994%" y="735.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u8 (20 samples, 0.03%)</title><rect x="70.1494%" y="709" width="0.0268%" height="15" fill="rgb(205,50,9)" fg:x="52309" fg:w="20"/><text x="70.3994%" y="719.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (20 samples, 0.03%)</title><rect x="70.1494%" y="693" width="0.0268%" height="15" fill="rgb(238,81,28)" fg:x="52309" fg:w="20"/><text x="70.3994%" y="703.50"></text></g><g><title>std::io::Write::write_all (18 samples, 0.02%)</title><rect x="70.1521%" y="677" width="0.0241%" height="15" fill="rgb(235,110,19)" fg:x="52311" fg:w="18"/><text x="70.4021%" y="687.50"></text></g><g><title>&lt;remoc::rch::base::io::LimitedBytesWriter as std::io::Write&gt;::write (18 samples, 0.02%)</title><rect x="70.1521%" y="661" width="0.0241%" height="15" fill="rgb(214,7,14)" fg:x="52311" fg:w="18"/><text x="70.4021%" y="671.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (18 samples, 0.02%)</title><rect x="70.1521%" y="645" width="0.0241%" height="15" fill="rgb(211,77,3)" fg:x="52311" fg:w="18"/><text x="70.4021%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.01%)</title><rect x="70.1615%" y="629" width="0.0148%" height="15" fill="rgb(229,5,9)" fg:x="52318" fg:w="11"/><text x="70.4115%" y="639.50"></text></g><g><title>[libc.so.6] (11 samples, 0.01%)</title><rect x="70.1615%" y="613" width="0.0148%" height="15" fill="rgb(225,90,11)" fg:x="52318" fg:w="11"/><text x="70.4115%" y="623.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_seq (35 samples, 0.05%)</title><rect x="70.1856%" y="725" width="0.0469%" height="15" fill="rgb(242,56,8)" fg:x="52336" fg:w="35"/><text x="70.4356%" y="735.50"></text></g><g><title>bincode::config::int::IntEncoding::serialize_len (35 samples, 0.05%)</title><rect x="70.1856%" y="709" width="0.0469%" height="15" fill="rgb(249,212,39)" fg:x="52336" fg:w="35"/><text x="70.4356%" y="719.50"></text></g><g><title>&lt;bincode::config::int::VarintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u64 (35 samples, 0.05%)</title><rect x="70.1856%" y="693" width="0.0469%" height="15" fill="rgb(236,90,9)" fg:x="52336" fg:w="35"/><text x="70.4356%" y="703.50"></text></g><g><title>bincode::config::int::VarintEncoding::serialize_varint (35 samples, 0.05%)</title><rect x="70.1856%" y="677" width="0.0469%" height="15" fill="rgb(206,88,35)" fg:x="52336" fg:w="35"/><text x="70.4356%" y="687.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_byte (34 samples, 0.05%)</title><rect x="70.1869%" y="661" width="0.0456%" height="15" fill="rgb(205,126,30)" fg:x="52337" fg:w="34"/><text x="70.4369%" y="671.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u8 (34 samples, 0.05%)</title><rect x="70.1869%" y="645" width="0.0456%" height="15" fill="rgb(230,176,12)" fg:x="52337" fg:w="34"/><text x="70.4369%" y="655.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (24 samples, 0.03%)</title><rect x="70.2004%" y="629" width="0.0322%" height="15" fill="rgb(243,19,9)" fg:x="52347" fg:w="24"/><text x="70.4504%" y="639.50"></text></g><g><title>std::io::Write::write_all (24 samples, 0.03%)</title><rect x="70.2004%" y="613" width="0.0322%" height="15" fill="rgb(245,171,17)" fg:x="52347" fg:w="24"/><text x="70.4504%" y="623.50"></text></g><g><title>&lt;remoc::rch::base::io::LimitedBytesWriter as std::io::Write&gt;::write (23 samples, 0.03%)</title><rect x="70.2017%" y="597" width="0.0308%" height="15" fill="rgb(227,52,21)" fg:x="52348" fg:w="23"/><text x="70.4517%" y="607.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (23 samples, 0.03%)</title><rect x="70.2017%" y="581" width="0.0308%" height="15" fill="rgb(238,69,14)" fg:x="52348" fg:w="23"/><text x="70.4517%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.02%)</title><rect x="70.2097%" y="565" width="0.0228%" height="15" fill="rgb(241,156,39)" fg:x="52354" fg:w="17"/><text x="70.4597%" y="575.50"></text></g><g><title>[libc.so.6] (17 samples, 0.02%)</title><rect x="70.2097%" y="549" width="0.0228%" height="15" fill="rgb(212,227,28)" fg:x="52354" fg:w="17"/><text x="70.4597%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (57 samples, 0.08%)</title><rect x="70.5088%" y="357" width="0.0764%" height="15" fill="rgb(209,118,27)" fg:x="52577" fg:w="57"/><text x="70.7588%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (57 samples, 0.08%)</title><rect x="70.5088%" y="341" width="0.0764%" height="15" fill="rgb(226,102,5)" fg:x="52577" fg:w="57"/><text x="70.7588%" y="351.50"></text></g><g><title>alloc::alloc::realloc (57 samples, 0.08%)</title><rect x="70.5088%" y="325" width="0.0764%" height="15" fill="rgb(223,34,3)" fg:x="52577" fg:w="57"/><text x="70.7588%" y="335.50"></text></g><g><title>realloc (57 samples, 0.08%)</title><rect x="70.5088%" y="309" width="0.0764%" height="15" fill="rgb(221,81,38)" fg:x="52577" fg:w="57"/><text x="70.7588%" y="319.50"></text></g><g><title>[libc.so.6] (43 samples, 0.06%)</title><rect x="70.5276%" y="293" width="0.0577%" height="15" fill="rgb(236,219,28)" fg:x="52591" fg:w="43"/><text x="70.7776%" y="303.50"></text></g><g><title>[libc.so.6] (32 samples, 0.04%)</title><rect x="70.5423%" y="277" width="0.0429%" height="15" fill="rgb(213,200,14)" fg:x="52602" fg:w="32"/><text x="70.7923%" y="287.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (66 samples, 0.09%)</title><rect x="70.4981%" y="469" width="0.0885%" height="15" fill="rgb(240,33,19)" fg:x="52569" fg:w="66"/><text x="70.7481%" y="479.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (60 samples, 0.08%)</title><rect x="70.5061%" y="453" width="0.0805%" height="15" fill="rgb(233,113,27)" fg:x="52575" fg:w="60"/><text x="70.7561%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (59 samples, 0.08%)</title><rect x="70.5075%" y="437" width="0.0791%" height="15" fill="rgb(220,221,18)" fg:x="52576" fg:w="59"/><text x="70.7575%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (59 samples, 0.08%)</title><rect x="70.5075%" y="421" width="0.0791%" height="15" fill="rgb(238,92,8)" fg:x="52576" fg:w="59"/><text x="70.7575%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (59 samples, 0.08%)</title><rect x="70.5075%" y="405" width="0.0791%" height="15" fill="rgb(222,164,16)" fg:x="52576" fg:w="59"/><text x="70.7575%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (59 samples, 0.08%)</title><rect x="70.5075%" y="389" width="0.0791%" height="15" fill="rgb(241,119,3)" fg:x="52576" fg:w="59"/><text x="70.7575%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (58 samples, 0.08%)</title><rect x="70.5088%" y="373" width="0.0778%" height="15" fill="rgb(241,44,8)" fg:x="52577" fg:w="58"/><text x="70.7588%" y="383.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_byte (110 samples, 0.15%)</title><rect x="70.4538%" y="565" width="0.1475%" height="15" fill="rgb(230,36,40)" fg:x="52536" fg:w="110"/><text x="70.7038%" y="575.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u8 (110 samples, 0.15%)</title><rect x="70.4538%" y="549" width="0.1475%" height="15" fill="rgb(243,16,36)" fg:x="52536" fg:w="110"/><text x="70.7038%" y="559.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (89 samples, 0.12%)</title><rect x="70.4820%" y="533" width="0.1194%" height="15" fill="rgb(231,4,26)" fg:x="52557" fg:w="89"/><text x="70.7320%" y="543.50"></text></g><g><title>std::io::Write::write_all (89 samples, 0.12%)</title><rect x="70.4820%" y="517" width="0.1194%" height="15" fill="rgb(240,9,31)" fg:x="52557" fg:w="89"/><text x="70.7320%" y="527.50"></text></g><g><title>&lt;remoc::rch::base::io::LimitedBytesWriter as std::io::Write&gt;::write (87 samples, 0.12%)</title><rect x="70.4847%" y="501" width="0.1167%" height="15" fill="rgb(207,173,15)" fg:x="52559" fg:w="87"/><text x="70.7347%" y="511.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (85 samples, 0.11%)</title><rect x="70.4873%" y="485" width="0.1140%" height="15" fill="rgb(224,192,53)" fg:x="52561" fg:w="85"/><text x="70.7373%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.01%)</title><rect x="70.5879%" y="469" width="0.0134%" height="15" fill="rgb(223,67,28)" fg:x="52636" fg:w="10"/><text x="70.8379%" y="479.50"></text></g><g><title>[libc.so.6] (9 samples, 0.01%)</title><rect x="70.5893%" y="453" width="0.0121%" height="15" fill="rgb(211,20,47)" fg:x="52637" fg:w="9"/><text x="70.8393%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (15 samples, 0.02%)</title><rect x="70.6188%" y="357" width="0.0201%" height="15" fill="rgb(240,228,2)" fg:x="52659" fg:w="15"/><text x="70.8688%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (15 samples, 0.02%)</title><rect x="70.6188%" y="341" width="0.0201%" height="15" fill="rgb(248,151,12)" fg:x="52659" fg:w="15"/><text x="70.8688%" y="351.50"></text></g><g><title>alloc::alloc::realloc (15 samples, 0.02%)</title><rect x="70.6188%" y="325" width="0.0201%" height="15" fill="rgb(244,8,39)" fg:x="52659" fg:w="15"/><text x="70.8688%" y="335.50"></text></g><g><title>realloc (11 samples, 0.01%)</title><rect x="70.6241%" y="309" width="0.0148%" height="15" fill="rgb(222,26,8)" fg:x="52663" fg:w="11"/><text x="70.8741%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (18 samples, 0.02%)</title><rect x="70.6188%" y="437" width="0.0241%" height="15" fill="rgb(213,106,44)" fg:x="52659" fg:w="18"/><text x="70.8688%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (18 samples, 0.02%)</title><rect x="70.6188%" y="421" width="0.0241%" height="15" fill="rgb(214,129,20)" fg:x="52659" fg:w="18"/><text x="70.8688%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (18 samples, 0.02%)</title><rect x="70.6188%" y="405" width="0.0241%" height="15" fill="rgb(212,32,13)" fg:x="52659" fg:w="18"/><text x="70.8688%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (18 samples, 0.02%)</title><rect x="70.6188%" y="389" width="0.0241%" height="15" fill="rgb(208,168,33)" fg:x="52659" fg:w="18"/><text x="70.8688%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (18 samples, 0.02%)</title><rect x="70.6188%" y="373" width="0.0241%" height="15" fill="rgb(231,207,8)" fg:x="52659" fg:w="18"/><text x="70.8688%" y="383.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (23 samples, 0.03%)</title><rect x="70.6147%" y="469" width="0.0308%" height="15" fill="rgb(235,219,23)" fg:x="52656" fg:w="23"/><text x="70.8647%" y="479.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (20 samples, 0.03%)</title><rect x="70.6188%" y="453" width="0.0268%" height="15" fill="rgb(226,216,26)" fg:x="52659" fg:w="20"/><text x="70.8688%" y="463.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u32 (37 samples, 0.05%)</title><rect x="70.6094%" y="565" width="0.0496%" height="15" fill="rgb(239,137,16)" fg:x="52652" fg:w="37"/><text x="70.8594%" y="575.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u32 (37 samples, 0.05%)</title><rect x="70.6094%" y="549" width="0.0496%" height="15" fill="rgb(207,12,36)" fg:x="52652" fg:w="37"/><text x="70.8594%" y="559.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (36 samples, 0.05%)</title><rect x="70.6107%" y="533" width="0.0483%" height="15" fill="rgb(210,214,24)" fg:x="52653" fg:w="36"/><text x="70.8607%" y="543.50"></text></g><g><title>std::io::Write::write_all (36 samples, 0.05%)</title><rect x="70.6107%" y="517" width="0.0483%" height="15" fill="rgb(206,56,30)" fg:x="52653" fg:w="36"/><text x="70.8607%" y="527.50"></text></g><g><title>&lt;remoc::rch::base::io::LimitedBytesWriter as std::io::Write&gt;::write (35 samples, 0.05%)</title><rect x="70.6121%" y="501" width="0.0469%" height="15" fill="rgb(228,143,26)" fg:x="52654" fg:w="35"/><text x="70.8621%" y="511.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (34 samples, 0.05%)</title><rect x="70.6134%" y="485" width="0.0456%" height="15" fill="rgb(216,218,46)" fg:x="52655" fg:w="34"/><text x="70.8634%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.01%)</title><rect x="70.6483%" y="469" width="0.0107%" height="15" fill="rgb(206,6,19)" fg:x="52681" fg:w="8"/><text x="70.8983%" y="479.50"></text></g><g><title>__rdl_realloc (9 samples, 0.01%)</title><rect x="70.7086%" y="309" width="0.0121%" height="15" fill="rgb(239,177,51)" fg:x="52726" fg:w="9"/><text x="70.9586%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (9 samples, 0.01%)</title><rect x="70.7086%" y="293" width="0.0121%" height="15" fill="rgb(216,55,25)" fg:x="52726" fg:w="9"/><text x="70.9586%" y="303.50"></text></g><g><title>[libc.so.6] (164 samples, 0.22%)</title><rect x="70.9379%" y="293" width="0.2199%" height="15" fill="rgb(231,163,29)" fg:x="52897" fg:w="164"/><text x="71.1879%" y="303.50"></text></g><g><title>[libc.so.6] (142 samples, 0.19%)</title><rect x="70.9674%" y="277" width="0.1904%" height="15" fill="rgb(232,149,50)" fg:x="52919" fg:w="142"/><text x="71.2174%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (337 samples, 0.45%)</title><rect x="70.7073%" y="357" width="0.4519%" height="15" fill="rgb(223,142,48)" fg:x="52725" fg:w="337"/><text x="70.9573%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (337 samples, 0.45%)</title><rect x="70.7073%" y="341" width="0.4519%" height="15" fill="rgb(245,83,23)" fg:x="52725" fg:w="337"/><text x="70.9573%" y="351.50"></text></g><g><title>alloc::alloc::realloc (336 samples, 0.45%)</title><rect x="70.7086%" y="325" width="0.4506%" height="15" fill="rgb(224,63,2)" fg:x="52726" fg:w="336"/><text x="70.9586%" y="335.50"></text></g><g><title>realloc (321 samples, 0.43%)</title><rect x="70.7287%" y="309" width="0.4305%" height="15" fill="rgb(218,65,53)" fg:x="52741" fg:w="321"/><text x="70.9787%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (352 samples, 0.47%)</title><rect x="70.7019%" y="373" width="0.4721%" height="15" fill="rgb(221,84,29)" fg:x="52721" fg:w="352"/><text x="70.9519%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (11 samples, 0.01%)</title><rect x="71.1592%" y="357" width="0.0148%" height="15" fill="rgb(234,0,32)" fg:x="53062" fg:w="11"/><text x="71.4092%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (365 samples, 0.49%)</title><rect x="70.6858%" y="437" width="0.4895%" height="15" fill="rgb(206,20,16)" fg:x="52709" fg:w="365"/><text x="70.9358%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (365 samples, 0.49%)</title><rect x="70.6858%" y="421" width="0.4895%" height="15" fill="rgb(244,172,18)" fg:x="52709" fg:w="365"/><text x="70.9358%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (364 samples, 0.49%)</title><rect x="70.6872%" y="405" width="0.4881%" height="15" fill="rgb(254,133,1)" fg:x="52710" fg:w="364"/><text x="70.9372%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (364 samples, 0.49%)</title><rect x="70.6872%" y="389" width="0.4881%" height="15" fill="rgb(222,206,41)" fg:x="52710" fg:w="364"/><text x="70.9372%" y="399.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (387 samples, 0.52%)</title><rect x="70.6684%" y="469" width="0.5190%" height="15" fill="rgb(212,3,42)" fg:x="52696" fg:w="387"/><text x="70.9184%" y="479.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (382 samples, 0.51%)</title><rect x="70.6751%" y="453" width="0.5123%" height="15" fill="rgb(241,11,4)" fg:x="52701" fg:w="382"/><text x="70.9251%" y="463.50"></text></g><g><title>bytes::bytes_mut::BytesMut::spare_capacity_mut (8 samples, 0.01%)</title><rect x="71.1874%" y="469" width="0.0107%" height="15" fill="rgb(205,19,26)" fg:x="53083" fg:w="8"/><text x="71.4374%" y="479.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u64 (430 samples, 0.58%)</title><rect x="70.6590%" y="549" width="0.5767%" height="15" fill="rgb(210,179,32)" fg:x="52689" fg:w="430"/><text x="70.9090%" y="559.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (428 samples, 0.57%)</title><rect x="70.6617%" y="533" width="0.5740%" height="15" fill="rgb(227,116,49)" fg:x="52691" fg:w="428"/><text x="70.9117%" y="543.50"></text></g><g><title>std::io::Write::write_all (428 samples, 0.57%)</title><rect x="70.6617%" y="517" width="0.5740%" height="15" fill="rgb(211,146,6)" fg:x="52691" fg:w="428"/><text x="70.9117%" y="527.50"></text></g><g><title>&lt;remoc::rch::base::io::LimitedBytesWriter as std::io::Write&gt;::write (428 samples, 0.57%)</title><rect x="70.6617%" y="501" width="0.5740%" height="15" fill="rgb(219,44,39)" fg:x="52691" fg:w="428"/><text x="70.9117%" y="511.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (424 samples, 0.57%)</title><rect x="70.6670%" y="485" width="0.5686%" height="15" fill="rgb(234,128,11)" fg:x="52695" fg:w="424"/><text x="70.9170%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (28 samples, 0.04%)</title><rect x="71.1981%" y="469" width="0.0375%" height="15" fill="rgb(220,183,53)" fg:x="53091" fg:w="28"/><text x="71.4481%" y="479.50"></text></g><g><title>[libc.so.6] (27 samples, 0.04%)</title><rect x="71.1994%" y="453" width="0.0362%" height="15" fill="rgb(213,219,32)" fg:x="53092" fg:w="27"/><text x="71.4494%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (792 samples, 1.06%)</title><rect x="70.1762%" y="757" width="1.0621%" height="15" fill="rgb(232,156,16)" fg:x="52329" fg:w="792"/><text x="70.4262%" y="767.50"></text></g><g><title>serde::ser::Serializer::collect_seq (792 samples, 1.06%)</title><rect x="70.1762%" y="741" width="1.0621%" height="15" fill="rgb(246,135,34)" fg:x="52329" fg:w="792"/><text x="70.4262%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (750 samples, 1.01%)</title><rect x="70.2325%" y="725" width="1.0058%" height="15" fill="rgb(241,99,0)" fg:x="52371" fg:w="750"/><text x="70.4825%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (750 samples, 1.01%)</title><rect x="70.2325%" y="709" width="1.0058%" height="15" fill="rgb(222,103,45)" fg:x="52371" fg:w="750"/><text x="70.4825%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (614 samples, 0.82%)</title><rect x="70.4149%" y="693" width="0.8234%" height="15" fill="rgb(212,57,4)" fg:x="52507" fg:w="614"/><text x="70.6649%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_seq::{{closure}} (614 samples, 0.82%)</title><rect x="70.4149%" y="677" width="0.8234%" height="15" fill="rgb(215,68,47)" fg:x="52507" fg:w="614"/><text x="70.6649%" y="687.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeSeq&gt;::serialize_element (614 samples, 0.82%)</title><rect x="70.4149%" y="661" width="0.8234%" height="15" fill="rgb(230,84,2)" fg:x="52507" fg:w="614"/><text x="70.6649%" y="671.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (614 samples, 0.82%)</title><rect x="70.4149%" y="645" width="0.8234%" height="15" fill="rgb(220,102,14)" fg:x="52507" fg:w="614"/><text x="70.6649%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for usize&gt;::serialize (614 samples, 0.82%)</title><rect x="70.4149%" y="629" width="0.8234%" height="15" fill="rgb(240,10,32)" fg:x="52507" fg:w="614"/><text x="70.6649%" y="639.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u64 (614 samples, 0.82%)</title><rect x="70.4149%" y="613" width="0.8234%" height="15" fill="rgb(215,47,27)" fg:x="52507" fg:w="614"/><text x="70.6649%" y="623.50"></text></g><g><title>&lt;bincode::config::int::VarintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u64 (614 samples, 0.82%)</title><rect x="70.4149%" y="597" width="0.8234%" height="15" fill="rgb(233,188,43)" fg:x="52507" fg:w="614"/><text x="70.6649%" y="607.50"></text></g><g><title>bincode::config::int::VarintEncoding::serialize_varint (614 samples, 0.82%)</title><rect x="70.4149%" y="581" width="0.8234%" height="15" fill="rgb(253,190,1)" fg:x="52507" fg:w="614"/><text x="70.6649%" y="591.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_literal_u64 (432 samples, 0.58%)</title><rect x="70.6590%" y="565" width="0.5793%" height="15" fill="rgb(206,114,52)" fg:x="52689" fg:w="432"/><text x="70.9090%" y="575.50"></text></g><g><title>bytes::bytes_mut::BytesMut::spare_capacity_mut (8 samples, 0.01%)</title><rect x="71.2531%" y="597" width="0.0107%" height="15" fill="rgb(233,120,37)" fg:x="53132" fg:w="8"/><text x="71.5031%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (8 samples, 0.01%)</title><rect x="71.2531%" y="581" width="0.0107%" height="15" fill="rgb(214,52,39)" fg:x="53132" fg:w="8"/><text x="71.5031%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (8 samples, 0.01%)</title><rect x="71.2531%" y="565" width="0.0107%" height="15" fill="rgb(223,80,29)" fg:x="53132" fg:w="8"/><text x="71.5031%" y="575.50"></text></g><g><title>gmw::protocols::boolean_gmw::_::&lt;impl serde::ser::Serialize for gmw::protocols::boolean_gmw::Msg&gt;::serialize (848 samples, 1.14%)</title><rect x="70.1413%" y="789" width="1.1372%" height="15" fill="rgb(230,101,40)" fg:x="52303" fg:w="848"/><text x="70.3913%" y="799.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStructVariant&gt;::serialize_field (822 samples, 1.10%)</title><rect x="70.1762%" y="773" width="1.1023%" height="15" fill="rgb(219,211,8)" fg:x="52329" fg:w="822"/><text x="70.4262%" y="783.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for usize&gt;::serialize (30 samples, 0.04%)</title><rect x="71.2383%" y="757" width="0.0402%" height="15" fill="rgb(252,126,28)" fg:x="53121" fg:w="30"/><text x="71.4883%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u64 (30 samples, 0.04%)</title><rect x="71.2383%" y="741" width="0.0402%" height="15" fill="rgb(215,56,38)" fg:x="53121" fg:w="30"/><text x="71.4883%" y="751.50"></text></g><g><title>&lt;bincode::config::int::VarintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u64 (30 samples, 0.04%)</title><rect x="71.2383%" y="725" width="0.0402%" height="15" fill="rgb(249,55,44)" fg:x="53121" fg:w="30"/><text x="71.4883%" y="735.50"></text></g><g><title>bincode::config::int::VarintEncoding::serialize_varint (30 samples, 0.04%)</title><rect x="71.2383%" y="709" width="0.0402%" height="15" fill="rgb(220,221,32)" fg:x="53121" fg:w="30"/><text x="71.4883%" y="719.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_byte (29 samples, 0.04%)</title><rect x="71.2397%" y="693" width="0.0389%" height="15" fill="rgb(212,216,41)" fg:x="53122" fg:w="29"/><text x="71.4897%" y="703.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u8 (29 samples, 0.04%)</title><rect x="71.2397%" y="677" width="0.0389%" height="15" fill="rgb(228,213,43)" fg:x="53122" fg:w="29"/><text x="71.4897%" y="687.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (25 samples, 0.03%)</title><rect x="71.2450%" y="661" width="0.0335%" height="15" fill="rgb(211,31,26)" fg:x="53126" fg:w="25"/><text x="71.4950%" y="671.50"></text></g><g><title>std::io::Write::write_all (25 samples, 0.03%)</title><rect x="71.2450%" y="645" width="0.0335%" height="15" fill="rgb(229,202,19)" fg:x="53126" fg:w="25"/><text x="71.4950%" y="655.50"></text></g><g><title>&lt;remoc::rch::base::io::LimitedBytesWriter as std::io::Write&gt;::write (25 samples, 0.03%)</title><rect x="71.2450%" y="629" width="0.0335%" height="15" fill="rgb(229,105,46)" fg:x="53126" fg:w="25"/><text x="71.4950%" y="639.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (24 samples, 0.03%)</title><rect x="71.2464%" y="613" width="0.0322%" height="15" fill="rgb(235,108,1)" fg:x="53127" fg:w="24"/><text x="71.4964%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.01%)</title><rect x="71.2638%" y="597" width="0.0148%" height="15" fill="rgb(245,111,35)" fg:x="53140" fg:w="11"/><text x="71.5138%" y="607.50"></text></g><g><title>[libc.so.6] (11 samples, 0.01%)</title><rect x="71.2638%" y="581" width="0.0148%" height="15" fill="rgb(219,185,31)" fg:x="53140" fg:w="11"/><text x="71.5138%" y="591.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u8 (17 samples, 0.02%)</title><rect x="71.2799%" y="757" width="0.0228%" height="15" fill="rgb(214,4,43)" fg:x="53152" fg:w="17"/><text x="71.5299%" y="767.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (17 samples, 0.02%)</title><rect x="71.2799%" y="741" width="0.0228%" height="15" fill="rgb(235,227,40)" fg:x="53152" fg:w="17"/><text x="71.5299%" y="751.50"></text></g><g><title>std::io::Write::write_all (17 samples, 0.02%)</title><rect x="71.2799%" y="725" width="0.0228%" height="15" fill="rgb(230,88,30)" fg:x="53152" fg:w="17"/><text x="71.5299%" y="735.50"></text></g><g><title>&lt;remoc::rch::base::io::LimitedBytesWriter as std::io::Write&gt;::write (16 samples, 0.02%)</title><rect x="71.2812%" y="709" width="0.0215%" height="15" fill="rgb(216,217,1)" fg:x="53153" fg:w="16"/><text x="71.5312%" y="719.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (15 samples, 0.02%)</title><rect x="71.2826%" y="693" width="0.0201%" height="15" fill="rgb(248,139,50)" fg:x="53154" fg:w="15"/><text x="71.5326%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.01%)</title><rect x="71.2893%" y="677" width="0.0134%" height="15" fill="rgb(233,1,21)" fg:x="53159" fg:w="10"/><text x="71.5393%" y="687.50"></text></g><g><title>[libc.so.6] (10 samples, 0.01%)</title><rect x="71.2893%" y="661" width="0.0134%" height="15" fill="rgb(215,183,12)" fg:x="53159" fg:w="10"/><text x="71.5393%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (51 samples, 0.07%)</title><rect x="71.3188%" y="469" width="0.0684%" height="15" fill="rgb(229,104,42)" fg:x="53181" fg:w="51"/><text x="71.5688%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (51 samples, 0.07%)</title><rect x="71.3188%" y="453" width="0.0684%" height="15" fill="rgb(243,34,48)" fg:x="53181" fg:w="51"/><text x="71.5688%" y="463.50"></text></g><g><title>alloc::alloc::Global::grow_impl (51 samples, 0.07%)</title><rect x="71.3188%" y="437" width="0.0684%" height="15" fill="rgb(239,11,44)" fg:x="53181" fg:w="51"/><text x="71.5688%" y="447.50"></text></g><g><title>alloc::alloc::realloc (51 samples, 0.07%)</title><rect x="71.3188%" y="421" width="0.0684%" height="15" fill="rgb(231,98,35)" fg:x="53181" fg:w="51"/><text x="71.5688%" y="431.50"></text></g><g><title>realloc (51 samples, 0.07%)</title><rect x="71.3188%" y="405" width="0.0684%" height="15" fill="rgb(233,28,25)" fg:x="53181" fg:w="51"/><text x="71.5688%" y="415.50"></text></g><g><title>[libc.so.6] (35 samples, 0.05%)</title><rect x="71.3403%" y="389" width="0.0469%" height="15" fill="rgb(234,123,11)" fg:x="53197" fg:w="35"/><text x="71.5903%" y="399.50"></text></g><g><title>[libc.so.6] (30 samples, 0.04%)</title><rect x="71.3470%" y="373" width="0.0402%" height="15" fill="rgb(220,69,3)" fg:x="53202" fg:w="30"/><text x="71.5970%" y="383.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (55 samples, 0.07%)</title><rect x="71.3148%" y="565" width="0.0738%" height="15" fill="rgb(214,64,36)" fg:x="53178" fg:w="55"/><text x="71.5648%" y="575.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (53 samples, 0.07%)</title><rect x="71.3175%" y="549" width="0.0711%" height="15" fill="rgb(211,138,32)" fg:x="53180" fg:w="53"/><text x="71.5675%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (53 samples, 0.07%)</title><rect x="71.3175%" y="533" width="0.0711%" height="15" fill="rgb(213,118,47)" fg:x="53180" fg:w="53"/><text x="71.5675%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (53 samples, 0.07%)</title><rect x="71.3175%" y="517" width="0.0711%" height="15" fill="rgb(243,124,49)" fg:x="53180" fg:w="53"/><text x="71.5675%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (52 samples, 0.07%)</title><rect x="71.3188%" y="501" width="0.0697%" height="15" fill="rgb(221,30,28)" fg:x="53181" fg:w="52"/><text x="71.5688%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (52 samples, 0.07%)</title><rect x="71.3188%" y="485" width="0.0697%" height="15" fill="rgb(246,37,13)" fg:x="53181" fg:w="52"/><text x="71.5688%" y="495.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_struct_variant (67 samples, 0.09%)</title><rect x="71.3121%" y="709" width="0.0899%" height="15" fill="rgb(249,66,14)" fg:x="53176" fg:w="67"/><text x="71.5621%" y="719.50"></text></g><g><title>&lt;bincode::config::int::VarintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u32 (67 samples, 0.09%)</title><rect x="71.3121%" y="693" width="0.0899%" height="15" fill="rgb(213,166,5)" fg:x="53176" fg:w="67"/><text x="71.5621%" y="703.50"></text></g><g><title>bincode::config::int::VarintEncoding::serialize_varint (67 samples, 0.09%)</title><rect x="71.3121%" y="677" width="0.0899%" height="15" fill="rgb(221,66,24)" fg:x="53176" fg:w="67"/><text x="71.5621%" y="687.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_byte (67 samples, 0.09%)</title><rect x="71.3121%" y="661" width="0.0899%" height="15" fill="rgb(210,132,17)" fg:x="53176" fg:w="67"/><text x="71.5621%" y="671.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u8 (67 samples, 0.09%)</title><rect x="71.3121%" y="645" width="0.0899%" height="15" fill="rgb(243,202,5)" fg:x="53176" fg:w="67"/><text x="71.5621%" y="655.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (67 samples, 0.09%)</title><rect x="71.3121%" y="629" width="0.0899%" height="15" fill="rgb(233,70,48)" fg:x="53176" fg:w="67"/><text x="71.5621%" y="639.50"></text></g><g><title>std::io::Write::write_all (67 samples, 0.09%)</title><rect x="71.3121%" y="613" width="0.0899%" height="15" fill="rgb(238,41,26)" fg:x="53176" fg:w="67"/><text x="71.5621%" y="623.50"></text></g><g><title>&lt;remoc::rch::base::io::LimitedBytesWriter as std::io::Write&gt;::write (66 samples, 0.09%)</title><rect x="71.3134%" y="597" width="0.0885%" height="15" fill="rgb(241,19,31)" fg:x="53177" fg:w="66"/><text x="71.5634%" y="607.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (66 samples, 0.09%)</title><rect x="71.3134%" y="581" width="0.0885%" height="15" fill="rgb(214,76,10)" fg:x="53177" fg:w="66"/><text x="71.5634%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.01%)</title><rect x="71.3885%" y="565" width="0.0134%" height="15" fill="rgb(254,202,22)" fg:x="53233" fg:w="10"/><text x="71.6385%" y="575.50"></text></g><g><title>[libc.so.6] (10 samples, 0.01%)</title><rect x="71.3885%" y="549" width="0.0134%" height="15" fill="rgb(214,72,24)" fg:x="53233" fg:w="10"/><text x="71.6385%" y="559.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (8 samples, 0.01%)</title><rect x="71.4019%" y="661" width="0.0107%" height="15" fill="rgb(221,92,46)" fg:x="53243" fg:w="8"/><text x="71.6519%" y="671.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_seq (34 samples, 0.05%)</title><rect x="71.4127%" y="661" width="0.0456%" height="15" fill="rgb(246,13,50)" fg:x="53251" fg:w="34"/><text x="71.6627%" y="671.50"></text></g><g><title>bincode::config::int::IntEncoding::serialize_len (33 samples, 0.04%)</title><rect x="71.4140%" y="645" width="0.0443%" height="15" fill="rgb(240,165,38)" fg:x="53252" fg:w="33"/><text x="71.6640%" y="655.50"></text></g><g><title>&lt;bincode::config::int::VarintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u64 (33 samples, 0.04%)</title><rect x="71.4140%" y="629" width="0.0443%" height="15" fill="rgb(241,24,51)" fg:x="53252" fg:w="33"/><text x="71.6640%" y="639.50"></text></g><g><title>bincode::config::int::VarintEncoding::serialize_varint (33 samples, 0.04%)</title><rect x="71.4140%" y="613" width="0.0443%" height="15" fill="rgb(227,51,44)" fg:x="53252" fg:w="33"/><text x="71.6640%" y="623.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_byte (32 samples, 0.04%)</title><rect x="71.4154%" y="597" width="0.0429%" height="15" fill="rgb(231,121,3)" fg:x="53253" fg:w="32"/><text x="71.6654%" y="607.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u8 (32 samples, 0.04%)</title><rect x="71.4154%" y="581" width="0.0429%" height="15" fill="rgb(245,3,41)" fg:x="53253" fg:w="32"/><text x="71.6654%" y="591.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (26 samples, 0.03%)</title><rect x="71.4234%" y="565" width="0.0349%" height="15" fill="rgb(214,13,26)" fg:x="53259" fg:w="26"/><text x="71.6734%" y="575.50"></text></g><g><title>std::io::Write::write_all (26 samples, 0.03%)</title><rect x="71.4234%" y="549" width="0.0349%" height="15" fill="rgb(252,75,11)" fg:x="53259" fg:w="26"/><text x="71.6734%" y="559.50"></text></g><g><title>&lt;remoc::rch::base::io::LimitedBytesWriter as std::io::Write&gt;::write (26 samples, 0.03%)</title><rect x="71.4234%" y="533" width="0.0349%" height="15" fill="rgb(218,226,17)" fg:x="53259" fg:w="26"/><text x="71.6734%" y="543.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (25 samples, 0.03%)</title><rect x="71.4247%" y="517" width="0.0335%" height="15" fill="rgb(248,89,38)" fg:x="53260" fg:w="25"/><text x="71.6747%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.02%)</title><rect x="71.4395%" y="501" width="0.0188%" height="15" fill="rgb(237,73,46)" fg:x="53271" fg:w="14"/><text x="71.6895%" y="511.50"></text></g><g><title>[libc.so.6] (14 samples, 0.02%)</title><rect x="71.4395%" y="485" width="0.0188%" height="15" fill="rgb(242,78,33)" fg:x="53271" fg:w="14"/><text x="71.6895%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (47 samples, 0.06%)</title><rect x="71.4019%" y="693" width="0.0630%" height="15" fill="rgb(235,60,3)" fg:x="53243" fg:w="47"/><text x="71.6519%" y="703.50"></text></g><g><title>serde::ser::Serializer::collect_seq (47 samples, 0.06%)</title><rect x="71.4019%" y="677" width="0.0630%" height="15" fill="rgb(216,172,19)" fg:x="53243" fg:w="47"/><text x="71.6519%" y="687.50"></text></g><g><title>gmw::protocols::boolean_gmw::_::&lt;impl serde::ser::Serialize for gmw::protocols::boolean_gmw::Msg&gt;::serialize (134 samples, 0.18%)</title><rect x="71.3081%" y="725" width="0.1797%" height="15" fill="rgb(227,6,42)" fg:x="53173" fg:w="134"/><text x="71.5581%" y="735.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStructVariant&gt;::serialize_field (64 samples, 0.09%)</title><rect x="71.4019%" y="709" width="0.0858%" height="15" fill="rgb(223,207,42)" fg:x="53243" fg:w="64"/><text x="71.6519%" y="719.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for usize&gt;::serialize (17 samples, 0.02%)</title><rect x="71.4650%" y="693" width="0.0228%" height="15" fill="rgb(246,138,30)" fg:x="53290" fg:w="17"/><text x="71.7150%" y="703.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_u64 (17 samples, 0.02%)</title><rect x="71.4650%" y="677" width="0.0228%" height="15" fill="rgb(251,199,47)" fg:x="53290" fg:w="17"/><text x="71.7150%" y="687.50"></text></g><g><title>&lt;bincode::config::int::VarintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u64 (17 samples, 0.02%)</title><rect x="71.4650%" y="661" width="0.0228%" height="15" fill="rgb(228,218,44)" fg:x="53290" fg:w="17"/><text x="71.7150%" y="671.50"></text></g><g><title>bincode::config::int::VarintEncoding::serialize_varint (17 samples, 0.02%)</title><rect x="71.4650%" y="645" width="0.0228%" height="15" fill="rgb(220,68,6)" fg:x="53290" fg:w="17"/><text x="71.7150%" y="655.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_byte (17 samples, 0.02%)</title><rect x="71.4650%" y="629" width="0.0228%" height="15" fill="rgb(240,60,26)" fg:x="53290" fg:w="17"/><text x="71.7150%" y="639.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u8 (17 samples, 0.02%)</title><rect x="71.4650%" y="613" width="0.0228%" height="15" fill="rgb(211,200,19)" fg:x="53290" fg:w="17"/><text x="71.7150%" y="623.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (8 samples, 0.01%)</title><rect x="71.4770%" y="597" width="0.0107%" height="15" fill="rgb(242,145,30)" fg:x="53299" fg:w="8"/><text x="71.7270%" y="607.50"></text></g><g><title>std::io::Write::write_all (8 samples, 0.01%)</title><rect x="71.4770%" y="581" width="0.0107%" height="15" fill="rgb(225,64,13)" fg:x="53299" fg:w="8"/><text x="71.7270%" y="591.50"></text></g><g><title>gmw::protocols::boolean_gmw::_::&lt;impl serde::ser::Serialize for gmw::protocols::boolean_gmw::SimdMsg&gt;::serialize (139 samples, 0.19%)</title><rect x="71.3027%" y="757" width="0.1864%" height="15" fill="rgb(218,103,35)" fg:x="53169" fg:w="139"/><text x="71.5527%" y="767.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (135 samples, 0.18%)</title><rect x="71.3081%" y="741" width="0.1810%" height="15" fill="rgb(216,93,46)" fg:x="53173" fg:w="135"/><text x="71.5581%" y="751.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (55 samples, 0.07%)</title><rect x="71.5039%" y="581" width="0.0738%" height="15" fill="rgb(225,159,27)" fg:x="53319" fg:w="55"/><text x="71.7539%" y="591.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (55 samples, 0.07%)</title><rect x="71.5039%" y="565" width="0.0738%" height="15" fill="rgb(225,204,11)" fg:x="53319" fg:w="55"/><text x="71.7539%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (55 samples, 0.07%)</title><rect x="71.5039%" y="549" width="0.0738%" height="15" fill="rgb(205,56,4)" fg:x="53319" fg:w="55"/><text x="71.7539%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (55 samples, 0.07%)</title><rect x="71.5039%" y="533" width="0.0738%" height="15" fill="rgb(206,6,35)" fg:x="53319" fg:w="55"/><text x="71.7539%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (55 samples, 0.07%)</title><rect x="71.5039%" y="517" width="0.0738%" height="15" fill="rgb(247,73,52)" fg:x="53319" fg:w="55"/><text x="71.7539%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (55 samples, 0.07%)</title><rect x="71.5039%" y="501" width="0.0738%" height="15" fill="rgb(246,97,4)" fg:x="53319" fg:w="55"/><text x="71.7539%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (55 samples, 0.07%)</title><rect x="71.5039%" y="485" width="0.0738%" height="15" fill="rgb(212,37,15)" fg:x="53319" fg:w="55"/><text x="71.7539%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (55 samples, 0.07%)</title><rect x="71.5039%" y="469" width="0.0738%" height="15" fill="rgb(208,130,40)" fg:x="53319" fg:w="55"/><text x="71.7539%" y="479.50"></text></g><g><title>alloc::alloc::Global::grow_impl (55 samples, 0.07%)</title><rect x="71.5039%" y="453" width="0.0738%" height="15" fill="rgb(236,55,29)" fg:x="53319" fg:w="55"/><text x="71.7539%" y="463.50"></text></g><g><title>alloc::alloc::realloc (55 samples, 0.07%)</title><rect x="71.5039%" y="437" width="0.0738%" height="15" fill="rgb(209,156,45)" fg:x="53319" fg:w="55"/><text x="71.7539%" y="447.50"></text></g><g><title>realloc (55 samples, 0.07%)</title><rect x="71.5039%" y="421" width="0.0738%" height="15" fill="rgb(249,107,4)" fg:x="53319" fg:w="55"/><text x="71.7539%" y="431.50"></text></g><g><title>[libc.so.6] (49 samples, 0.07%)</title><rect x="71.5119%" y="405" width="0.0657%" height="15" fill="rgb(227,7,13)" fg:x="53325" fg:w="49"/><text x="71.7619%" y="415.50"></text></g><g><title>[libc.so.6] (46 samples, 0.06%)</title><rect x="71.5159%" y="389" width="0.0617%" height="15" fill="rgb(250,129,14)" fg:x="53328" fg:w="46"/><text x="71.7659%" y="399.50"></text></g><g><title>gmw::executor::_::&lt;impl serde::ser::Serialize for gmw::executor::ExecutorMsg&lt;Msg,SimdMsg&gt;&gt;::serialize (1,077 samples, 1.44%)</title><rect x="70.1413%" y="821" width="1.4443%" height="15" fill="rgb(229,92,13)" fg:x="52303" fg:w="1077"/><text x="70.3913%" y="831.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1,077 samples, 1.44%)</title><rect x="70.1413%" y="805" width="1.4443%" height="15" fill="rgb(245,98,39)" fg:x="52303" fg:w="1077"/><text x="70.3913%" y="815.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for core::option::Option&lt;T&gt;&gt;::serialize (229 samples, 0.31%)</title><rect x="71.2786%" y="789" width="0.3071%" height="15" fill="rgb(234,135,48)" fg:x="53151" fg:w="229"/><text x="71.5286%" y="799.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_some (228 samples, 0.31%)</title><rect x="71.2799%" y="773" width="0.3058%" height="15" fill="rgb(230,98,28)" fg:x="53152" fg:w="228"/><text x="71.5299%" y="783.50"></text></g><g><title>serde::ser::Serializer::collect_seq (72 samples, 0.10%)</title><rect x="71.4891%" y="757" width="0.0966%" height="15" fill="rgb(223,121,0)" fg:x="53308" fg:w="72"/><text x="71.7391%" y="767.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_seq (70 samples, 0.09%)</title><rect x="71.4918%" y="741" width="0.0939%" height="15" fill="rgb(234,173,33)" fg:x="53310" fg:w="70"/><text x="71.7418%" y="751.50"></text></g><g><title>bincode::config::int::IntEncoding::serialize_len (69 samples, 0.09%)</title><rect x="71.4931%" y="725" width="0.0925%" height="15" fill="rgb(245,47,8)" fg:x="53311" fg:w="69"/><text x="71.7431%" y="735.50"></text></g><g><title>&lt;bincode::config::int::VarintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u64 (69 samples, 0.09%)</title><rect x="71.4931%" y="709" width="0.0925%" height="15" fill="rgb(205,17,20)" fg:x="53311" fg:w="69"/><text x="71.7431%" y="719.50"></text></g><g><title>bincode::config::int::VarintEncoding::serialize_varint (68 samples, 0.09%)</title><rect x="71.4945%" y="693" width="0.0912%" height="15" fill="rgb(232,151,16)" fg:x="53312" fg:w="68"/><text x="71.7445%" y="703.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_byte (68 samples, 0.09%)</title><rect x="71.4945%" y="677" width="0.0912%" height="15" fill="rgb(208,30,32)" fg:x="53312" fg:w="68"/><text x="71.7445%" y="687.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u8 (68 samples, 0.09%)</title><rect x="71.4945%" y="661" width="0.0912%" height="15" fill="rgb(254,26,3)" fg:x="53312" fg:w="68"/><text x="71.7445%" y="671.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (65 samples, 0.09%)</title><rect x="71.4985%" y="645" width="0.0872%" height="15" fill="rgb(240,177,30)" fg:x="53315" fg:w="65"/><text x="71.7485%" y="655.50"></text></g><g><title>std::io::Write::write_all (65 samples, 0.09%)</title><rect x="71.4985%" y="629" width="0.0872%" height="15" fill="rgb(248,76,44)" fg:x="53315" fg:w="65"/><text x="71.7485%" y="639.50"></text></g><g><title>&lt;remoc::rch::base::io::LimitedBytesWriter as std::io::Write&gt;::write (64 samples, 0.09%)</title><rect x="71.4998%" y="613" width="0.0858%" height="15" fill="rgb(241,186,54)" fg:x="53316" fg:w="64"/><text x="71.7498%" y="623.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (62 samples, 0.08%)</title><rect x="71.5025%" y="597" width="0.0831%" height="15" fill="rgb(249,171,29)" fg:x="53318" fg:w="62"/><text x="71.7525%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (90 samples, 0.12%)</title><rect x="71.6326%" y="565" width="0.1207%" height="15" fill="rgb(237,151,44)" fg:x="53415" fg:w="90"/><text x="71.8826%" y="575.50"></text></g><g><title>malloc (75 samples, 0.10%)</title><rect x="71.6527%" y="549" width="0.1006%" height="15" fill="rgb(228,174,30)" fg:x="53430" fg:w="75"/><text x="71.9027%" y="559.50"></text></g><g><title>[libc.so.6] (19 samples, 0.03%)</title><rect x="71.7278%" y="533" width="0.0255%" height="15" fill="rgb(252,14,37)" fg:x="53486" fg:w="19"/><text x="71.9778%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (108 samples, 0.14%)</title><rect x="71.6165%" y="629" width="0.1448%" height="15" fill="rgb(207,111,40)" fg:x="53403" fg:w="108"/><text x="71.8665%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (108 samples, 0.14%)</title><rect x="71.6165%" y="613" width="0.1448%" height="15" fill="rgb(248,171,54)" fg:x="53403" fg:w="108"/><text x="71.8665%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (107 samples, 0.14%)</title><rect x="71.6179%" y="597" width="0.1435%" height="15" fill="rgb(211,127,2)" fg:x="53404" fg:w="107"/><text x="71.8679%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (107 samples, 0.14%)</title><rect x="71.6179%" y="581" width="0.1435%" height="15" fill="rgb(236,87,47)" fg:x="53404" fg:w="107"/><text x="71.8679%" y="591.50"></text></g><g><title>bytes::bytes_mut::BytesMut::get_vec_pos (8 samples, 0.01%)</title><rect x="71.7613%" y="629" width="0.0107%" height="15" fill="rgb(223,190,45)" fg:x="53511" fg:w="8"/><text x="72.0113%" y="639.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (136 samples, 0.18%)</title><rect x="71.5937%" y="661" width="0.1824%" height="15" fill="rgb(215,5,16)" fg:x="53386" fg:w="136"/><text x="71.8437%" y="671.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (136 samples, 0.18%)</title><rect x="71.5937%" y="645" width="0.1824%" height="15" fill="rgb(252,82,33)" fg:x="53386" fg:w="136"/><text x="71.8437%" y="655.50"></text></g><g><title>&lt;remoc::codec::bincode::Bincode as remoc::codec::Codec&gt;::serialize (1,252 samples, 1.68%)</title><rect x="70.1333%" y="885" width="1.6790%" height="15" fill="rgb(247,213,44)" fg:x="52297" fg:w="1252"/><text x="70.3833%" y="895.50"></text></g><g><title>bincode::config::Options::serialize_into (1,252 samples, 1.68%)</title><rect x="70.1333%" y="869" width="1.6790%" height="15" fill="rgb(205,196,44)" fg:x="52297" fg:w="1252"/><text x="70.3833%" y="879.50"></text></g><g><title>bincode::internal::serialize_into (1,252 samples, 1.68%)</title><rect x="70.1333%" y="853" width="1.6790%" height="15" fill="rgb(237,96,54)" fg:x="52297" fg:w="1252"/><text x="70.3833%" y="863.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1,246 samples, 1.67%)</title><rect x="70.1413%" y="837" width="1.6710%" height="15" fill="rgb(230,113,34)" fg:x="52303" fg:w="1246"/><text x="70.3913%" y="847.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for core::result::Result&lt;T,E&gt;&gt;::serialize (169 samples, 0.23%)</title><rect x="71.5857%" y="821" width="0.2266%" height="15" fill="rgb(221,224,12)" fg:x="53380" fg:w="169"/><text x="71.8357%" y="831.50"></text></g><g><title>&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (169 samples, 0.23%)</title><rect x="71.5857%" y="805" width="0.2266%" height="15" fill="rgb(219,112,44)" fg:x="53380" fg:w="169"/><text x="71.8357%" y="815.50"></text></g><g><title>&lt;bincode::config::int::VarintEncoding as bincode::config::int::IntEncoding&gt;::serialize_u32 (169 samples, 0.23%)</title><rect x="71.5857%" y="789" width="0.2266%" height="15" fill="rgb(210,31,13)" fg:x="53380" fg:w="169"/><text x="71.8357%" y="799.50"></text></g><g><title>bincode::config::int::VarintEncoding::serialize_varint (169 samples, 0.23%)</title><rect x="71.5857%" y="773" width="0.2266%" height="15" fill="rgb(230,25,16)" fg:x="53380" fg:w="169"/><text x="71.8357%" y="783.50"></text></g><g><title>bincode::ser::Serializer&lt;W,O&gt;::serialize_byte (169 samples, 0.23%)</title><rect x="71.5857%" y="757" width="0.2266%" height="15" fill="rgb(246,108,53)" fg:x="53380" fg:w="169"/><text x="71.8357%" y="767.50"></text></g><g><title>bincode::byteorder::WriteBytesExt::write_u8 (169 samples, 0.23%)</title><rect x="71.5857%" y="741" width="0.2266%" height="15" fill="rgb(241,172,50)" fg:x="53380" fg:w="169"/><text x="71.8357%" y="751.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (166 samples, 0.22%)</title><rect x="71.5897%" y="725" width="0.2226%" height="15" fill="rgb(235,141,10)" fg:x="53383" fg:w="166"/><text x="71.8397%" y="735.50"></text></g><g><title>std::io::Write::write_all (166 samples, 0.22%)</title><rect x="71.5897%" y="709" width="0.2226%" height="15" fill="rgb(220,174,43)" fg:x="53383" fg:w="166"/><text x="71.8397%" y="719.50"></text></g><g><title>&lt;remoc::rch::base::io::LimitedBytesWriter as std::io::Write&gt;::write (166 samples, 0.22%)</title><rect x="71.5897%" y="693" width="0.2226%" height="15" fill="rgb(215,181,40)" fg:x="53383" fg:w="166"/><text x="71.8397%" y="703.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (165 samples, 0.22%)</title><rect x="71.5910%" y="677" width="0.2213%" height="15" fill="rgb(230,97,2)" fg:x="53384" fg:w="165"/><text x="71.8410%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (26 samples, 0.03%)</title><rect x="71.7774%" y="661" width="0.0349%" height="15" fill="rgb(211,25,27)" fg:x="53523" fg:w="26"/><text x="72.0274%" y="671.50"></text></g><g><title>[libc.so.6] (26 samples, 0.03%)</title><rect x="71.7774%" y="645" width="0.0349%" height="15" fill="rgb(230,87,26)" fg:x="53523" fg:w="26"/><text x="72.0274%" y="655.50"></text></g><g><title>remoc::rch::base::io::LimitedBytesWriter::into_inner (12 samples, 0.02%)</title><rect x="71.8217%" y="885" width="0.0161%" height="15" fill="rgb(227,160,17)" fg:x="53556" fg:w="12"/><text x="72.0717%" y="895.50"></text></g><g><title>remoc::rch::base::io::LimitedBytesWriter::new (10 samples, 0.01%)</title><rect x="71.8378%" y="885" width="0.0134%" height="15" fill="rgb(244,85,34)" fg:x="53568" fg:w="10"/><text x="72.0878%" y="895.50"></text></g><g><title>remoc::rch::base::io::LimitedBytesWriter::overflow (10 samples, 0.01%)</title><rect x="71.8512%" y="885" width="0.0134%" height="15" fill="rgb(207,70,0)" fg:x="53578" fg:w="10"/><text x="72.1012%" y="895.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::try_unwrap (14 samples, 0.02%)</title><rect x="71.8807%" y="869" width="0.0188%" height="15" fill="rgb(223,129,7)" fg:x="53600" fg:w="14"/><text x="72.1307%" y="879.50"></text></g><g><title>remoc::rch::base::sender::PortSerializer::finish (36 samples, 0.05%)</title><rect x="71.8646%" y="885" width="0.0483%" height="15" fill="rgb(246,105,7)" fg:x="53588" fg:w="36"/><text x="72.1146%" y="895.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::into_inner (10 samples, 0.01%)</title><rect x="71.8995%" y="869" width="0.0134%" height="15" fill="rgb(215,154,42)" fg:x="53614" fg:w="10"/><text x="72.1495%" y="879.50"></text></g><g><title>__rdl_alloc (16 samples, 0.02%)</title><rect x="71.9746%" y="773" width="0.0215%" height="15" fill="rgb(220,215,30)" fg:x="53670" fg:w="16"/><text x="72.2246%" y="783.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (16 samples, 0.02%)</title><rect x="71.9746%" y="757" width="0.0215%" height="15" fill="rgb(228,81,51)" fg:x="53670" fg:w="16"/><text x="72.2246%" y="767.50"></text></g><g><title>__rust_alloc (34 samples, 0.05%)</title><rect x="71.9960%" y="773" width="0.0456%" height="15" fill="rgb(247,71,54)" fg:x="53686" fg:w="34"/><text x="72.2460%" y="783.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (263 samples, 0.35%)</title><rect x="71.9156%" y="869" width="0.3527%" height="15" fill="rgb(234,176,34)" fg:x="53626" fg:w="263"/><text x="72.1656%" y="879.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (222 samples, 0.30%)</title><rect x="71.9706%" y="853" width="0.2977%" height="15" fill="rgb(241,103,54)" fg:x="53667" fg:w="222"/><text x="72.2206%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (219 samples, 0.29%)</title><rect x="71.9746%" y="837" width="0.2937%" height="15" fill="rgb(228,22,34)" fg:x="53670" fg:w="219"/><text x="72.2246%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (219 samples, 0.29%)</title><rect x="71.9746%" y="821" width="0.2937%" height="15" fill="rgb(241,179,48)" fg:x="53670" fg:w="219"/><text x="72.2246%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (219 samples, 0.29%)</title><rect x="71.9746%" y="805" width="0.2937%" height="15" fill="rgb(235,167,37)" fg:x="53670" fg:w="219"/><text x="72.2246%" y="815.50"></text></g><g><title>alloc::alloc::alloc (219 samples, 0.29%)</title><rect x="71.9746%" y="789" width="0.2937%" height="15" fill="rgb(213,109,30)" fg:x="53670" fg:w="219"/><text x="72.2246%" y="799.50"></text></g><g><title>malloc (169 samples, 0.23%)</title><rect x="72.0416%" y="773" width="0.2266%" height="15" fill="rgb(222,172,16)" fg:x="53720" fg:w="169"/><text x="72.2916%" y="783.50"></text></g><g><title>__rdl_dealloc (11 samples, 0.01%)</title><rect x="72.2683%" y="805" width="0.0148%" height="15" fill="rgb(233,192,5)" fg:x="53889" fg:w="11"/><text x="72.5183%" y="815.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (11 samples, 0.01%)</title><rect x="72.2683%" y="789" width="0.0148%" height="15" fill="rgb(247,189,41)" fg:x="53889" fg:w="11"/><text x="72.5183%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (126 samples, 0.17%)</title><rect x="72.2683%" y="837" width="0.1690%" height="15" fill="rgb(218,134,47)" fg:x="53889" fg:w="126"/><text x="72.5183%" y="847.50"></text></g><g><title>alloc::alloc::dealloc (126 samples, 0.17%)</title><rect x="72.2683%" y="821" width="0.1690%" height="15" fill="rgb(216,29,3)" fg:x="53889" fg:w="126"/><text x="72.5183%" y="831.50"></text></g><g><title>cfree (114 samples, 0.15%)</title><rect x="72.2844%" y="805" width="0.1529%" height="15" fill="rgb(246,140,12)" fg:x="53901" fg:w="114"/><text x="72.5344%" y="815.50"></text></g><g><title>[libc.so.6] (55 samples, 0.07%)</title><rect x="72.3635%" y="789" width="0.0738%" height="15" fill="rgb(230,136,11)" fg:x="53960" fg:w="55"/><text x="72.6135%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Weak&lt;core::cell::RefCell&lt;remoc::rch::base::sender::PortSerializer&gt;&gt;&gt; (163 samples, 0.22%)</title><rect x="72.2683%" y="869" width="0.2186%" height="15" fill="rgb(247,22,47)" fg:x="53889" fg:w="163"/><text x="72.5183%" y="879.50"></text></g><g><title>&lt;alloc::rc::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (163 samples, 0.22%)</title><rect x="72.2683%" y="853" width="0.2186%" height="15" fill="rgb(218,84,22)" fg:x="53889" fg:w="163"/><text x="72.5183%" y="863.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_weak (37 samples, 0.05%)</title><rect x="72.4372%" y="837" width="0.0496%" height="15" fill="rgb(216,87,39)" fg:x="54015" fg:w="37"/><text x="72.6872%" y="847.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (37 samples, 0.05%)</title><rect x="72.4372%" y="821" width="0.0496%" height="15" fill="rgb(221,178,8)" fg:x="54015" fg:w="37"/><text x="72.6872%" y="831.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (37 samples, 0.05%)</title><rect x="72.4372%" y="805" width="0.0496%" height="15" fill="rgb(230,42,11)" fg:x="54015" fg:w="37"/><text x="72.6872%" y="815.50"></text></g><g><title>core::mem::replace (37 samples, 0.05%)</title><rect x="72.4372%" y="789" width="0.0496%" height="15" fill="rgb(237,229,4)" fg:x="54015" fg:w="37"/><text x="72.6872%" y="799.50"></text></g><g><title>core::ptr::write (37 samples, 0.05%)</title><rect x="72.4372%" y="773" width="0.0496%" height="15" fill="rgb(222,31,33)" fg:x="54015" fg:w="37"/><text x="72.6872%" y="783.50"></text></g><g><title>remoc::rch::base::sender::PortSerializer::INSTANCE::__getit (17 samples, 0.02%)</title><rect x="72.5070%" y="837" width="0.0228%" height="15" fill="rgb(210,17,39)" fg:x="54067" fg:w="17"/><text x="72.7570%" y="847.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (15 samples, 0.02%)</title><rect x="72.5097%" y="821" width="0.0201%" height="15" fill="rgb(244,93,20)" fg:x="54069" fg:w="15"/><text x="72.7597%" y="831.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (15 samples, 0.02%)</title><rect x="72.5097%" y="805" width="0.0201%" height="15" fill="rgb(210,40,47)" fg:x="54069" fg:w="15"/><text x="72.7597%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (15 samples, 0.02%)</title><rect x="72.5097%" y="789" width="0.0201%" height="15" fill="rgb(239,211,47)" fg:x="54069" fg:w="15"/><text x="72.7597%" y="799.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (8,674 samples, 11.63%)</title><rect x="60.9001%" y="949" width="11.6323%" height="15" fill="rgb(251,223,49)" fg:x="45412" fg:w="8674"/><text x="61.1501%" y="959.50">&lt;core::pin::Pin&lt;P..</text></g><g><title>&lt;remoc::rch::mpsc::receiver::Receiver&lt;T,Codec,_&gt; as serde::ser::Serialize&gt;::serialize::{{closure}}::{{closure}} (5,323 samples, 7.14%)</title><rect x="65.3940%" y="933" width="7.1385%" height="15" fill="rgb(221,149,5)" fg:x="48763" fg:w="5323"/><text x="65.6440%" y="943.50">&lt;remoc::rc..</text></g><g><title>remoc::rch::base::sender::Sender&lt;T,Codec&gt;::send::{{closure}} (3,562 samples, 4.78%)</title><rect x="67.7556%" y="917" width="4.7768%" height="15" fill="rgb(219,224,51)" fg:x="50524" fg:w="3562"/><text x="68.0056%" y="927.50">remoc:..</text></g><g><title>remoc::rch::base::sender::Sender&lt;T,Codec&gt;::serialize_buffered (1,819 samples, 2.44%)</title><rect x="70.0931%" y="901" width="2.4394%" height="15" fill="rgb(223,7,8)" fg:x="52267" fg:w="1819"/><text x="70.3431%" y="911.50">re..</text></g><g><title>remoc::rch::base::sender::PortSerializer::start (462 samples, 0.62%)</title><rect x="71.9129%" y="885" width="0.6196%" height="15" fill="rgb(241,217,22)" fg:x="53624" fg:w="462"/><text x="72.1629%" y="895.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (34 samples, 0.05%)</title><rect x="72.4869%" y="869" width="0.0456%" height="15" fill="rgb(248,209,0)" fg:x="54052" fg:w="34"/><text x="72.7369%" y="879.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (22 samples, 0.03%)</title><rect x="72.5030%" y="853" width="0.0295%" height="15" fill="rgb(217,205,4)" fg:x="54064" fg:w="22"/><text x="72.7530%" y="863.50"></text></g><g><title>__rust_probestack (57 samples, 0.08%)</title><rect x="72.7578%" y="885" width="0.0764%" height="15" fill="rgb(228,124,39)" fg:x="54254" fg:w="57"/><text x="73.0078%" y="895.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (15 samples, 0.02%)</title><rect x="73.5168%" y="869" width="0.0201%" height="15" fill="rgb(250,116,42)" fg:x="54820" fg:w="15"/><text x="73.7668%" y="879.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_pin_mut (94 samples, 0.13%)</title><rect x="74.1042%" y="789" width="0.1261%" height="15" fill="rgb(223,202,9)" fg:x="55258" fg:w="94"/><text x="74.3542%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (87 samples, 0.12%)</title><rect x="74.1136%" y="773" width="0.1167%" height="15" fill="rgb(242,222,40)" fg:x="55265" fg:w="87"/><text x="74.3636%" y="783.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_pin_mut (60 samples, 0.08%)</title><rect x="74.6795%" y="693" width="0.0805%" height="15" fill="rgb(229,99,46)" fg:x="55687" fg:w="60"/><text x="74.9295%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (59 samples, 0.08%)</title><rect x="74.6808%" y="677" width="0.0791%" height="15" fill="rgb(225,56,46)" fg:x="55688" fg:w="59"/><text x="74.9308%" y="687.50"></text></g><g><title>core::task::poll::Poll&lt;T&gt;::map (10 samples, 0.01%)</title><rect x="74.8699%" y="645" width="0.0134%" height="15" fill="rgb(227,94,5)" fg:x="55829" fg:w="10"/><text x="75.1199%" y="655.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (9 samples, 0.01%)</title><rect x="74.8833%" y="597" width="0.0121%" height="15" fill="rgb(205,112,38)" fg:x="55839" fg:w="9"/><text x="75.1333%" y="607.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (9 samples, 0.01%)</title><rect x="74.8833%" y="581" width="0.0121%" height="15" fill="rgb(231,133,46)" fg:x="55839" fg:w="9"/><text x="75.1333%" y="591.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (11 samples, 0.01%)</title><rect x="74.8833%" y="645" width="0.0148%" height="15" fill="rgb(217,16,9)" fg:x="55839" fg:w="11"/><text x="75.1333%" y="655.50"></text></g><g><title>tokio::runtime::context::budget (11 samples, 0.01%)</title><rect x="74.8833%" y="629" width="0.0148%" height="15" fill="rgb(249,173,9)" fg:x="55839" fg:w="11"/><text x="75.1333%" y="639.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (11 samples, 0.01%)</title><rect x="74.8833%" y="613" width="0.0148%" height="15" fill="rgb(205,163,53)" fg:x="55839" fg:w="11"/><text x="75.1333%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (128 samples, 0.17%)</title><rect x="74.9517%" y="581" width="0.1717%" height="15" fill="rgb(217,54,41)" fg:x="55890" fg:w="128"/><text x="75.2017%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (128 samples, 0.17%)</title><rect x="74.9517%" y="565" width="0.1717%" height="15" fill="rgb(228,216,12)" fg:x="55890" fg:w="128"/><text x="75.2017%" y="575.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (38 samples, 0.05%)</title><rect x="75.1328%" y="437" width="0.0510%" height="15" fill="rgb(244,228,15)" fg:x="56025" fg:w="38"/><text x="75.3828%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (38 samples, 0.05%)</title><rect x="75.1328%" y="421" width="0.0510%" height="15" fill="rgb(221,176,53)" fg:x="56025" fg:w="38"/><text x="75.3828%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_add (38 samples, 0.05%)</title><rect x="75.1328%" y="405" width="0.0510%" height="15" fill="rgb(205,94,34)" fg:x="56025" fg:w="38"/><text x="75.3828%" y="415.50"></text></g><g><title>&lt;&amp;core::task::wake::Waker as tokio::sync::task::atomic_waker::WakerRef&gt;::into_waker (43 samples, 0.06%)</title><rect x="75.1274%" y="485" width="0.0577%" height="15" fill="rgb(213,110,48)" fg:x="56021" fg:w="43"/><text x="75.3774%" y="495.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (43 samples, 0.06%)</title><rect x="75.1274%" y="469" width="0.0577%" height="15" fill="rgb(236,142,28)" fg:x="56021" fg:w="43"/><text x="75.3774%" y="479.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (42 samples, 0.06%)</title><rect x="75.1287%" y="453" width="0.0563%" height="15" fill="rgb(225,135,29)" fg:x="56022" fg:w="42"/><text x="75.3787%" y="463.50"></text></g><g><title>tokio::runtime::time::entry::StateCell::poll (234 samples, 0.31%)</title><rect x="74.9222%" y="629" width="0.3138%" height="15" fill="rgb(252,45,31)" fg:x="55868" fg:w="234"/><text x="75.1722%" y="639.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (228 samples, 0.31%)</title><rect x="74.9303%" y="613" width="0.3058%" height="15" fill="rgb(211,187,50)" fg:x="55874" fg:w="228"/><text x="75.1803%" y="623.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register (228 samples, 0.31%)</title><rect x="74.9303%" y="597" width="0.3058%" height="15" fill="rgb(229,109,7)" fg:x="55874" fg:w="228"/><text x="75.1803%" y="607.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::catch_unwind (81 samples, 0.11%)</title><rect x="75.1274%" y="581" width="0.1086%" height="15" fill="rgb(251,131,51)" fg:x="56021" fg:w="81"/><text x="75.3774%" y="591.50"></text></g><g><title>std::panic::catch_unwind (81 samples, 0.11%)</title><rect x="75.1274%" y="565" width="0.1086%" height="15" fill="rgb(251,180,35)" fg:x="56021" fg:w="81"/><text x="75.3774%" y="575.50"></text></g><g><title>std::panicking::try (81 samples, 0.11%)</title><rect x="75.1274%" y="549" width="0.1086%" height="15" fill="rgb(211,46,32)" fg:x="56021" fg:w="81"/><text x="75.3774%" y="559.50"></text></g><g><title>std::panicking::try::do_call (81 samples, 0.11%)</title><rect x="75.1274%" y="533" width="0.1086%" height="15" fill="rgb(248,123,17)" fg:x="56021" fg:w="81"/><text x="75.3774%" y="543.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (81 samples, 0.11%)</title><rect x="75.1274%" y="517" width="0.1086%" height="15" fill="rgb(227,141,18)" fg:x="56021" fg:w="81"/><text x="75.3774%" y="527.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::{{closure}} (81 samples, 0.11%)</title><rect x="75.1274%" y="501" width="0.1086%" height="15" fill="rgb(216,102,9)" fg:x="56021" fg:w="81"/><text x="75.3774%" y="511.50"></text></g><g><title>core::mem::drop (38 samples, 0.05%)</title><rect x="75.1851%" y="485" width="0.0510%" height="15" fill="rgb(253,47,13)" fg:x="56064" fg:w="38"/><text x="75.4351%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (38 samples, 0.05%)</title><rect x="75.1851%" y="469" width="0.0510%" height="15" fill="rgb(226,93,23)" fg:x="56064" fg:w="38"/><text x="75.4351%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (38 samples, 0.05%)</title><rect x="75.1851%" y="453" width="0.0510%" height="15" fill="rgb(247,104,17)" fg:x="56064" fg:w="38"/><text x="75.4351%" y="463.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (38 samples, 0.05%)</title><rect x="75.1851%" y="437" width="0.0510%" height="15" fill="rgb(233,203,26)" fg:x="56064" fg:w="38"/><text x="75.4351%" y="447.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (32 samples, 0.04%)</title><rect x="75.1931%" y="421" width="0.0429%" height="15" fill="rgb(244,98,49)" fg:x="56070" fg:w="32"/><text x="75.4431%" y="431.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::drop_reference (32 samples, 0.04%)</title><rect x="75.1931%" y="405" width="0.0429%" height="15" fill="rgb(235,134,22)" fg:x="56070" fg:w="32"/><text x="75.4431%" y="415.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (32 samples, 0.04%)</title><rect x="75.1931%" y="389" width="0.0429%" height="15" fill="rgb(221,70,32)" fg:x="56070" fg:w="32"/><text x="75.4431%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (32 samples, 0.04%)</title><rect x="75.1931%" y="373" width="0.0429%" height="15" fill="rgb(238,15,50)" fg:x="56070" fg:w="32"/><text x="75.4431%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_sub (32 samples, 0.04%)</title><rect x="75.1931%" y="357" width="0.0429%" height="15" fill="rgb(215,221,48)" fg:x="56070" fg:w="32"/><text x="75.4431%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (17 samples, 0.02%)</title><rect x="75.2360%" y="597" width="0.0228%" height="15" fill="rgb(236,73,3)" fg:x="56102" fg:w="17"/><text x="75.4860%" y="607.50"></text></g><g><title>tokio::runtime::driver::Handle::time (19 samples, 0.03%)</title><rect x="75.2360%" y="613" width="0.0255%" height="15" fill="rgb(250,107,11)" fg:x="56102" fg:w="19"/><text x="75.4860%" y="623.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::driver (45 samples, 0.06%)</title><rect x="75.2360%" y="629" width="0.0603%" height="15" fill="rgb(242,39,14)" fg:x="56102" fg:w="45"/><text x="75.4860%" y="639.50"></text></g><g><title>tokio::runtime::scheduler::Handle::driver (26 samples, 0.03%)</title><rect x="75.2615%" y="613" width="0.0349%" height="15" fill="rgb(248,164,37)" fg:x="56121" fg:w="26"/><text x="75.5115%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::time::InnerState&gt;&gt; (12 samples, 0.02%)</title><rect x="75.3111%" y="597" width="0.0161%" height="15" fill="rgb(217,60,12)" fg:x="56158" fg:w="12"/><text x="75.5611%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::time::InnerState&gt;&gt; (12 samples, 0.02%)</title><rect x="75.3111%" y="581" width="0.0161%" height="15" fill="rgb(240,125,29)" fg:x="56158" fg:w="12"/><text x="75.5611%" y="591.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.02%)</title><rect x="75.3111%" y="565" width="0.0161%" height="15" fill="rgb(208,207,28)" fg:x="56158" fg:w="12"/><text x="75.5611%" y="575.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (12 samples, 0.02%)</title><rect x="75.3111%" y="549" width="0.0161%" height="15" fill="rgb(209,159,27)" fg:x="56158" fg:w="12"/><text x="75.5611%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (12 samples, 0.02%)</title><rect x="75.3111%" y="533" width="0.0161%" height="15" fill="rgb(251,176,53)" fg:x="56158" fg:w="12"/><text x="75.5611%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (12 samples, 0.02%)</title><rect x="75.3111%" y="517" width="0.0161%" height="15" fill="rgb(211,85,7)" fg:x="56158" fg:w="12"/><text x="75.5611%" y="527.50"></text></g><g><title>tokio::runtime::time::Inner::lock (8 samples, 0.01%)</title><rect x="75.3272%" y="597" width="0.0107%" height="15" fill="rgb(216,64,54)" fg:x="56170" fg:w="8"/><text x="75.5772%" y="607.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (8 samples, 0.01%)</title><rect x="75.3272%" y="581" width="0.0107%" height="15" fill="rgb(217,54,24)" fg:x="56170" fg:w="8"/><text x="75.5772%" y="591.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (8 samples, 0.01%)</title><rect x="75.3272%" y="565" width="0.0107%" height="15" fill="rgb(208,206,53)" fg:x="56170" fg:w="8"/><text x="75.5772%" y="575.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (8 samples, 0.01%)</title><rect x="75.3272%" y="549" width="0.0107%" height="15" fill="rgb(251,74,39)" fg:x="56170" fg:w="8"/><text x="75.5772%" y="559.50"></text></g><g><title>tokio::runtime::time::entry::TimerHandle::set_expiration (9 samples, 0.01%)</title><rect x="75.3379%" y="597" width="0.0121%" height="15" fill="rgb(226,47,5)" fg:x="56178" fg:w="9"/><text x="75.5879%" y="607.50"></text></g><g><title>tokio::runtime::time::entry::TimerShared::set_expiration (9 samples, 0.01%)</title><rect x="75.3379%" y="581" width="0.0121%" height="15" fill="rgb(234,111,33)" fg:x="56178" fg:w="9"/><text x="75.5879%" y="591.50"></text></g><g><title>tokio::runtime::time::entry::StateCell::set_expiration (8 samples, 0.01%)</title><rect x="75.3393%" y="565" width="0.0107%" height="15" fill="rgb(251,14,10)" fg:x="56179" fg:w="8"/><text x="75.5893%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicU64::store (8 samples, 0.01%)</title><rect x="75.3393%" y="549" width="0.0107%" height="15" fill="rgb(232,43,0)" fg:x="56179" fg:w="8"/><text x="75.5893%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_store (8 samples, 0.01%)</title><rect x="75.3393%" y="533" width="0.0107%" height="15" fill="rgb(222,68,43)" fg:x="56179" fg:w="8"/><text x="75.5893%" y="543.50"></text></g><g><title>tokio::runtime::time::handle::Handle::is_shutdown (14 samples, 0.02%)</title><rect x="75.3500%" y="597" width="0.0188%" height="15" fill="rgb(217,24,23)" fg:x="56187" fg:w="14"/><text x="75.6000%" y="607.50"></text></g><g><title>tokio::runtime::time::Inner::is_shutdown (14 samples, 0.02%)</title><rect x="75.3500%" y="581" width="0.0188%" height="15" fill="rgb(229,209,14)" fg:x="56187" fg:w="14"/><text x="75.6000%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (14 samples, 0.02%)</title><rect x="75.3500%" y="565" width="0.0188%" height="15" fill="rgb(250,149,48)" fg:x="56187" fg:w="14"/><text x="75.6000%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_load (14 samples, 0.02%)</title><rect x="75.3500%" y="549" width="0.0188%" height="15" fill="rgb(210,120,37)" fg:x="56187" fg:w="14"/><text x="75.6000%" y="559.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::reregister (69 samples, 0.09%)</title><rect x="75.3017%" y="613" width="0.0925%" height="15" fill="rgb(210,21,8)" fg:x="56151" fg:w="69"/><text x="75.5517%" y="623.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::insert (19 samples, 0.03%)</title><rect x="75.3688%" y="597" width="0.0255%" height="15" fill="rgb(243,145,7)" fg:x="56201" fg:w="19"/><text x="75.6188%" y="607.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::add_entry (14 samples, 0.02%)</title><rect x="75.3755%" y="581" width="0.0188%" height="15" fill="rgb(238,178,32)" fg:x="56206" fg:w="14"/><text x="75.6255%" y="591.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (11 samples, 0.01%)</title><rect x="75.3795%" y="565" width="0.0148%" height="15" fill="rgb(222,4,10)" fg:x="56209" fg:w="11"/><text x="75.6295%" y="575.50"></text></g><g><title>tokio::runtime::driver::Handle::time (13 samples, 0.02%)</title><rect x="75.3943%" y="597" width="0.0174%" height="15" fill="rgb(239,7,37)" fg:x="56220" fg:w="13"/><text x="75.6443%" y="607.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (13 samples, 0.02%)</title><rect x="75.3943%" y="581" width="0.0174%" height="15" fill="rgb(215,31,37)" fg:x="56220" fg:w="13"/><text x="75.6443%" y="591.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::driver (18 samples, 0.02%)</title><rect x="75.3943%" y="613" width="0.0241%" height="15" fill="rgb(224,83,33)" fg:x="56220" fg:w="18"/><text x="75.6443%" y="623.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::reset (114 samples, 0.15%)</title><rect x="75.2964%" y="629" width="0.1529%" height="15" fill="rgb(239,55,3)" fg:x="56147" fg:w="114"/><text x="75.5464%" y="639.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::deadline_to_tick (17 samples, 0.02%)</title><rect x="75.4265%" y="613" width="0.0228%" height="15" fill="rgb(247,92,11)" fg:x="56244" fg:w="17"/><text x="75.6765%" y="623.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::instant_to_tick (9 samples, 0.01%)</title><rect x="75.4372%" y="597" width="0.0121%" height="15" fill="rgb(239,200,7)" fg:x="56252" fg:w="9"/><text x="75.6872%" y="607.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (440 samples, 0.59%)</title><rect x="74.8646%" y="677" width="0.5901%" height="15" fill="rgb(227,115,8)" fg:x="55825" fg:w="440"/><text x="75.1146%" y="687.50"></text></g><g><title>tokio::time::sleep::Sleep::poll_elapsed (438 samples, 0.59%)</title><rect x="74.8672%" y="661" width="0.5874%" height="15" fill="rgb(215,189,27)" fg:x="55827" fg:w="438"/><text x="75.1172%" y="671.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::poll_elapsed (415 samples, 0.56%)</title><rect x="74.8981%" y="645" width="0.5565%" height="15" fill="rgb(251,216,39)" fg:x="55850" fg:w="415"/><text x="75.1481%" y="655.50"></text></g><g><title>tokio::time::instant::Instant::checked_add (8 samples, 0.01%)</title><rect x="75.4573%" y="661" width="0.0107%" height="15" fill="rgb(207,29,47)" fg:x="56267" fg:w="8"/><text x="75.7073%" y="671.50"></text></g><g><title>std::time::SystemTime::checked_add (8 samples, 0.01%)</title><rect x="75.4573%" y="645" width="0.0107%" height="15" fill="rgb(210,71,34)" fg:x="56267" fg:w="8"/><text x="75.7073%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (80 samples, 0.11%)</title><rect x="75.4680%" y="629" width="0.1073%" height="15" fill="rgb(253,217,51)" fg:x="56275" fg:w="80"/><text x="75.7180%" y="639.50"></text></g><g><title>clock_gettime (79 samples, 0.11%)</title><rect x="75.4694%" y="613" width="0.1059%" height="15" fill="rgb(222,117,46)" fg:x="56276" fg:w="79"/><text x="75.7194%" y="623.50"></text></g><g><title>__vdso_clock_gettime (50 samples, 0.07%)</title><rect x="75.5083%" y="597" width="0.0671%" height="15" fill="rgb(226,132,6)" fg:x="56305" fg:w="50"/><text x="75.7583%" y="607.50"></text></g><g><title>tokio::time::instant::Instant::now (83 samples, 0.11%)</title><rect x="75.4680%" y="661" width="0.1113%" height="15" fill="rgb(254,145,51)" fg:x="56275" fg:w="83"/><text x="75.7180%" y="671.50"></text></g><g><title>tokio::time::instant::variant::now (83 samples, 0.11%)</title><rect x="75.4680%" y="645" width="0.1113%" height="15" fill="rgb(231,199,27)" fg:x="56275" fg:w="83"/><text x="75.7180%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::scheduler::Handle&gt; (10 samples, 0.01%)</title><rect x="75.5847%" y="645" width="0.0134%" height="15" fill="rgb(245,158,14)" fg:x="56362" fg:w="10"/><text x="75.8347%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt; (10 samples, 0.01%)</title><rect x="75.5847%" y="629" width="0.0134%" height="15" fill="rgb(240,113,14)" fg:x="56362" fg:w="10"/><text x="75.8347%" y="639.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.01%)</title><rect x="75.5847%" y="613" width="0.0134%" height="15" fill="rgb(210,20,13)" fg:x="56362" fg:w="10"/><text x="75.8347%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (10 samples, 0.01%)</title><rect x="75.5847%" y="597" width="0.0134%" height="15" fill="rgb(241,144,13)" fg:x="56362" fg:w="10"/><text x="75.8347%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_sub (10 samples, 0.01%)</title><rect x="75.5847%" y="581" width="0.0134%" height="15" fill="rgb(235,43,34)" fg:x="56362" fg:w="10"/><text x="75.8347%" y="591.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (12 samples, 0.02%)</title><rect x="75.6008%" y="581" width="0.0161%" height="15" fill="rgb(208,36,20)" fg:x="56374" fg:w="12"/><text x="75.8508%" y="591.50"></text></g><g><title>&lt;tokio::runtime::scheduler::Handle as core::clone::Clone&gt;::clone (12 samples, 0.02%)</title><rect x="75.6008%" y="565" width="0.0161%" height="15" fill="rgb(239,204,10)" fg:x="56374" fg:w="12"/><text x="75.8508%" y="575.50"></text></g><g><title>tokio::runtime::scheduler::Handle::current (23 samples, 0.03%)</title><rect x="75.5981%" y="645" width="0.0308%" height="15" fill="rgb(217,84,43)" fg:x="56372" fg:w="23"/><text x="75.8481%" y="655.50"></text></g><g><title>tokio::runtime::context::try_current (23 samples, 0.03%)</title><rect x="75.5981%" y="629" width="0.0308%" height="15" fill="rgb(241,170,50)" fg:x="56372" fg:w="23"/><text x="75.8481%" y="639.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (23 samples, 0.03%)</title><rect x="75.5981%" y="613" width="0.0308%" height="15" fill="rgb(226,205,29)" fg:x="56372" fg:w="23"/><text x="75.8481%" y="623.50"></text></g><g><title>tokio::runtime::context::try_current::{{closure}} (21 samples, 0.03%)</title><rect x="75.6008%" y="597" width="0.0282%" height="15" fill="rgb(233,113,1)" fg:x="56374" fg:w="21"/><text x="75.8508%" y="607.50"></text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (720 samples, 0.97%)</title><rect x="74.6768%" y="709" width="0.9656%" height="15" fill="rgb(253,98,13)" fg:x="55685" fg:w="720"/><text x="74.9268%" y="719.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::recv_task::{{closure}}::get_connection_timeout::{{closure}} (658 samples, 0.88%)</title><rect x="74.7600%" y="693" width="0.8824%" height="15" fill="rgb(211,115,12)" fg:x="55747" fg:w="658"/><text x="75.0100%" y="703.50"></text></g><g><title>tokio::time::sleep::sleep (140 samples, 0.19%)</title><rect x="75.4546%" y="677" width="0.1877%" height="15" fill="rgb(208,12,16)" fg:x="56265" fg:w="140"/><text x="75.7046%" y="687.50"></text></g><g><title>tokio::time::sleep::Sleep::new_timeout (47 samples, 0.06%)</title><rect x="75.5793%" y="661" width="0.0630%" height="15" fill="rgb(237,193,54)" fg:x="56358" fg:w="47"/><text x="75.8293%" y="671.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::new (10 samples, 0.01%)</title><rect x="75.6290%" y="645" width="0.0134%" height="15" fill="rgb(243,22,42)" fg:x="56395" fg:w="10"/><text x="75.8790%" y="655.50"></text></g><g><title>&lt;&amp;mut F as core::future::future::Future&gt;::poll (730 samples, 0.98%)</title><rect x="74.6674%" y="741" width="0.9790%" height="15" fill="rgb(233,151,36)" fg:x="55678" fg:w="730"/><text x="74.9174%" y="751.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (724 samples, 0.97%)</title><rect x="74.6755%" y="725" width="0.9709%" height="15" fill="rgb(237,57,45)" fg:x="55684" fg:w="724"/><text x="74.9255%" y="735.50"></text></g><g><title>&lt;core::task::poll::Poll&lt;core::result::Result&lt;T,E&gt;&gt; as core::ops::try_trait::Try&gt;::branch (17 samples, 0.02%)</title><rect x="76.4202%" y="581" width="0.0228%" height="15" fill="rgb(221,88,17)" fg:x="56985" fg:w="17"/><text x="76.6702%" y="591.50"></text></g><g><title>tokio_util::codec::length_delimited::LengthDelimitedCodec::decode_data (91 samples, 0.12%)</title><rect x="76.5006%" y="565" width="0.1220%" height="15" fill="rgb(230,79,15)" fg:x="57045" fg:w="91"/><text x="76.7506%" y="575.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (78 samples, 0.10%)</title><rect x="76.5181%" y="549" width="0.1046%" height="15" fill="rgb(213,57,13)" fg:x="57058" fg:w="78"/><text x="76.7681%" y="559.50"></text></g><g><title>bytes::bytes_mut::BytesMut::shallow_clone (60 samples, 0.08%)</title><rect x="76.5422%" y="533" width="0.0805%" height="15" fill="rgb(222,116,39)" fg:x="57076" fg:w="60"/><text x="76.7922%" y="543.50"></text></g><g><title>bytes::bytes_mut::increment_shared (54 samples, 0.07%)</title><rect x="76.5503%" y="517" width="0.0724%" height="15" fill="rgb(245,107,2)" fg:x="57082" fg:w="54"/><text x="76.8003%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (54 samples, 0.07%)</title><rect x="76.5503%" y="501" width="0.0724%" height="15" fill="rgb(238,1,10)" fg:x="57082" fg:w="54"/><text x="76.8003%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_add (54 samples, 0.07%)</title><rect x="76.5503%" y="485" width="0.0724%" height="15" fill="rgb(249,4,48)" fg:x="57082" fg:w="54"/><text x="76.8003%" y="495.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (10 samples, 0.01%)</title><rect x="76.6294%" y="549" width="0.0134%" height="15" fill="rgb(223,151,18)" fg:x="57141" fg:w="10"/><text x="76.8794%" y="559.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (10 samples, 0.01%)</title><rect x="76.6294%" y="533" width="0.0134%" height="15" fill="rgb(227,65,43)" fg:x="57141" fg:w="10"/><text x="76.8794%" y="543.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;T&gt; as bytes::buf::buf_impl::Buf&gt;::advance (9 samples, 0.01%)</title><rect x="76.6428%" y="549" width="0.0121%" height="15" fill="rgb(218,40,45)" fg:x="57151" fg:w="9"/><text x="76.8928%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (33 samples, 0.04%)</title><rect x="76.7005%" y="517" width="0.0443%" height="15" fill="rgb(252,121,31)" fg:x="57194" fg:w="33"/><text x="76.9505%" y="527.50"></text></g><g><title>[libc.so.6] (31 samples, 0.04%)</title><rect x="76.7031%" y="501" width="0.0416%" height="15" fill="rgb(219,158,43)" fg:x="57196" fg:w="31"/><text x="76.9531%" y="511.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_uint_le (68 samples, 0.09%)</title><rect x="76.6549%" y="549" width="0.0912%" height="15" fill="rgb(231,162,42)" fg:x="57160" fg:w="68"/><text x="76.9049%" y="559.50"></text></g><g><title>bytes::buf::buf_impl::Buf::copy_to_slice (38 samples, 0.05%)</title><rect x="76.6951%" y="533" width="0.0510%" height="15" fill="rgb(217,179,25)" fg:x="57190" fg:w="38"/><text x="76.9451%" y="543.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (12 samples, 0.02%)</title><rect x="76.7487%" y="549" width="0.0161%" height="15" fill="rgb(206,212,31)" fg:x="57230" fg:w="12"/><text x="76.9987%" y="559.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (12 samples, 0.02%)</title><rect x="76.7487%" y="533" width="0.0161%" height="15" fill="rgb(235,144,12)" fg:x="57230" fg:w="12"/><text x="76.9987%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (12 samples, 0.02%)</title><rect x="76.7487%" y="517" width="0.0161%" height="15" fill="rgb(213,51,10)" fg:x="57230" fg:w="12"/><text x="76.9987%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12 samples, 0.02%)</title><rect x="76.7487%" y="501" width="0.0161%" height="15" fill="rgb(231,145,14)" fg:x="57230" fg:w="12"/><text x="76.9987%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12 samples, 0.02%)</title><rect x="76.7487%" y="485" width="0.0161%" height="15" fill="rgb(235,15,28)" fg:x="57230" fg:w="12"/><text x="76.9987%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (12 samples, 0.02%)</title><rect x="76.7487%" y="469" width="0.0161%" height="15" fill="rgb(237,206,10)" fg:x="57230" fg:w="12"/><text x="76.9987%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.02%)</title><rect x="76.7487%" y="453" width="0.0161%" height="15" fill="rgb(236,227,27)" fg:x="57230" fg:w="12"/><text x="76.9987%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.02%)</title><rect x="76.7487%" y="437" width="0.0161%" height="15" fill="rgb(246,83,35)" fg:x="57230" fg:w="12"/><text x="76.9987%" y="447.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.02%)</title><rect x="76.7487%" y="421" width="0.0161%" height="15" fill="rgb(220,136,24)" fg:x="57230" fg:w="12"/><text x="76.9987%" y="431.50"></text></g><g><title>malloc (12 samples, 0.02%)</title><rect x="76.7487%" y="405" width="0.0161%" height="15" fill="rgb(217,3,25)" fg:x="57230" fg:w="12"/><text x="76.9987%" y="415.50"></text></g><g><title>[libc.so.6] (12 samples, 0.02%)</title><rect x="76.7487%" y="389" width="0.0161%" height="15" fill="rgb(239,24,14)" fg:x="57230" fg:w="12"/><text x="76.9987%" y="399.50"></text></g><g><title>[libc.so.6] (9 samples, 0.01%)</title><rect x="76.7528%" y="373" width="0.0121%" height="15" fill="rgb(244,16,53)" fg:x="57233" fg:w="9"/><text x="77.0028%" y="383.50"></text></g><g><title>&lt;tokio_util::codec::length_delimited::LengthDelimitedCodec as tokio_util::codec::decoder::Decoder&gt;::decode (284 samples, 0.38%)</title><rect x="76.4430%" y="581" width="0.3809%" height="15" fill="rgb(208,175,44)" fg:x="57002" fg:w="284"/><text x="76.6930%" y="591.50"></text></g><g><title>tokio_util::codec::length_delimited::LengthDelimitedCodec::decode_head (150 samples, 0.20%)</title><rect x="76.6227%" y="565" width="0.2012%" height="15" fill="rgb(252,18,48)" fg:x="57136" fg:w="150"/><text x="76.8727%" y="575.50"></text></g><g><title>tokio_util::codec::length_delimited::Builder::num_head_bytes (35 samples, 0.05%)</title><rect x="76.7769%" y="549" width="0.0469%" height="15" fill="rgb(234,199,32)" fg:x="57251" fg:w="35"/><text x="77.0269%" y="559.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (61 samples, 0.08%)</title><rect x="76.8238%" y="581" width="0.0818%" height="15" fill="rgb(225,77,54)" fg:x="57286" fg:w="61"/><text x="77.0738%" y="591.50"></text></g><g><title>bytes::bytes_mut::BytesMut::capacity (18 samples, 0.02%)</title><rect x="76.8815%" y="565" width="0.0241%" height="15" fill="rgb(225,42,25)" fg:x="57329" fg:w="18"/><text x="77.1315%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (17 samples, 0.02%)</title><rect x="76.9056%" y="581" width="0.0228%" height="15" fill="rgb(242,227,46)" fg:x="57347" fg:w="17"/><text x="77.1556%" y="591.50"></text></g><g><title>core::task::poll::Poll&lt;core::result::Result&lt;T,E&gt;&gt;::map_err (39 samples, 0.05%)</title><rect x="76.9284%" y="581" width="0.0523%" height="15" fill="rgb(246,197,35)" fg:x="57364" fg:w="39"/><text x="77.1784%" y="591.50"></text></g><g><title>bytes::buf::uninit_slice::UninitSlice::from_slice (39 samples, 0.05%)</title><rect x="77.0009%" y="549" width="0.0523%" height="15" fill="rgb(215,159,26)" fg:x="57418" fg:w="39"/><text x="77.2509%" y="559.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (55 samples, 0.07%)</title><rect x="77.0009%" y="565" width="0.0738%" height="15" fill="rgb(212,194,50)" fg:x="57418" fg:w="55"/><text x="77.2509%" y="575.50"></text></g><g><title>bytes::bytes_mut::BytesMut::spare_capacity_mut (13 samples, 0.02%)</title><rect x="77.0572%" y="549" width="0.0174%" height="15" fill="rgb(246,132,1)" fg:x="57460" fg:w="13"/><text x="77.3072%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (13 samples, 0.02%)</title><rect x="77.0572%" y="533" width="0.0174%" height="15" fill="rgb(217,71,7)" fg:x="57460" fg:w="13"/><text x="77.3072%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (13 samples, 0.02%)</title><rect x="77.0572%" y="517" width="0.0174%" height="15" fill="rgb(252,59,32)" fg:x="57460" fg:w="13"/><text x="77.3072%" y="527.50"></text></g><g><title>&lt;mpc_channel::util::TrackingReader&lt;AR&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (8 samples, 0.01%)</title><rect x="77.0988%" y="549" width="0.0107%" height="15" fill="rgb(253,204,25)" fg:x="57491" fg:w="8"/><text x="77.3488%" y="559.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (85 samples, 0.11%)</title><rect x="77.1336%" y="501" width="0.1140%" height="15" fill="rgb(232,21,16)" fg:x="57517" fg:w="85"/><text x="77.3836%" y="511.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (85 samples, 0.11%)</title><rect x="77.1336%" y="485" width="0.1140%" height="15" fill="rgb(248,90,29)" fg:x="57517" fg:w="85"/><text x="77.3836%" y="495.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (85 samples, 0.11%)</title><rect x="77.1336%" y="469" width="0.1140%" height="15" fill="rgb(249,223,7)" fg:x="57517" fg:w="85"/><text x="77.3836%" y="479.50"></text></g><g><title>&lt;mpc_channel::util::Counter as core::ops::arith::AddAssign&lt;usize&gt;&gt;::add_assign (204 samples, 0.27%)</title><rect x="77.1336%" y="517" width="0.2736%" height="15" fill="rgb(231,119,42)" fg:x="57517" fg:w="204"/><text x="77.3836%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (119 samples, 0.16%)</title><rect x="77.2476%" y="501" width="0.1596%" height="15" fill="rgb(215,41,35)" fg:x="57602" fg:w="119"/><text x="77.4976%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_add (119 samples, 0.16%)</title><rect x="77.2476%" y="485" width="0.1596%" height="15" fill="rgb(220,44,45)" fg:x="57602" fg:w="119"/><text x="77.4976%" y="495.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedReadHalf as tokio::io::async_read::AsyncRead&gt;::poll_read (45 samples, 0.06%)</title><rect x="77.4072%" y="517" width="0.0603%" height="15" fill="rgb(253,197,36)" fg:x="57721" fg:w="45"/><text x="77.6572%" y="527.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (45 samples, 0.06%)</title><rect x="77.4072%" y="501" width="0.0603%" height="15" fill="rgb(245,225,54)" fg:x="57721" fg:w="45"/><text x="77.6572%" y="511.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (44 samples, 0.06%)</title><rect x="77.4085%" y="485" width="0.0590%" height="15" fill="rgb(239,94,37)" fg:x="57722" fg:w="44"/><text x="77.6585%" y="495.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (44 samples, 0.06%)</title><rect x="77.4085%" y="469" width="0.0590%" height="15" fill="rgb(242,217,10)" fg:x="57722" fg:w="44"/><text x="77.6585%" y="479.50"></text></g><g><title>recv (137 samples, 0.18%)</title><rect x="77.5467%" y="373" width="0.1837%" height="15" fill="rgb(250,193,7)" fg:x="57825" fg:w="137"/><text x="77.7967%" y="383.50"></text></g><g><title>[libc.so.6] (43 samples, 0.06%)</title><rect x="77.6727%" y="357" width="0.0577%" height="15" fill="rgb(230,104,19)" fg:x="57919" fg:w="43"/><text x="77.9227%" y="367.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (150 samples, 0.20%)</title><rect x="77.5359%" y="501" width="0.2012%" height="15" fill="rgb(230,181,4)" fg:x="57817" fg:w="150"/><text x="77.7859%" y="511.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (142 samples, 0.19%)</title><rect x="77.5467%" y="485" width="0.1904%" height="15" fill="rgb(216,219,49)" fg:x="57825" fg:w="142"/><text x="77.7967%" y="495.50"></text></g><g><title>mio::sys::unix::IoSourceState::do_io (142 samples, 0.19%)</title><rect x="77.5467%" y="469" width="0.1904%" height="15" fill="rgb(254,144,0)" fg:x="57825" fg:w="142"/><text x="77.7967%" y="479.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::{{closure}} (142 samples, 0.19%)</title><rect x="77.5467%" y="453" width="0.1904%" height="15" fill="rgb(205,209,38)" fg:x="57825" fg:w="142"/><text x="77.7967%" y="463.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (142 samples, 0.19%)</title><rect x="77.5467%" y="437" width="0.1904%" height="15" fill="rgb(240,21,42)" fg:x="57825" fg:w="142"/><text x="77.7967%" y="447.50"></text></g><g><title>std::sys_common::net::TcpStream::read (142 samples, 0.19%)</title><rect x="77.5467%" y="421" width="0.1904%" height="15" fill="rgb(241,132,3)" fg:x="57825" fg:w="142"/><text x="77.7967%" y="431.50"></text></g><g><title>std::sys::unix::net::Socket::read (142 samples, 0.19%)</title><rect x="77.5467%" y="405" width="0.1904%" height="15" fill="rgb(225,14,2)" fg:x="57825" fg:w="142"/><text x="77.7967%" y="415.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (142 samples, 0.19%)</title><rect x="77.5467%" y="389" width="0.1904%" height="15" fill="rgb(210,141,35)" fg:x="57825" fg:w="142"/><text x="77.7967%" y="399.50"></text></g><g><title>tokio::runtime::io::registration::Registration::clear_readiness (11 samples, 0.01%)</title><rect x="77.7465%" y="501" width="0.0148%" height="15" fill="rgb(251,14,44)" fg:x="57974" fg:w="11"/><text x="77.9965%" y="511.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::clear_readiness (8 samples, 0.01%)</title><rect x="77.7505%" y="485" width="0.0107%" height="15" fill="rgb(247,48,18)" fg:x="57977" fg:w="8"/><text x="78.0005%" y="495.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::set_readiness (8 samples, 0.01%)</title><rect x="77.7505%" y="469" width="0.0107%" height="15" fill="rgb(225,0,40)" fg:x="57977" fg:w="8"/><text x="78.0005%" y="479.50"></text></g><g><title>&lt;tokio::util::slab::Ref&lt;T&gt; as core::ops::deref::Deref&gt;::deref (77 samples, 0.10%)</title><rect x="77.7907%" y="469" width="0.1033%" height="15" fill="rgb(221,31,33)" fg:x="58007" fg:w="77"/><text x="78.0407%" y="479.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (15 samples, 0.02%)</title><rect x="77.8940%" y="405" width="0.0201%" height="15" fill="rgb(237,42,40)" fg:x="58084" fg:w="15"/><text x="78.1440%" y="415.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (15 samples, 0.02%)</title><rect x="77.8940%" y="389" width="0.0201%" height="15" fill="rgb(233,51,29)" fg:x="58084" fg:w="15"/><text x="78.1440%" y="399.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (15 samples, 0.02%)</title><rect x="77.8940%" y="373" width="0.0201%" height="15" fill="rgb(226,58,20)" fg:x="58084" fg:w="15"/><text x="78.1440%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (15 samples, 0.02%)</title><rect x="77.8940%" y="357" width="0.0201%" height="15" fill="rgb(208,98,7)" fg:x="58084" fg:w="15"/><text x="78.1440%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::coop::RestoreOnPending&gt; (27 samples, 0.04%)</title><rect x="77.8940%" y="469" width="0.0362%" height="15" fill="rgb(228,143,44)" fg:x="58084" fg:w="27"/><text x="78.1440%" y="479.50"></text></g><g><title>&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (27 samples, 0.04%)</title><rect x="77.8940%" y="453" width="0.0362%" height="15" fill="rgb(246,55,38)" fg:x="58084" fg:w="27"/><text x="78.1440%" y="463.50"></text></g><g><title>tokio::runtime::context::budget (27 samples, 0.04%)</title><rect x="77.8940%" y="437" width="0.0362%" height="15" fill="rgb(247,87,16)" fg:x="58084" fg:w="27"/><text x="78.1440%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (27 samples, 0.04%)</title><rect x="77.8940%" y="421" width="0.0362%" height="15" fill="rgb(234,129,42)" fg:x="58084" fg:w="27"/><text x="78.1440%" y="431.50"></text></g><g><title>tokio::runtime::context::budget::{{closure}} (12 samples, 0.02%)</title><rect x="77.9141%" y="405" width="0.0161%" height="15" fill="rgb(220,82,16)" fg:x="58099" fg:w="12"/><text x="78.1641%" y="415.50"></text></g><g><title>&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop::{{closure}} (12 samples, 0.02%)</title><rect x="77.9141%" y="389" width="0.0161%" height="15" fill="rgb(211,88,4)" fg:x="58099" fg:w="12"/><text x="78.1641%" y="399.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (12 samples, 0.02%)</title><rect x="77.9141%" y="373" width="0.0161%" height="15" fill="rgb(248,151,21)" fg:x="58099" fg:w="12"/><text x="78.1641%" y="383.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (12 samples, 0.02%)</title><rect x="77.9141%" y="357" width="0.0161%" height="15" fill="rgb(238,163,6)" fg:x="58099" fg:w="12"/><text x="78.1641%" y="367.50"></text></g><g><title>core::mem::replace (12 samples, 0.02%)</title><rect x="77.9141%" y="341" width="0.0161%" height="15" fill="rgb(209,183,11)" fg:x="58099" fg:w="12"/><text x="78.1641%" y="351.50"></text></g><g><title>core::ptr::write (12 samples, 0.02%)</title><rect x="77.9141%" y="325" width="0.0161%" height="15" fill="rgb(219,37,20)" fg:x="58099" fg:w="12"/><text x="78.1641%" y="335.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (11 samples, 0.01%)</title><rect x="77.9302%" y="469" width="0.0148%" height="15" fill="rgb(210,158,4)" fg:x="58111" fg:w="11"/><text x="78.1802%" y="479.50"></text></g><g><title>tokio::runtime::context::budget (11 samples, 0.01%)</title><rect x="77.9302%" y="453" width="0.0148%" height="15" fill="rgb(221,167,53)" fg:x="58111" fg:w="11"/><text x="78.1802%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (11 samples, 0.01%)</title><rect x="77.9302%" y="437" width="0.0148%" height="15" fill="rgb(237,151,45)" fg:x="58111" fg:w="11"/><text x="78.1802%" y="447.50"></text></g><g><title>tokio::runtime::context::budget::{{closure}} (9 samples, 0.01%)</title><rect x="77.9329%" y="421" width="0.0121%" height="15" fill="rgb(231,39,3)" fg:x="58113" fg:w="9"/><text x="78.1829%" y="431.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::{{closure}} (9 samples, 0.01%)</title><rect x="77.9329%" y="405" width="0.0121%" height="15" fill="rgb(212,167,28)" fg:x="58113" fg:w="9"/><text x="78.1829%" y="415.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (8 samples, 0.01%)</title><rect x="78.0227%" y="453" width="0.0107%" height="15" fill="rgb(232,178,8)" fg:x="58180" fg:w="8"/><text x="78.2727%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::io::scheduled_io::Waiters&gt;&gt; (41 samples, 0.05%)</title><rect x="78.0335%" y="453" width="0.0550%" height="15" fill="rgb(225,151,20)" fg:x="58188" fg:w="41"/><text x="78.2835%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::io::scheduled_io::Waiters&gt;&gt; (41 samples, 0.05%)</title><rect x="78.0335%" y="437" width="0.0550%" height="15" fill="rgb(238,3,37)" fg:x="58188" fg:w="41"/><text x="78.2835%" y="447.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.05%)</title><rect x="78.0335%" y="421" width="0.0550%" height="15" fill="rgb(251,147,42)" fg:x="58188" fg:w="41"/><text x="78.2835%" y="431.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (41 samples, 0.05%)</title><rect x="78.0335%" y="405" width="0.0550%" height="15" fill="rgb(208,173,10)" fg:x="58188" fg:w="41"/><text x="78.2835%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (40 samples, 0.05%)</title><rect x="78.0348%" y="389" width="0.0536%" height="15" fill="rgb(246,225,4)" fg:x="58189" fg:w="40"/><text x="78.2848%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (40 samples, 0.05%)</title><rect x="78.0348%" y="373" width="0.0536%" height="15" fill="rgb(248,102,6)" fg:x="58189" fg:w="40"/><text x="78.2848%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (65 samples, 0.09%)</title><rect x="78.0885%" y="453" width="0.0872%" height="15" fill="rgb(232,6,21)" fg:x="58229" fg:w="65"/><text x="78.3385%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (65 samples, 0.09%)</title><rect x="78.0885%" y="437" width="0.0872%" height="15" fill="rgb(221,179,22)" fg:x="58229" fg:w="65"/><text x="78.3385%" y="447.50"></text></g><g><title>core::task::wake::Waker::will_wake (42 samples, 0.06%)</title><rect x="78.1756%" y="453" width="0.0563%" height="15" fill="rgb(252,50,20)" fg:x="58294" fg:w="42"/><text x="78.4256%" y="463.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (32 samples, 0.04%)</title><rect x="78.1890%" y="437" width="0.0429%" height="15" fill="rgb(222,56,38)" fg:x="58304" fg:w="32"/><text x="78.4390%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (30 samples, 0.04%)</title><rect x="78.1917%" y="421" width="0.0402%" height="15" fill="rgb(206,193,29)" fg:x="58306" fg:w="30"/><text x="78.4417%" y="431.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (30 samples, 0.04%)</title><rect x="78.1917%" y="405" width="0.0402%" height="15" fill="rgb(239,192,45)" fg:x="58306" fg:w="30"/><text x="78.4417%" y="415.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (89 samples, 0.12%)</title><rect x="78.2319%" y="453" width="0.1194%" height="15" fill="rgb(254,18,36)" fg:x="58336" fg:w="89"/><text x="78.4819%" y="463.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (89 samples, 0.12%)</title><rect x="78.2319%" y="437" width="0.1194%" height="15" fill="rgb(221,127,11)" fg:x="58336" fg:w="89"/><text x="78.4819%" y="447.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (89 samples, 0.12%)</title><rect x="78.2319%" y="421" width="0.1194%" height="15" fill="rgb(234,146,35)" fg:x="58336" fg:w="89"/><text x="78.4819%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (89 samples, 0.12%)</title><rect x="78.2319%" y="405" width="0.1194%" height="15" fill="rgb(254,201,37)" fg:x="58336" fg:w="89"/><text x="78.4819%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (89 samples, 0.12%)</title><rect x="78.2319%" y="389" width="0.1194%" height="15" fill="rgb(211,202,23)" fg:x="58336" fg:w="89"/><text x="78.4819%" y="399.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (661 samples, 0.89%)</title><rect x="77.4675%" y="517" width="0.8864%" height="15" fill="rgb(237,91,2)" fg:x="57766" fg:w="661"/><text x="77.7175%" y="527.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_read_ready (442 samples, 0.59%)</title><rect x="77.7612%" y="501" width="0.5927%" height="15" fill="rgb(226,228,36)" fg:x="57985" fg:w="442"/><text x="78.0112%" y="511.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (442 samples, 0.59%)</title><rect x="77.7612%" y="485" width="0.5927%" height="15" fill="rgb(213,63,50)" fg:x="57985" fg:w="442"/><text x="78.0112%" y="495.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (305 samples, 0.41%)</title><rect x="77.9450%" y="469" width="0.4090%" height="15" fill="rgb(235,194,19)" fg:x="58122" fg:w="305"/><text x="78.1950%" y="479.50"></text></g><g><title>&lt;mpc_channel::util::TrackingReader&lt;AR&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (941 samples, 1.26%)</title><rect x="77.1189%" y="533" width="1.2619%" height="15" fill="rgb(207,204,18)" fg:x="57506" fg:w="941"/><text x="77.3689%" y="543.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::filled (20 samples, 0.03%)</title><rect x="78.3540%" y="517" width="0.0268%" height="15" fill="rgb(248,8,7)" fg:x="58427" fg:w="20"/><text x="78.6040%" y="527.50"></text></g><g><title>tokio::io::read_buf::slice_assume_init (13 samples, 0.02%)</title><rect x="78.3634%" y="501" width="0.0174%" height="15" fill="rgb(223,145,47)" fg:x="58434" fg:w="13"/><text x="78.6134%" y="511.50"></text></g><g><title>&lt;tokio::io::util::buf_reader::BufReader&lt;R&gt; as tokio::io::async_buf_read::AsyncBufRead&gt;::poll_fill_buf (973 samples, 1.30%)</title><rect x="77.1095%" y="549" width="1.3048%" height="15" fill="rgb(228,84,11)" fg:x="57499" fg:w="973"/><text x="77.3595%" y="559.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::new (24 samples, 0.03%)</title><rect x="78.3821%" y="533" width="0.0322%" height="15" fill="rgb(218,76,45)" fg:x="58448" fg:w="24"/><text x="78.6321%" y="543.50"></text></g><g><title>tokio::io::read_buf::slice_to_uninit_mut (17 samples, 0.02%)</title><rect x="78.3915%" y="517" width="0.0228%" height="15" fill="rgb(223,80,15)" fg:x="58455" fg:w="17"/><text x="78.6415%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from_nonoverlapping (112 samples, 0.15%)</title><rect x="78.4157%" y="533" width="0.1502%" height="15" fill="rgb(219,218,33)" fg:x="58473" fg:w="112"/><text x="78.6657%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (112 samples, 0.15%)</title><rect x="78.4157%" y="517" width="0.1502%" height="15" fill="rgb(208,51,11)" fg:x="58473" fg:w="112"/><text x="78.6657%" y="527.50"></text></g><g><title>[libc.so.6] (112 samples, 0.15%)</title><rect x="78.4157%" y="501" width="0.1502%" height="15" fill="rgb(229,165,39)" fg:x="58473" fg:w="112"/><text x="78.6657%" y="511.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::put_slice (113 samples, 0.15%)</title><rect x="78.4157%" y="549" width="0.1515%" height="15" fill="rgb(241,100,24)" fg:x="58473" fg:w="113"/><text x="78.6657%" y="559.50"></text></g><g><title>&lt;tokio::io::util::buf_reader::BufReader&lt;R&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (1,117 samples, 1.50%)</title><rect x="77.0786%" y="565" width="1.4980%" height="15" fill="rgb(228,14,23)" fg:x="57476" fg:w="1117"/><text x="77.3286%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (9 samples, 0.01%)</title><rect x="78.5806%" y="565" width="0.0121%" height="15" fill="rgb(247,116,52)" fg:x="58596" fg:w="9"/><text x="78.8306%" y="575.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::filled (59 samples, 0.08%)</title><rect x="78.5927%" y="565" width="0.0791%" height="15" fill="rgb(216,149,33)" fg:x="58605" fg:w="59"/><text x="78.8427%" y="575.50"></text></g><g><title>tokio::io::read_buf::slice_assume_init (51 samples, 0.07%)</title><rect x="78.6034%" y="549" width="0.0684%" height="15" fill="rgb(238,142,29)" fg:x="58613" fg:w="51"/><text x="78.8534%" y="559.50"></text></g><g><title>tokio_util::util::poll_read_buf (1,268 samples, 1.70%)</title><rect x="76.9807%" y="581" width="1.7005%" height="15" fill="rgb(224,83,40)" fg:x="57403" fg:w="1268"/><text x="77.2307%" y="591.50"></text></g><g><title>&lt;futures_util::stream::try_stream::into_stream::IntoStream&lt;St&gt; as futures_core::stream::Stream&gt;::poll_next (1,897 samples, 2.54%)</title><rect x="76.1506%" y="645" width="2.5440%" height="15" fill="rgb(234,165,11)" fg:x="56784" fg:w="1897"/><text x="76.4006%" y="655.50">&lt;f..</text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (1,894 samples, 2.54%)</title><rect x="76.1547%" y="629" width="2.5400%" height="15" fill="rgb(215,96,23)" fg:x="56787" fg:w="1894"/><text x="76.4047%" y="639.50">&lt;S..</text></g><g><title>&lt;tokio_util::codec::framed_read::FramedRead&lt;T,D&gt; as futures_core::stream::Stream&gt;::poll_next (1,869 samples, 2.51%)</title><rect x="76.1882%" y="613" width="2.5064%" height="15" fill="rgb(233,179,26)" fg:x="56812" fg:w="1869"/><text x="76.4382%" y="623.50">&lt;t..</text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,R&gt; as futures_core::stream::Stream&gt;::poll_next (1,869 samples, 2.51%)</title><rect x="76.1882%" y="597" width="2.5064%" height="15" fill="rgb(225,129,33)" fg:x="56812" fg:w="1869"/><text x="76.4382%" y="607.50">&lt;t..</text></g><g><title>tracing_core::metadata::LevelFilter::current (10 samples, 0.01%)</title><rect x="78.6812%" y="581" width="0.0134%" height="15" fill="rgb(237,49,13)" fg:x="58671" fg:w="10"/><text x="78.9312%" y="591.50"></text></g><g><title>&lt;futures_util::stream::stream::next::Next&lt;St&gt; as core::future::future::Future&gt;::poll (2,007 samples, 2.69%)</title><rect x="76.0487%" y="709" width="2.6915%" height="15" fill="rgb(211,3,31)" fg:x="56708" fg:w="2007"/><text x="76.2987%" y="719.50">&lt;f..</text></g><g><title>futures_util::stream::stream::StreamExt::poll_next_unpin (1,952 samples, 2.62%)</title><rect x="76.1225%" y="693" width="2.6177%" height="15" fill="rgb(216,152,19)" fg:x="56763" fg:w="1952"/><text x="76.3725%" y="703.50">fu..</text></g><g><title>&lt;futures_util::stream::try_stream::MapOk&lt;St,F&gt; as futures_core::stream::Stream&gt;::poll_next (1,952 samples, 2.62%)</title><rect x="76.1225%" y="677" width="2.6177%" height="15" fill="rgb(251,121,35)" fg:x="56763" fg:w="1952"/><text x="76.3725%" y="687.50">&lt;f..</text></g><g><title>&lt;futures_util::stream::stream::map::Map&lt;St,F&gt; as futures_core::stream::Stream&gt;::poll_next (1,952 samples, 2.62%)</title><rect x="76.1225%" y="661" width="2.6177%" height="15" fill="rgb(210,217,47)" fg:x="56763" fg:w="1952"/><text x="76.3725%" y="671.50">&lt;f..</text></g><g><title>core::option::Option&lt;T&gt;::map (34 samples, 0.05%)</title><rect x="78.6946%" y="645" width="0.0456%" height="15" fill="rgb(244,116,22)" fg:x="58681" fg:w="34"/><text x="78.9446%" y="655.50"></text></g><g><title>&lt;futures_util::stream::stream::map::Map&lt;St,F&gt; as futures_core::stream::Stream&gt;::poll_next::{{closure}} (34 samples, 0.05%)</title><rect x="78.6946%" y="629" width="0.0456%" height="15" fill="rgb(228,17,21)" fg:x="58681" fg:w="34"/><text x="78.9446%" y="639.50"></text></g><g><title>&lt;futures_util::fns::MapOkFn&lt;F&gt; as futures_util::fns::FnMut1&lt;core::result::Result&lt;T,E&gt;&gt;&gt;::call_mut (34 samples, 0.05%)</title><rect x="78.6946%" y="613" width="0.0456%" height="15" fill="rgb(240,149,34)" fg:x="58681" fg:w="34"/><text x="78.9446%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (34 samples, 0.05%)</title><rect x="78.6946%" y="597" width="0.0456%" height="15" fill="rgb(208,125,47)" fg:x="58681" fg:w="34"/><text x="78.9446%" y="607.50"></text></g><g><title>&lt;futures_util::fns::MapOkFn&lt;F&gt; as futures_util::fns::FnMut1&lt;core::result::Result&lt;T,E&gt;&gt;&gt;::call_mut::{{closure}} (17 samples, 0.02%)</title><rect x="78.7174%" y="581" width="0.0228%" height="15" fill="rgb(249,186,39)" fg:x="58698" fg:w="17"/><text x="78.9674%" y="591.50"></text></g><g><title>&lt;T as futures_util::fns::FnMut1&lt;A&gt;&gt;::call_mut (17 samples, 0.02%)</title><rect x="78.7174%" y="565" width="0.0228%" height="15" fill="rgb(240,220,33)" fg:x="58698" fg:w="17"/><text x="78.9674%" y="575.50"></text></g><g><title>remoc::connect::Connect&lt;std::io::error::Error,std::io::error::Error&gt;::io::{{closure}}::{{closure}} (17 samples, 0.02%)</title><rect x="78.7174%" y="549" width="0.0228%" height="15" fill="rgb(243,110,23)" fg:x="58698" fg:w="17"/><text x="78.9674%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (14 samples, 0.02%)</title><rect x="78.7402%" y="709" width="0.0188%" height="15" fill="rgb(219,163,46)" fg:x="58715" fg:w="14"/><text x="78.9902%" y="719.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (14 samples, 0.02%)</title><rect x="78.7402%" y="693" width="0.0188%" height="15" fill="rgb(216,126,30)" fg:x="58715" fg:w="14"/><text x="78.9902%" y="703.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (14 samples, 0.02%)</title><rect x="78.7402%" y="677" width="0.0188%" height="15" fill="rgb(208,139,11)" fg:x="58715" fg:w="14"/><text x="78.9902%" y="687.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (14 samples, 0.02%)</title><rect x="78.7402%" y="661" width="0.0188%" height="15" fill="rgb(213,118,36)" fg:x="58715" fg:w="14"/><text x="78.9902%" y="671.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop::{{closure}} (14 samples, 0.02%)</title><rect x="78.7402%" y="645" width="0.0188%" height="15" fill="rgb(226,43,17)" fg:x="58715" fg:w="14"/><text x="78.9902%" y="655.50"></text></g><g><title>bytes::bytes_mut::release_shared (14 samples, 0.02%)</title><rect x="78.7402%" y="629" width="0.0188%" height="15" fill="rgb(254,217,4)" fg:x="58715" fg:w="14"/><text x="78.9902%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (11 samples, 0.01%)</title><rect x="78.7442%" y="613" width="0.0148%" height="15" fill="rgb(210,134,47)" fg:x="58718" fg:w="11"/><text x="78.9942%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_sub (11 samples, 0.01%)</title><rect x="78.7442%" y="597" width="0.0148%" height="15" fill="rgb(237,24,49)" fg:x="58718" fg:w="11"/><text x="78.9942%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::Span&gt; (9 samples, 0.01%)</title><rect x="78.7590%" y="709" width="0.0121%" height="15" fill="rgb(251,39,46)" fg:x="58729" fg:w="9"/><text x="79.0090%" y="719.50"></text></g><g><title>&lt;tracing::span::Span as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="78.7590%" y="693" width="0.0121%" height="15" fill="rgb(251,220,3)" fg:x="58729" fg:w="9"/><text x="79.0090%" y="703.50"></text></g><g><title>byteorder::io::ReadBytesExt::read_u32 (8 samples, 0.01%)</title><rect x="78.8153%" y="677" width="0.0107%" height="15" fill="rgb(228,105,12)" fg:x="58771" fg:w="8"/><text x="79.0653%" y="687.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_exact (8 samples, 0.01%)</title><rect x="78.8153%" y="661" width="0.0107%" height="15" fill="rgb(215,196,1)" fg:x="58771" fg:w="8"/><text x="79.0653%" y="671.50"></text></g><g><title>remoc::chmux::msg::MultiplexMsg::from_slice (43 samples, 0.06%)</title><rect x="78.7711%" y="709" width="0.0577%" height="15" fill="rgb(214,33,39)" fg:x="58738" fg:w="43"/><text x="79.0211%" y="719.50"></text></g><g><title>remoc::chmux::msg::MultiplexMsg::read (39 samples, 0.05%)</title><rect x="78.7764%" y="693" width="0.0523%" height="15" fill="rgb(220,19,52)" fg:x="58742" fg:w="39"/><text x="79.0264%" y="703.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::convert::AsRef&lt;T&gt;&gt;::as_ref (28 samples, 0.04%)</title><rect x="78.8475%" y="597" width="0.0375%" height="15" fill="rgb(221,78,38)" fg:x="58795" fg:w="28"/><text x="79.0975%" y="607.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (28 samples, 0.04%)</title><rect x="78.8475%" y="581" width="0.0375%" height="15" fill="rgb(253,30,16)" fg:x="58795" fg:w="28"/><text x="79.0975%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (31 samples, 0.04%)</title><rect x="78.8877%" y="533" width="0.0416%" height="15" fill="rgb(242,65,0)" fg:x="58825" fg:w="31"/><text x="79.1377%" y="543.50"></text></g><g><title>core::ops::function::FnOnce::call_once (31 samples, 0.04%)</title><rect x="78.8877%" y="517" width="0.0416%" height="15" fill="rgb(235,201,12)" fg:x="58825" fg:w="31"/><text x="79.1377%" y="527.50"></text></g><g><title>tracing_core::span::Current::none (27 samples, 0.04%)</title><rect x="78.8931%" y="501" width="0.0362%" height="15" fill="rgb(233,161,9)" fg:x="58829" fg:w="27"/><text x="79.1431%" y="511.50"></text></g><g><title>thread_local::ThreadLocal&lt;T&gt;::get_inner (15 samples, 0.02%)</title><rect x="78.9293%" y="517" width="0.0201%" height="15" fill="rgb(241,207,41)" fg:x="58856" fg:w="15"/><text x="79.1793%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (14 samples, 0.02%)</title><rect x="78.9306%" y="501" width="0.0188%" height="15" fill="rgb(212,69,46)" fg:x="58857" fg:w="14"/><text x="79.1806%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_load (14 samples, 0.02%)</title><rect x="78.9306%" y="485" width="0.0188%" height="15" fill="rgb(239,69,45)" fg:x="58857" fg:w="14"/><text x="79.1806%" y="495.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::current_span (106 samples, 0.14%)</title><rect x="78.8475%" y="629" width="0.1422%" height="15" fill="rgb(242,117,48)" fg:x="58795" fg:w="106"/><text x="79.0975%" y="639.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;S&gt; as tracing_core::subscriber::Subscriber&gt;::current_span (106 samples, 0.14%)</title><rect x="78.8475%" y="613" width="0.1422%" height="15" fill="rgb(228,41,36)" fg:x="58795" fg:w="106"/><text x="79.0975%" y="623.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::current_span (78 samples, 0.10%)</title><rect x="78.8850%" y="597" width="0.1046%" height="15" fill="rgb(212,3,32)" fg:x="58823" fg:w="78"/><text x="79.1350%" y="607.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::current_span (77 samples, 0.10%)</title><rect x="78.8864%" y="581" width="0.1033%" height="15" fill="rgb(233,41,49)" fg:x="58824" fg:w="77"/><text x="79.1364%" y="591.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::current_span (77 samples, 0.10%)</title><rect x="78.8864%" y="565" width="0.1033%" height="15" fill="rgb(252,170,49)" fg:x="58824" fg:w="77"/><text x="79.1364%" y="575.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (77 samples, 0.10%)</title><rect x="78.8864%" y="549" width="0.1033%" height="15" fill="rgb(229,53,26)" fg:x="58824" fg:w="77"/><text x="79.1364%" y="559.50"></text></g><g><title>thread_local::ThreadLocal&lt;T&gt;::get (45 samples, 0.06%)</title><rect x="78.9293%" y="533" width="0.0603%" height="15" fill="rgb(217,157,12)" fg:x="58856" fg:w="45"/><text x="79.1793%" y="543.50"></text></g><g><title>thread_local::thread_id::get (30 samples, 0.04%)</title><rect x="78.9494%" y="517" width="0.0402%" height="15" fill="rgb(227,17,9)" fg:x="58871" fg:w="30"/><text x="79.1994%" y="527.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (30 samples, 0.04%)</title><rect x="78.9494%" y="501" width="0.0402%" height="15" fill="rgb(218,84,12)" fg:x="58871" fg:w="30"/><text x="79.1994%" y="511.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (30 samples, 0.04%)</title><rect x="78.9494%" y="485" width="0.0402%" height="15" fill="rgb(212,79,24)" fg:x="58871" fg:w="30"/><text x="79.1994%" y="495.50"></text></g><g><title>thread_local::thread_id::get::{{closure}} (20 samples, 0.03%)</title><rect x="78.9628%" y="469" width="0.0268%" height="15" fill="rgb(217,222,37)" fg:x="58881" fg:w="20"/><text x="79.2128%" y="479.50"></text></g><g><title>tracing::span::Span::current::{{closure}} (112 samples, 0.15%)</title><rect x="78.8435%" y="645" width="0.1502%" height="15" fill="rgb(246,208,8)" fg:x="58792" fg:w="112"/><text x="79.0935%" y="655.50"></text></g><g><title>tracing::span::Span::current (130 samples, 0.17%)</title><rect x="78.8287%" y="709" width="0.1743%" height="15" fill="rgb(244,133,10)" fg:x="58781" fg:w="130"/><text x="79.0787%" y="719.50"></text></g><g><title>tracing_core::dispatcher::get_default (130 samples, 0.17%)</title><rect x="78.8287%" y="693" width="0.1743%" height="15" fill="rgb(209,219,41)" fg:x="58781" fg:w="130"/><text x="79.0787%" y="703.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (130 samples, 0.17%)</title><rect x="78.8287%" y="677" width="0.1743%" height="15" fill="rgb(253,175,45)" fg:x="58781" fg:w="130"/><text x="79.0787%" y="687.50"></text></g><g><title>tracing_core::dispatcher::get_default::{{closure}} (127 samples, 0.17%)</title><rect x="78.8327%" y="661" width="0.1703%" height="15" fill="rgb(235,100,37)" fg:x="58784" fg:w="127"/><text x="79.0827%" y="671.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::recv_msg::{{closure}}::{{closure}} (2,315 samples, 3.10%)</title><rect x="75.9159%" y="725" width="3.1045%" height="15" fill="rgb(225,87,19)" fg:x="56609" fg:w="2315"/><text x="76.1659%" y="735.50">rem..</text></g><g><title>tracing::span::Span::record (13 samples, 0.02%)</title><rect x="79.0031%" y="709" width="0.0174%" height="15" fill="rgb(217,152,17)" fg:x="58911" fg:w="13"/><text x="79.2531%" y="719.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (3,363 samples, 4.51%)</title><rect x="74.5226%" y="773" width="4.5100%" height="15" fill="rgb(235,72,13)" fg:x="55570" fg:w="3363"/><text x="74.7726%" y="783.50">&lt;toki..</text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::recv_task::{{closure}}::{{closure}} (3,348 samples, 4.49%)</title><rect x="74.5427%" y="757" width="4.4899%" height="15" fill="rgb(233,140,18)" fg:x="55585" fg:w="3348"/><text x="74.7927%" y="767.50">remoc..</text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::recv_msg::{{closure}} (2,525 samples, 3.39%)</title><rect x="75.6464%" y="741" width="3.3862%" height="15" fill="rgb(207,212,28)" fg:x="56408" fg:w="2525"/><text x="75.8964%" y="751.50">rem..</text></g><g><title>tracing_core::metadata::LevelFilter::current (9 samples, 0.01%)</title><rect x="79.0205%" y="725" width="0.0121%" height="15" fill="rgb(220,130,25)" fg:x="58924" fg:w="9"/><text x="79.2705%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (9 samples, 0.01%)</title><rect x="79.0205%" y="709" width="0.0121%" height="15" fill="rgb(205,55,34)" fg:x="58924" fg:w="9"/><text x="79.2705%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_load (9 samples, 0.01%)</title><rect x="79.0205%" y="693" width="0.0121%" height="15" fill="rgb(237,54,35)" fg:x="58924" fg:w="9"/><text x="79.2705%" y="703.50"></text></g><g><title>__rdl_dealloc (12 samples, 0.02%)</title><rect x="79.0352%" y="693" width="0.0161%" height="15" fill="rgb(208,67,23)" fg:x="58935" fg:w="12"/><text x="79.2852%" y="703.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (12 samples, 0.02%)</title><rect x="79.0352%" y="677" width="0.0161%" height="15" fill="rgb(206,207,50)" fg:x="58935" fg:w="12"/><text x="79.2852%" y="687.50"></text></g><g><title>alloc::alloc::box_free (118 samples, 0.16%)</title><rect x="79.0352%" y="741" width="0.1582%" height="15" fill="rgb(213,211,42)" fg:x="58935" fg:w="118"/><text x="79.2852%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (118 samples, 0.16%)</title><rect x="79.0352%" y="725" width="0.1582%" height="15" fill="rgb(252,197,50)" fg:x="58935" fg:w="118"/><text x="79.2852%" y="735.50"></text></g><g><title>alloc::alloc::dealloc (118 samples, 0.16%)</title><rect x="79.0352%" y="709" width="0.1582%" height="15" fill="rgb(251,211,41)" fg:x="58935" fg:w="118"/><text x="79.2852%" y="719.50"></text></g><g><title>cfree (103 samples, 0.14%)</title><rect x="79.0554%" y="693" width="0.1381%" height="15" fill="rgb(229,211,5)" fg:x="58950" fg:w="103"/><text x="79.3054%" y="703.50"></text></g><g><title>[libc.so.6] (42 samples, 0.06%)</title><rect x="79.1372%" y="677" width="0.0563%" height="15" fill="rgb(239,36,31)" fg:x="59011" fg:w="42"/><text x="79.3872%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::future::fuse::Fuse&lt;remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::send_task::{{closure}}::get_next_ping::{{closure}}&gt;&gt; (29 samples, 0.04%)</title><rect x="79.1935%" y="741" width="0.0389%" height="15" fill="rgb(248,67,31)" fg:x="59053" fg:w="29"/><text x="79.4435%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::send_task::{{closure}}::get_next_ping::{{closure}}&gt;&gt; (29 samples, 0.04%)</title><rect x="79.1935%" y="725" width="0.0389%" height="15" fill="rgb(249,55,44)" fg:x="59053" fg:w="29"/><text x="79.4435%" y="735.50"></text></g><g><title>tokio::runtime::driver::Handle::time (13 samples, 0.02%)</title><rect x="79.2324%" y="661" width="0.0174%" height="15" fill="rgb(216,82,12)" fg:x="59082" fg:w="13"/><text x="79.4824%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (13 samples, 0.02%)</title><rect x="79.2324%" y="645" width="0.0174%" height="15" fill="rgb(242,174,1)" fg:x="59082" fg:w="13"/><text x="79.4824%" y="655.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::driver (35 samples, 0.05%)</title><rect x="79.2324%" y="677" width="0.0469%" height="15" fill="rgb(208,120,29)" fg:x="59082" fg:w="35"/><text x="79.4824%" y="687.50"></text></g><g><title>tokio::runtime::scheduler::Handle::driver (22 samples, 0.03%)</title><rect x="79.2498%" y="661" width="0.0295%" height="15" fill="rgb(221,105,43)" fg:x="59095" fg:w="22"/><text x="79.4998%" y="671.50"></text></g><g><title>&lt;tokio::runtime::time::entry::TimerEntry as core::ops::drop::Drop&gt;::drop (36 samples, 0.05%)</title><rect x="79.2324%" y="709" width="0.0483%" height="15" fill="rgb(234,124,22)" fg:x="59082" fg:w="36"/><text x="79.4824%" y="719.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::cancel (36 samples, 0.05%)</title><rect x="79.2324%" y="693" width="0.0483%" height="15" fill="rgb(212,23,30)" fg:x="59082" fg:w="36"/><text x="79.4824%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (11 samples, 0.01%)</title><rect x="79.2900%" y="693" width="0.0148%" height="15" fill="rgb(219,122,53)" fg:x="59125" fg:w="11"/><text x="79.5400%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (11 samples, 0.01%)</title><rect x="79.2900%" y="677" width="0.0148%" height="15" fill="rgb(248,84,24)" fg:x="59125" fg:w="11"/><text x="79.5400%" y="687.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (11 samples, 0.01%)</title><rect x="79.2900%" y="661" width="0.0148%" height="15" fill="rgb(245,115,18)" fg:x="59125" fg:w="11"/><text x="79.5400%" y="671.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (10 samples, 0.01%)</title><rect x="79.2914%" y="645" width="0.0134%" height="15" fill="rgb(227,176,51)" fg:x="59126" fg:w="10"/><text x="79.5414%" y="655.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::drop_reference (10 samples, 0.01%)</title><rect x="79.2914%" y="629" width="0.0134%" height="15" fill="rgb(229,63,42)" fg:x="59126" fg:w="10"/><text x="79.5414%" y="639.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (10 samples, 0.01%)</title><rect x="79.2914%" y="613" width="0.0134%" height="15" fill="rgb(247,202,24)" fg:x="59126" fg:w="10"/><text x="79.5414%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (9 samples, 0.01%)</title><rect x="79.2927%" y="597" width="0.0121%" height="15" fill="rgb(244,173,20)" fg:x="59127" fg:w="9"/><text x="79.5427%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_sub (9 samples, 0.01%)</title><rect x="79.2927%" y="581" width="0.0121%" height="15" fill="rgb(242,81,47)" fg:x="59127" fg:w="9"/><text x="79.5427%" y="591.50"></text></g><g><title>tokio::runtime::time::Inner::lock (22 samples, 0.03%)</title><rect x="79.3115%" y="693" width="0.0295%" height="15" fill="rgb(231,185,54)" fg:x="59141" fg:w="22"/><text x="79.5615%" y="703.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (22 samples, 0.03%)</title><rect x="79.3115%" y="677" width="0.0295%" height="15" fill="rgb(243,55,32)" fg:x="59141" fg:w="22"/><text x="79.5615%" y="687.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (22 samples, 0.03%)</title><rect x="79.3115%" y="661" width="0.0295%" height="15" fill="rgb(208,167,19)" fg:x="59141" fg:w="22"/><text x="79.5615%" y="671.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (22 samples, 0.03%)</title><rect x="79.3115%" y="645" width="0.0295%" height="15" fill="rgb(231,72,35)" fg:x="59141" fg:w="22"/><text x="79.5615%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (22 samples, 0.03%)</title><rect x="79.3115%" y="629" width="0.0295%" height="15" fill="rgb(250,173,51)" fg:x="59141" fg:w="22"/><text x="79.5615%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (22 samples, 0.03%)</title><rect x="79.3115%" y="613" width="0.0295%" height="15" fill="rgb(209,5,22)" fg:x="59141" fg:w="22"/><text x="79.5615%" y="623.50"></text></g><g><title>tokio::runtime::time::entry::TimerHandle::fire (41 samples, 0.05%)</title><rect x="79.3410%" y="693" width="0.0550%" height="15" fill="rgb(250,174,19)" fg:x="59163" fg:w="41"/><text x="79.5910%" y="703.50"></text></g><g><title>tokio::runtime::time::entry::StateCell::fire (41 samples, 0.05%)</title><rect x="79.3410%" y="677" width="0.0550%" height="15" fill="rgb(217,3,49)" fg:x="59163" fg:w="41"/><text x="79.5910%" y="687.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::take_waker (33 samples, 0.04%)</title><rect x="79.3517%" y="661" width="0.0443%" height="15" fill="rgb(218,225,5)" fg:x="59171" fg:w="33"/><text x="79.6017%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (28 samples, 0.04%)</title><rect x="79.3584%" y="645" width="0.0375%" height="15" fill="rgb(236,89,11)" fg:x="59176" fg:w="28"/><text x="79.6084%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_or (28 samples, 0.04%)</title><rect x="79.3584%" y="629" width="0.0375%" height="15" fill="rgb(206,33,28)" fg:x="59176" fg:w="28"/><text x="79.6084%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = ()+core::marker::Send&gt;&gt;&gt; (319 samples, 0.43%)</title><rect x="79.0326%" y="773" width="0.4278%" height="15" fill="rgb(241,56,42)" fg:x="58933" fg:w="319"/><text x="79.2826%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = ()+core::marker::Send&gt;&gt; (319 samples, 0.43%)</title><rect x="79.0326%" y="757" width="0.4278%" height="15" fill="rgb(222,44,11)" fg:x="58933" fg:w="319"/><text x="79.2826%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::time::sleep::Sleep&gt; (170 samples, 0.23%)</title><rect x="79.2324%" y="741" width="0.2280%" height="15" fill="rgb(234,111,20)" fg:x="59082" fg:w="170"/><text x="79.4824%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::time::entry::TimerEntry&gt; (170 samples, 0.23%)</title><rect x="79.2324%" y="725" width="0.2280%" height="15" fill="rgb(237,77,6)" fg:x="59082" fg:w="170"/><text x="79.4824%" y="735.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::clear_entry (129 samples, 0.17%)</title><rect x="79.2874%" y="709" width="0.1730%" height="15" fill="rgb(235,111,23)" fg:x="59123" fg:w="129"/><text x="79.5374%" y="719.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::remove (42 samples, 0.06%)</title><rect x="79.4040%" y="693" width="0.0563%" height="15" fill="rgb(251,135,29)" fg:x="59210" fg:w="42"/><text x="79.6540%" y="703.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::remove_entry (41 samples, 0.05%)</title><rect x="79.4054%" y="677" width="0.0550%" height="15" fill="rgb(217,57,1)" fg:x="59211" fg:w="41"/><text x="79.6554%" y="687.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (33 samples, 0.04%)</title><rect x="79.4161%" y="661" width="0.0443%" height="15" fill="rgb(249,119,31)" fg:x="59219" fg:w="33"/><text x="79.6661%" y="671.50"></text></g><g><title>core::cmp::PartialEq::ne (22 samples, 0.03%)</title><rect x="79.4309%" y="645" width="0.0295%" height="15" fill="rgb(233,164,33)" fg:x="59230" fg:w="22"/><text x="79.6809%" y="655.50"></text></g><g><title>__rdl_alloc (17 samples, 0.02%)</title><rect x="79.4644%" y="677" width="0.0228%" height="15" fill="rgb(250,217,43)" fg:x="59255" fg:w="17"/><text x="79.7144%" y="687.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (17 samples, 0.02%)</title><rect x="79.4644%" y="661" width="0.0228%" height="15" fill="rgb(232,154,50)" fg:x="59255" fg:w="17"/><text x="79.7144%" y="671.50"></text></g><g><title>__rust_alloc (25 samples, 0.03%)</title><rect x="79.4872%" y="677" width="0.0335%" height="15" fill="rgb(227,190,8)" fg:x="59272" fg:w="25"/><text x="79.7372%" y="687.50"></text></g><g><title>futures_util::future::future::FutureExt::boxed (189 samples, 0.25%)</title><rect x="79.4604%" y="773" width="0.2535%" height="15" fill="rgb(209,217,32)" fg:x="59252" fg:w="189"/><text x="79.7104%" y="783.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (188 samples, 0.25%)</title><rect x="79.4617%" y="757" width="0.2521%" height="15" fill="rgb(243,203,50)" fg:x="59253" fg:w="188"/><text x="79.7117%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (186 samples, 0.25%)</title><rect x="79.4644%" y="741" width="0.2494%" height="15" fill="rgb(232,152,27)" fg:x="59255" fg:w="186"/><text x="79.7144%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (186 samples, 0.25%)</title><rect x="79.4644%" y="725" width="0.2494%" height="15" fill="rgb(240,34,29)" fg:x="59255" fg:w="186"/><text x="79.7144%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (186 samples, 0.25%)</title><rect x="79.4644%" y="709" width="0.2494%" height="15" fill="rgb(215,185,52)" fg:x="59255" fg:w="186"/><text x="79.7144%" y="719.50"></text></g><g><title>alloc::alloc::alloc (186 samples, 0.25%)</title><rect x="79.4644%" y="693" width="0.2494%" height="15" fill="rgb(240,89,49)" fg:x="59255" fg:w="186"/><text x="79.7144%" y="703.50"></text></g><g><title>malloc (144 samples, 0.19%)</title><rect x="79.5207%" y="677" width="0.1931%" height="15" fill="rgb(225,12,52)" fg:x="59297" fg:w="144"/><text x="79.7707%" y="687.50"></text></g><g><title>futures_util::future::future::FutureExt::fuse (10 samples, 0.01%)</title><rect x="79.7138%" y="773" width="0.0134%" height="15" fill="rgb(239,128,45)" fg:x="59441" fg:w="10"/><text x="79.9638%" y="783.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::recv_task::{{closure}}::get_connection_timeout (25 samples, 0.03%)</title><rect x="79.7272%" y="773" width="0.0335%" height="15" fill="rgb(211,78,47)" fg:x="59451" fg:w="25"/><text x="79.9772%" y="783.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (14 samples, 0.02%)</title><rect x="79.7688%" y="725" width="0.0188%" height="15" fill="rgb(232,31,21)" fg:x="59482" fg:w="14"/><text x="80.0188%" y="735.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (14 samples, 0.02%)</title><rect x="79.7688%" y="709" width="0.0188%" height="15" fill="rgb(222,168,14)" fg:x="59482" fg:w="14"/><text x="80.0188%" y="719.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (14 samples, 0.02%)</title><rect x="79.7688%" y="693" width="0.0188%" height="15" fill="rgb(209,128,24)" fg:x="59482" fg:w="14"/><text x="80.0188%" y="703.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (14 samples, 0.02%)</title><rect x="79.7688%" y="677" width="0.0188%" height="15" fill="rgb(249,35,13)" fg:x="59482" fg:w="14"/><text x="80.0188%" y="687.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val::{{closure}} (11 samples, 0.01%)</title><rect x="79.7728%" y="661" width="0.0148%" height="15" fill="rgb(218,7,2)" fg:x="59485" fg:w="11"/><text x="80.0228%" y="671.50"></text></g><g><title>&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (14 samples, 0.02%)</title><rect x="79.7876%" y="709" width="0.0188%" height="15" fill="rgb(238,107,27)" fg:x="59496" fg:w="14"/><text x="80.0376%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (40 samples, 0.05%)</title><rect x="79.8064%" y="709" width="0.0536%" height="15" fill="rgb(217,88,38)" fg:x="59510" fg:w="40"/><text x="80.0564%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_add (40 samples, 0.05%)</title><rect x="79.8064%" y="693" width="0.0536%" height="15" fill="rgb(230,207,0)" fg:x="59510" fg:w="40"/><text x="80.0564%" y="703.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::write (47 samples, 0.06%)</title><rect x="79.8600%" y="709" width="0.0630%" height="15" fill="rgb(249,64,54)" fg:x="59550" fg:w="47"/><text x="80.1100%" y="719.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::set_ready (45 samples, 0.06%)</title><rect x="79.8627%" y="693" width="0.0603%" height="15" fill="rgb(231,7,11)" fg:x="59552" fg:w="45"/><text x="80.1127%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (44 samples, 0.06%)</title><rect x="79.8640%" y="677" width="0.0590%" height="15" fill="rgb(205,149,21)" fg:x="59553" fg:w="44"/><text x="80.1140%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_or (44 samples, 0.06%)</title><rect x="79.8640%" y="661" width="0.0590%" height="15" fill="rgb(215,126,34)" fg:x="59553" fg:w="44"/><text x="80.1140%" y="671.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::push (117 samples, 0.16%)</title><rect x="79.7876%" y="725" width="0.1569%" height="15" fill="rgb(241,132,45)" fg:x="59496" fg:w="117"/><text x="80.0376%" y="735.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (16 samples, 0.02%)</title><rect x="79.9230%" y="709" width="0.0215%" height="15" fill="rgb(252,69,32)" fg:x="59597" fg:w="16"/><text x="80.1730%" y="719.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::is_at_index (11 samples, 0.01%)</title><rect x="79.9297%" y="693" width="0.0148%" height="15" fill="rgb(232,204,19)" fg:x="59602" fg:w="11"/><text x="80.1797%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_and (10 samples, 0.01%)</title><rect x="79.9472%" y="693" width="0.0134%" height="15" fill="rgb(249,15,47)" fg:x="59615" fg:w="10"/><text x="80.1972%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_and (10 samples, 0.01%)</title><rect x="79.9472%" y="677" width="0.0134%" height="15" fill="rgb(209,227,23)" fg:x="59615" fg:w="10"/><text x="80.1972%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (20 samples, 0.03%)</title><rect x="79.9606%" y="693" width="0.0268%" height="15" fill="rgb(248,92,24)" fg:x="59625" fg:w="20"/><text x="80.2106%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_or (20 samples, 0.03%)</title><rect x="79.9606%" y="677" width="0.0268%" height="15" fill="rgb(247,59,2)" fg:x="59625" fg:w="20"/><text x="80.2106%" y="687.50"></text></g><g><title>tokio::sync::mpsc::bounded::Permit&lt;T&gt;::send (171 samples, 0.23%)</title><rect x="79.7608%" y="773" width="0.2293%" height="15" fill="rgb(221,30,5)" fg:x="59476" fg:w="171"/><text x="80.0108%" y="783.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (171 samples, 0.23%)</title><rect x="79.7608%" y="757" width="0.2293%" height="15" fill="rgb(208,108,53)" fg:x="59476" fg:w="171"/><text x="80.0108%" y="767.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (170 samples, 0.23%)</title><rect x="79.7621%" y="741" width="0.2280%" height="15" fill="rgb(211,183,26)" fg:x="59477" fg:w="170"/><text x="80.0121%" y="751.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (34 samples, 0.05%)</title><rect x="79.9445%" y="725" width="0.0456%" height="15" fill="rgb(232,132,4)" fg:x="59613" fg:w="34"/><text x="80.1945%" y="735.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::take_waker (32 samples, 0.04%)</title><rect x="79.9472%" y="709" width="0.0429%" height="15" fill="rgb(253,128,37)" fg:x="59615" fg:w="32"/><text x="80.1972%" y="719.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (11 samples, 0.01%)</title><rect x="80.0357%" y="741" width="0.0148%" height="15" fill="rgb(221,58,24)" fg:x="59681" fg:w="11"/><text x="80.2857%" y="751.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (10 samples, 0.01%)</title><rect x="80.0638%" y="725" width="0.0134%" height="15" fill="rgb(230,54,45)" fg:x="59702" fg:w="10"/><text x="80.3138%" y="735.50"></text></g><g><title>tokio::runtime::context::budget (10 samples, 0.01%)</title><rect x="80.0638%" y="709" width="0.0134%" height="15" fill="rgb(254,21,18)" fg:x="59702" fg:w="10"/><text x="80.3138%" y="719.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (10 samples, 0.01%)</title><rect x="80.0638%" y="693" width="0.0134%" height="15" fill="rgb(221,108,0)" fg:x="59702" fg:w="10"/><text x="80.3138%" y="703.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (35 samples, 0.05%)</title><rect x="80.0504%" y="741" width="0.0469%" height="15" fill="rgb(206,95,1)" fg:x="59692" fg:w="35"/><text x="80.3004%" y="751.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::poll_acquire (15 samples, 0.02%)</title><rect x="80.0772%" y="725" width="0.0201%" height="15" fill="rgb(237,52,5)" fg:x="59712" fg:w="15"/><text x="80.3272%" y="735.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::acquire (20 samples, 0.03%)</title><rect x="80.1014%" y="741" width="0.0268%" height="15" fill="rgb(218,150,34)" fg:x="59730" fg:w="20"/><text x="80.3514%" y="751.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::recv_task::{{closure}} (4,402 samples, 5.90%)</title><rect x="74.2302%" y="789" width="5.9033%" height="15" fill="rgb(235,194,28)" fg:x="55352" fg:w="4402"/><text x="74.4802%" y="799.50">remoc::c..</text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::reserve::{{closure}} (107 samples, 0.14%)</title><rect x="79.9901%" y="773" width="0.1435%" height="15" fill="rgb(245,92,18)" fg:x="59647" fg:w="107"/><text x="80.2401%" y="783.50"></text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::reserve_inner::{{closure}} (85 samples, 0.11%)</title><rect x="80.0196%" y="757" width="0.1140%" height="15" fill="rgb(253,203,53)" fg:x="59669" fg:w="85"/><text x="80.2696%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_pin_mut (79 samples, 0.11%)</title><rect x="80.6901%" y="693" width="0.1059%" height="15" fill="rgb(249,185,47)" fg:x="60169" fg:w="79"/><text x="80.9401%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (77 samples, 0.10%)</title><rect x="80.6928%" y="677" width="0.1033%" height="15" fill="rgb(252,194,52)" fg:x="60171" fg:w="77"/><text x="80.9428%" y="687.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (10 samples, 0.01%)</title><rect x="80.9235%" y="645" width="0.0134%" height="15" fill="rgb(210,53,36)" fg:x="60343" fg:w="10"/><text x="81.1735%" y="655.50"></text></g><g><title>tokio::runtime::context::budget (10 samples, 0.01%)</title><rect x="80.9235%" y="629" width="0.0134%" height="15" fill="rgb(237,37,25)" fg:x="60343" fg:w="10"/><text x="81.1735%" y="639.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (10 samples, 0.01%)</title><rect x="80.9235%" y="613" width="0.0134%" height="15" fill="rgb(242,116,27)" fg:x="60343" fg:w="10"/><text x="81.1735%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (128 samples, 0.17%)</title><rect x="80.9784%" y="581" width="0.1717%" height="15" fill="rgb(213,185,26)" fg:x="60384" fg:w="128"/><text x="81.2284%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (128 samples, 0.17%)</title><rect x="80.9784%" y="565" width="0.1717%" height="15" fill="rgb(225,204,8)" fg:x="60384" fg:w="128"/><text x="81.2284%" y="575.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (31 samples, 0.04%)</title><rect x="81.1581%" y="437" width="0.0416%" height="15" fill="rgb(254,111,37)" fg:x="60518" fg:w="31"/><text x="81.4081%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (31 samples, 0.04%)</title><rect x="81.1581%" y="421" width="0.0416%" height="15" fill="rgb(242,35,9)" fg:x="60518" fg:w="31"/><text x="81.4081%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_add (31 samples, 0.04%)</title><rect x="81.1581%" y="405" width="0.0416%" height="15" fill="rgb(232,138,49)" fg:x="60518" fg:w="31"/><text x="81.4081%" y="415.50"></text></g><g><title>&lt;&amp;core::task::wake::Waker as tokio::sync::task::atomic_waker::WakerRef&gt;::into_waker (37 samples, 0.05%)</title><rect x="81.1514%" y="485" width="0.0496%" height="15" fill="rgb(247,56,4)" fg:x="60513" fg:w="37"/><text x="81.4014%" y="495.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (37 samples, 0.05%)</title><rect x="81.1514%" y="469" width="0.0496%" height="15" fill="rgb(226,179,17)" fg:x="60513" fg:w="37"/><text x="81.4014%" y="479.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (37 samples, 0.05%)</title><rect x="81.1514%" y="453" width="0.0496%" height="15" fill="rgb(216,163,45)" fg:x="60513" fg:w="37"/><text x="81.4014%" y="463.50"></text></g><g><title>tokio::runtime::time::entry::StateCell::poll (204 samples, 0.27%)</title><rect x="80.9597%" y="629" width="0.2736%" height="15" fill="rgb(211,157,3)" fg:x="60370" fg:w="204"/><text x="81.2097%" y="639.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (203 samples, 0.27%)</title><rect x="80.9610%" y="613" width="0.2722%" height="15" fill="rgb(234,44,20)" fg:x="60371" fg:w="203"/><text x="81.2110%" y="623.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register (202 samples, 0.27%)</title><rect x="80.9623%" y="597" width="0.2709%" height="15" fill="rgb(254,138,23)" fg:x="60372" fg:w="202"/><text x="81.2123%" y="607.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::catch_unwind (61 samples, 0.08%)</title><rect x="81.1514%" y="581" width="0.0818%" height="15" fill="rgb(206,119,39)" fg:x="60513" fg:w="61"/><text x="81.4014%" y="591.50"></text></g><g><title>std::panic::catch_unwind (61 samples, 0.08%)</title><rect x="81.1514%" y="565" width="0.0818%" height="15" fill="rgb(231,105,52)" fg:x="60513" fg:w="61"/><text x="81.4014%" y="575.50"></text></g><g><title>std::panicking::try (61 samples, 0.08%)</title><rect x="81.1514%" y="549" width="0.0818%" height="15" fill="rgb(250,20,5)" fg:x="60513" fg:w="61"/><text x="81.4014%" y="559.50"></text></g><g><title>std::panicking::try::do_call (61 samples, 0.08%)</title><rect x="81.1514%" y="533" width="0.0818%" height="15" fill="rgb(215,198,30)" fg:x="60513" fg:w="61"/><text x="81.4014%" y="543.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (61 samples, 0.08%)</title><rect x="81.1514%" y="517" width="0.0818%" height="15" fill="rgb(246,142,8)" fg:x="60513" fg:w="61"/><text x="81.4014%" y="527.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::{{closure}} (61 samples, 0.08%)</title><rect x="81.1514%" y="501" width="0.0818%" height="15" fill="rgb(243,26,38)" fg:x="60513" fg:w="61"/><text x="81.4014%" y="511.50"></text></g><g><title>core::mem::drop (24 samples, 0.03%)</title><rect x="81.2011%" y="485" width="0.0322%" height="15" fill="rgb(205,133,28)" fg:x="60550" fg:w="24"/><text x="81.4511%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (24 samples, 0.03%)</title><rect x="81.2011%" y="469" width="0.0322%" height="15" fill="rgb(212,34,0)" fg:x="60550" fg:w="24"/><text x="81.4511%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (24 samples, 0.03%)</title><rect x="81.2011%" y="453" width="0.0322%" height="15" fill="rgb(251,226,22)" fg:x="60550" fg:w="24"/><text x="81.4511%" y="463.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (24 samples, 0.03%)</title><rect x="81.2011%" y="437" width="0.0322%" height="15" fill="rgb(252,119,9)" fg:x="60550" fg:w="24"/><text x="81.4511%" y="447.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (21 samples, 0.03%)</title><rect x="81.2051%" y="421" width="0.0282%" height="15" fill="rgb(213,150,50)" fg:x="60553" fg:w="21"/><text x="81.4551%" y="431.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::drop_reference (21 samples, 0.03%)</title><rect x="81.2051%" y="405" width="0.0282%" height="15" fill="rgb(212,24,39)" fg:x="60553" fg:w="21"/><text x="81.4551%" y="415.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (21 samples, 0.03%)</title><rect x="81.2051%" y="389" width="0.0282%" height="15" fill="rgb(213,46,39)" fg:x="60553" fg:w="21"/><text x="81.4551%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (21 samples, 0.03%)</title><rect x="81.2051%" y="373" width="0.0282%" height="15" fill="rgb(239,106,12)" fg:x="60553" fg:w="21"/><text x="81.4551%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_sub (21 samples, 0.03%)</title><rect x="81.2051%" y="357" width="0.0282%" height="15" fill="rgb(249,229,21)" fg:x="60553" fg:w="21"/><text x="81.4551%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (34 samples, 0.05%)</title><rect x="81.2332%" y="597" width="0.0456%" height="15" fill="rgb(212,158,3)" fg:x="60574" fg:w="34"/><text x="81.4832%" y="607.50"></text></g><g><title>tokio::runtime::driver::Handle::time (36 samples, 0.05%)</title><rect x="81.2332%" y="613" width="0.0483%" height="15" fill="rgb(253,26,48)" fg:x="60574" fg:w="36"/><text x="81.4832%" y="623.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::driver (67 samples, 0.09%)</title><rect x="81.2332%" y="629" width="0.0899%" height="15" fill="rgb(238,178,20)" fg:x="60574" fg:w="67"/><text x="81.4832%" y="639.50"></text></g><g><title>tokio::runtime::scheduler::Handle::driver (31 samples, 0.04%)</title><rect x="81.2815%" y="613" width="0.0416%" height="15" fill="rgb(208,86,15)" fg:x="60610" fg:w="31"/><text x="81.5315%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::time::InnerState&gt;&gt; (13 samples, 0.02%)</title><rect x="81.3352%" y="597" width="0.0174%" height="15" fill="rgb(239,42,53)" fg:x="60650" fg:w="13"/><text x="81.5852%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::time::InnerState&gt;&gt; (13 samples, 0.02%)</title><rect x="81.3352%" y="581" width="0.0174%" height="15" fill="rgb(245,226,8)" fg:x="60650" fg:w="13"/><text x="81.5852%" y="591.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.02%)</title><rect x="81.3352%" y="565" width="0.0174%" height="15" fill="rgb(216,176,32)" fg:x="60650" fg:w="13"/><text x="81.5852%" y="575.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (13 samples, 0.02%)</title><rect x="81.3352%" y="549" width="0.0174%" height="15" fill="rgb(231,186,21)" fg:x="60650" fg:w="13"/><text x="81.5852%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (13 samples, 0.02%)</title><rect x="81.3352%" y="533" width="0.0174%" height="15" fill="rgb(205,95,49)" fg:x="60650" fg:w="13"/><text x="81.5852%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (13 samples, 0.02%)</title><rect x="81.3352%" y="517" width="0.0174%" height="15" fill="rgb(217,145,8)" fg:x="60650" fg:w="13"/><text x="81.5852%" y="527.50"></text></g><g><title>tokio::runtime::time::Inner::lock (12 samples, 0.02%)</title><rect x="81.3606%" y="597" width="0.0161%" height="15" fill="rgb(239,144,48)" fg:x="60669" fg:w="12"/><text x="81.6106%" y="607.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (12 samples, 0.02%)</title><rect x="81.3606%" y="581" width="0.0161%" height="15" fill="rgb(214,189,23)" fg:x="60669" fg:w="12"/><text x="81.6106%" y="591.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (12 samples, 0.02%)</title><rect x="81.3606%" y="565" width="0.0161%" height="15" fill="rgb(229,157,17)" fg:x="60669" fg:w="12"/><text x="81.6106%" y="575.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (12 samples, 0.02%)</title><rect x="81.3606%" y="549" width="0.0161%" height="15" fill="rgb(230,5,48)" fg:x="60669" fg:w="12"/><text x="81.6106%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (12 samples, 0.02%)</title><rect x="81.3606%" y="533" width="0.0161%" height="15" fill="rgb(224,156,48)" fg:x="60669" fg:w="12"/><text x="81.6106%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (12 samples, 0.02%)</title><rect x="81.3606%" y="517" width="0.0161%" height="15" fill="rgb(223,14,29)" fg:x="60669" fg:w="12"/><text x="81.6106%" y="527.50"></text></g><g><title>tokio::runtime::time::handle::Handle::is_shutdown (20 samples, 0.03%)</title><rect x="81.3821%" y="597" width="0.0268%" height="15" fill="rgb(229,96,36)" fg:x="60685" fg:w="20"/><text x="81.6321%" y="607.50"></text></g><g><title>tokio::runtime::time::Inner::is_shutdown (20 samples, 0.03%)</title><rect x="81.3821%" y="581" width="0.0268%" height="15" fill="rgb(231,102,53)" fg:x="60685" fg:w="20"/><text x="81.6321%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (20 samples, 0.03%)</title><rect x="81.3821%" y="565" width="0.0268%" height="15" fill="rgb(210,77,38)" fg:x="60685" fg:w="20"/><text x="81.6321%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_load (20 samples, 0.03%)</title><rect x="81.3821%" y="549" width="0.0268%" height="15" fill="rgb(235,131,6)" fg:x="60685" fg:w="20"/><text x="81.6321%" y="559.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::reregister (93 samples, 0.12%)</title><rect x="81.3258%" y="613" width="0.1247%" height="15" fill="rgb(252,55,38)" fg:x="60643" fg:w="93"/><text x="81.5758%" y="623.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::insert (31 samples, 0.04%)</title><rect x="81.4089%" y="597" width="0.0416%" height="15" fill="rgb(246,38,14)" fg:x="60705" fg:w="31"/><text x="81.6589%" y="607.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::add_entry (20 samples, 0.03%)</title><rect x="81.4237%" y="581" width="0.0268%" height="15" fill="rgb(242,27,5)" fg:x="60716" fg:w="20"/><text x="81.6737%" y="591.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (12 samples, 0.02%)</title><rect x="81.4344%" y="565" width="0.0161%" height="15" fill="rgb(228,65,35)" fg:x="60724" fg:w="12"/><text x="81.6844%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (15 samples, 0.02%)</title><rect x="81.4505%" y="581" width="0.0201%" height="15" fill="rgb(245,93,11)" fg:x="60736" fg:w="15"/><text x="81.7005%" y="591.50"></text></g><g><title>tokio::runtime::driver::Handle::time (16 samples, 0.02%)</title><rect x="81.4505%" y="597" width="0.0215%" height="15" fill="rgb(213,1,31)" fg:x="60736" fg:w="16"/><text x="81.7005%" y="607.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::driver (22 samples, 0.03%)</title><rect x="81.4505%" y="613" width="0.0295%" height="15" fill="rgb(237,205,14)" fg:x="60736" fg:w="22"/><text x="81.7005%" y="623.50"></text></g><g><title>tokio::runtime::time::entry::TimerShared::extend_expiration (15 samples, 0.02%)</title><rect x="81.4800%" y="613" width="0.0201%" height="15" fill="rgb(232,118,45)" fg:x="60758" fg:w="15"/><text x="81.7300%" y="623.50"></text></g><g><title>tokio::runtime::time::entry::StateCell::extend_expiration (15 samples, 0.02%)</title><rect x="81.4800%" y="597" width="0.0201%" height="15" fill="rgb(218,5,6)" fg:x="60758" fg:w="15"/><text x="81.7300%" y="607.50"></text></g><g><title>&lt;tokio::time::instant::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (13 samples, 0.02%)</title><rect x="81.5068%" y="597" width="0.0174%" height="15" fill="rgb(251,87,51)" fg:x="60778" fg:w="13"/><text x="81.7568%" y="607.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (13 samples, 0.02%)</title><rect x="81.5068%" y="581" width="0.0174%" height="15" fill="rgb(207,225,20)" fg:x="60778" fg:w="13"/><text x="81.7568%" y="591.50"></text></g><g><title>std::time::Instant::checked_add (8 samples, 0.01%)</title><rect x="81.5135%" y="565" width="0.0107%" height="15" fill="rgb(222,78,54)" fg:x="60783" fg:w="8"/><text x="81.7635%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_add_duration (8 samples, 0.01%)</title><rect x="81.5135%" y="549" width="0.0107%" height="15" fill="rgb(232,85,16)" fg:x="60783" fg:w="8"/><text x="81.7635%" y="559.50"></text></g><g><title>std::sys::unix::time::Timespec::checked_add_duration (8 samples, 0.01%)</title><rect x="81.5135%" y="533" width="0.0107%" height="15" fill="rgb(244,25,33)" fg:x="60783" fg:w="8"/><text x="81.7635%" y="543.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::reset (177 samples, 0.24%)</title><rect x="81.3231%" y="629" width="0.2374%" height="15" fill="rgb(233,24,36)" fg:x="60641" fg:w="177"/><text x="81.5731%" y="639.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::deadline_to_tick (45 samples, 0.06%)</title><rect x="81.5001%" y="613" width="0.0603%" height="15" fill="rgb(253,49,54)" fg:x="60773" fg:w="45"/><text x="81.7501%" y="623.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::instant_to_tick (27 samples, 0.04%)</title><rect x="81.5242%" y="597" width="0.0362%" height="15" fill="rgb(245,12,22)" fg:x="60791" fg:w="27"/><text x="81.7742%" y="607.50"></text></g><g><title>tokio::time::instant::Instant::checked_duration_since (22 samples, 0.03%)</title><rect x="81.5310%" y="581" width="0.0295%" height="15" fill="rgb(253,141,28)" fg:x="60796" fg:w="22"/><text x="81.7810%" y="591.50"></text></g><g><title>std::time::Instant::checked_duration_since (22 samples, 0.03%)</title><rect x="81.5310%" y="565" width="0.0295%" height="15" fill="rgb(225,207,27)" fg:x="60796" fg:w="22"/><text x="81.7810%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (15 samples, 0.02%)</title><rect x="81.5403%" y="549" width="0.0201%" height="15" fill="rgb(220,84,2)" fg:x="60803" fg:w="15"/><text x="81.7903%" y="559.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (14 samples, 0.02%)</title><rect x="81.5417%" y="533" width="0.0188%" height="15" fill="rgb(224,37,37)" fg:x="60804" fg:w="14"/><text x="81.7917%" y="543.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (482 samples, 0.65%)</title><rect x="80.9181%" y="677" width="0.6464%" height="15" fill="rgb(220,143,18)" fg:x="60339" fg:w="482"/><text x="81.1681%" y="687.50"></text></g><g><title>tokio::time::sleep::Sleep::poll_elapsed (480 samples, 0.64%)</title><rect x="80.9208%" y="661" width="0.6437%" height="15" fill="rgb(210,88,33)" fg:x="60341" fg:w="480"/><text x="81.1708%" y="671.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::poll_elapsed (468 samples, 0.63%)</title><rect x="80.9369%" y="645" width="0.6276%" height="15" fill="rgb(219,87,51)" fg:x="60353" fg:w="468"/><text x="81.1869%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (206 samples, 0.28%)</title><rect x="81.5792%" y="629" width="0.2763%" height="15" fill="rgb(211,7,35)" fg:x="60832" fg:w="206"/><text x="81.8292%" y="639.50"></text></g><g><title>clock_gettime (202 samples, 0.27%)</title><rect x="81.5846%" y="613" width="0.2709%" height="15" fill="rgb(232,77,2)" fg:x="60836" fg:w="202"/><text x="81.8346%" y="623.50"></text></g><g><title>__vdso_clock_gettime (111 samples, 0.15%)</title><rect x="81.7066%" y="597" width="0.1489%" height="15" fill="rgb(249,94,25)" fg:x="60927" fg:w="111"/><text x="81.9566%" y="607.50"></text></g><g><title>[[vdso]] (16 samples, 0.02%)</title><rect x="81.8340%" y="581" width="0.0215%" height="15" fill="rgb(215,112,2)" fg:x="61022" fg:w="16"/><text x="82.0840%" y="591.50"></text></g><g><title>tokio::time::instant::Instant::now (230 samples, 0.31%)</title><rect x="81.5792%" y="661" width="0.3084%" height="15" fill="rgb(226,115,48)" fg:x="60832" fg:w="230"/><text x="81.8292%" y="671.50"></text></g><g><title>tokio::time::instant::variant::now (230 samples, 0.31%)</title><rect x="81.5792%" y="645" width="0.3084%" height="15" fill="rgb(249,196,10)" fg:x="60832" fg:w="230"/><text x="81.8292%" y="655.50"></text></g><g><title>std::time::Instant::now (24 samples, 0.03%)</title><rect x="81.8555%" y="629" width="0.0322%" height="15" fill="rgb(237,109,14)" fg:x="61038" fg:w="24"/><text x="82.1055%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (24 samples, 0.03%)</title><rect x="81.8555%" y="613" width="0.0322%" height="15" fill="rgb(217,103,53)" fg:x="61038" fg:w="24"/><text x="82.1055%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::scheduler::Handle&gt; (9 samples, 0.01%)</title><rect x="81.8971%" y="645" width="0.0121%" height="15" fill="rgb(244,137,9)" fg:x="61069" fg:w="9"/><text x="82.1471%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt; (9 samples, 0.01%)</title><rect x="81.8971%" y="629" width="0.0121%" height="15" fill="rgb(227,201,3)" fg:x="61069" fg:w="9"/><text x="82.1471%" y="639.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="81.8971%" y="613" width="0.0121%" height="15" fill="rgb(243,94,6)" fg:x="61069" fg:w="9"/><text x="82.1471%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (9 samples, 0.01%)</title><rect x="81.8971%" y="597" width="0.0121%" height="15" fill="rgb(235,118,5)" fg:x="61069" fg:w="9"/><text x="82.1471%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_sub (9 samples, 0.01%)</title><rect x="81.8971%" y="581" width="0.0121%" height="15" fill="rgb(247,10,30)" fg:x="61069" fg:w="9"/><text x="82.1471%" y="591.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (17 samples, 0.02%)</title><rect x="81.9145%" y="581" width="0.0228%" height="15" fill="rgb(205,26,28)" fg:x="61082" fg:w="17"/><text x="82.1645%" y="591.50"></text></g><g><title>&lt;tokio::runtime::scheduler::Handle as core::clone::Clone&gt;::clone (16 samples, 0.02%)</title><rect x="81.9158%" y="565" width="0.0215%" height="15" fill="rgb(206,99,35)" fg:x="61083" fg:w="16"/><text x="82.1658%" y="575.50"></text></g><g><title>tokio::runtime::scheduler::Handle::current (32 samples, 0.04%)</title><rect x="81.9091%" y="645" width="0.0429%" height="15" fill="rgb(238,130,40)" fg:x="61078" fg:w="32"/><text x="82.1591%" y="655.50"></text></g><g><title>tokio::runtime::context::try_current (32 samples, 0.04%)</title><rect x="81.9091%" y="629" width="0.0429%" height="15" fill="rgb(224,126,31)" fg:x="61078" fg:w="32"/><text x="82.1591%" y="639.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (32 samples, 0.04%)</title><rect x="81.9091%" y="613" width="0.0429%" height="15" fill="rgb(254,105,17)" fg:x="61078" fg:w="32"/><text x="82.1591%" y="623.50"></text></g><g><title>tokio::runtime::context::try_current::{{closure}} (28 samples, 0.04%)</title><rect x="81.9145%" y="597" width="0.0375%" height="15" fill="rgb(216,87,36)" fg:x="61082" fg:w="28"/><text x="82.1645%" y="607.50"></text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (962 samples, 1.29%)</title><rect x="80.6888%" y="709" width="1.2901%" height="15" fill="rgb(240,21,12)" fg:x="60168" fg:w="962"/><text x="80.9388%" y="719.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::send_task::{{closure}}::get_next_ping::{{closure}} (882 samples, 1.18%)</title><rect x="80.7961%" y="693" width="1.1828%" height="15" fill="rgb(245,192,34)" fg:x="60248" fg:w="882"/><text x="81.0461%" y="703.50"></text></g><g><title>tokio::time::sleep::sleep (309 samples, 0.41%)</title><rect x="81.5645%" y="677" width="0.4144%" height="15" fill="rgb(226,100,49)" fg:x="60821" fg:w="309"/><text x="81.8145%" y="687.50"></text></g><g><title>tokio::time::sleep::Sleep::new_timeout (68 samples, 0.09%)</title><rect x="81.8877%" y="661" width="0.0912%" height="15" fill="rgb(245,188,27)" fg:x="61062" fg:w="68"/><text x="82.1377%" y="671.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::new (20 samples, 0.03%)</title><rect x="81.9520%" y="645" width="0.0268%" height="15" fill="rgb(212,170,8)" fg:x="61110" fg:w="20"/><text x="82.2020%" y="655.50"></text></g><g><title>tokio::runtime::time::entry::TimerShared::new (10 samples, 0.01%)</title><rect x="81.9655%" y="629" width="0.0134%" height="15" fill="rgb(217,113,29)" fg:x="61120" fg:w="10"/><text x="82.2155%" y="639.50"></text></g><g><title>&lt;&amp;mut F as core::future::future::Future&gt;::poll (970 samples, 1.30%)</title><rect x="80.6821%" y="741" width="1.3008%" height="15" fill="rgb(237,30,3)" fg:x="60163" fg:w="970"/><text x="80.9321%" y="751.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (965 samples, 1.29%)</title><rect x="80.6888%" y="725" width="1.2941%" height="15" fill="rgb(227,19,28)" fg:x="60168" fg:w="965"/><text x="80.9388%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (25 samples, 0.03%)</title><rect x="82.0969%" y="677" width="0.0335%" height="15" fill="rgb(239,172,45)" fg:x="61218" fg:w="25"/><text x="82.3469%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (25 samples, 0.03%)</title><rect x="82.0969%" y="661" width="0.0335%" height="15" fill="rgb(254,55,39)" fg:x="61218" fg:w="25"/><text x="82.3469%" y="671.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (25 samples, 0.03%)</title><rect x="82.0969%" y="645" width="0.0335%" height="15" fill="rgb(249,208,12)" fg:x="61218" fg:w="25"/><text x="82.3469%" y="655.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (10 samples, 0.01%)</title><rect x="82.1492%" y="613" width="0.0134%" height="15" fill="rgb(240,52,13)" fg:x="61257" fg:w="10"/><text x="82.3992%" y="623.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (10 samples, 0.01%)</title><rect x="82.1492%" y="597" width="0.0134%" height="15" fill="rgb(252,149,13)" fg:x="61257" fg:w="10"/><text x="82.3992%" y="607.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (10 samples, 0.01%)</title><rect x="82.1492%" y="581" width="0.0134%" height="15" fill="rgb(232,81,48)" fg:x="61257" fg:w="10"/><text x="82.3992%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (10 samples, 0.01%)</title><rect x="82.1492%" y="565" width="0.0134%" height="15" fill="rgb(222,144,2)" fg:x="61257" fg:w="10"/><text x="82.3992%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::coop::RestoreOnPending&gt; (28 samples, 0.04%)</title><rect x="82.1304%" y="677" width="0.0375%" height="15" fill="rgb(216,81,32)" fg:x="61243" fg:w="28"/><text x="82.3804%" y="687.50"></text></g><g><title>&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (28 samples, 0.04%)</title><rect x="82.1304%" y="661" width="0.0375%" height="15" fill="rgb(244,78,51)" fg:x="61243" fg:w="28"/><text x="82.3804%" y="671.50"></text></g><g><title>tokio::runtime::context::budget (14 samples, 0.02%)</title><rect x="82.1492%" y="645" width="0.0188%" height="15" fill="rgb(217,66,21)" fg:x="61257" fg:w="14"/><text x="82.3992%" y="655.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (14 samples, 0.02%)</title><rect x="82.1492%" y="629" width="0.0188%" height="15" fill="rgb(247,101,42)" fg:x="61257" fg:w="14"/><text x="82.3992%" y="639.50"></text></g><g><title>&lt;tokio::sync::mpsc::bounded::Semaphore as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (17 samples, 0.02%)</title><rect x="82.2645%" y="645" width="0.0228%" height="15" fill="rgb(227,81,39)" fg:x="61343" fg:w="17"/><text x="82.5145%" y="655.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (17 samples, 0.02%)</title><rect x="82.2645%" y="629" width="0.0228%" height="15" fill="rgb(220,223,44)" fg:x="61343" fg:w="17"/><text x="82.5145%" y="639.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (16 samples, 0.02%)</title><rect x="82.2659%" y="613" width="0.0215%" height="15" fill="rgb(205,218,2)" fg:x="61344" fg:w="16"/><text x="82.5159%" y="623.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (16 samples, 0.02%)</title><rect x="82.2659%" y="597" width="0.0215%" height="15" fill="rgb(212,207,28)" fg:x="61344" fg:w="16"/><text x="82.5159%" y="607.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (16 samples, 0.02%)</title><rect x="82.2659%" y="581" width="0.0215%" height="15" fill="rgb(224,12,41)" fg:x="61344" fg:w="16"/><text x="82.5159%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (16 samples, 0.02%)</title><rect x="82.2659%" y="565" width="0.0215%" height="15" fill="rgb(216,118,12)" fg:x="61344" fg:w="16"/><text x="82.5159%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (16 samples, 0.02%)</title><rect x="82.2659%" y="549" width="0.0215%" height="15" fill="rgb(252,97,46)" fg:x="61344" fg:w="16"/><text x="82.5159%" y="559.50"></text></g><g><title>core::mem::drop (13 samples, 0.02%)</title><rect x="82.3007%" y="629" width="0.0174%" height="15" fill="rgb(244,206,19)" fg:x="61370" fg:w="13"/><text x="82.5507%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::sync::batch_semaphore::Waitlist&gt;&gt; (13 samples, 0.02%)</title><rect x="82.3007%" y="613" width="0.0174%" height="15" fill="rgb(231,84,31)" fg:x="61370" fg:w="13"/><text x="82.5507%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::sync::batch_semaphore::Waitlist&gt;&gt; (13 samples, 0.02%)</title><rect x="82.3007%" y="597" width="0.0174%" height="15" fill="rgb(244,133,0)" fg:x="61370" fg:w="13"/><text x="82.5507%" y="607.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.02%)</title><rect x="82.3007%" y="581" width="0.0174%" height="15" fill="rgb(223,15,50)" fg:x="61370" fg:w="13"/><text x="82.5507%" y="591.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (13 samples, 0.02%)</title><rect x="82.3007%" y="565" width="0.0174%" height="15" fill="rgb(250,118,49)" fg:x="61370" fg:w="13"/><text x="82.5507%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (13 samples, 0.02%)</title><rect x="82.3007%" y="549" width="0.0174%" height="15" fill="rgb(248,25,38)" fg:x="61370" fg:w="13"/><text x="82.5507%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (13 samples, 0.02%)</title><rect x="82.3007%" y="533" width="0.0174%" height="15" fill="rgb(215,70,14)" fg:x="61370" fg:w="13"/><text x="82.5507%" y="543.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (39 samples, 0.05%)</title><rect x="82.2913%" y="645" width="0.0523%" height="15" fill="rgb(215,28,15)" fg:x="61363" fg:w="39"/><text x="82.5413%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (18 samples, 0.02%)</title><rect x="82.3195%" y="629" width="0.0241%" height="15" fill="rgb(243,6,28)" fg:x="61384" fg:w="18"/><text x="82.5695%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_add (18 samples, 0.02%)</title><rect x="82.3195%" y="613" width="0.0241%" height="15" fill="rgb(222,130,1)" fg:x="61384" fg:w="18"/><text x="82.5695%" y="623.50"></text></g><g><title>&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (8 samples, 0.01%)</title><rect x="82.4013%" y="613" width="0.0107%" height="15" fill="rgb(236,166,44)" fg:x="61445" fg:w="8"/><text x="82.6513%" y="623.50"></text></g><g><title>tokio::sync::mpsc::block::is_ready (13 samples, 0.02%)</title><rect x="82.4281%" y="613" width="0.0174%" height="15" fill="rgb(221,108,14)" fg:x="61465" fg:w="13"/><text x="82.6781%" y="623.50"></text></g><g><title>tokio::sync::mpsc::block::is_tx_closed (13 samples, 0.02%)</title><rect x="82.4456%" y="613" width="0.0174%" height="15" fill="rgb(252,3,45)" fg:x="61478" fg:w="13"/><text x="82.6956%" y="623.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::read (62 samples, 0.08%)</title><rect x="82.3812%" y="629" width="0.0831%" height="15" fill="rgb(237,68,30)" fg:x="61430" fg:w="62"/><text x="82.6312%" y="639.50"></text></g><g><title>core::cmp::PartialEq::ne (35 samples, 0.05%)</title><rect x="82.4657%" y="613" width="0.0469%" height="15" fill="rgb(211,79,22)" fg:x="61493" fg:w="35"/><text x="82.7157%" y="623.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::reclaim_blocks (46 samples, 0.06%)</title><rect x="82.4643%" y="629" width="0.0617%" height="15" fill="rgb(252,185,21)" fg:x="61492" fg:w="46"/><text x="82.7143%" y="639.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (228 samples, 0.31%)</title><rect x="82.3436%" y="645" width="0.3058%" height="15" fill="rgb(225,189,26)" fg:x="61402" fg:w="228"/><text x="82.5936%" y="655.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::try_advancing_head (92 samples, 0.12%)</title><rect x="82.5260%" y="629" width="0.1234%" height="15" fill="rgb(241,30,40)" fg:x="61538" fg:w="92"/><text x="82.7760%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (88 samples, 0.12%)</title><rect x="82.6655%" y="613" width="0.1180%" height="15" fill="rgb(235,215,44)" fg:x="61642" fg:w="88"/><text x="82.9155%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (88 samples, 0.12%)</title><rect x="82.6655%" y="597" width="0.1180%" height="15" fill="rgb(205,8,29)" fg:x="61642" fg:w="88"/><text x="82.9155%" y="607.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (40 samples, 0.05%)</title><rect x="82.7875%" y="469" width="0.0536%" height="15" fill="rgb(241,137,42)" fg:x="61733" fg:w="40"/><text x="83.0375%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (40 samples, 0.05%)</title><rect x="82.7875%" y="453" width="0.0536%" height="15" fill="rgb(237,155,2)" fg:x="61733" fg:w="40"/><text x="83.0375%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_add (40 samples, 0.05%)</title><rect x="82.7875%" y="437" width="0.0536%" height="15" fill="rgb(245,29,42)" fg:x="61733" fg:w="40"/><text x="83.0375%" y="447.50"></text></g><g><title>&lt;&amp;core::task::wake::Waker as tokio::sync::task::atomic_waker::WakerRef&gt;::into_waker (43 samples, 0.06%)</title><rect x="82.7848%" y="517" width="0.0577%" height="15" fill="rgb(234,101,35)" fg:x="61731" fg:w="43"/><text x="83.0348%" y="527.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (43 samples, 0.06%)</title><rect x="82.7848%" y="501" width="0.0577%" height="15" fill="rgb(228,64,37)" fg:x="61731" fg:w="43"/><text x="83.0348%" y="511.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (43 samples, 0.06%)</title><rect x="82.7848%" y="485" width="0.0577%" height="15" fill="rgb(217,214,36)" fg:x="61731" fg:w="43"/><text x="83.0348%" y="495.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (518 samples, 0.69%)</title><rect x="82.1680%" y="677" width="0.6947%" height="15" fill="rgb(243,70,3)" fg:x="61271" fg:w="518"/><text x="82.4180%" y="687.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (510 samples, 0.68%)</title><rect x="82.1787%" y="661" width="0.6839%" height="15" fill="rgb(253,158,52)" fg:x="61279" fg:w="510"/><text x="82.4287%" y="671.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (159 samples, 0.21%)</title><rect x="82.6494%" y="645" width="0.2132%" height="15" fill="rgb(234,111,54)" fg:x="61630" fg:w="159"/><text x="82.8994%" y="655.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register (158 samples, 0.21%)</title><rect x="82.6507%" y="629" width="0.2119%" height="15" fill="rgb(217,70,32)" fg:x="61631" fg:w="158"/><text x="82.9007%" y="639.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::catch_unwind (58 samples, 0.08%)</title><rect x="82.7848%" y="613" width="0.0778%" height="15" fill="rgb(234,18,33)" fg:x="61731" fg:w="58"/><text x="83.0348%" y="623.50"></text></g><g><title>std::panic::catch_unwind (58 samples, 0.08%)</title><rect x="82.7848%" y="597" width="0.0778%" height="15" fill="rgb(234,12,49)" fg:x="61731" fg:w="58"/><text x="83.0348%" y="607.50"></text></g><g><title>std::panicking::try (58 samples, 0.08%)</title><rect x="82.7848%" y="581" width="0.0778%" height="15" fill="rgb(236,10,21)" fg:x="61731" fg:w="58"/><text x="83.0348%" y="591.50"></text></g><g><title>std::panicking::try::do_call (58 samples, 0.08%)</title><rect x="82.7848%" y="565" width="0.0778%" height="15" fill="rgb(248,182,45)" fg:x="61731" fg:w="58"/><text x="83.0348%" y="575.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (58 samples, 0.08%)</title><rect x="82.7848%" y="549" width="0.0778%" height="15" fill="rgb(217,95,36)" fg:x="61731" fg:w="58"/><text x="83.0348%" y="559.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::{{closure}} (58 samples, 0.08%)</title><rect x="82.7848%" y="533" width="0.0778%" height="15" fill="rgb(212,110,31)" fg:x="61731" fg:w="58"/><text x="83.0348%" y="543.50"></text></g><g><title>core::mem::drop (15 samples, 0.02%)</title><rect x="82.8425%" y="517" width="0.0201%" height="15" fill="rgb(206,32,53)" fg:x="61774" fg:w="15"/><text x="83.0925%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (15 samples, 0.02%)</title><rect x="82.8425%" y="501" width="0.0201%" height="15" fill="rgb(246,141,37)" fg:x="61774" fg:w="15"/><text x="83.0925%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (15 samples, 0.02%)</title><rect x="82.8425%" y="485" width="0.0201%" height="15" fill="rgb(219,16,7)" fg:x="61774" fg:w="15"/><text x="83.0925%" y="495.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (15 samples, 0.02%)</title><rect x="82.8425%" y="469" width="0.0201%" height="15" fill="rgb(230,205,45)" fg:x="61774" fg:w="15"/><text x="83.0925%" y="479.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (15 samples, 0.02%)</title><rect x="82.8425%" y="453" width="0.0201%" height="15" fill="rgb(231,43,49)" fg:x="61774" fg:w="15"/><text x="83.0925%" y="463.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::drop_reference (15 samples, 0.02%)</title><rect x="82.8425%" y="437" width="0.0201%" height="15" fill="rgb(212,106,34)" fg:x="61774" fg:w="15"/><text x="83.0925%" y="447.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (15 samples, 0.02%)</title><rect x="82.8425%" y="421" width="0.0201%" height="15" fill="rgb(206,83,17)" fg:x="61774" fg:w="15"/><text x="83.0925%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (13 samples, 0.02%)</title><rect x="82.8452%" y="405" width="0.0174%" height="15" fill="rgb(244,154,49)" fg:x="61776" fg:w="13"/><text x="83.0952%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_sub (13 samples, 0.02%)</title><rect x="82.8452%" y="389" width="0.0174%" height="15" fill="rgb(244,149,49)" fg:x="61776" fg:w="13"/><text x="83.0952%" y="399.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (13 samples, 0.02%)</title><rect x="82.8921%" y="629" width="0.0174%" height="15" fill="rgb(227,134,18)" fg:x="61811" fg:w="13"/><text x="83.1421%" y="639.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (13 samples, 0.02%)</title><rect x="82.8921%" y="613" width="0.0174%" height="15" fill="rgb(237,116,36)" fg:x="61811" fg:w="13"/><text x="83.1421%" y="623.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (10 samples, 0.01%)</title><rect x="82.9847%" y="597" width="0.0134%" height="15" fill="rgb(205,129,40)" fg:x="61880" fg:w="10"/><text x="83.2347%" y="607.50"></text></g><g><title>tokio::runtime::context::budget (109 samples, 0.15%)</title><rect x="82.8881%" y="661" width="0.1462%" height="15" fill="rgb(236,178,4)" fg:x="61808" fg:w="109"/><text x="83.1381%" y="671.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (109 samples, 0.15%)</title><rect x="82.8881%" y="645" width="0.1462%" height="15" fill="rgb(251,76,53)" fg:x="61808" fg:w="109"/><text x="83.1381%" y="655.50"></text></g><g><title>tokio::runtime::context::budget::{{closure}} (93 samples, 0.12%)</title><rect x="82.9096%" y="629" width="0.1247%" height="15" fill="rgb(242,92,40)" fg:x="61824" fg:w="93"/><text x="83.1596%" y="639.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::{{closure}} (93 samples, 0.12%)</title><rect x="82.9096%" y="613" width="0.1247%" height="15" fill="rgb(209,45,30)" fg:x="61824" fg:w="93"/><text x="83.1596%" y="623.50"></text></g><g><title>tokio::runtime::coop::Budget::decrement (21 samples, 0.03%)</title><rect x="83.0061%" y="597" width="0.0282%" height="15" fill="rgb(218,157,36)" fg:x="61896" fg:w="21"/><text x="83.2561%" y="607.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (1,825 samples, 2.45%)</title><rect x="80.6003%" y="773" width="2.4474%" height="15" fill="rgb(222,186,16)" fg:x="60102" fg:w="1825"/><text x="80.8503%" y="783.50">&lt;t..</text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::send_task::{{closure}}::{{closure}} (1,773 samples, 2.38%)</title><rect x="80.6700%" y="757" width="2.3777%" height="15" fill="rgb(254,72,35)" fg:x="60154" fg:w="1773"/><text x="80.9200%" y="767.50">re..</text></g><g><title>tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::recv::{{closure}} (794 samples, 1.06%)</title><rect x="81.9829%" y="741" width="1.0648%" height="15" fill="rgb(224,25,35)" fg:x="61133" fg:w="794"/><text x="82.2329%" y="751.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (736 samples, 0.99%)</title><rect x="82.0607%" y="725" width="0.9870%" height="15" fill="rgb(206,135,52)" fg:x="61191" fg:w="736"/><text x="82.3107%" y="735.50"></text></g><g><title>tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::recv::{{closure}}::{{closure}} (736 samples, 0.99%)</title><rect x="82.0607%" y="709" width="0.9870%" height="15" fill="rgb(229,174,47)" fg:x="61191" fg:w="736"/><text x="82.3107%" y="719.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (733 samples, 0.98%)</title><rect x="82.0647%" y="693" width="0.9830%" height="15" fill="rgb(242,184,21)" fg:x="61194" fg:w="733"/><text x="82.3147%" y="703.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (138 samples, 0.19%)</title><rect x="82.8626%" y="677" width="0.1851%" height="15" fill="rgb(213,22,45)" fg:x="61789" fg:w="138"/><text x="83.1126%" y="687.50"></text></g><g><title>tokio::runtime::coop::Budget::unconstrained (10 samples, 0.01%)</title><rect x="83.0343%" y="661" width="0.0134%" height="15" fill="rgb(237,81,54)" fg:x="61917" fg:w="10"/><text x="83.2843%" y="671.50"></text></g><g><title>alloc::alloc::box_free (32 samples, 0.04%)</title><rect x="83.0517%" y="741" width="0.0429%" height="15" fill="rgb(248,177,18)" fg:x="61930" fg:w="32"/><text x="83.3017%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (32 samples, 0.04%)</title><rect x="83.0517%" y="725" width="0.0429%" height="15" fill="rgb(254,31,16)" fg:x="61930" fg:w="32"/><text x="83.3017%" y="735.50"></text></g><g><title>alloc::alloc::dealloc (31 samples, 0.04%)</title><rect x="83.0531%" y="709" width="0.0416%" height="15" fill="rgb(235,20,31)" fg:x="61931" fg:w="31"/><text x="83.3031%" y="719.50"></text></g><g><title>cfree (27 samples, 0.04%)</title><rect x="83.0584%" y="693" width="0.0362%" height="15" fill="rgb(240,56,43)" fg:x="61935" fg:w="27"/><text x="83.3084%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::future::fuse::Fuse&lt;remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::send_task::{{closure}}::get_next_ping::{{closure}}&gt;&gt; (38 samples, 0.05%)</title><rect x="83.0946%" y="741" width="0.0510%" height="15" fill="rgb(237,197,51)" fg:x="61962" fg:w="38"/><text x="83.3446%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::send_task::{{closure}}::get_next_ping::{{closure}}&gt;&gt; (38 samples, 0.05%)</title><rect x="83.0946%" y="725" width="0.0510%" height="15" fill="rgb(241,162,44)" fg:x="61962" fg:w="38"/><text x="83.3446%" y="735.50"></text></g><g><title>tokio::runtime::driver::Handle::time (15 samples, 0.02%)</title><rect x="83.1456%" y="661" width="0.0201%" height="15" fill="rgb(224,23,20)" fg:x="62000" fg:w="15"/><text x="83.3956%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (15 samples, 0.02%)</title><rect x="83.1456%" y="645" width="0.0201%" height="15" fill="rgb(250,109,34)" fg:x="62000" fg:w="15"/><text x="83.3956%" y="655.50"></text></g><g><title>&lt;tokio::runtime::time::entry::TimerEntry as core::ops::drop::Drop&gt;::drop (25 samples, 0.03%)</title><rect x="83.1456%" y="709" width="0.0335%" height="15" fill="rgb(214,175,50)" fg:x="62000" fg:w="25"/><text x="83.3956%" y="719.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::cancel (25 samples, 0.03%)</title><rect x="83.1456%" y="693" width="0.0335%" height="15" fill="rgb(213,182,5)" fg:x="62000" fg:w="25"/><text x="83.3956%" y="703.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::driver (25 samples, 0.03%)</title><rect x="83.1456%" y="677" width="0.0335%" height="15" fill="rgb(209,199,19)" fg:x="62000" fg:w="25"/><text x="83.3956%" y="687.50"></text></g><g><title>tokio::runtime::scheduler::Handle::driver (10 samples, 0.01%)</title><rect x="83.1657%" y="661" width="0.0134%" height="15" fill="rgb(236,224,42)" fg:x="62015" fg:w="10"/><text x="83.4157%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::time::InnerState&gt;&gt; (9 samples, 0.01%)</title><rect x="83.1965%" y="693" width="0.0121%" height="15" fill="rgb(246,226,29)" fg:x="62038" fg:w="9"/><text x="83.4465%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::time::InnerState&gt;&gt; (9 samples, 0.01%)</title><rect x="83.1965%" y="677" width="0.0121%" height="15" fill="rgb(227,223,11)" fg:x="62038" fg:w="9"/><text x="83.4465%" y="687.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="83.1965%" y="661" width="0.0121%" height="15" fill="rgb(219,7,51)" fg:x="62038" fg:w="9"/><text x="83.4465%" y="671.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (9 samples, 0.01%)</title><rect x="83.1965%" y="645" width="0.0121%" height="15" fill="rgb(245,167,10)" fg:x="62038" fg:w="9"/><text x="83.4465%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (9 samples, 0.01%)</title><rect x="83.1965%" y="629" width="0.0121%" height="15" fill="rgb(237,224,16)" fg:x="62038" fg:w="9"/><text x="83.4465%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (9 samples, 0.01%)</title><rect x="83.1965%" y="613" width="0.0121%" height="15" fill="rgb(226,132,13)" fg:x="62038" fg:w="9"/><text x="83.4465%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (67 samples, 0.09%)</title><rect x="83.2086%" y="629" width="0.0899%" height="15" fill="rgb(214,140,3)" fg:x="62047" fg:w="67"/><text x="83.4586%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (67 samples, 0.09%)</title><rect x="83.2086%" y="613" width="0.0899%" height="15" fill="rgb(221,177,4)" fg:x="62047" fg:w="67"/><text x="83.4586%" y="623.50"></text></g><g><title>tokio::runtime::time::Inner::lock (70 samples, 0.09%)</title><rect x="83.2086%" y="693" width="0.0939%" height="15" fill="rgb(238,139,3)" fg:x="62047" fg:w="70"/><text x="83.4586%" y="703.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (70 samples, 0.09%)</title><rect x="83.2086%" y="677" width="0.0939%" height="15" fill="rgb(216,17,39)" fg:x="62047" fg:w="70"/><text x="83.4586%" y="687.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (70 samples, 0.09%)</title><rect x="83.2086%" y="661" width="0.0939%" height="15" fill="rgb(238,120,9)" fg:x="62047" fg:w="70"/><text x="83.4586%" y="671.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (70 samples, 0.09%)</title><rect x="83.2086%" y="645" width="0.0939%" height="15" fill="rgb(244,92,53)" fg:x="62047" fg:w="70"/><text x="83.4586%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_and (23 samples, 0.03%)</title><rect x="83.3132%" y="645" width="0.0308%" height="15" fill="rgb(224,148,33)" fg:x="62125" fg:w="23"/><text x="83.5632%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_and (23 samples, 0.03%)</title><rect x="83.3132%" y="629" width="0.0308%" height="15" fill="rgb(243,6,36)" fg:x="62125" fg:w="23"/><text x="83.5632%" y="639.50"></text></g><g><title>tokio::runtime::time::entry::TimerHandle::fire (82 samples, 0.11%)</title><rect x="83.3025%" y="693" width="0.1100%" height="15" fill="rgb(230,102,11)" fg:x="62117" fg:w="82"/><text x="83.5525%" y="703.50"></text></g><g><title>tokio::runtime::time::entry::StateCell::fire (82 samples, 0.11%)</title><rect x="83.3025%" y="677" width="0.1100%" height="15" fill="rgb(234,148,36)" fg:x="62117" fg:w="82"/><text x="83.5525%" y="687.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::take_waker (74 samples, 0.10%)</title><rect x="83.3132%" y="661" width="0.0992%" height="15" fill="rgb(251,153,25)" fg:x="62125" fg:w="74"/><text x="83.5632%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (51 samples, 0.07%)</title><rect x="83.3441%" y="645" width="0.0684%" height="15" fill="rgb(215,129,8)" fg:x="62148" fg:w="51"/><text x="83.5941%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_or (51 samples, 0.07%)</title><rect x="83.3441%" y="629" width="0.0684%" height="15" fill="rgb(224,128,35)" fg:x="62148" fg:w="51"/><text x="83.5941%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = ()+core::marker::Send&gt;&gt;&gt; (353 samples, 0.47%)</title><rect x="83.0477%" y="773" width="0.4734%" height="15" fill="rgb(237,56,52)" fg:x="61927" fg:w="353"/><text x="83.2977%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = ()+core::marker::Send&gt;&gt; (353 samples, 0.47%)</title><rect x="83.0477%" y="757" width="0.4734%" height="15" fill="rgb(234,213,19)" fg:x="61927" fg:w="353"/><text x="83.2977%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::time::sleep::Sleep&gt; (280 samples, 0.38%)</title><rect x="83.1456%" y="741" width="0.3755%" height="15" fill="rgb(252,82,23)" fg:x="62000" fg:w="280"/><text x="83.3956%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::time::entry::TimerEntry&gt; (280 samples, 0.38%)</title><rect x="83.1456%" y="725" width="0.3755%" height="15" fill="rgb(254,201,21)" fg:x="62000" fg:w="280"/><text x="83.3956%" y="735.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::clear_entry (248 samples, 0.33%)</title><rect x="83.1885%" y="709" width="0.3326%" height="15" fill="rgb(250,186,11)" fg:x="62032" fg:w="248"/><text x="83.4385%" y="719.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::remove (80 samples, 0.11%)</title><rect x="83.4138%" y="693" width="0.1073%" height="15" fill="rgb(211,174,5)" fg:x="62200" fg:w="80"/><text x="83.6638%" y="703.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::remove_entry (79 samples, 0.11%)</title><rect x="83.4151%" y="677" width="0.1059%" height="15" fill="rgb(214,121,10)" fg:x="62201" fg:w="79"/><text x="83.6651%" y="687.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (46 samples, 0.06%)</title><rect x="83.4594%" y="661" width="0.0617%" height="15" fill="rgb(241,66,2)" fg:x="62234" fg:w="46"/><text x="83.7094%" y="671.50"></text></g><g><title>core::cmp::PartialEq::ne (42 samples, 0.06%)</title><rect x="83.4648%" y="645" width="0.0563%" height="15" fill="rgb(220,167,19)" fg:x="62238" fg:w="42"/><text x="83.7148%" y="655.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (10 samples, 0.01%)</title><rect x="83.5077%" y="629" width="0.0134%" height="15" fill="rgb(231,54,50)" fg:x="62270" fg:w="10"/><text x="83.7577%" y="639.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::option::SpecOptionPartialEq&gt;::eq (10 samples, 0.01%)</title><rect x="83.5077%" y="613" width="0.0134%" height="15" fill="rgb(239,217,53)" fg:x="62270" fg:w="10"/><text x="83.7577%" y="623.50"></text></g><g><title>futures_util::future::future::FutureExt::boxed (64 samples, 0.09%)</title><rect x="83.5264%" y="773" width="0.0858%" height="15" fill="rgb(248,8,0)" fg:x="62284" fg:w="64"/><text x="83.7764%" y="783.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (62 samples, 0.08%)</title><rect x="83.5291%" y="757" width="0.0831%" height="15" fill="rgb(229,118,37)" fg:x="62286" fg:w="62"/><text x="83.7791%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (54 samples, 0.07%)</title><rect x="83.5399%" y="741" width="0.0724%" height="15" fill="rgb(253,223,43)" fg:x="62294" fg:w="54"/><text x="83.7899%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (53 samples, 0.07%)</title><rect x="83.5412%" y="725" width="0.0711%" height="15" fill="rgb(211,77,36)" fg:x="62295" fg:w="53"/><text x="83.7912%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (53 samples, 0.07%)</title><rect x="83.5412%" y="709" width="0.0711%" height="15" fill="rgb(219,3,53)" fg:x="62295" fg:w="53"/><text x="83.7912%" y="719.50"></text></g><g><title>alloc::alloc::alloc (53 samples, 0.07%)</title><rect x="83.5412%" y="693" width="0.0711%" height="15" fill="rgb(244,45,42)" fg:x="62295" fg:w="53"/><text x="83.7912%" y="703.50"></text></g><g><title>malloc (48 samples, 0.06%)</title><rect x="83.5479%" y="677" width="0.0644%" height="15" fill="rgb(225,95,27)" fg:x="62300" fg:w="48"/><text x="83.7979%" y="687.50"></text></g><g><title>futures_util::future::future::FutureExt::fuse (10 samples, 0.01%)</title><rect x="83.6123%" y="773" width="0.0134%" height="15" fill="rgb(207,74,8)" fg:x="62348" fg:w="10"/><text x="83.8623%" y="783.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (25 samples, 0.03%)</title><rect x="83.8282%" y="709" width="0.0335%" height="15" fill="rgb(243,63,36)" fg:x="62509" fg:w="25"/><text x="84.0782%" y="719.50"></text></g><g><title>alloc::alloc::exchange_malloc (19 samples, 0.03%)</title><rect x="83.8362%" y="693" width="0.0255%" height="15" fill="rgb(211,180,12)" fg:x="62515" fg:w="19"/><text x="84.0862%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (19 samples, 0.03%)</title><rect x="83.8362%" y="677" width="0.0255%" height="15" fill="rgb(254,166,49)" fg:x="62515" fg:w="19"/><text x="84.0862%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (19 samples, 0.03%)</title><rect x="83.8362%" y="661" width="0.0255%" height="15" fill="rgb(205,19,0)" fg:x="62515" fg:w="19"/><text x="84.0862%" y="671.50"></text></g><g><title>alloc::alloc::alloc (19 samples, 0.03%)</title><rect x="83.8362%" y="645" width="0.0255%" height="15" fill="rgb(224,172,32)" fg:x="62515" fg:w="19"/><text x="84.0862%" y="655.50"></text></g><g><title>malloc (17 samples, 0.02%)</title><rect x="83.8389%" y="629" width="0.0228%" height="15" fill="rgb(254,136,30)" fg:x="62517" fg:w="17"/><text x="84.0889%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (32 samples, 0.04%)</title><rect x="83.8201%" y="741" width="0.0429%" height="15" fill="rgb(246,19,35)" fg:x="62503" fg:w="32"/><text x="84.0701%" y="751.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (32 samples, 0.04%)</title><rect x="83.8201%" y="725" width="0.0429%" height="15" fill="rgb(219,24,36)" fg:x="62503" fg:w="32"/><text x="84.0701%" y="735.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (57 samples, 0.08%)</title><rect x="83.9408%" y="645" width="0.0764%" height="15" fill="rgb(251,55,1)" fg:x="62593" fg:w="57"/><text x="84.1908%" y="655.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (56 samples, 0.08%)</title><rect x="83.9422%" y="629" width="0.0751%" height="15" fill="rgb(218,117,39)" fg:x="62594" fg:w="56"/><text x="84.1922%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (44 samples, 0.06%)</title><rect x="83.9583%" y="613" width="0.0590%" height="15" fill="rgb(248,169,11)" fg:x="62606" fg:w="44"/><text x="84.2083%" y="623.50"></text></g><g><title>[libc.so.6] (44 samples, 0.06%)</title><rect x="83.9583%" y="597" width="0.0590%" height="15" fill="rgb(244,40,44)" fg:x="62606" fg:w="44"/><text x="84.2083%" y="607.50"></text></g><g><title>bytes::buf::buf_mut::BufMut::put_uint_le (68 samples, 0.09%)</title><rect x="83.9382%" y="661" width="0.0912%" height="15" fill="rgb(234,62,37)" fg:x="62591" fg:w="68"/><text x="84.1882%" y="671.50"></text></g><g><title>core::num::&lt;impl u64&gt;::to_le_bytes (9 samples, 0.01%)</title><rect x="84.0173%" y="645" width="0.0121%" height="15" fill="rgb(207,117,42)" fg:x="62650" fg:w="9"/><text x="84.2673%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::to_ne_bytes (9 samples, 0.01%)</title><rect x="84.0173%" y="629" width="0.0121%" height="15" fill="rgb(213,43,2)" fg:x="62650" fg:w="9"/><text x="84.2673%" y="639.50"></text></g><g><title>bytes::bytes_mut::BytesMut::capacity (16 samples, 0.02%)</title><rect x="84.0387%" y="629" width="0.0215%" height="15" fill="rgb(244,202,51)" fg:x="62666" fg:w="16"/><text x="84.2887%" y="639.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (19 samples, 0.03%)</title><rect x="84.0360%" y="645" width="0.0255%" height="15" fill="rgb(253,174,46)" fg:x="62664" fg:w="19"/><text x="84.2860%" y="655.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (50 samples, 0.07%)</title><rect x="84.0293%" y="661" width="0.0671%" height="15" fill="rgb(251,23,1)" fg:x="62659" fg:w="50"/><text x="84.2793%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (25 samples, 0.03%)</title><rect x="84.0629%" y="645" width="0.0335%" height="15" fill="rgb(253,26,1)" fg:x="62684" fg:w="25"/><text x="84.3129%" y="655.50"></text></g><g><title>[libc.so.6] (24 samples, 0.03%)</title><rect x="84.0642%" y="629" width="0.0322%" height="15" fill="rgb(216,89,31)" fg:x="62685" fg:w="24"/><text x="84.3142%" y="639.50"></text></g><g><title>core::mem::drop (88 samples, 0.12%)</title><rect x="84.1111%" y="565" width="0.1180%" height="15" fill="rgb(209,109,5)" fg:x="62720" fg:w="88"/><text x="84.3611%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;bytes::bytes::Shared&gt;&gt; (88 samples, 0.12%)</title><rect x="84.1111%" y="549" width="0.1180%" height="15" fill="rgb(229,63,13)" fg:x="62720" fg:w="88"/><text x="84.3611%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Shared&gt; (87 samples, 0.12%)</title><rect x="84.1125%" y="533" width="0.1167%" height="15" fill="rgb(238,137,54)" fg:x="62721" fg:w="87"/><text x="84.3625%" y="543.50"></text></g><g><title>&lt;bytes::bytes::Shared as core::ops::drop::Drop&gt;::drop (87 samples, 0.12%)</title><rect x="84.1125%" y="517" width="0.1167%" height="15" fill="rgb(228,1,9)" fg:x="62721" fg:w="87"/><text x="84.3625%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (87 samples, 0.12%)</title><rect x="84.1125%" y="501" width="0.1167%" height="15" fill="rgb(249,120,48)" fg:x="62721" fg:w="87"/><text x="84.3625%" y="511.50"></text></g><g><title>cfree (86 samples, 0.12%)</title><rect x="84.1138%" y="485" width="0.1153%" height="15" fill="rgb(209,72,36)" fg:x="62722" fg:w="86"/><text x="84.3638%" y="495.50"></text></g><g><title>[libc.so.6] (56 samples, 0.08%)</title><rect x="84.1541%" y="469" width="0.0751%" height="15" fill="rgb(247,98,49)" fg:x="62752" fg:w="56"/><text x="84.4041%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (46 samples, 0.06%)</title><rect x="84.2292%" y="565" width="0.0617%" height="15" fill="rgb(233,75,36)" fg:x="62808" fg:w="46"/><text x="84.4792%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_sub (46 samples, 0.06%)</title><rect x="84.2292%" y="549" width="0.0617%" height="15" fill="rgb(225,14,24)" fg:x="62808" fg:w="46"/><text x="84.4792%" y="559.50"></text></g><g><title>bytes::bytes::shared_drop (148 samples, 0.20%)</title><rect x="84.1098%" y="629" width="0.1985%" height="15" fill="rgb(237,193,20)" fg:x="62719" fg:w="148"/><text x="84.3598%" y="639.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (148 samples, 0.20%)</title><rect x="84.1098%" y="613" width="0.1985%" height="15" fill="rgb(239,122,19)" fg:x="62719" fg:w="148"/><text x="84.3598%" y="623.50"></text></g><g><title>bytes::bytes::shared_drop::{{closure}} (148 samples, 0.20%)</title><rect x="84.1098%" y="597" width="0.1985%" height="15" fill="rgb(231,220,10)" fg:x="62719" fg:w="148"/><text x="84.3598%" y="607.50"></text></g><g><title>bytes::bytes::release_shared (148 samples, 0.20%)</title><rect x="84.1098%" y="581" width="0.1985%" height="15" fill="rgb(220,66,15)" fg:x="62719" fg:w="148"/><text x="84.3598%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (13 samples, 0.02%)</title><rect x="84.2908%" y="565" width="0.0174%" height="15" fill="rgb(215,171,52)" fg:x="62854" fg:w="13"/><text x="84.5408%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_load (13 samples, 0.02%)</title><rect x="84.2908%" y="549" width="0.0174%" height="15" fill="rgb(241,169,50)" fg:x="62854" fg:w="13"/><text x="84.5408%" y="559.50"></text></g><g><title>&lt;&amp;mut S as futures_sink::Sink&lt;Item&gt;&gt;::start_send (357 samples, 0.48%)</title><rect x="83.8657%" y="725" width="0.4788%" height="15" fill="rgb(236,189,0)" fg:x="62537" fg:w="357"/><text x="84.1157%" y="735.50"></text></g><g><title>&lt;tokio_util::codec::framed_write::FramedWrite&lt;T,E&gt; as futures_sink::Sink&lt;I&gt;&gt;::start_send (357 samples, 0.48%)</title><rect x="83.8657%" y="709" width="0.4788%" height="15" fill="rgb(217,147,20)" fg:x="62537" fg:w="357"/><text x="84.1157%" y="719.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::start_send (357 samples, 0.48%)</title><rect x="83.8657%" y="693" width="0.4788%" height="15" fill="rgb(206,188,39)" fg:x="62537" fg:w="357"/><text x="84.1157%" y="703.50"></text></g><g><title>&lt;tokio_util::codec::length_delimited::LengthDelimitedCodec as tokio_util::codec::encoder::Encoder&lt;bytes::bytes::Bytes&gt;&gt;::encode (352 samples, 0.47%)</title><rect x="83.8724%" y="677" width="0.4721%" height="15" fill="rgb(227,118,25)" fg:x="62542" fg:w="352"/><text x="84.1224%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (179 samples, 0.24%)</title><rect x="84.1044%" y="661" width="0.2400%" height="15" fill="rgb(248,171,40)" fg:x="62715" fg:w="179"/><text x="84.3544%" y="671.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (179 samples, 0.24%)</title><rect x="84.1044%" y="645" width="0.2400%" height="15" fill="rgb(251,90,54)" fg:x="62715" fg:w="179"/><text x="84.3544%" y="655.50"></text></g><g><title>cfree (27 samples, 0.04%)</title><rect x="84.3083%" y="629" width="0.0362%" height="15" fill="rgb(234,11,46)" fg:x="62867" fg:w="27"/><text x="84.5583%" y="639.50"></text></g><g><title>[libc.so.6] (11 samples, 0.01%)</title><rect x="84.3297%" y="613" width="0.0148%" height="15" fill="rgb(229,134,13)" fg:x="62883" fg:w="11"/><text x="84.5797%" y="623.50"></text></g><g><title>&lt;futures_util::sink::feed::Feed&lt;Si,Item&gt; as core::future::future::Future&gt;::poll (369 samples, 0.49%)</title><rect x="83.8631%" y="741" width="0.4949%" height="15" fill="rgb(223,129,3)" fg:x="62535" fg:w="369"/><text x="84.1131%" y="751.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (9 samples, 0.01%)</title><rect x="84.3458%" y="725" width="0.0121%" height="15" fill="rgb(221,124,13)" fg:x="62895" fg:w="9"/><text x="84.5958%" y="735.50"></text></g><g><title>core::mem::replace (9 samples, 0.01%)</title><rect x="84.3458%" y="709" width="0.0121%" height="15" fill="rgb(234,3,18)" fg:x="62895" fg:w="9"/><text x="84.5958%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (11 samples, 0.01%)</title><rect x="84.3659%" y="741" width="0.0148%" height="15" fill="rgb(249,199,20)" fg:x="62910" fg:w="11"/><text x="84.6159%" y="751.50"></text></g><g><title>futures_util::sink::SinkExt::feed (17 samples, 0.02%)</title><rect x="84.3807%" y="741" width="0.0228%" height="15" fill="rgb(224,134,6)" fg:x="62921" fg:w="17"/><text x="84.6307%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (8 samples, 0.01%)</title><rect x="84.5014%" y="613" width="0.0107%" height="15" fill="rgb(254,83,26)" fg:x="63011" fg:w="8"/><text x="84.7514%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (8 samples, 0.01%)</title><rect x="84.5014%" y="597" width="0.0107%" height="15" fill="rgb(217,88,9)" fg:x="63011" fg:w="8"/><text x="84.7514%" y="607.50"></text></g><g><title>byteorder::io::WriteBytesExt::write_u32 (11 samples, 0.01%)</title><rect x="84.5014%" y="709" width="0.0148%" height="15" fill="rgb(225,73,2)" fg:x="63011" fg:w="11"/><text x="84.7514%" y="719.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (11 samples, 0.01%)</title><rect x="84.5014%" y="693" width="0.0148%" height="15" fill="rgb(226,44,39)" fg:x="63011" fg:w="11"/><text x="84.7514%" y="703.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (11 samples, 0.01%)</title><rect x="84.5014%" y="677" width="0.0148%" height="15" fill="rgb(228,53,17)" fg:x="63011" fg:w="11"/><text x="84.7514%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (11 samples, 0.01%)</title><rect x="84.5014%" y="661" width="0.0148%" height="15" fill="rgb(212,27,27)" fg:x="63011" fg:w="11"/><text x="84.7514%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (11 samples, 0.01%)</title><rect x="84.5014%" y="645" width="0.0148%" height="15" fill="rgb(241,50,6)" fg:x="63011" fg:w="11"/><text x="84.7514%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (11 samples, 0.01%)</title><rect x="84.5014%" y="629" width="0.0148%" height="15" fill="rgb(225,28,51)" fg:x="63011" fg:w="11"/><text x="84.7514%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (9 samples, 0.01%)</title><rect x="84.5161%" y="613" width="0.0121%" height="15" fill="rgb(215,33,16)" fg:x="63022" fg:w="9"/><text x="84.7661%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (9 samples, 0.01%)</title><rect x="84.5161%" y="597" width="0.0121%" height="15" fill="rgb(243,40,39)" fg:x="63022" fg:w="9"/><text x="84.7661%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (11 samples, 0.01%)</title><rect x="84.5564%" y="549" width="0.0148%" height="15" fill="rgb(225,11,42)" fg:x="63052" fg:w="11"/><text x="84.8064%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (72 samples, 0.10%)</title><rect x="84.5711%" y="549" width="0.0966%" height="15" fill="rgb(241,220,38)" fg:x="63063" fg:w="72"/><text x="84.8211%" y="559.50"></text></g><g><title>malloc (51 samples, 0.07%)</title><rect x="84.5993%" y="533" width="0.0684%" height="15" fill="rgb(244,52,35)" fg:x="63084" fg:w="51"/><text x="84.8493%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (106 samples, 0.14%)</title><rect x="84.5282%" y="613" width="0.1422%" height="15" fill="rgb(246,42,46)" fg:x="63031" fg:w="106"/><text x="84.7782%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (106 samples, 0.14%)</title><rect x="84.5282%" y="597" width="0.1422%" height="15" fill="rgb(205,184,13)" fg:x="63031" fg:w="106"/><text x="84.7782%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (98 samples, 0.13%)</title><rect x="84.5389%" y="581" width="0.1314%" height="15" fill="rgb(209,48,36)" fg:x="63039" fg:w="98"/><text x="84.7889%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (98 samples, 0.13%)</title><rect x="84.5389%" y="565" width="0.1314%" height="15" fill="rgb(244,34,51)" fg:x="63039" fg:w="98"/><text x="84.7889%" y="575.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::feed_msg::{{closure}}::{{closure}} (672 samples, 0.90%)</title><rect x="83.7759%" y="757" width="0.9012%" height="15" fill="rgb(221,107,33)" fg:x="62470" fg:w="672"/><text x="84.0259%" y="767.50"></text></g><g><title>remoc::chmux::msg::MultiplexMsg::to_vec (204 samples, 0.27%)</title><rect x="84.4035%" y="741" width="0.2736%" height="15" fill="rgb(224,203,12)" fg:x="62938" fg:w="204"/><text x="84.6535%" y="751.50"></text></g><g><title>remoc::chmux::msg::MultiplexMsg::write (200 samples, 0.27%)</title><rect x="84.4089%" y="725" width="0.2682%" height="15" fill="rgb(230,215,18)" fg:x="62942" fg:w="200"/><text x="84.6589%" y="735.50"></text></g><g><title>byteorder::io::WriteBytesExt::write_u8 (120 samples, 0.16%)</title><rect x="84.5161%" y="709" width="0.1609%" height="15" fill="rgb(206,185,35)" fg:x="63022" fg:w="120"/><text x="84.7661%" y="719.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (120 samples, 0.16%)</title><rect x="84.5161%" y="693" width="0.1609%" height="15" fill="rgb(228,140,34)" fg:x="63022" fg:w="120"/><text x="84.7661%" y="703.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (120 samples, 0.16%)</title><rect x="84.5161%" y="677" width="0.1609%" height="15" fill="rgb(208,93,13)" fg:x="63022" fg:w="120"/><text x="84.7661%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (120 samples, 0.16%)</title><rect x="84.5161%" y="661" width="0.1609%" height="15" fill="rgb(221,193,39)" fg:x="63022" fg:w="120"/><text x="84.7661%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (120 samples, 0.16%)</title><rect x="84.5161%" y="645" width="0.1609%" height="15" fill="rgb(241,132,34)" fg:x="63022" fg:w="120"/><text x="84.7661%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (120 samples, 0.16%)</title><rect x="84.5161%" y="629" width="0.1609%" height="15" fill="rgb(221,141,10)" fg:x="63022" fg:w="120"/><text x="84.7661%" y="639.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::feed_msg::{{closure}} (785 samples, 1.05%)</title><rect x="83.6257%" y="773" width="1.0527%" height="15" fill="rgb(226,90,31)" fg:x="62358" fg:w="785"/><text x="83.8757%" y="783.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (15 samples, 0.02%)</title><rect x="84.8072%" y="613" width="0.0201%" height="15" fill="rgb(243,75,5)" fg:x="63239" fg:w="15"/><text x="85.0572%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (15 samples, 0.02%)</title><rect x="84.8072%" y="597" width="0.0201%" height="15" fill="rgb(227,156,21)" fg:x="63239" fg:w="15"/><text x="85.0572%" y="607.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (15 samples, 0.02%)</title><rect x="84.8072%" y="581" width="0.0201%" height="15" fill="rgb(250,195,8)" fg:x="63239" fg:w="15"/><text x="85.0572%" y="591.50"></text></g><g><title>&lt;mpc_channel::util::Counter as core::ops::arith::AddAssign&lt;usize&gt;&gt;::add_assign (83 samples, 0.11%)</title><rect x="84.8072%" y="629" width="0.1113%" height="15" fill="rgb(220,134,5)" fg:x="63239" fg:w="83"/><text x="85.0572%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (68 samples, 0.09%)</title><rect x="84.8273%" y="613" width="0.0912%" height="15" fill="rgb(246,106,34)" fg:x="63254" fg:w="68"/><text x="85.0773%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_add (68 samples, 0.09%)</title><rect x="84.8273%" y="597" width="0.0912%" height="15" fill="rgb(205,1,4)" fg:x="63254" fg:w="68"/><text x="85.0773%" y="607.50"></text></g><g><title>__send (153 samples, 0.21%)</title><rect x="85.0190%" y="485" width="0.2052%" height="15" fill="rgb(224,151,29)" fg:x="63397" fg:w="153"/><text x="85.2690%" y="495.50"></text></g><g><title>[libc.so.6] (60 samples, 0.08%)</title><rect x="85.1438%" y="469" width="0.0805%" height="15" fill="rgb(251,196,0)" fg:x="63490" fg:w="60"/><text x="85.3938%" y="479.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (182 samples, 0.24%)</title><rect x="85.0003%" y="581" width="0.2441%" height="15" fill="rgb(212,127,0)" fg:x="63383" fg:w="182"/><text x="85.2503%" y="591.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (171 samples, 0.23%)</title><rect x="85.0150%" y="565" width="0.2293%" height="15" fill="rgb(236,71,53)" fg:x="63394" fg:w="171"/><text x="85.2650%" y="575.50"></text></g><g><title>mio::sys::unix::IoSourceState::do_io (171 samples, 0.23%)</title><rect x="85.0150%" y="549" width="0.2293%" height="15" fill="rgb(227,99,0)" fg:x="63394" fg:w="171"/><text x="85.2650%" y="559.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write::{{closure}} (171 samples, 0.23%)</title><rect x="85.0150%" y="533" width="0.2293%" height="15" fill="rgb(239,89,21)" fg:x="63394" fg:w="171"/><text x="85.2650%" y="543.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (171 samples, 0.23%)</title><rect x="85.0150%" y="517" width="0.2293%" height="15" fill="rgb(243,122,19)" fg:x="63394" fg:w="171"/><text x="85.2650%" y="527.50"></text></g><g><title>std::sys_common::net::TcpStream::write (171 samples, 0.23%)</title><rect x="85.0150%" y="501" width="0.2293%" height="15" fill="rgb(229,192,45)" fg:x="63394" fg:w="171"/><text x="85.2650%" y="511.50"></text></g><g><title>std::sys::unix::cvt (15 samples, 0.02%)</title><rect x="85.2242%" y="485" width="0.0201%" height="15" fill="rgb(235,165,35)" fg:x="63550" fg:w="15"/><text x="85.4742%" y="495.50"></text></g><g><title>&lt;isize as std::sys::unix::IsMinusOne&gt;::is_minus_one (15 samples, 0.02%)</title><rect x="85.2242%" y="469" width="0.0201%" height="15" fill="rgb(253,202,0)" fg:x="63550" fg:w="15"/><text x="85.4742%" y="479.50"></text></g><g><title>&lt;tokio::io::util::buf_writer::BufWriter&lt;W&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_flush (383 samples, 0.51%)</title><rect x="84.7803%" y="677" width="0.5136%" height="15" fill="rgb(235,51,20)" fg:x="63219" fg:w="383"/><text x="85.0303%" y="687.50"></text></g><g><title>tokio::io::util::buf_writer::BufWriter&lt;W&gt;::flush_buf (383 samples, 0.51%)</title><rect x="84.7803%" y="661" width="0.5136%" height="15" fill="rgb(218,95,46)" fg:x="63219" fg:w="383"/><text x="85.0303%" y="671.50"></text></g><g><title>&lt;mpc_channel::util::TrackingWriter&lt;AW&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write (379 samples, 0.51%)</title><rect x="84.7857%" y="645" width="0.5083%" height="15" fill="rgb(212,81,10)" fg:x="63223" fg:w="379"/><text x="85.0357%" y="655.50"></text></g><g><title>&lt;tokio::net::tcp::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::poll_write (280 samples, 0.38%)</title><rect x="84.9185%" y="629" width="0.3755%" height="15" fill="rgb(240,59,0)" fg:x="63322" fg:w="280"/><text x="85.1685%" y="639.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_priv (267 samples, 0.36%)</title><rect x="84.9359%" y="613" width="0.3581%" height="15" fill="rgb(212,191,42)" fg:x="63335" fg:w="267"/><text x="85.1859%" y="623.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (267 samples, 0.36%)</title><rect x="84.9359%" y="597" width="0.3581%" height="15" fill="rgb(233,140,3)" fg:x="63335" fg:w="267"/><text x="85.1859%" y="607.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_write_ready (37 samples, 0.05%)</title><rect x="85.2443%" y="581" width="0.0496%" height="15" fill="rgb(215,69,23)" fg:x="63565" fg:w="37"/><text x="85.4943%" y="591.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (37 samples, 0.05%)</title><rect x="85.2443%" y="565" width="0.0496%" height="15" fill="rgb(240,202,20)" fg:x="63565" fg:w="37"/><text x="85.4943%" y="575.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (13 samples, 0.02%)</title><rect x="85.2765%" y="549" width="0.0174%" height="15" fill="rgb(209,146,50)" fg:x="63589" fg:w="13"/><text x="85.5265%" y="559.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_impl::Buf&gt;::advance (11 samples, 0.01%)</title><rect x="85.4401%" y="661" width="0.0148%" height="15" fill="rgb(253,102,54)" fg:x="63711" fg:w="11"/><text x="85.6901%" y="671.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (10 samples, 0.01%)</title><rect x="85.4415%" y="645" width="0.0134%" height="15" fill="rgb(250,173,47)" fg:x="63712" fg:w="10"/><text x="85.6915%" y="655.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (50 samples, 0.07%)</title><rect x="85.5018%" y="645" width="0.0671%" height="15" fill="rgb(232,142,7)" fg:x="63757" fg:w="50"/><text x="85.7518%" y="655.50"></text></g><g><title>&lt;tokio::io::util::buf_writer::BufWriter&lt;W&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored::{{closure}} (46 samples, 0.06%)</title><rect x="85.5072%" y="629" width="0.0617%" height="15" fill="rgb(230,157,47)" fg:x="63761" fg:w="46"/><text x="85.7572%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (46 samples, 0.06%)</title><rect x="85.5072%" y="613" width="0.0617%" height="15" fill="rgb(214,177,35)" fg:x="63761" fg:w="46"/><text x="85.7572%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (46 samples, 0.06%)</title><rect x="85.5072%" y="597" width="0.0617%" height="15" fill="rgb(234,119,46)" fg:x="63761" fg:w="46"/><text x="85.7572%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (46 samples, 0.06%)</title><rect x="85.5072%" y="581" width="0.0617%" height="15" fill="rgb(241,180,50)" fg:x="63761" fg:w="46"/><text x="85.7572%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (32 samples, 0.04%)</title><rect x="85.5260%" y="565" width="0.0429%" height="15" fill="rgb(221,54,25)" fg:x="63775" fg:w="32"/><text x="85.7760%" y="575.50"></text></g><g><title>[libc.so.6] (32 samples, 0.04%)</title><rect x="85.5260%" y="549" width="0.0429%" height="15" fill="rgb(209,157,44)" fg:x="63775" fg:w="32"/><text x="85.7760%" y="559.50"></text></g><g><title>&lt;mpc_channel::util::TrackingWriter&lt;AW&gt; as tokio::io::async_write::AsyncWrite&gt;::is_write_vectored (10 samples, 0.01%)</title><rect x="85.5689%" y="645" width="0.0134%" height="15" fill="rgb(246,115,41)" fg:x="63807" fg:w="10"/><text x="85.8189%" y="655.50"></text></g><g><title>&lt;tokio::net::unix::split_owned::OwnedWriteHalf as tokio::io::async_write::AsyncWrite&gt;::is_write_vectored (10 samples, 0.01%)</title><rect x="85.5689%" y="629" width="0.0134%" height="15" fill="rgb(229,86,1)" fg:x="63807" fg:w="10"/><text x="85.8189%" y="639.50"></text></g><g><title>tokio_util::util::poll_write_buf (218 samples, 0.29%)</title><rect x="85.3033%" y="677" width="0.2924%" height="15" fill="rgb(240,108,53)" fg:x="63609" fg:w="218"/><text x="85.5533%" y="687.50"></text></g><g><title>&lt;tokio::io::util::buf_writer::BufWriter&lt;W&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (105 samples, 0.14%)</title><rect x="85.4549%" y="661" width="0.1408%" height="15" fill="rgb(227,134,2)" fg:x="63722" fg:w="105"/><text x="85.7049%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (9 samples, 0.01%)</title><rect x="85.5836%" y="645" width="0.0121%" height="15" fill="rgb(213,129,25)" fg:x="63818" fg:w="9"/><text x="85.8336%" y="655.50"></text></g><g><title>&lt;futures_util::sink::flush::Flush&lt;Si,Item&gt; as core::future::future::Future&gt;::poll (637 samples, 0.85%)</title><rect x="84.7495%" y="741" width="0.8543%" height="15" fill="rgb(226,35,21)" fg:x="63196" fg:w="637"/><text x="84.9995%" y="751.50"></text></g><g><title>&lt;&amp;mut S as futures_sink::Sink&lt;Item&gt;&gt;::poll_flush (637 samples, 0.85%)</title><rect x="84.7495%" y="725" width="0.8543%" height="15" fill="rgb(208,129,26)" fg:x="63196" fg:w="637"/><text x="84.9995%" y="735.50"></text></g><g><title>&lt;tokio_util::codec::framed_write::FramedWrite&lt;T,E&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (637 samples, 0.85%)</title><rect x="84.7495%" y="709" width="0.8543%" height="15" fill="rgb(224,83,6)" fg:x="63196" fg:w="637"/><text x="84.9995%" y="719.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (637 samples, 0.85%)</title><rect x="84.7495%" y="693" width="0.8543%" height="15" fill="rgb(227,52,39)" fg:x="63196" fg:w="637"/><text x="84.9995%" y="703.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::flush::{{closure}}::{{closure}} (642 samples, 0.86%)</title><rect x="84.7441%" y="757" width="0.8610%" height="15" fill="rgb(241,30,17)" fg:x="63192" fg:w="642"/><text x="84.9941%" y="767.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::flush::{{closure}} (693 samples, 0.93%)</title><rect x="84.6784%" y="773" width="0.9294%" height="15" fill="rgb(246,186,42)" fg:x="63143" fg:w="693"/><text x="84.9284%" y="783.50"></text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (8,641 samples, 11.59%)</title><rect x="74.0331%" y="805" width="11.5881%" height="15" fill="rgb(221,169,15)" fg:x="55205" fg:w="8641"/><text x="74.2831%" y="815.50">&lt;futures_util::fu..</text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::send_task::{{closure}} (4,092 samples, 5.49%)</title><rect x="80.1336%" y="789" width="5.4876%" height="15" fill="rgb(235,108,21)" fg:x="59754" fg:w="4092"/><text x="80.3836%" y="799.50">remoc::..</text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::recv_task::{{closure}}::get_connection_timeout (10 samples, 0.01%)</title><rect x="85.6078%" y="773" width="0.0134%" height="15" fill="rgb(219,148,30)" fg:x="63836" fg:w="10"/><text x="85.8578%" y="783.50"></text></g><g><title>&lt;&amp;mut F as core::future::future::Future&gt;::poll (8,704 samples, 11.67%)</title><rect x="74.0023%" y="837" width="11.6726%" height="15" fill="rgb(220,109,5)" fg:x="55182" fg:w="8704"/><text x="74.2523%" y="847.50">&lt;&amp;mut F as core::..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (8,681 samples, 11.64%)</title><rect x="74.0331%" y="821" width="11.6417%" height="15" fill="rgb(213,203,48)" fg:x="55205" fg:w="8681"/><text x="74.2831%" y="831.50">&lt;core::pin::Pin&lt;P..</text></g><g><title>core::pin::Pin&lt;&amp;mut core::pin::Pin&lt;P&gt;&gt;::as_deref_mut (40 samples, 0.05%)</title><rect x="85.6212%" y="805" width="0.0536%" height="15" fill="rgb(244,71,33)" fg:x="63846" fg:w="40"/><text x="85.8712%" y="815.50"></text></g><g><title>core::pin::Pin&lt;P&gt;::as_mut (40 samples, 0.05%)</title><rect x="85.6212%" y="789" width="0.0536%" height="15" fill="rgb(209,23,2)" fg:x="63846" fg:w="40"/><text x="85.8712%" y="799.50"></text></g><g><title>&lt;&amp;mut T as core::ops::deref::DerefMut&gt;::deref_mut (40 samples, 0.05%)</title><rect x="85.6212%" y="773" width="0.0536%" height="15" fill="rgb(219,97,7)" fg:x="63846" fg:w="40"/><text x="85.8712%" y="783.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (41 samples, 0.05%)</title><rect x="85.6748%" y="837" width="0.0550%" height="15" fill="rgb(216,161,23)" fg:x="63886" fg:w="41"/><text x="85.9248%" y="847.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (41 samples, 0.05%)</title><rect x="85.6748%" y="821" width="0.0550%" height="15" fill="rgb(207,45,42)" fg:x="63886" fg:w="41"/><text x="85.9248%" y="831.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::run::{{closure}}::{{closure}}::{{closure}}::{{closure}} (86 samples, 0.12%)</title><rect x="86.4151%" y="789" width="0.1153%" height="15" fill="rgb(241,61,4)" fg:x="64438" fg:w="86"/><text x="86.6651%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::coop::RestoreOnPending&gt; (22 samples, 0.03%)</title><rect x="86.7289%" y="725" width="0.0295%" height="15" fill="rgb(236,170,1)" fg:x="64672" fg:w="22"/><text x="86.9789%" y="735.50"></text></g><g><title>&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (22 samples, 0.03%)</title><rect x="86.7289%" y="709" width="0.0295%" height="15" fill="rgb(239,72,5)" fg:x="64672" fg:w="22"/><text x="86.9789%" y="719.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.01%)</title><rect x="86.8335%" y="693" width="0.0107%" height="15" fill="rgb(214,13,50)" fg:x="64750" fg:w="8"/><text x="87.0835%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (8 samples, 0.01%)</title><rect x="86.8335%" y="677" width="0.0107%" height="15" fill="rgb(224,88,9)" fg:x="64750" fg:w="8"/><text x="87.0835%" y="687.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (8 samples, 0.01%)</title><rect x="86.8335%" y="661" width="0.0107%" height="15" fill="rgb(238,192,34)" fg:x="64750" fg:w="8"/><text x="87.0835%" y="671.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (16 samples, 0.02%)</title><rect x="86.8576%" y="693" width="0.0215%" height="15" fill="rgb(217,203,50)" fg:x="64768" fg:w="16"/><text x="87.1076%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (9 samples, 0.01%)</title><rect x="86.8670%" y="677" width="0.0121%" height="15" fill="rgb(241,123,32)" fg:x="64775" fg:w="9"/><text x="87.1170%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_add (9 samples, 0.01%)</title><rect x="86.8670%" y="661" width="0.0121%" height="15" fill="rgb(248,151,39)" fg:x="64775" fg:w="9"/><text x="87.1170%" y="671.50"></text></g><g><title>&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (9 samples, 0.01%)</title><rect x="86.9502%" y="661" width="0.0121%" height="15" fill="rgb(208,89,6)" fg:x="64837" fg:w="9"/><text x="87.2002%" y="671.50"></text></g><g><title>tokio::sync::mpsc::block::is_ready (28 samples, 0.04%)</title><rect x="86.9810%" y="661" width="0.0375%" height="15" fill="rgb(254,43,26)" fg:x="64860" fg:w="28"/><text x="87.2310%" y="671.50"></text></g><g><title>tokio::sync::mpsc::block::is_tx_closed (9 samples, 0.01%)</title><rect x="87.0186%" y="661" width="0.0121%" height="15" fill="rgb(216,158,13)" fg:x="64888" fg:w="9"/><text x="87.2686%" y="671.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::read (79 samples, 0.11%)</title><rect x="86.9354%" y="677" width="0.1059%" height="15" fill="rgb(212,47,37)" fg:x="64826" fg:w="79"/><text x="87.1854%" y="687.50"></text></g><g><title>tokio::sync::mpsc::block::offset (8 samples, 0.01%)</title><rect x="87.0306%" y="661" width="0.0107%" height="15" fill="rgb(254,16,10)" fg:x="64897" fg:w="8"/><text x="87.2806%" y="671.50"></text></g><g><title>core::cmp::PartialEq::ne (14 samples, 0.02%)</title><rect x="87.0427%" y="661" width="0.0188%" height="15" fill="rgb(223,228,16)" fg:x="64906" fg:w="14"/><text x="87.2927%" y="671.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::reclaim_blocks (17 samples, 0.02%)</title><rect x="87.0414%" y="677" width="0.0228%" height="15" fill="rgb(249,108,50)" fg:x="64905" fg:w="17"/><text x="87.2914%" y="687.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (11 samples, 0.01%)</title><rect x="87.2063%" y="661" width="0.0148%" height="15" fill="rgb(208,220,5)" fg:x="65028" fg:w="11"/><text x="87.4563%" y="671.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (261 samples, 0.35%)</title><rect x="86.8791%" y="693" width="0.3500%" height="15" fill="rgb(217,89,48)" fg:x="64784" fg:w="261"/><text x="87.1291%" y="703.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::try_advancing_head (123 samples, 0.16%)</title><rect x="87.0642%" y="677" width="0.1650%" height="15" fill="rgb(212,113,41)" fg:x="64922" fg:w="123"/><text x="87.3142%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (102 samples, 0.14%)</title><rect x="87.2398%" y="661" width="0.1368%" height="15" fill="rgb(231,127,5)" fg:x="65053" fg:w="102"/><text x="87.4898%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (102 samples, 0.14%)</title><rect x="87.2398%" y="645" width="0.1368%" height="15" fill="rgb(217,141,17)" fg:x="65053" fg:w="102"/><text x="87.4898%" y="655.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (43 samples, 0.06%)</title><rect x="87.3793%" y="517" width="0.0577%" height="15" fill="rgb(245,125,54)" fg:x="65157" fg:w="43"/><text x="87.6293%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (43 samples, 0.06%)</title><rect x="87.3793%" y="501" width="0.0577%" height="15" fill="rgb(248,125,3)" fg:x="65157" fg:w="43"/><text x="87.6293%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_add (43 samples, 0.06%)</title><rect x="87.3793%" y="485" width="0.0577%" height="15" fill="rgb(236,119,51)" fg:x="65157" fg:w="43"/><text x="87.6293%" y="495.50"></text></g><g><title>&lt;&amp;core::task::wake::Waker as tokio::sync::task::atomic_waker::WakerRef&gt;::into_waker (46 samples, 0.06%)</title><rect x="87.3766%" y="565" width="0.0617%" height="15" fill="rgb(239,99,8)" fg:x="65155" fg:w="46"/><text x="87.6266%" y="575.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (46 samples, 0.06%)</title><rect x="87.3766%" y="549" width="0.0617%" height="15" fill="rgb(224,228,4)" fg:x="65155" fg:w="46"/><text x="87.6266%" y="559.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (46 samples, 0.06%)</title><rect x="87.3766%" y="533" width="0.0617%" height="15" fill="rgb(220,131,45)" fg:x="65155" fg:w="46"/><text x="87.6266%" y="543.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (550 samples, 0.74%)</title><rect x="86.7584%" y="725" width="0.7376%" height="15" fill="rgb(215,62,5)" fg:x="64694" fg:w="550"/><text x="87.0084%" y="735.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (545 samples, 0.73%)</title><rect x="86.7651%" y="709" width="0.7309%" height="15" fill="rgb(253,12,24)" fg:x="64699" fg:w="545"/><text x="87.0151%" y="719.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (199 samples, 0.27%)</title><rect x="87.2291%" y="693" width="0.2669%" height="15" fill="rgb(248,120,50)" fg:x="65045" fg:w="199"/><text x="87.4791%" y="703.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register (199 samples, 0.27%)</title><rect x="87.2291%" y="677" width="0.2669%" height="15" fill="rgb(245,194,10)" fg:x="65045" fg:w="199"/><text x="87.4791%" y="687.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::catch_unwind (89 samples, 0.12%)</title><rect x="87.3766%" y="661" width="0.1194%" height="15" fill="rgb(241,149,38)" fg:x="65155" fg:w="89"/><text x="87.6266%" y="671.50"></text></g><g><title>std::panic::catch_unwind (89 samples, 0.12%)</title><rect x="87.3766%" y="645" width="0.1194%" height="15" fill="rgb(219,215,7)" fg:x="65155" fg:w="89"/><text x="87.6266%" y="655.50"></text></g><g><title>std::panicking::try (89 samples, 0.12%)</title><rect x="87.3766%" y="629" width="0.1194%" height="15" fill="rgb(208,120,31)" fg:x="65155" fg:w="89"/><text x="87.6266%" y="639.50"></text></g><g><title>std::panicking::try::do_call (89 samples, 0.12%)</title><rect x="87.3766%" y="613" width="0.1194%" height="15" fill="rgb(244,30,8)" fg:x="65155" fg:w="89"/><text x="87.6266%" y="623.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (89 samples, 0.12%)</title><rect x="87.3766%" y="597" width="0.1194%" height="15" fill="rgb(238,35,44)" fg:x="65155" fg:w="89"/><text x="87.6266%" y="607.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::{{closure}} (89 samples, 0.12%)</title><rect x="87.3766%" y="581" width="0.1194%" height="15" fill="rgb(243,218,37)" fg:x="65155" fg:w="89"/><text x="87.6266%" y="591.50"></text></g><g><title>core::mem::drop (43 samples, 0.06%)</title><rect x="87.4383%" y="565" width="0.0577%" height="15" fill="rgb(218,169,10)" fg:x="65201" fg:w="43"/><text x="87.6883%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (43 samples, 0.06%)</title><rect x="87.4383%" y="549" width="0.0577%" height="15" fill="rgb(221,144,10)" fg:x="65201" fg:w="43"/><text x="87.6883%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (43 samples, 0.06%)</title><rect x="87.4383%" y="533" width="0.0577%" height="15" fill="rgb(226,41,38)" fg:x="65201" fg:w="43"/><text x="87.6883%" y="543.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (43 samples, 0.06%)</title><rect x="87.4383%" y="517" width="0.0577%" height="15" fill="rgb(228,3,1)" fg:x="65201" fg:w="43"/><text x="87.6883%" y="527.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (41 samples, 0.05%)</title><rect x="87.4410%" y="501" width="0.0550%" height="15" fill="rgb(209,129,12)" fg:x="65203" fg:w="41"/><text x="87.6910%" y="511.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::drop_reference (41 samples, 0.05%)</title><rect x="87.4410%" y="485" width="0.0550%" height="15" fill="rgb(213,136,33)" fg:x="65203" fg:w="41"/><text x="87.6910%" y="495.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (41 samples, 0.05%)</title><rect x="87.4410%" y="469" width="0.0550%" height="15" fill="rgb(209,181,29)" fg:x="65203" fg:w="41"/><text x="87.6910%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (40 samples, 0.05%)</title><rect x="87.4423%" y="453" width="0.0536%" height="15" fill="rgb(234,173,18)" fg:x="65204" fg:w="40"/><text x="87.6923%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_sub (40 samples, 0.05%)</title><rect x="87.4423%" y="437" width="0.0536%" height="15" fill="rgb(227,73,47)" fg:x="65204" fg:w="40"/><text x="87.6923%" y="447.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (9 samples, 0.01%)</title><rect x="87.5912%" y="645" width="0.0121%" height="15" fill="rgb(234,9,34)" fg:x="65315" fg:w="9"/><text x="87.8412%" y="655.50"></text></g><g><title>tokio::runtime::context::budget (80 samples, 0.11%)</title><rect x="87.5241%" y="709" width="0.1073%" height="15" fill="rgb(235,172,15)" fg:x="65265" fg:w="80"/><text x="87.7741%" y="719.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (80 samples, 0.11%)</title><rect x="87.5241%" y="693" width="0.1073%" height="15" fill="rgb(245,61,2)" fg:x="65265" fg:w="80"/><text x="87.7741%" y="703.50"></text></g><g><title>tokio::runtime::context::budget::{{closure}} (75 samples, 0.10%)</title><rect x="87.5308%" y="677" width="0.1006%" height="15" fill="rgb(238,39,47)" fg:x="65270" fg:w="75"/><text x="87.7808%" y="687.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::{{closure}} (75 samples, 0.10%)</title><rect x="87.5308%" y="661" width="0.1006%" height="15" fill="rgb(234,37,24)" fg:x="65270" fg:w="75"/><text x="87.7808%" y="671.50"></text></g><g><title>tokio::runtime::coop::Budget::decrement (21 samples, 0.03%)</title><rect x="87.6033%" y="645" width="0.0282%" height="15" fill="rgb(248,223,24)" fg:x="65324" fg:w="21"/><text x="87.8533%" y="655.50"></text></g><g><title>tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::recv::{{closure}} (839 samples, 1.13%)</title><rect x="86.5304%" y="789" width="1.1251%" height="15" fill="rgb(223,12,15)" fg:x="64524" fg:w="839"/><text x="86.7804%" y="799.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (717 samples, 0.96%)</title><rect x="86.6940%" y="773" width="0.9615%" height="15" fill="rgb(249,6,3)" fg:x="64646" fg:w="717"/><text x="86.9440%" y="783.50"></text></g><g><title>tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::recv::{{closure}}::{{closure}} (717 samples, 0.96%)</title><rect x="86.6940%" y="757" width="0.9615%" height="15" fill="rgb(237,105,33)" fg:x="64646" fg:w="717"/><text x="86.9440%" y="767.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (711 samples, 0.95%)</title><rect x="86.7021%" y="741" width="0.9535%" height="15" fill="rgb(252,208,35)" fg:x="64652" fg:w="711"/><text x="86.9521%" y="751.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (119 samples, 0.16%)</title><rect x="87.4960%" y="725" width="0.1596%" height="15" fill="rgb(215,181,35)" fg:x="65244" fg:w="119"/><text x="87.7460%" y="735.50"></text></g><g><title>tokio::runtime::coop::Budget::unconstrained (18 samples, 0.02%)</title><rect x="87.6314%" y="709" width="0.0241%" height="15" fill="rgb(246,212,3)" fg:x="65345" fg:w="18"/><text x="87.8814%" y="719.50"></text></g><g><title>&lt;tokio::sync::mpsc::unbounded::Semaphore as tokio::sync::mpsc::chan::Semaphore&gt;::is_idle (53 samples, 0.07%)</title><rect x="87.7414%" y="677" width="0.0711%" height="15" fill="rgb(247,156,24)" fg:x="65427" fg:w="53"/><text x="87.9914%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (53 samples, 0.07%)</title><rect x="87.7414%" y="661" width="0.0711%" height="15" fill="rgb(248,9,31)" fg:x="65427" fg:w="53"/><text x="87.9914%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_load (53 samples, 0.07%)</title><rect x="87.7414%" y="645" width="0.0711%" height="15" fill="rgb(234,26,45)" fg:x="65427" fg:w="53"/><text x="87.9914%" y="655.50"></text></g><g><title>tokio::runtime::coop::RestoreOnPending::made_progress (14 samples, 0.02%)</title><rect x="87.8125%" y="677" width="0.0188%" height="15" fill="rgb(249,11,32)" fg:x="65480" fg:w="14"/><text x="88.0625%" y="687.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (14 samples, 0.02%)</title><rect x="87.8125%" y="661" width="0.0188%" height="15" fill="rgb(249,162,33)" fg:x="65480" fg:w="14"/><text x="88.0625%" y="671.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (14 samples, 0.02%)</title><rect x="87.8125%" y="645" width="0.0188%" height="15" fill="rgb(232,4,32)" fg:x="65480" fg:w="14"/><text x="88.0625%" y="655.50"></text></g><g><title>core::mem::replace (14 samples, 0.02%)</title><rect x="87.8125%" y="629" width="0.0188%" height="15" fill="rgb(212,5,45)" fg:x="65480" fg:w="14"/><text x="88.0625%" y="639.50"></text></g><g><title>core::ptr::write (14 samples, 0.02%)</title><rect x="87.8125%" y="613" width="0.0188%" height="15" fill="rgb(227,95,13)" fg:x="65480" fg:w="14"/><text x="88.0625%" y="623.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::read (28 samples, 0.04%)</title><rect x="87.8339%" y="661" width="0.0375%" height="15" fill="rgb(223,205,10)" fg:x="65496" fg:w="28"/><text x="88.0839%" y="671.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::reclaim_blocks (13 samples, 0.02%)</title><rect x="87.8715%" y="661" width="0.0174%" height="15" fill="rgb(222,178,8)" fg:x="65524" fg:w="13"/><text x="88.1215%" y="671.50"></text></g><g><title>core::cmp::PartialEq::ne (12 samples, 0.02%)</title><rect x="87.8728%" y="645" width="0.0161%" height="15" fill="rgb(216,13,22)" fg:x="65525" fg:w="12"/><text x="88.1228%" y="655.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (200 samples, 0.27%)</title><rect x="87.6985%" y="709" width="0.2682%" height="15" fill="rgb(240,167,12)" fg:x="65395" fg:w="200"/><text x="87.9485%" y="719.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (198 samples, 0.27%)</title><rect x="87.7012%" y="693" width="0.2655%" height="15" fill="rgb(235,68,35)" fg:x="65397" fg:w="198"/><text x="87.9512%" y="703.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (101 samples, 0.14%)</title><rect x="87.8312%" y="677" width="0.1354%" height="15" fill="rgb(253,40,27)" fg:x="65494" fg:w="101"/><text x="88.0812%" y="687.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::try_advancing_head (58 samples, 0.08%)</title><rect x="87.8889%" y="661" width="0.0778%" height="15" fill="rgb(214,19,28)" fg:x="65537" fg:w="58"/><text x="88.1389%" y="671.50"></text></g><g><title>tokio::runtime::context::budget (44 samples, 0.06%)</title><rect x="87.9868%" y="693" width="0.0590%" height="15" fill="rgb(210,167,45)" fg:x="65610" fg:w="44"/><text x="88.2368%" y="703.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (44 samples, 0.06%)</title><rect x="87.9868%" y="677" width="0.0590%" height="15" fill="rgb(232,97,40)" fg:x="65610" fg:w="44"/><text x="88.2368%" y="687.50"></text></g><g><title>tokio::runtime::context::budget::{{closure}} (39 samples, 0.05%)</title><rect x="87.9935%" y="661" width="0.0523%" height="15" fill="rgb(250,35,23)" fg:x="65615" fg:w="39"/><text x="88.2435%" y="671.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::{{closure}} (39 samples, 0.05%)</title><rect x="87.9935%" y="645" width="0.0523%" height="15" fill="rgb(248,47,53)" fg:x="65615" fg:w="39"/><text x="88.2435%" y="655.50"></text></g><g><title>tokio::runtime::coop::Budget::decrement (16 samples, 0.02%)</title><rect x="88.0244%" y="629" width="0.0215%" height="15" fill="rgb(226,58,50)" fg:x="65638" fg:w="16"/><text x="88.2744%" y="639.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (1,390 samples, 1.86%)</title><rect x="86.1871%" y="821" width="1.8641%" height="15" fill="rgb(217,105,26)" fg:x="64268" fg:w="1390"/><text x="86.4371%" y="831.50">&lt;..</text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::run::{{closure}}::{{closure}}::{{closure}}::{{closure}} (1,390 samples, 1.86%)</title><rect x="86.1871%" y="805" width="1.8641%" height="15" fill="rgb(208,64,1)" fg:x="64268" fg:w="1390"/><text x="86.4371%" y="815.50">r..</text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}} (295 samples, 0.40%)</title><rect x="87.6556%" y="789" width="0.3956%" height="15" fill="rgb(214,80,1)" fg:x="65363" fg:w="295"/><text x="87.9056%" y="799.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (273 samples, 0.37%)</title><rect x="87.6851%" y="773" width="0.3661%" height="15" fill="rgb(206,175,26)" fg:x="65385" fg:w="273"/><text x="87.9351%" y="783.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::recv::{{closure}}::{{closure}} (273 samples, 0.37%)</title><rect x="87.6851%" y="757" width="0.3661%" height="15" fill="rgb(235,156,37)" fg:x="65385" fg:w="273"/><text x="87.9351%" y="767.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedReceiver&lt;T&gt;::poll_recv (270 samples, 0.36%)</title><rect x="87.6891%" y="741" width="0.3621%" height="15" fill="rgb(213,100,9)" fg:x="65388" fg:w="270"/><text x="87.9391%" y="751.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (270 samples, 0.36%)</title><rect x="87.6891%" y="725" width="0.3621%" height="15" fill="rgb(241,15,13)" fg:x="65388" fg:w="270"/><text x="87.9391%" y="735.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (63 samples, 0.08%)</title><rect x="87.9667%" y="709" width="0.0845%" height="15" fill="rgb(205,97,43)" fg:x="65595" fg:w="63"/><text x="88.2167%" y="719.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::is_empty (21 samples, 0.03%)</title><rect x="88.0847%" y="805" width="0.0282%" height="15" fill="rgb(216,106,32)" fg:x="65683" fg:w="21"/><text x="88.3347%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::is_empty (21 samples, 0.03%)</title><rect x="88.0847%" y="789" width="0.0282%" height="15" fill="rgb(226,200,8)" fg:x="65683" fg:w="21"/><text x="88.3347%" y="799.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::should_terminate (53 samples, 0.07%)</title><rect x="88.0579%" y="821" width="0.0711%" height="15" fill="rgb(244,54,29)" fg:x="65663" fg:w="53"/><text x="88.3079%" y="831.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::is_empty (12 samples, 0.02%)</title><rect x="88.1129%" y="805" width="0.0161%" height="15" fill="rgb(252,169,12)" fg:x="65704" fg:w="12"/><text x="88.3629%" y="815.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::is_empty (12 samples, 0.02%)</title><rect x="88.1129%" y="789" width="0.0161%" height="15" fill="rgb(231,199,11)" fg:x="65704" fg:w="12"/><text x="88.3629%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::is_empty (12 samples, 0.02%)</title><rect x="88.1129%" y="773" width="0.0161%" height="15" fill="rgb(233,191,18)" fg:x="65704" fg:w="12"/><text x="88.3629%" y="783.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (33 samples, 0.04%)</title><rect x="88.2295%" y="789" width="0.0443%" height="15" fill="rgb(215,83,47)" fg:x="65791" fg:w="33"/><text x="88.4795%" y="799.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (48 samples, 0.06%)</title><rect x="88.2738%" y="789" width="0.0644%" height="15" fill="rgb(251,67,19)" fg:x="65824" fg:w="48"/><text x="88.5238%" y="799.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::poll_acquire (40 samples, 0.05%)</title><rect x="88.2845%" y="773" width="0.0536%" height="15" fill="rgb(240,7,20)" fg:x="65832" fg:w="40"/><text x="88.5345%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (26 samples, 0.03%)</title><rect x="88.3033%" y="757" width="0.0349%" height="15" fill="rgb(210,150,26)" fg:x="65846" fg:w="26"/><text x="88.5533%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (26 samples, 0.03%)</title><rect x="88.3033%" y="741" width="0.0349%" height="15" fill="rgb(228,75,42)" fg:x="65846" fg:w="26"/><text x="88.5533%" y="751.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::acquire (22 samples, 0.03%)</title><rect x="88.3462%" y="789" width="0.0295%" height="15" fill="rgb(237,134,48)" fg:x="65878" fg:w="22"/><text x="88.5962%" y="799.50"></text></g><g><title>tokio::sync::batch_semaphore::Acquire::new (8 samples, 0.01%)</title><rect x="88.3650%" y="773" width="0.0107%" height="15" fill="rgb(205,80,50)" fg:x="65892" fg:w="8"/><text x="88.6150%" y="783.50"></text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::reserve::{{closure}} (192 samples, 0.26%)</title><rect x="88.1290%" y="821" width="0.2575%" height="15" fill="rgb(217,74,48)" fg:x="65716" fg:w="192"/><text x="88.3790%" y="831.50"></text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::reserve_inner::{{closure}} (155 samples, 0.21%)</title><rect x="88.1786%" y="805" width="0.2079%" height="15" fill="rgb(205,82,50)" fg:x="65753" fg:w="155"/><text x="88.4286%" y="815.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::semaphore (8 samples, 0.01%)</title><rect x="88.3757%" y="789" width="0.0107%" height="15" fill="rgb(228,1,33)" fg:x="65900" fg:w="8"/><text x="88.6257%" y="799.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.01%)</title><rect x="88.3757%" y="773" width="0.0107%" height="15" fill="rgb(214,50,23)" fg:x="65900" fg:w="8"/><text x="88.6257%" y="783.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (8 samples, 0.01%)</title><rect x="88.3757%" y="757" width="0.0107%" height="15" fill="rgb(210,62,9)" fg:x="65900" fg:w="8"/><text x="88.6257%" y="767.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (8 samples, 0.01%)</title><rect x="88.3757%" y="741" width="0.0107%" height="15" fill="rgb(210,104,37)" fg:x="65900" fg:w="8"/><text x="88.6257%" y="751.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::run::{{closure}}::{{closure}}::{{closure}} (1,982 samples, 2.66%)</title><rect x="85.7298%" y="837" width="2.6580%" height="15" fill="rgb(232,104,43)" fg:x="63927" fg:w="1982"/><text x="85.9798%" y="847.50">re..</text></g><g><title>tokio::runtime::context::CONTEXT::__getit (10 samples, 0.01%)</title><rect x="88.3878%" y="773" width="0.0134%" height="15" fill="rgb(244,52,6)" fg:x="65909" fg:w="10"/><text x="88.6378%" y="783.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (10 samples, 0.01%)</title><rect x="88.3878%" y="757" width="0.0134%" height="15" fill="rgb(211,174,52)" fg:x="65909" fg:w="10"/><text x="88.6378%" y="767.50"></text></g><g><title>tokio::macros::support::thread_rng_n (30 samples, 0.04%)</title><rect x="88.3878%" y="837" width="0.0402%" height="15" fill="rgb(229,48,4)" fg:x="65909" fg:w="30"/><text x="88.6378%" y="847.50"></text></g><g><title>tokio::runtime::context::thread_rng_n (30 samples, 0.04%)</title><rect x="88.3878%" y="821" width="0.0402%" height="15" fill="rgb(205,155,16)" fg:x="65909" fg:w="30"/><text x="88.6378%" y="831.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (30 samples, 0.04%)</title><rect x="88.3878%" y="805" width="0.0402%" height="15" fill="rgb(211,141,53)" fg:x="65909" fg:w="30"/><text x="88.6378%" y="815.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (30 samples, 0.04%)</title><rect x="88.3878%" y="789" width="0.0402%" height="15" fill="rgb(240,148,11)" fg:x="65909" fg:w="30"/><text x="88.6378%" y="799.50"></text></g><g><title>tokio::runtime::context::thread_rng_n::{{closure}} (20 samples, 0.03%)</title><rect x="88.4012%" y="773" width="0.0268%" height="15" fill="rgb(214,45,23)" fg:x="65919" fg:w="20"/><text x="88.6512%" y="783.50"></text></g><g><title>tokio::util::rand::FastRand::fastrand_n (20 samples, 0.03%)</title><rect x="88.4012%" y="757" width="0.0268%" height="15" fill="rgb(248,74,26)" fg:x="65919" fg:w="20"/><text x="88.6512%" y="767.50"></text></g><g><title>tokio::util::rand::FastRand::fastrand (16 samples, 0.02%)</title><rect x="88.4066%" y="741" width="0.0215%" height="15" fill="rgb(218,121,16)" fg:x="65923" fg:w="16"/><text x="88.6566%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (22 samples, 0.03%)</title><rect x="88.5688%" y="773" width="0.0295%" height="15" fill="rgb(218,10,47)" fg:x="66044" fg:w="22"/><text x="88.8188%" y="783.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (22 samples, 0.03%)</title><rect x="88.5688%" y="757" width="0.0295%" height="15" fill="rgb(227,99,14)" fg:x="66044" fg:w="22"/><text x="88.8188%" y="767.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (22 samples, 0.03%)</title><rect x="88.5688%" y="741" width="0.0295%" height="15" fill="rgb(229,83,46)" fg:x="66044" fg:w="22"/><text x="88.8188%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::coop::RestoreOnPending&gt; (16 samples, 0.02%)</title><rect x="88.5983%" y="773" width="0.0215%" height="15" fill="rgb(228,25,1)" fg:x="66066" fg:w="16"/><text x="88.8483%" y="783.50"></text></g><g><title>&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (16 samples, 0.02%)</title><rect x="88.5983%" y="757" width="0.0215%" height="15" fill="rgb(252,190,15)" fg:x="66066" fg:w="16"/><text x="88.8483%" y="767.50"></text></g><g><title>tokio::runtime::context::budget (8 samples, 0.01%)</title><rect x="88.6091%" y="741" width="0.0107%" height="15" fill="rgb(213,103,51)" fg:x="66074" fg:w="8"/><text x="88.8591%" y="751.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (8 samples, 0.01%)</title><rect x="88.6091%" y="725" width="0.0107%" height="15" fill="rgb(220,38,44)" fg:x="66074" fg:w="8"/><text x="88.8591%" y="735.50"></text></g><g><title>&lt;tokio::sync::mpsc::bounded::Semaphore as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (9 samples, 0.01%)</title><rect x="88.6922%" y="741" width="0.0121%" height="15" fill="rgb(210,45,26)" fg:x="66136" fg:w="9"/><text x="88.9422%" y="751.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (9 samples, 0.01%)</title><rect x="88.6922%" y="725" width="0.0121%" height="15" fill="rgb(205,95,48)" fg:x="66136" fg:w="9"/><text x="88.9422%" y="735.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (9 samples, 0.01%)</title><rect x="88.6922%" y="709" width="0.0121%" height="15" fill="rgb(225,179,37)" fg:x="66136" fg:w="9"/><text x="88.9422%" y="719.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (9 samples, 0.01%)</title><rect x="88.6922%" y="693" width="0.0121%" height="15" fill="rgb(230,209,3)" fg:x="66136" fg:w="9"/><text x="88.9422%" y="703.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (9 samples, 0.01%)</title><rect x="88.6922%" y="677" width="0.0121%" height="15" fill="rgb(248,12,46)" fg:x="66136" fg:w="9"/><text x="88.9422%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (9 samples, 0.01%)</title><rect x="88.6922%" y="661" width="0.0121%" height="15" fill="rgb(234,18,0)" fg:x="66136" fg:w="9"/><text x="88.9422%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (9 samples, 0.01%)</title><rect x="88.6922%" y="645" width="0.0121%" height="15" fill="rgb(238,197,14)" fg:x="66136" fg:w="9"/><text x="88.9422%" y="655.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (34 samples, 0.05%)</title><rect x="88.7043%" y="741" width="0.0456%" height="15" fill="rgb(251,162,48)" fg:x="66145" fg:w="34"/><text x="88.9543%" y="751.50"></text></g><g><title>tokio::util::wake_list::WakeList::wake_all (8 samples, 0.01%)</title><rect x="88.7391%" y="725" width="0.0107%" height="15" fill="rgb(237,73,42)" fg:x="66171" fg:w="8"/><text x="88.9891%" y="735.50"></text></g><g><title>&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (9 samples, 0.01%)</title><rect x="88.8075%" y="709" width="0.0121%" height="15" fill="rgb(211,108,8)" fg:x="66222" fg:w="9"/><text x="89.0575%" y="719.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (11 samples, 0.01%)</title><rect x="88.8303%" y="709" width="0.0148%" height="15" fill="rgb(213,45,22)" fg:x="66239" fg:w="11"/><text x="89.0803%" y="719.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::read::{{closure}} (11 samples, 0.01%)</title><rect x="88.8303%" y="693" width="0.0148%" height="15" fill="rgb(252,154,5)" fg:x="66239" fg:w="11"/><text x="89.0803%" y="703.50"></text></g><g><title>core::ptr::read (11 samples, 0.01%)</title><rect x="88.8303%" y="677" width="0.0148%" height="15" fill="rgb(221,79,52)" fg:x="66239" fg:w="11"/><text x="89.0803%" y="687.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (11 samples, 0.01%)</title><rect x="88.8303%" y="661" width="0.0148%" height="15" fill="rgb(229,220,36)" fg:x="66239" fg:w="11"/><text x="89.0803%" y="671.50"></text></g><g><title>tokio::sync::mpsc::block::is_ready (18 samples, 0.02%)</title><rect x="88.8451%" y="709" width="0.0241%" height="15" fill="rgb(211,17,16)" fg:x="66250" fg:w="18"/><text x="89.0951%" y="719.50"></text></g><g><title>tokio::sync::mpsc::block::is_tx_closed (9 samples, 0.01%)</title><rect x="88.8692%" y="709" width="0.0121%" height="15" fill="rgb(222,55,31)" fg:x="66268" fg:w="9"/><text x="89.1192%" y="719.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::read (73 samples, 0.10%)</title><rect x="88.7874%" y="725" width="0.0979%" height="15" fill="rgb(221,221,31)" fg:x="66207" fg:w="73"/><text x="89.0374%" y="735.50"></text></g><g><title>core::cmp::PartialEq::ne (14 samples, 0.02%)</title><rect x="88.8934%" y="709" width="0.0188%" height="15" fill="rgb(227,168,26)" fg:x="66286" fg:w="14"/><text x="89.1434%" y="719.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::reclaim_blocks (26 samples, 0.03%)</title><rect x="88.8853%" y="725" width="0.0349%" height="15" fill="rgb(224,139,9)" fg:x="66280" fg:w="26"/><text x="89.1353%" y="735.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (243 samples, 0.33%)</title><rect x="88.7499%" y="741" width="0.3259%" height="15" fill="rgb(254,172,0)" fg:x="66179" fg:w="243"/><text x="88.9999%" y="751.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::try_advancing_head (116 samples, 0.16%)</title><rect x="88.9202%" y="725" width="0.1556%" height="15" fill="rgb(235,203,1)" fg:x="66306" fg:w="116"/><text x="89.1702%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (96 samples, 0.13%)</title><rect x="89.0878%" y="709" width="0.1287%" height="15" fill="rgb(216,205,24)" fg:x="66431" fg:w="96"/><text x="89.3378%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (96 samples, 0.13%)</title><rect x="89.0878%" y="693" width="0.1287%" height="15" fill="rgb(233,24,6)" fg:x="66431" fg:w="96"/><text x="89.3378%" y="703.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (25 samples, 0.03%)</title><rect x="89.2206%" y="565" width="0.0335%" height="15" fill="rgb(244,110,9)" fg:x="66530" fg:w="25"/><text x="89.4706%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (25 samples, 0.03%)</title><rect x="89.2206%" y="549" width="0.0335%" height="15" fill="rgb(239,222,42)" fg:x="66530" fg:w="25"/><text x="89.4706%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_add (25 samples, 0.03%)</title><rect x="89.2206%" y="533" width="0.0335%" height="15" fill="rgb(218,145,13)" fg:x="66530" fg:w="25"/><text x="89.4706%" y="543.50"></text></g><g><title>&lt;&amp;core::task::wake::Waker as tokio::sync::task::atomic_waker::WakerRef&gt;::into_waker (27 samples, 0.04%)</title><rect x="89.2192%" y="613" width="0.0362%" height="15" fill="rgb(207,69,11)" fg:x="66529" fg:w="27"/><text x="89.4692%" y="623.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (27 samples, 0.04%)</title><rect x="89.2192%" y="597" width="0.0362%" height="15" fill="rgb(220,223,22)" fg:x="66529" fg:w="27"/><text x="89.4692%" y="607.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (27 samples, 0.04%)</title><rect x="89.2192%" y="581" width="0.0362%" height="15" fill="rgb(245,102,5)" fg:x="66529" fg:w="27"/><text x="89.4692%" y="591.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (494 samples, 0.66%)</title><rect x="88.6198%" y="773" width="0.6625%" height="15" fill="rgb(211,148,2)" fg:x="66082" fg:w="494"/><text x="88.8698%" y="783.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (493 samples, 0.66%)</title><rect x="88.6211%" y="757" width="0.6611%" height="15" fill="rgb(241,13,44)" fg:x="66083" fg:w="493"/><text x="88.8711%" y="767.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (154 samples, 0.21%)</title><rect x="89.0757%" y="741" width="0.2065%" height="15" fill="rgb(219,137,21)" fg:x="66422" fg:w="154"/><text x="89.3257%" y="751.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register (153 samples, 0.21%)</title><rect x="89.0771%" y="725" width="0.2052%" height="15" fill="rgb(242,206,5)" fg:x="66423" fg:w="153"/><text x="89.3271%" y="735.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::catch_unwind (47 samples, 0.06%)</title><rect x="89.2192%" y="709" width="0.0630%" height="15" fill="rgb(217,114,22)" fg:x="66529" fg:w="47"/><text x="89.4692%" y="719.50"></text></g><g><title>std::panic::catch_unwind (47 samples, 0.06%)</title><rect x="89.2192%" y="693" width="0.0630%" height="15" fill="rgb(253,206,42)" fg:x="66529" fg:w="47"/><text x="89.4692%" y="703.50"></text></g><g><title>std::panicking::try (47 samples, 0.06%)</title><rect x="89.2192%" y="677" width="0.0630%" height="15" fill="rgb(236,102,18)" fg:x="66529" fg:w="47"/><text x="89.4692%" y="687.50"></text></g><g><title>std::panicking::try::do_call (47 samples, 0.06%)</title><rect x="89.2192%" y="661" width="0.0630%" height="15" fill="rgb(208,59,49)" fg:x="66529" fg:w="47"/><text x="89.4692%" y="671.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (47 samples, 0.06%)</title><rect x="89.2192%" y="645" width="0.0630%" height="15" fill="rgb(215,194,28)" fg:x="66529" fg:w="47"/><text x="89.4692%" y="655.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::{{closure}} (47 samples, 0.06%)</title><rect x="89.2192%" y="629" width="0.0630%" height="15" fill="rgb(243,207,11)" fg:x="66529" fg:w="47"/><text x="89.4692%" y="639.50"></text></g><g><title>core::mem::drop (20 samples, 0.03%)</title><rect x="89.2554%" y="613" width="0.0268%" height="15" fill="rgb(254,179,35)" fg:x="66556" fg:w="20"/><text x="89.5054%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (20 samples, 0.03%)</title><rect x="89.2554%" y="597" width="0.0268%" height="15" fill="rgb(235,97,3)" fg:x="66556" fg:w="20"/><text x="89.5054%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (20 samples, 0.03%)</title><rect x="89.2554%" y="581" width="0.0268%" height="15" fill="rgb(215,155,33)" fg:x="66556" fg:w="20"/><text x="89.5054%" y="591.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (20 samples, 0.03%)</title><rect x="89.2554%" y="565" width="0.0268%" height="15" fill="rgb(223,128,12)" fg:x="66556" fg:w="20"/><text x="89.5054%" y="575.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (20 samples, 0.03%)</title><rect x="89.2554%" y="549" width="0.0268%" height="15" fill="rgb(208,157,18)" fg:x="66556" fg:w="20"/><text x="89.5054%" y="559.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::drop_reference (20 samples, 0.03%)</title><rect x="89.2554%" y="533" width="0.0268%" height="15" fill="rgb(249,70,54)" fg:x="66556" fg:w="20"/><text x="89.5054%" y="543.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (20 samples, 0.03%)</title><rect x="89.2554%" y="517" width="0.0268%" height="15" fill="rgb(244,118,24)" fg:x="66556" fg:w="20"/><text x="89.5054%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (19 samples, 0.03%)</title><rect x="89.2568%" y="501" width="0.0255%" height="15" fill="rgb(211,54,0)" fg:x="66557" fg:w="19"/><text x="89.5068%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_sub (19 samples, 0.03%)</title><rect x="89.2568%" y="485" width="0.0255%" height="15" fill="rgb(245,137,45)" fg:x="66557" fg:w="19"/><text x="89.5068%" y="495.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (12 samples, 0.02%)</title><rect x="89.3171%" y="725" width="0.0161%" height="15" fill="rgb(232,154,31)" fg:x="66602" fg:w="12"/><text x="89.5671%" y="735.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (12 samples, 0.02%)</title><rect x="89.3171%" y="709" width="0.0161%" height="15" fill="rgb(253,6,39)" fg:x="66602" fg:w="12"/><text x="89.5671%" y="719.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (16 samples, 0.02%)</title><rect x="89.3828%" y="693" width="0.0215%" height="15" fill="rgb(234,183,24)" fg:x="66651" fg:w="16"/><text x="89.6328%" y="703.50"></text></g><g><title>tokio::runtime::context::budget (104 samples, 0.14%)</title><rect x="89.3118%" y="757" width="0.1395%" height="15" fill="rgb(252,84,40)" fg:x="66598" fg:w="104"/><text x="89.5618%" y="767.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (104 samples, 0.14%)</title><rect x="89.3118%" y="741" width="0.1395%" height="15" fill="rgb(224,65,2)" fg:x="66598" fg:w="104"/><text x="89.5618%" y="751.50"></text></g><g><title>tokio::runtime::context::budget::{{closure}} (88 samples, 0.12%)</title><rect x="89.3332%" y="725" width="0.1180%" height="15" fill="rgb(229,38,24)" fg:x="66614" fg:w="88"/><text x="89.5832%" y="735.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::{{closure}} (88 samples, 0.12%)</title><rect x="89.3332%" y="709" width="0.1180%" height="15" fill="rgb(218,131,50)" fg:x="66614" fg:w="88"/><text x="89.5832%" y="719.50"></text></g><g><title>tokio::runtime::coop::Budget::decrement (31 samples, 0.04%)</title><rect x="89.4097%" y="693" width="0.0416%" height="15" fill="rgb(233,106,18)" fg:x="66671" fg:w="31"/><text x="89.6597%" y="703.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (11,877 samples, 15.93%)</title><rect x="73.5369%" y="869" width="15.9277%" height="15" fill="rgb(220,216,11)" fg:x="54835" fg:w="11877"/><text x="73.7869%" y="879.50">&lt;tokio::future::poll_fn:..</text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::run::{{closure}}::{{closure}}::{{closure}} (11,822 samples, 15.85%)</title><rect x="73.6107%" y="853" width="15.8540%" height="15" fill="rgb(251,100,45)" fg:x="54890" fg:w="11822"/><text x="73.8607%" y="863.50">remoc::chmux::mux::ChMux..</text></g><g><title>tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::recv::{{closure}} (773 samples, 1.04%)</title><rect x="88.4280%" y="837" width="1.0366%" height="15" fill="rgb(235,143,32)" fg:x="65939" fg:w="773"/><text x="88.6780%" y="847.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (690 samples, 0.93%)</title><rect x="88.5393%" y="821" width="0.9253%" height="15" fill="rgb(248,124,34)" fg:x="66022" fg:w="690"/><text x="88.7893%" y="831.50"></text></g><g><title>tokio::sync::mpsc::bounded::Receiver&lt;T&gt;::recv::{{closure}}::{{closure}} (690 samples, 0.93%)</title><rect x="88.5393%" y="805" width="0.9253%" height="15" fill="rgb(225,221,4)" fg:x="66022" fg:w="690"/><text x="88.7893%" y="815.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (681 samples, 0.91%)</title><rect x="88.5514%" y="789" width="0.9133%" height="15" fill="rgb(242,27,43)" fg:x="66031" fg:w="681"/><text x="88.8014%" y="799.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (136 samples, 0.18%)</title><rect x="89.2823%" y="773" width="0.1824%" height="15" fill="rgb(227,54,8)" fg:x="66576" fg:w="136"/><text x="89.5323%" y="783.50"></text></g><g><title>tokio::runtime::coop::Budget::unconstrained (10 samples, 0.01%)</title><rect x="89.4512%" y="757" width="0.0134%" height="15" fill="rgb(253,139,49)" fg:x="66702" fg:w="10"/><text x="89.7012%" y="767.50"></text></g><g><title>[libc.so.6] (108 samples, 0.14%)</title><rect x="89.4646%" y="869" width="0.1448%" height="15" fill="rgb(231,26,43)" fg:x="66712" fg:w="108"/><text x="89.7146%" y="879.50"></text></g><g><title>core::future::identity_future (11 samples, 0.01%)</title><rect x="89.6095%" y="869" width="0.0148%" height="15" fill="rgb(207,121,39)" fg:x="66820" fg:w="11"/><text x="89.8595%" y="879.50"></text></g><g><title>&lt;tokio::sync::mpsc::bounded::Semaphore as tokio::sync::mpsc::chan::Semaphore&gt;::add_permit (23 samples, 0.03%)</title><rect x="89.6336%" y="805" width="0.0308%" height="15" fill="rgb(223,101,35)" fg:x="66838" fg:w="23"/><text x="89.8836%" y="815.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::release (23 samples, 0.03%)</title><rect x="89.6336%" y="789" width="0.0308%" height="15" fill="rgb(232,87,23)" fg:x="66838" fg:w="23"/><text x="89.8836%" y="799.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (23 samples, 0.03%)</title><rect x="89.6336%" y="773" width="0.0308%" height="15" fill="rgb(225,180,29)" fg:x="66838" fg:w="23"/><text x="89.8836%" y="783.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (23 samples, 0.03%)</title><rect x="89.6336%" y="757" width="0.0308%" height="15" fill="rgb(225,25,17)" fg:x="66838" fg:w="23"/><text x="89.8836%" y="767.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (23 samples, 0.03%)</title><rect x="89.6336%" y="741" width="0.0308%" height="15" fill="rgb(223,8,52)" fg:x="66838" fg:w="23"/><text x="89.8836%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (23 samples, 0.03%)</title><rect x="89.6336%" y="725" width="0.0308%" height="15" fill="rgb(246,42,21)" fg:x="66838" fg:w="23"/><text x="89.8836%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (23 samples, 0.03%)</title><rect x="89.6336%" y="709" width="0.0308%" height="15" fill="rgb(205,64,43)" fg:x="66838" fg:w="23"/><text x="89.8836%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (9 samples, 0.01%)</title><rect x="89.6739%" y="789" width="0.0121%" height="15" fill="rgb(221,160,13)" fg:x="66868" fg:w="9"/><text x="89.9239%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_add (9 samples, 0.01%)</title><rect x="89.6739%" y="773" width="0.0121%" height="15" fill="rgb(239,58,35)" fg:x="66868" fg:w="9"/><text x="89.9239%" y="783.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (20 samples, 0.03%)</title><rect x="89.6658%" y="805" width="0.0268%" height="15" fill="rgb(251,26,40)" fg:x="66862" fg:w="20"/><text x="89.9158%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;(remoc::chmux::mux::ChMux&lt;tokio_util::codec::framed_write::FramedWrite&lt;tokio::io::util::buf_writer::BufWriter&lt;mpc_channel::util::TrackingWriter&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;,tokio_util::codec::length_delimited::LengthDelimitedCodec&gt;,futures_util::stream::try_stream::MapOk&lt;tokio_util::codec::framed_read::FramedRead&lt;tokio::io::util::buf_reader::BufReader&lt;mpc_channel::util::TrackingReader&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;,tokio_util::codec::length_delimited::LengthDelimitedCodec&gt;,remoc::connect::Connect&lt;std::io::error::Error,std::io::error::Error&gt;::io&lt;tokio::io::util::buf_reader::BufReader&lt;mpc_channel::util::TrackingReader&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;,tokio::io::util::buf_writer::BufWriter&lt;mpc_channel::util::TrackingWriter&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;,gmw::bench::BenchParty&lt;P,Idx&gt;::bench::{{closure}}::{{closure}}::__mpc_channel_macros__internal_Receivers&lt;remoc::rch::mpsc::receiver::Receiver&lt;zappot::ot_ext::ExtOTMsg,remoc::codec::bincode::Bincode,128_usize&gt;,gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt;,gmw::bench::BenchParty&lt;P,Idx&gt;::bench::{{closure}}::{{closure}}::__mpc_channel_macros__internal_Receivers&lt;remoc::rch::mpsc::receiver::Receiver&lt;zappot::ot_ext::ExtOTMsg,remoc::codec::bincode::Bincode,128_usize&gt;,gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt;,remoc::codec::bincode::Bincode&gt;::{{closure}}::{{closure}}&gt;&gt;::run::{{closure}}::{{closure}}::{{closure}},tokio::sync::mpsc::bounded::Receiver&lt;remoc::chmux::mux::TransportMsg&gt;::recv::{{closure}},&amp;mut core::pin::Pin&lt;&amp;mut futures_util::future::future::fuse::Fuse&lt;remoc::chmux::mux::ChMux&lt;tokio_util::codec::framed_write::FramedWrite&lt;tokio::io::util::buf_writer::BufWriter&lt;mpc_channel::util::TrackingWriter&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;,tokio_util::codec::length_delimited::LengthDelimitedCodec&gt;,futures_util::stream::try_stream::MapOk&lt;tokio_util::codec::framed_read::FramedRead&lt;tokio::io::util::buf_reader::BufReader&lt;mpc_channel::util::TrackingReader&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;,tokio_util::codec::length_delimited::LengthDelimitedCodec&gt;,remoc::connect::Connect&lt;std::io::error::Error,std::io::error::Error&gt;::io&lt;tokio::io::util::buf_reader::BufReader&lt;mpc_channel::util::TrackingReader&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;,tokio::io::util::buf_writer::BufWriter&lt;mpc_channel::util::TrackingWriter&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;,gmw::bench::BenchParty&lt;P,Idx&gt;::bench::{{closure}}::{{closure}}::__mpc_channel_macros__internal_Receivers&lt;remoc::rch::mpsc::receiver::Receiver&lt;zappot::ot_ext::ExtOTMsg,remoc::codec::bincode::Bincode,128_usize&gt;,gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt;,gmw::bench::BenchParty&lt;P,Idx&gt;::bench::{{closure}}::{{closure}}::__mpc_channel_macros__internal_Receivers&lt;remoc::rch::mpsc::receiver::Receiver&lt;zappot::ot_ext::ExtOTMsg,remoc::codec::bincode::Bincode,128_usize&gt;,gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt;,remoc::codec::bincode::Bincode&gt;::{{closure}}::{{closure}}&gt;&gt;::send_task::{{closure}}&gt;&gt;,&amp;mut core::pin::Pin&lt;&amp;mut futures_util::future::future::fuse::Fuse&lt;remoc::chmux::mux::ChMux&lt;tokio_util::codec::framed_write::FramedWrite&lt;tokio::io::util::buf_writer::BufWriter&lt;mpc_channel::util::TrackingWriter&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;,tokio_util::codec::length_delimited::LengthDelimitedCodec&gt;,futures_util::stream::try_stream::MapOk&lt;tokio_util::codec::framed_read::FramedRead&lt;tokio::io::util::buf_reader::BufReader&lt;mpc_channel::util::TrackingReader&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;,tokio_util::codec::length_delimited::LengthDelimitedCodec&gt;,remoc::connect::Connect&lt;std::io::error::Error,std::io::error::Error&gt;::io&lt;tokio::io::util::buf_reader::BufReader&lt;mpc_channel::util::TrackingReader&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;,tokio::io::util::buf_writer::BufWriter&lt;mpc_channel::util::TrackingWriter&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;,gmw::bench::BenchParty&lt;P,Idx&gt;::bench::{{closure}}::{{closure}}::__mpc_channel_macros__internal_Receivers&lt;remoc::rch::mpsc::receiver::Receiver&lt;zappot::ot_ext::ExtOTMsg,remoc::codec::bincode::Bincode,128_usize&gt;,gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt;,gmw::bench::BenchParty&lt;P,Idx&gt;::bench::{{closure}}::{{closure}}::__mpc_channel_macros__internal_Receivers&lt;remoc::rch::mpsc::receiver::Receiver&lt;zappot::ot_ext::ExtOTMsg,remoc::codec::bincode::Bincode,128_usize&gt;,gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt;,remoc::codec::bincode::Bincode&gt;::{{closure}}::{{closure}}&gt;&gt;::recv_task::{{closure}}&gt;&gt;)&gt; (55 samples, 0.07%)</title><rect x="89.6242%" y="869" width="0.0738%" height="15" fill="rgb(247,0,4)" fg:x="66831" fg:w="55"/><text x="89.8742%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;remoc::chmux::mux::ChMux&lt;tokio_util::codec::framed_write::FramedWrite&lt;tokio::io::util::buf_writer::BufWriter&lt;mpc_channel::util::TrackingWriter&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;,tokio_util::codec::length_delimited::LengthDelimitedCodec&gt;,futures_util::stream::try_stream::MapOk&lt;tokio_util::codec::framed_read::FramedRead&lt;tokio::io::util::buf_reader::BufReader&lt;mpc_channel::util::TrackingReader&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;,tokio_util::codec::length_delimited::LengthDelimitedCodec&gt;,remoc::connect::Connect&lt;std::io::error::Error,std::io::error::Error&gt;::io&lt;tokio::io::util::buf_reader::BufReader&lt;mpc_channel::util::TrackingReader&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;,tokio::io::util::buf_writer::BufWriter&lt;mpc_channel::util::TrackingWriter&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;,aes_cbc::execute::{{closure}}::__mpc_channel_macros__internal_Receivers&lt;aes_cbc::Msg,gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt;,aes_cbc::execute::{{closure}}::__mpc_channel_macros__internal_Receivers&lt;aes_cbc::Msg,gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt;,remoc::codec::bincode::Bincode&gt;::{{closure}}::{{closure}}&gt;&gt;::run::{{closure}}::{{closure}}::{{closure}}&gt; (54 samples, 0.07%)</title><rect x="89.6256%" y="853" width="0.0724%" height="15" fill="rgb(218,130,10)" fg:x="66832" fg:w="54"/><text x="89.8756%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::mpsc::bounded::Permit&lt;remoc::chmux::mux::SendCmd&gt;&gt; (50 samples, 0.07%)</title><rect x="89.6309%" y="837" width="0.0671%" height="15" fill="rgb(239,32,7)" fg:x="66836" fg:w="50"/><text x="89.8809%" y="847.50"></text></g><g><title>&lt;tokio::sync::mpsc::bounded::Permit&lt;T&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.07%)</title><rect x="89.6309%" y="821" width="0.0671%" height="15" fill="rgb(210,192,24)" fg:x="66836" fg:w="50"/><text x="89.8809%" y="831.50"></text></g><g><title>remoc::chmux::mux::TransportMsg::with_data (10 samples, 0.01%)</title><rect x="89.9917%" y="837" width="0.0134%" height="15" fill="rgb(226,212,17)" fg:x="67105" fg:w="10"/><text x="90.2417%" y="847.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (17 samples, 0.02%)</title><rect x="90.0131%" y="805" width="0.0228%" height="15" fill="rgb(219,201,28)" fg:x="67121" fg:w="17"/><text x="90.2631%" y="815.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (17 samples, 0.02%)</title><rect x="90.0131%" y="789" width="0.0228%" height="15" fill="rgb(235,207,41)" fg:x="67121" fg:w="17"/><text x="90.2631%" y="799.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (17 samples, 0.02%)</title><rect x="90.0131%" y="773" width="0.0228%" height="15" fill="rgb(241,95,54)" fg:x="67121" fg:w="17"/><text x="90.2631%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (12 samples, 0.02%)</title><rect x="90.0413%" y="725" width="0.0161%" height="15" fill="rgb(248,12,23)" fg:x="67142" fg:w="12"/><text x="90.2913%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (12 samples, 0.02%)</title><rect x="90.0413%" y="709" width="0.0161%" height="15" fill="rgb(228,173,4)" fg:x="67142" fg:w="12"/><text x="90.2913%" y="719.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (14 samples, 0.02%)</title><rect x="90.0413%" y="789" width="0.0188%" height="15" fill="rgb(254,99,5)" fg:x="67142" fg:w="14"/><text x="90.2913%" y="799.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (14 samples, 0.02%)</title><rect x="90.0413%" y="773" width="0.0188%" height="15" fill="rgb(212,184,17)" fg:x="67142" fg:w="14"/><text x="90.2913%" y="783.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (14 samples, 0.02%)</title><rect x="90.0413%" y="757" width="0.0188%" height="15" fill="rgb(252,174,1)" fg:x="67142" fg:w="14"/><text x="90.2913%" y="767.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (14 samples, 0.02%)</title><rect x="90.0413%" y="741" width="0.0188%" height="15" fill="rgb(241,118,51)" fg:x="67142" fg:w="14"/><text x="90.2913%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (55 samples, 0.07%)</title><rect x="90.0654%" y="773" width="0.0738%" height="15" fill="rgb(227,94,47)" fg:x="67160" fg:w="55"/><text x="90.3154%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_add (55 samples, 0.07%)</title><rect x="90.0654%" y="757" width="0.0738%" height="15" fill="rgb(229,104,2)" fg:x="67160" fg:w="55"/><text x="90.3154%" y="767.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (9 samples, 0.01%)</title><rect x="90.1392%" y="757" width="0.0121%" height="15" fill="rgb(219,28,31)" fg:x="67215" fg:w="9"/><text x="90.3892%" y="767.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::write::{{closure}} (9 samples, 0.01%)</title><rect x="90.1392%" y="741" width="0.0121%" height="15" fill="rgb(233,109,36)" fg:x="67215" fg:w="9"/><text x="90.3892%" y="751.50"></text></g><g><title>core::ptr::write (9 samples, 0.01%)</title><rect x="90.1392%" y="725" width="0.0121%" height="15" fill="rgb(246,88,11)" fg:x="67215" fg:w="9"/><text x="90.3892%" y="735.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::set_ready (54 samples, 0.07%)</title><rect x="90.1513%" y="757" width="0.0724%" height="15" fill="rgb(209,212,17)" fg:x="67224" fg:w="54"/><text x="90.4013%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (53 samples, 0.07%)</title><rect x="90.1526%" y="741" width="0.0711%" height="15" fill="rgb(243,59,29)" fg:x="67225" fg:w="53"/><text x="90.4026%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_or (53 samples, 0.07%)</title><rect x="90.1526%" y="725" width="0.0711%" height="15" fill="rgb(244,205,48)" fg:x="67225" fg:w="53"/><text x="90.4026%" y="735.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::write (64 samples, 0.09%)</title><rect x="90.1392%" y="773" width="0.0858%" height="15" fill="rgb(227,30,6)" fg:x="67215" fg:w="64"/><text x="90.3892%" y="783.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::is_at_index (16 samples, 0.02%)</title><rect x="90.2317%" y="757" width="0.0215%" height="15" fill="rgb(220,205,48)" fg:x="67284" fg:w="16"/><text x="90.4817%" y="767.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::push (145 samples, 0.19%)</title><rect x="90.0601%" y="789" width="0.1945%" height="15" fill="rgb(250,94,14)" fg:x="67156" fg:w="145"/><text x="90.3101%" y="799.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (22 samples, 0.03%)</title><rect x="90.2250%" y="773" width="0.0295%" height="15" fill="rgb(216,119,42)" fg:x="67279" fg:w="22"/><text x="90.4750%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_and (13 samples, 0.02%)</title><rect x="90.2559%" y="757" width="0.0174%" height="15" fill="rgb(232,155,0)" fg:x="67302" fg:w="13"/><text x="90.5059%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_and (13 samples, 0.02%)</title><rect x="90.2559%" y="741" width="0.0174%" height="15" fill="rgb(212,24,32)" fg:x="67302" fg:w="13"/><text x="90.5059%" y="751.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::handle_event::{{closure}}::{{closure}} (352 samples, 0.47%)</title><rect x="89.8254%" y="853" width="0.4721%" height="15" fill="rgb(216,69,20)" fg:x="66981" fg:w="352"/><text x="90.0754%" y="863.50"></text></g><g><title>tokio::sync::mpsc::bounded::Permit&lt;T&gt;::send (218 samples, 0.29%)</title><rect x="90.0051%" y="837" width="0.2924%" height="15" fill="rgb(229,73,31)" fg:x="67115" fg:w="218"/><text x="90.2551%" y="847.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (212 samples, 0.28%)</title><rect x="90.0131%" y="821" width="0.2843%" height="15" fill="rgb(224,219,20)" fg:x="67121" fg:w="212"/><text x="90.2631%" y="831.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (195 samples, 0.26%)</title><rect x="90.0359%" y="805" width="0.2615%" height="15" fill="rgb(215,146,41)" fg:x="67138" fg:w="195"/><text x="90.2859%" y="815.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (32 samples, 0.04%)</title><rect x="90.2545%" y="789" width="0.0429%" height="15" fill="rgb(244,71,31)" fg:x="67301" fg:w="32"/><text x="90.5045%" y="799.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::take_waker (32 samples, 0.04%)</title><rect x="90.2545%" y="773" width="0.0429%" height="15" fill="rgb(224,24,11)" fg:x="67301" fg:w="32"/><text x="90.5045%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (18 samples, 0.02%)</title><rect x="90.2733%" y="757" width="0.0241%" height="15" fill="rgb(229,76,15)" fg:x="67315" fg:w="18"/><text x="90.5233%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_or (18 samples, 0.02%)</title><rect x="90.2733%" y="741" width="0.0241%" height="15" fill="rgb(209,93,2)" fg:x="67315" fg:w="18"/><text x="90.5233%" y="751.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::handle_event::{{closure}} (447 samples, 0.60%)</title><rect x="89.7007%" y="869" width="0.5995%" height="15" fill="rgb(216,200,50)" fg:x="66888" fg:w="447"/><text x="89.9507%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;remoc::chmux::credit::ChannelCreditMonitorInner&gt;&gt; (8 samples, 0.01%)</title><rect x="90.6072%" y="821" width="0.0107%" height="15" fill="rgb(211,67,34)" fg:x="67564" fg:w="8"/><text x="90.8572%" y="831.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="90.6072%" y="805" width="0.0107%" height="15" fill="rgb(225,87,47)" fg:x="67564" fg:w="8"/><text x="90.8572%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (8 samples, 0.01%)</title><rect x="90.6072%" y="789" width="0.0107%" height="15" fill="rgb(217,185,16)" fg:x="67564" fg:w="8"/><text x="90.8572%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (8 samples, 0.01%)</title><rect x="90.6072%" y="773" width="0.0107%" height="15" fill="rgb(205,0,0)" fg:x="67564" fg:w="8"/><text x="90.8572%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_swap (8 samples, 0.01%)</title><rect x="90.6072%" y="757" width="0.0107%" height="15" fill="rgb(207,116,45)" fg:x="67564" fg:w="8"/><text x="90.8572%" y="767.50"></text></g><g><title>remoc::chmux::credit::ChannelCreditMonitor::use_credits (48 samples, 0.06%)</title><rect x="90.6019%" y="837" width="0.0644%" height="15" fill="rgb(221,156,26)" fg:x="67560" fg:w="48"/><text x="90.8519%" y="847.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (36 samples, 0.05%)</title><rect x="90.6180%" y="821" width="0.0483%" height="15" fill="rgb(213,140,4)" fg:x="67572" fg:w="36"/><text x="90.8680%" y="831.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (33 samples, 0.04%)</title><rect x="90.6220%" y="805" width="0.0443%" height="15" fill="rgb(231,224,15)" fg:x="67575" fg:w="33"/><text x="90.8720%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (33 samples, 0.04%)</title><rect x="90.6220%" y="789" width="0.0443%" height="15" fill="rgb(244,76,20)" fg:x="67575" fg:w="33"/><text x="90.8720%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (33 samples, 0.04%)</title><rect x="90.6220%" y="773" width="0.0443%" height="15" fill="rgb(238,117,7)" fg:x="67575" fg:w="33"/><text x="90.8720%" y="783.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (12 samples, 0.02%)</title><rect x="90.7145%" y="757" width="0.0161%" height="15" fill="rgb(235,1,10)" fg:x="67644" fg:w="12"/><text x="90.9645%" y="767.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (12 samples, 0.02%)</title><rect x="90.7145%" y="741" width="0.0161%" height="15" fill="rgb(216,165,6)" fg:x="67644" fg:w="12"/><text x="90.9645%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (12 samples, 0.02%)</title><rect x="90.7145%" y="725" width="0.0161%" height="15" fill="rgb(246,91,35)" fg:x="67644" fg:w="12"/><text x="90.9645%" y="735.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (13 samples, 0.02%)</title><rect x="90.7306%" y="757" width="0.0174%" height="15" fill="rgb(228,96,24)" fg:x="67656" fg:w="13"/><text x="90.9806%" y="767.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (12 samples, 0.02%)</title><rect x="90.7319%" y="741" width="0.0161%" height="15" fill="rgb(254,217,53)" fg:x="67657" fg:w="12"/><text x="90.9819%" y="751.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (12 samples, 0.02%)</title><rect x="90.7319%" y="725" width="0.0161%" height="15" fill="rgb(209,60,0)" fg:x="67657" fg:w="12"/><text x="90.9819%" y="735.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (9 samples, 0.01%)</title><rect x="90.7360%" y="709" width="0.0121%" height="15" fill="rgb(250,93,26)" fg:x="67660" fg:w="9"/><text x="90.9860%" y="719.50"></text></g><g><title>hashbrown::map::make_hash (63 samples, 0.08%)</title><rect x="90.6890%" y="789" width="0.0845%" height="15" fill="rgb(211,9,40)" fg:x="67625" fg:w="63"/><text x="90.9390%" y="799.50"></text></g><g><title>core::hash::BuildHasher::hash_one (63 samples, 0.08%)</title><rect x="90.6890%" y="773" width="0.0845%" height="15" fill="rgb(242,57,20)" fg:x="67625" fg:w="63"/><text x="90.9390%" y="783.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (19 samples, 0.03%)</title><rect x="90.7480%" y="757" width="0.0255%" height="15" fill="rgb(248,85,48)" fg:x="67669" fg:w="19"/><text x="90.9980%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (19 samples, 0.03%)</title><rect x="90.7480%" y="741" width="0.0255%" height="15" fill="rgb(212,117,2)" fg:x="67669" fg:w="19"/><text x="90.9980%" y="751.50"></text></g><g><title>core::hash::Hasher::write_u32 (19 samples, 0.03%)</title><rect x="90.7480%" y="725" width="0.0255%" height="15" fill="rgb(243,19,3)" fg:x="67669" fg:w="19"/><text x="90.9980%" y="735.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (18 samples, 0.02%)</title><rect x="90.7494%" y="709" width="0.0241%" height="15" fill="rgb(232,217,24)" fg:x="67670" fg:w="18"/><text x="90.9994%" y="719.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (18 samples, 0.02%)</title><rect x="90.7494%" y="693" width="0.0241%" height="15" fill="rgb(224,175,40)" fg:x="67670" fg:w="18"/><text x="90.9994%" y="703.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (18 samples, 0.02%)</title><rect x="90.7494%" y="677" width="0.0241%" height="15" fill="rgb(212,162,32)" fg:x="67670" fg:w="18"/><text x="90.9994%" y="687.50"></text></g><g><title>core::hash::sip::u8to64_le (8 samples, 0.01%)</title><rect x="90.7628%" y="661" width="0.0107%" height="15" fill="rgb(215,9,4)" fg:x="67680" fg:w="8"/><text x="91.0128%" y="671.50"></text></g><g><title>&lt;remoc::chmux::port_allocator::PortNumber as core::ops::deref::Deref&gt;::deref (18 samples, 0.02%)</title><rect x="90.7802%" y="709" width="0.0241%" height="15" fill="rgb(242,42,7)" fg:x="67693" fg:w="18"/><text x="91.0302%" y="719.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (39 samples, 0.05%)</title><rect x="90.7802%" y="725" width="0.0523%" height="15" fill="rgb(242,184,45)" fg:x="67693" fg:w="39"/><text x="91.0302%" y="735.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (21 samples, 0.03%)</title><rect x="90.8044%" y="709" width="0.0282%" height="15" fill="rgb(228,111,51)" fg:x="67711" fg:w="21"/><text x="91.0544%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (40 samples, 0.05%)</title><rect x="90.7802%" y="741" width="0.0536%" height="15" fill="rgb(236,147,17)" fg:x="67693" fg:w="40"/><text x="91.0302%" y="751.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (19 samples, 0.03%)</title><rect x="90.8352%" y="741" width="0.0255%" height="15" fill="rgb(210,75,22)" fg:x="67734" fg:w="19"/><text x="91.0852%" y="751.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (19 samples, 0.03%)</title><rect x="90.8352%" y="725" width="0.0255%" height="15" fill="rgb(217,159,45)" fg:x="67734" fg:w="19"/><text x="91.0852%" y="735.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19 samples, 0.03%)</title><rect x="90.8352%" y="709" width="0.0255%" height="15" fill="rgb(245,165,53)" fg:x="67734" fg:w="19"/><text x="91.0852%" y="719.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (146 samples, 0.20%)</title><rect x="90.6662%" y="837" width="0.1958%" height="15" fill="rgb(251,190,50)" fg:x="67608" fg:w="146"/><text x="90.9162%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (146 samples, 0.20%)</title><rect x="90.6662%" y="821" width="0.1958%" height="15" fill="rgb(208,203,29)" fg:x="67608" fg:w="146"/><text x="90.9162%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (146 samples, 0.20%)</title><rect x="90.6662%" y="805" width="0.1958%" height="15" fill="rgb(207,209,35)" fg:x="67608" fg:w="146"/><text x="90.9162%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (66 samples, 0.09%)</title><rect x="90.7735%" y="789" width="0.0885%" height="15" fill="rgb(230,144,49)" fg:x="67688" fg:w="66"/><text x="91.0235%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (66 samples, 0.09%)</title><rect x="90.7735%" y="773" width="0.0885%" height="15" fill="rgb(229,31,6)" fg:x="67688" fg:w="66"/><text x="91.0235%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (66 samples, 0.09%)</title><rect x="90.7735%" y="757" width="0.0885%" height="15" fill="rgb(251,129,24)" fg:x="67688" fg:w="66"/><text x="91.0235%" y="767.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::drop_reference (12 samples, 0.02%)</title><rect x="90.8620%" y="757" width="0.0161%" height="15" fill="rgb(235,105,15)" fg:x="67754" fg:w="12"/><text x="91.1120%" y="767.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (12 samples, 0.02%)</title><rect x="90.8620%" y="741" width="0.0161%" height="15" fill="rgb(216,52,43)" fg:x="67754" fg:w="12"/><text x="91.1120%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (12 samples, 0.02%)</title><rect x="90.8620%" y="725" width="0.0161%" height="15" fill="rgb(238,144,41)" fg:x="67754" fg:w="12"/><text x="91.1120%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_sub (12 samples, 0.02%)</title><rect x="90.8620%" y="709" width="0.0161%" height="15" fill="rgb(243,63,9)" fg:x="67754" fg:w="12"/><text x="91.1120%" y="719.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (10 samples, 0.01%)</title><rect x="90.8956%" y="741" width="0.0134%" height="15" fill="rgb(246,208,1)" fg:x="67779" fg:w="10"/><text x="91.1456%" y="751.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (9 samples, 0.01%)</title><rect x="90.8969%" y="725" width="0.0121%" height="15" fill="rgb(233,182,18)" fg:x="67780" fg:w="9"/><text x="91.1469%" y="735.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (9 samples, 0.01%)</title><rect x="90.8969%" y="709" width="0.0121%" height="15" fill="rgb(242,224,8)" fg:x="67780" fg:w="9"/><text x="91.1469%" y="719.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (28 samples, 0.04%)</title><rect x="90.8781%" y="757" width="0.0375%" height="15" fill="rgb(243,54,37)" fg:x="67766" fg:w="28"/><text x="91.1281%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (11 samples, 0.01%)</title><rect x="90.9157%" y="725" width="0.0148%" height="15" fill="rgb(233,192,12)" fg:x="67794" fg:w="11"/><text x="91.1657%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (11 samples, 0.01%)</title><rect x="90.9157%" y="709" width="0.0148%" height="15" fill="rgb(251,192,53)" fg:x="67794" fg:w="11"/><text x="91.1657%" y="719.50"></text></g><g><title>tokio::runtime::task::state::State::load (13 samples, 0.02%)</title><rect x="90.9304%" y="725" width="0.0174%" height="15" fill="rgb(246,141,26)" fg:x="67805" fg:w="13"/><text x="91.1804%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (13 samples, 0.02%)</title><rect x="90.9304%" y="709" width="0.0174%" height="15" fill="rgb(239,195,19)" fg:x="67805" fg:w="13"/><text x="91.1804%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_load (13 samples, 0.02%)</title><rect x="90.9304%" y="693" width="0.0174%" height="15" fill="rgb(241,16,39)" fg:x="67805" fg:w="13"/><text x="91.1804%" y="703.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (67 samples, 0.09%)</title><rect x="90.8620%" y="789" width="0.0899%" height="15" fill="rgb(223,13,53)" fg:x="67754" fg:w="67"/><text x="91.1120%" y="799.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (67 samples, 0.09%)</title><rect x="90.8620%" y="773" width="0.0899%" height="15" fill="rgb(214,227,0)" fg:x="67754" fg:w="67"/><text x="91.1120%" y="783.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (27 samples, 0.04%)</title><rect x="90.9157%" y="757" width="0.0362%" height="15" fill="rgb(228,103,26)" fg:x="67794" fg:w="27"/><text x="91.1657%" y="767.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (27 samples, 0.04%)</title><rect x="90.9157%" y="741" width="0.0362%" height="15" fill="rgb(254,177,53)" fg:x="67794" fg:w="27"/><text x="91.1657%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (10 samples, 0.01%)</title><rect x="90.9519%" y="773" width="0.0134%" height="15" fill="rgb(208,201,34)" fg:x="67821" fg:w="10"/><text x="91.2019%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_add (10 samples, 0.01%)</title><rect x="90.9519%" y="757" width="0.0134%" height="15" fill="rgb(212,39,5)" fg:x="67821" fg:w="10"/><text x="91.2019%" y="767.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::write (32 samples, 0.04%)</title><rect x="90.9653%" y="773" width="0.0429%" height="15" fill="rgb(246,117,3)" fg:x="67831" fg:w="32"/><text x="91.2153%" y="783.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::set_ready (31 samples, 0.04%)</title><rect x="90.9666%" y="757" width="0.0416%" height="15" fill="rgb(244,118,39)" fg:x="67832" fg:w="31"/><text x="91.2166%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (31 samples, 0.04%)</title><rect x="90.9666%" y="741" width="0.0416%" height="15" fill="rgb(241,64,10)" fg:x="67832" fg:w="31"/><text x="91.2166%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_or (31 samples, 0.04%)</title><rect x="90.9666%" y="725" width="0.0416%" height="15" fill="rgb(229,39,44)" fg:x="67832" fg:w="31"/><text x="91.2166%" y="735.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::is_at_index (17 samples, 0.02%)</title><rect x="91.0136%" y="757" width="0.0228%" height="15" fill="rgb(230,226,3)" fg:x="67867" fg:w="17"/><text x="91.2636%" y="767.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::push (65 samples, 0.09%)</title><rect x="90.9519%" y="789" width="0.0872%" height="15" fill="rgb(222,13,42)" fg:x="67821" fg:w="65"/><text x="91.2019%" y="799.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (23 samples, 0.03%)</title><rect x="91.0082%" y="773" width="0.0308%" height="15" fill="rgb(247,180,54)" fg:x="67863" fg:w="23"/><text x="91.2582%" y="783.50"></text></g><g><title>tokio::sync::mpsc::chan::Tx&lt;T,S&gt;::send (148 samples, 0.20%)</title><rect x="90.8620%" y="821" width="0.1985%" height="15" fill="rgb(205,96,16)" fg:x="67754" fg:w="148"/><text x="91.1120%" y="831.50"></text></g><g><title>tokio::sync::mpsc::chan::Chan&lt;T,S&gt;::send (148 samples, 0.20%)</title><rect x="90.8620%" y="805" width="0.1985%" height="15" fill="rgb(205,100,21)" fg:x="67754" fg:w="148"/><text x="91.1120%" y="815.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::wake (16 samples, 0.02%)</title><rect x="91.0391%" y="789" width="0.0215%" height="15" fill="rgb(248,51,4)" fg:x="67886" fg:w="16"/><text x="91.2891%" y="799.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::take_waker (16 samples, 0.02%)</title><rect x="91.0391%" y="773" width="0.0215%" height="15" fill="rgb(217,197,30)" fg:x="67886" fg:w="16"/><text x="91.2891%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (10 samples, 0.01%)</title><rect x="91.0471%" y="757" width="0.0134%" height="15" fill="rgb(240,179,40)" fg:x="67892" fg:w="10"/><text x="91.2971%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_or (10 samples, 0.01%)</title><rect x="91.0471%" y="741" width="0.0134%" height="15" fill="rgb(212,185,35)" fg:x="67892" fg:w="10"/><text x="91.2971%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (22 samples, 0.03%)</title><rect x="91.0645%" y="805" width="0.0295%" height="15" fill="rgb(251,222,31)" fg:x="67905" fg:w="22"/><text x="91.3145%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (22 samples, 0.03%)</title><rect x="91.0645%" y="789" width="0.0295%" height="15" fill="rgb(208,140,36)" fg:x="67905" fg:w="22"/><text x="91.3145%" y="799.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::handle_received_msg::{{closure}}::{{closure}} (525 samples, 0.70%)</title><rect x="90.4195%" y="853" width="0.7041%" height="15" fill="rgb(220,148,1)" fg:x="67424" fg:w="525"/><text x="90.6695%" y="863.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (195 samples, 0.26%)</title><rect x="90.8620%" y="837" width="0.2615%" height="15" fill="rgb(254,4,28)" fg:x="67754" fg:w="195"/><text x="91.1120%" y="847.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::inc_num_messages (47 samples, 0.06%)</title><rect x="91.0605%" y="821" width="0.0630%" height="15" fill="rgb(222,185,44)" fg:x="67902" fg:w="47"/><text x="91.3105%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (22 samples, 0.03%)</title><rect x="91.0940%" y="805" width="0.0295%" height="15" fill="rgb(215,74,39)" fg:x="67927" fg:w="22"/><text x="91.3440%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_load (22 samples, 0.03%)</title><rect x="91.0940%" y="789" width="0.0295%" height="15" fill="rgb(247,86,4)" fg:x="67927" fg:w="22"/><text x="91.3440%" y="799.50"></text></g><g><title>&lt;remoc::connect::Connect&lt;TransportSinkError,TransportStreamError&gt; as core::future::future::Future&gt;::poll (13,864 samples, 18.59%)</title><rect x="72.5325%" y="949" width="18.5924%" height="15" fill="rgb(231,105,32)" fg:x="54086" fg:w="13864"/><text x="72.7825%" y="959.50">&lt;remoc::connect::Connect&lt;Tran..</text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (13,864 samples, 18.59%)</title><rect x="72.5325%" y="933" width="18.5924%" height="15" fill="rgb(222,65,35)" fg:x="54086" fg:w="13864"/><text x="72.7825%" y="943.50">futures_util::future::future:..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (13,864 samples, 18.59%)</title><rect x="72.5325%" y="917" width="18.5924%" height="15" fill="rgb(218,145,35)" fg:x="54086" fg:w="13864"/><text x="72.7825%" y="927.50">&lt;core::pin::Pin&lt;P&gt; as core::f..</text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::run::{{closure}} (13,863 samples, 18.59%)</title><rect x="72.5338%" y="901" width="18.5911%" height="15" fill="rgb(208,7,15)" fg:x="54087" fg:w="13863"/><text x="72.7838%" y="911.50">remoc::chmux::mux::ChMux&lt;Tran..</text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::run::{{closure}}::{{closure}} (13,639 samples, 18.29%)</title><rect x="72.8342%" y="885" width="18.2907%" height="15" fill="rgb(209,83,13)" fg:x="54311" fg:w="13639"/><text x="73.0842%" y="895.50">remoc::chmux::mux::ChMux&lt;Tran..</text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::handle_received_msg::{{closure}} (615 samples, 0.82%)</title><rect x="90.3001%" y="869" width="0.8248%" height="15" fill="rgb(218,3,10)" fg:x="67335" fg:w="615"/><text x="90.5501%" y="879.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (18 samples, 0.02%)</title><rect x="91.1343%" y="885" width="0.0241%" height="15" fill="rgb(211,219,4)" fg:x="67957" fg:w="18"/><text x="91.3843%" y="895.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (18 samples, 0.02%)</title><rect x="91.1343%" y="869" width="0.0241%" height="15" fill="rgb(228,194,12)" fg:x="67957" fg:w="18"/><text x="91.3843%" y="879.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (17 samples, 0.02%)</title><rect x="91.1356%" y="853" width="0.0228%" height="15" fill="rgb(210,175,7)" fg:x="67958" fg:w="17"/><text x="91.3856%" y="863.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (17 samples, 0.02%)</title><rect x="91.1356%" y="837" width="0.0228%" height="15" fill="rgb(243,132,6)" fg:x="67958" fg:w="17"/><text x="91.3856%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::TaskIdGuard&gt; (29 samples, 0.04%)</title><rect x="91.1249%" y="949" width="0.0389%" height="15" fill="rgb(207,72,18)" fg:x="67950" fg:w="29"/><text x="91.3749%" y="959.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (29 samples, 0.04%)</title><rect x="91.1249%" y="933" width="0.0389%" height="15" fill="rgb(236,1,18)" fg:x="67950" fg:w="29"/><text x="91.3749%" y="943.50"></text></g><g><title>tokio::runtime::context::set_current_task_id (22 samples, 0.03%)</title><rect x="91.1343%" y="917" width="0.0295%" height="15" fill="rgb(227,0,18)" fg:x="67957" fg:w="22"/><text x="91.3843%" y="927.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (22 samples, 0.03%)</title><rect x="91.1343%" y="901" width="0.0295%" height="15" fill="rgb(247,37,5)" fg:x="67957" fg:w="22"/><text x="91.3843%" y="911.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (13 samples, 0.02%)</title><rect x="91.1678%" y="901" width="0.0174%" height="15" fill="rgb(237,179,24)" fg:x="67982" fg:w="13"/><text x="91.4178%" y="911.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (13 samples, 0.02%)</title><rect x="91.1678%" y="885" width="0.0174%" height="15" fill="rgb(226,53,20)" fg:x="67982" fg:w="13"/><text x="91.4178%" y="895.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (10 samples, 0.01%)</title><rect x="91.1718%" y="869" width="0.0134%" height="15" fill="rgb(247,75,7)" fg:x="67985" fg:w="10"/><text x="91.4218%" y="879.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (10 samples, 0.01%)</title><rect x="91.1718%" y="853" width="0.0134%" height="15" fill="rgb(233,96,12)" fg:x="67985" fg:w="10"/><text x="91.4218%" y="863.50"></text></g><g><title>core::ptr::read (8 samples, 0.01%)</title><rect x="91.1852%" y="853" width="0.0107%" height="15" fill="rgb(224,125,0)" fg:x="67995" fg:w="8"/><text x="91.4352%" y="863.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (22,662 samples, 30.39%)</title><rect x="60.8062%" y="981" width="30.3911%" height="15" fill="rgb(224,92,25)" fg:x="45342" fg:w="22662"/><text x="61.0562%" y="991.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::wit..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (22,662 samples, 30.39%)</title><rect x="60.8062%" y="965" width="30.3911%" height="15" fill="rgb(224,42,24)" fg:x="45342" fg:w="22662"/><text x="61.0562%" y="975.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{cl..</text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (25 samples, 0.03%)</title><rect x="91.1638%" y="949" width="0.0335%" height="15" fill="rgb(234,132,49)" fg:x="67979" fg:w="25"/><text x="91.4138%" y="959.50"></text></g><g><title>tokio::runtime::context::set_current_task_id (23 samples, 0.03%)</title><rect x="91.1665%" y="933" width="0.0308%" height="15" fill="rgb(248,100,35)" fg:x="67981" fg:w="23"/><text x="91.4165%" y="943.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (22 samples, 0.03%)</title><rect x="91.1678%" y="917" width="0.0295%" height="15" fill="rgb(239,94,40)" fg:x="67982" fg:w="22"/><text x="91.4178%" y="927.50"></text></g><g><title>tokio::runtime::context::set_current_task_id::{{closure}} (9 samples, 0.01%)</title><rect x="91.1852%" y="901" width="0.0121%" height="15" fill="rgb(235,139,28)" fg:x="67995" fg:w="9"/><text x="91.4352%" y="911.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (9 samples, 0.01%)</title><rect x="91.1852%" y="885" width="0.0121%" height="15" fill="rgb(217,144,7)" fg:x="67995" fg:w="9"/><text x="91.4352%" y="895.50"></text></g><g><title>core::mem::replace (9 samples, 0.01%)</title><rect x="91.1852%" y="869" width="0.0121%" height="15" fill="rgb(227,55,4)" fg:x="67995" fg:w="9"/><text x="91.4352%" y="879.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (22,724 samples, 30.47%)</title><rect x="60.7244%" y="1093" width="30.4742%" height="15" fill="rgb(252,82,54)" fg:x="45281" fg:w="22724"/><text x="60.9744%" y="1103.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (22,709 samples, 30.45%)</title><rect x="60.7446%" y="1077" width="30.4541%" height="15" fill="rgb(245,172,4)" fg:x="45296" fg:w="22709"/><text x="60.9946%" y="1087.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (22,709 samples, 30.45%)</title><rect x="60.7446%" y="1061" width="30.4541%" height="15" fill="rgb(207,26,27)" fg:x="45296" fg:w="22709"/><text x="60.9946%" y="1071.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (22,709 samples, 30.45%)</title><rect x="60.7446%" y="1045" width="30.4541%" height="15" fill="rgb(252,98,18)" fg:x="45296" fg:w="22709"/><text x="60.9946%" y="1055.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (22,682 samples, 30.42%)</title><rect x="60.7808%" y="1029" width="30.4179%" height="15" fill="rgb(244,8,26)" fg:x="45323" fg:w="22682"/><text x="61.0308%" y="1039.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (22,682 samples, 30.42%)</title><rect x="60.7808%" y="1013" width="30.4179%" height="15" fill="rgb(237,173,45)" fg:x="45323" fg:w="22682"/><text x="61.0308%" y="1023.50">tokio::runtime::task::harness::poll_future::{{clo..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (22,679 samples, 30.41%)</title><rect x="60.7848%" y="997" width="30.4139%" height="15" fill="rgb(208,213,49)" fg:x="45326" fg:w="22679"/><text x="61.0348%" y="1007.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (39 samples, 0.05%)</title><rect x="91.2080%" y="1061" width="0.0523%" height="15" fill="rgb(212,122,37)" fg:x="68012" fg:w="39"/><text x="91.4580%" y="1071.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (39 samples, 0.05%)</title><rect x="91.2080%" y="1045" width="0.0523%" height="15" fill="rgb(213,80,17)" fg:x="68012" fg:w="39"/><text x="91.4580%" y="1055.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::ref_dec (10 samples, 0.01%)</title><rect x="91.2737%" y="1045" width="0.0134%" height="15" fill="rgb(206,210,43)" fg:x="68061" fg:w="10"/><text x="91.5237%" y="1055.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::ref_inc (8 samples, 0.01%)</title><rect x="91.2871%" y="1045" width="0.0107%" height="15" fill="rgb(229,214,3)" fg:x="68071" fg:w="8"/><text x="91.5371%" y="1055.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (75 samples, 0.10%)</title><rect x="91.1986%" y="1093" width="0.1006%" height="15" fill="rgb(235,213,29)" fg:x="68005" fg:w="75"/><text x="91.4486%" y="1103.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (68 samples, 0.09%)</title><rect x="91.2080%" y="1077" width="0.0912%" height="15" fill="rgb(248,135,26)" fg:x="68012" fg:w="68"/><text x="91.4580%" y="1087.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle::{{closure}} (28 samples, 0.04%)</title><rect x="91.2617%" y="1061" width="0.0375%" height="15" fill="rgb(242,188,12)" fg:x="68052" fg:w="28"/><text x="91.5117%" y="1071.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (42 samples, 0.06%)</title><rect x="91.3086%" y="1061" width="0.0563%" height="15" fill="rgb(245,38,12)" fg:x="68087" fg:w="42"/><text x="91.5586%" y="1071.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (42 samples, 0.06%)</title><rect x="91.3086%" y="1045" width="0.0563%" height="15" fill="rgb(218,42,13)" fg:x="68087" fg:w="42"/><text x="91.5586%" y="1055.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running (73 samples, 0.10%)</title><rect x="91.2992%" y="1093" width="0.0979%" height="15" fill="rgb(238,132,49)" fg:x="68080" fg:w="73"/><text x="91.5492%" y="1103.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (66 samples, 0.09%)</title><rect x="91.3086%" y="1077" width="0.0885%" height="15" fill="rgb(209,196,19)" fg:x="68087" fg:w="66"/><text x="91.5586%" y="1087.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running::{{closure}} (24 samples, 0.03%)</title><rect x="91.3649%" y="1061" width="0.0322%" height="15" fill="rgb(244,131,22)" fg:x="68129" fg:w="24"/><text x="91.6149%" y="1071.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::unset_notified (10 samples, 0.01%)</title><rect x="91.3837%" y="1045" width="0.0134%" height="15" fill="rgb(223,18,34)" fg:x="68143" fg:w="10"/><text x="91.6337%" y="1055.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (23,997 samples, 32.18%)</title><rect x="59.2640%" y="1125" width="32.1814%" height="15" fill="rgb(252,124,54)" fg:x="44192" fg:w="23997"/><text x="59.5140%" y="1135.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (23,081 samples, 30.95%)</title><rect x="60.4924%" y="1109" width="30.9530%" height="15" fill="rgb(229,106,42)" fg:x="45108" fg:w="23081"/><text x="60.7424%" y="1119.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_..</text></g><g><title>tokio::runtime::task::waker::waker_ref (36 samples, 0.05%)</title><rect x="91.3971%" y="1093" width="0.0483%" height="15" fill="rgb(221,129,1)" fg:x="68153" fg:w="36"/><text x="91.6471%" y="1103.50"></text></g><g><title>tokio::runtime::task::waker::raw_waker (29 samples, 0.04%)</title><rect x="91.4065%" y="1077" width="0.0389%" height="15" fill="rgb(229,74,15)" fg:x="68160" fg:w="29"/><text x="91.6565%" y="1087.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (24,089 samples, 32.30%)</title><rect x="59.2640%" y="1157" width="32.3047%" height="15" fill="rgb(210,206,50)" fg:x="44192" fg:w="24089"/><text x="59.5140%" y="1167.50">tokio::runtime::task::LocalNotified&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (24,089 samples, 32.30%)</title><rect x="59.2640%" y="1141" width="32.3047%" height="15" fill="rgb(251,114,31)" fg:x="44192" fg:w="24089"/><text x="59.5140%" y="1151.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::raw::poll (92 samples, 0.12%)</title><rect x="91.4454%" y="1125" width="0.1234%" height="15" fill="rgb(215,225,28)" fg:x="68189" fg:w="92"/><text x="91.6954%" y="1135.50"></text></g><g><title>tokio::runtime::coop::budget (24,356 samples, 32.66%)</title><rect x="58.9274%" y="1205" width="32.6628%" height="15" fill="rgb(237,109,14)" fg:x="43941" fg:w="24356"/><text x="59.1774%" y="1215.50">tokio::runtime::coop::budget</text></g><g><title>tokio::runtime::coop::with_budget (24,353 samples, 32.66%)</title><rect x="58.9314%" y="1189" width="32.6588%" height="15" fill="rgb(230,13,37)" fg:x="43944" fg:w="24353"/><text x="59.1814%" y="1199.50">tokio::runtime::coop::with_budget</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::{{closure}} (24,241 samples, 32.51%)</title><rect x="59.0816%" y="1173" width="32.5086%" height="15" fill="rgb(231,40,28)" fg:x="44056" fg:w="24241"/><text x="59.3316%" y="1183.50">tokio::runtime::scheduler::multi_thread::worker::Cont..</text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::assert_owner (16 samples, 0.02%)</title><rect x="91.5688%" y="1157" width="0.0215%" height="15" fill="rgb(231,202,18)" fg:x="68281" fg:w="16"/><text x="91.8188%" y="1167.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (23 samples, 0.03%)</title><rect x="91.6063%" y="1125" width="0.0308%" height="15" fill="rgb(225,33,18)" fg:x="68309" fg:w="23"/><text x="91.8563%" y="1135.50"></text></g><g><title>syscall (21 samples, 0.03%)</title><rect x="91.6090%" y="1109" width="0.0282%" height="15" fill="rgb(223,64,47)" fg:x="68311" fg:w="21"/><text x="91.8590%" y="1119.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (43 samples, 0.06%)</title><rect x="91.6466%" y="1125" width="0.0577%" height="15" fill="rgb(234,114,13)" fg:x="68339" fg:w="43"/><text x="91.8966%" y="1135.50"></text></g><g><title>core::sync::atomic::atomic_load (43 samples, 0.06%)</title><rect x="91.6466%" y="1109" width="0.0577%" height="15" fill="rgb(248,56,40)" fg:x="68339" fg:w="43"/><text x="91.8966%" y="1119.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::gen_u32 (8 samples, 0.01%)</title><rect x="91.7096%" y="1109" width="0.0107%" height="15" fill="rgb(221,194,21)" fg:x="68386" fg:w="8"/><text x="91.9596%" y="1119.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (61 samples, 0.08%)</title><rect x="91.7042%" y="1125" width="0.0818%" height="15" fill="rgb(242,108,46)" fg:x="68382" fg:w="61"/><text x="91.9542%" y="1135.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (49 samples, 0.07%)</title><rect x="91.7203%" y="1109" width="0.0657%" height="15" fill="rgb(220,106,10)" fg:x="68394" fg:w="49"/><text x="91.9703%" y="1119.50"></text></g><g><title>clock_gettime (48 samples, 0.06%)</title><rect x="91.7217%" y="1093" width="0.0644%" height="15" fill="rgb(211,88,4)" fg:x="68395" fg:w="48"/><text x="91.9717%" y="1103.50"></text></g><g><title>__vdso_clock_gettime (28 samples, 0.04%)</title><rect x="91.7485%" y="1077" width="0.0375%" height="15" fill="rgb(214,95,34)" fg:x="68415" fg:w="28"/><text x="91.9985%" y="1087.50"></text></g><g><title>[[vdso]] (8 samples, 0.01%)</title><rect x="91.7753%" y="1061" width="0.0107%" height="15" fill="rgb(250,160,33)" fg:x="68435" fg:w="8"/><text x="92.0253%" y="1071.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (47 samples, 0.06%)</title><rect x="91.7860%" y="1125" width="0.0630%" height="15" fill="rgb(225,29,10)" fg:x="68443" fg:w="47"/><text x="92.0360%" y="1135.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (38 samples, 0.05%)</title><rect x="91.7981%" y="1109" width="0.0510%" height="15" fill="rgb(224,28,30)" fg:x="68452" fg:w="38"/><text x="92.0481%" y="1119.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (38 samples, 0.05%)</title><rect x="91.7981%" y="1093" width="0.0510%" height="15" fill="rgb(231,77,4)" fg:x="68452" fg:w="38"/><text x="92.0481%" y="1103.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (38 samples, 0.05%)</title><rect x="91.7981%" y="1077" width="0.0510%" height="15" fill="rgb(209,63,21)" fg:x="68452" fg:w="38"/><text x="92.0481%" y="1087.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (211 samples, 0.28%)</title><rect x="91.5983%" y="1157" width="0.2830%" height="15" fill="rgb(226,22,11)" fg:x="68303" fg:w="211"/><text x="91.8483%" y="1167.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (209 samples, 0.28%)</title><rect x="91.6010%" y="1141" width="0.2803%" height="15" fill="rgb(216,82,30)" fg:x="68305" fg:w="209"/><text x="91.8510%" y="1151.50"></text></g><g><title>parking_lot_core::parking_lot::unlock_bucket_pair (24 samples, 0.03%)</title><rect x="91.8491%" y="1125" width="0.0322%" height="15" fill="rgb(246,227,38)" fg:x="68490" fg:w="24"/><text x="92.0991%" y="1135.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (24 samples, 0.03%)</title><rect x="91.8491%" y="1109" width="0.0322%" height="15" fill="rgb(251,203,53)" fg:x="68490" fg:w="24"/><text x="92.0991%" y="1119.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (24 samples, 0.03%)</title><rect x="91.8491%" y="1093" width="0.0322%" height="15" fill="rgb(254,101,1)" fg:x="68490" fg:w="24"/><text x="92.0991%" y="1103.50"></text></g><g><title>core::sync::atomic::atomic_sub (24 samples, 0.03%)</title><rect x="91.8491%" y="1077" width="0.0322%" height="15" fill="rgb(241,180,5)" fg:x="68490" fg:w="24"/><text x="92.0991%" y="1087.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (104 samples, 0.14%)</title><rect x="91.9282%" y="1093" width="0.1395%" height="15" fill="rgb(218,168,4)" fg:x="68549" fg:w="104"/><text x="92.1782%" y="1103.50"></text></g><g><title>std::sys::unix::fs::File::write (102 samples, 0.14%)</title><rect x="91.9309%" y="1077" width="0.1368%" height="15" fill="rgb(224,223,32)" fg:x="68551" fg:w="102"/><text x="92.1809%" y="1087.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (102 samples, 0.14%)</title><rect x="91.9309%" y="1061" width="0.1368%" height="15" fill="rgb(236,106,22)" fg:x="68551" fg:w="102"/><text x="92.1809%" y="1071.50"></text></g><g><title>write (101 samples, 0.14%)</title><rect x="91.9322%" y="1045" width="0.1354%" height="15" fill="rgb(206,121,5)" fg:x="68552" fg:w="101"/><text x="92.1822%" y="1055.50"></text></g><g><title>[libc.so.6] (35 samples, 0.05%)</title><rect x="92.0207%" y="1029" width="0.0469%" height="15" fill="rgb(233,87,28)" fg:x="68618" fg:w="35"/><text x="92.2707%" y="1039.50"></text></g><g><title>mio::sys::unix::waker::eventfd::Waker::wake (117 samples, 0.16%)</title><rect x="91.9201%" y="1109" width="0.1569%" height="15" fill="rgb(236,137,17)" fg:x="68543" fg:w="117"/><text x="92.1701%" y="1119.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (154 samples, 0.21%)</title><rect x="91.8812%" y="1157" width="0.2065%" height="15" fill="rgb(209,183,38)" fg:x="68514" fg:w="154"/><text x="92.1312%" y="1167.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (154 samples, 0.21%)</title><rect x="91.8812%" y="1141" width="0.2065%" height="15" fill="rgb(206,162,44)" fg:x="68514" fg:w="154"/><text x="92.1312%" y="1151.50"></text></g><g><title>tokio::runtime::io::Handle::unpark (128 samples, 0.17%)</title><rect x="91.9161%" y="1125" width="0.1717%" height="15" fill="rgb(237,70,39)" fg:x="68540" fg:w="128"/><text x="92.1661%" y="1135.50"></text></g><g><title>mio::waker::Waker::wake (8 samples, 0.01%)</title><rect x="92.0770%" y="1109" width="0.0107%" height="15" fill="rgb(212,176,5)" fg:x="68660" fg:w="8"/><text x="92.3270%" y="1119.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (23 samples, 0.03%)</title><rect x="92.1186%" y="1125" width="0.0308%" height="15" fill="rgb(232,95,16)" fg:x="68691" fg:w="23"/><text x="92.3686%" y="1135.50"></text></g><g><title>core::sync::atomic::atomic_add (23 samples, 0.03%)</title><rect x="92.1186%" y="1109" width="0.0308%" height="15" fill="rgb(219,115,35)" fg:x="68691" fg:w="23"/><text x="92.3686%" y="1119.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::notify_should_wakeup (29 samples, 0.04%)</title><rect x="92.1132%" y="1141" width="0.0389%" height="15" fill="rgb(251,67,27)" fg:x="68687" fg:w="29"/><text x="92.3632%" y="1151.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (54 samples, 0.07%)</title><rect x="92.0878%" y="1157" width="0.0724%" height="15" fill="rgb(222,95,40)" fg:x="68668" fg:w="54"/><text x="92.3378%" y="1167.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (52 samples, 0.07%)</title><rect x="92.2433%" y="1125" width="0.0697%" height="15" fill="rgb(250,35,16)" fg:x="68784" fg:w="52"/><text x="92.4933%" y="1135.50"></text></g><g><title>core::sync::atomic::atomic_swap (52 samples, 0.07%)</title><rect x="92.2433%" y="1109" width="0.0697%" height="15" fill="rgb(224,86,44)" fg:x="68784" fg:w="52"/><text x="92.4933%" y="1119.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_from_searching (556 samples, 0.75%)</title><rect x="91.5902%" y="1205" width="0.7456%" height="15" fill="rgb(237,53,53)" fg:x="68297" fg:w="556"/><text x="91.8402%" y="1215.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::transition_worker_from_searching (553 samples, 0.74%)</title><rect x="91.5942%" y="1189" width="0.7416%" height="15" fill="rgb(208,171,33)" fg:x="68300" fg:w="553"/><text x="91.8442%" y="1199.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked (551 samples, 0.74%)</title><rect x="91.5969%" y="1173" width="0.7389%" height="15" fill="rgb(222,64,27)" fg:x="68302" fg:w="551"/><text x="91.8469%" y="1183.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (131 samples, 0.18%)</title><rect x="92.1602%" y="1157" width="0.1757%" height="15" fill="rgb(221,121,35)" fg:x="68722" fg:w="131"/><text x="92.4102%" y="1167.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (124 samples, 0.17%)</title><rect x="92.1696%" y="1141" width="0.1663%" height="15" fill="rgb(228,137,42)" fg:x="68729" fg:w="124"/><text x="92.4196%" y="1151.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark_condvar (17 samples, 0.02%)</title><rect x="92.3131%" y="1125" width="0.0228%" height="15" fill="rgb(227,54,21)" fg:x="68836" fg:w="17"/><text x="92.5631%" y="1135.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (24,995 samples, 33.52%)</title><rect x="58.8429%" y="1221" width="33.5197%" height="15" fill="rgb(240,168,33)" fg:x="43878" fg:w="24995"/><text x="59.0929%" y="1231.50">tokio::runtime::scheduler::multi_thread::worker::Conte..</text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::assert_owner (20 samples, 0.03%)</title><rect x="92.3359%" y="1205" width="0.0268%" height="15" fill="rgb(243,159,6)" fg:x="68853" fg:w="20"/><text x="92.5859%" y="1215.50"></text></g><g><title>tokio::runtime::task::core::Header::get_owner_id (14 samples, 0.02%)</title><rect x="92.3439%" y="1189" width="0.0188%" height="15" fill="rgb(205,211,41)" fg:x="68859" fg:w="14"/><text x="92.5939%" y="1199.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with (14 samples, 0.02%)</title><rect x="92.3439%" y="1173" width="0.0188%" height="15" fill="rgb(253,30,1)" fg:x="68859" fg:w="14"/><text x="92.5939%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::task::inject::Pointers&gt;&gt; (65 samples, 0.09%)</title><rect x="92.4498%" y="1157" width="0.0872%" height="15" fill="rgb(226,80,18)" fg:x="68938" fg:w="65"/><text x="92.6998%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::task::inject::Pointers&gt;&gt; (65 samples, 0.09%)</title><rect x="92.4498%" y="1141" width="0.0872%" height="15" fill="rgb(253,156,46)" fg:x="68938" fg:w="65"/><text x="92.6998%" y="1151.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (65 samples, 0.09%)</title><rect x="92.4498%" y="1125" width="0.0872%" height="15" fill="rgb(248,87,27)" fg:x="68938" fg:w="65"/><text x="92.6998%" y="1135.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (65 samples, 0.09%)</title><rect x="92.4498%" y="1109" width="0.0872%" height="15" fill="rgb(227,122,2)" fg:x="68938" fg:w="65"/><text x="92.6998%" y="1119.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange (65 samples, 0.09%)</title><rect x="92.4498%" y="1093" width="0.0872%" height="15" fill="rgb(229,94,39)" fg:x="68938" fg:w="65"/><text x="92.6998%" y="1103.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (65 samples, 0.09%)</title><rect x="92.4498%" y="1077" width="0.0872%" height="15" fill="rgb(225,173,31)" fg:x="68938" fg:w="65"/><text x="92.6998%" y="1087.50"></text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::is_empty (12 samples, 0.02%)</title><rect x="92.5464%" y="1157" width="0.0161%" height="15" fill="rgb(239,176,30)" fg:x="69010" fg:w="12"/><text x="92.7964%" y="1167.50"></text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::len (12 samples, 0.02%)</title><rect x="92.5464%" y="1141" width="0.0161%" height="15" fill="rgb(212,104,21)" fg:x="69010" fg:w="12"/><text x="92.7964%" y="1151.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (12 samples, 0.02%)</title><rect x="92.5464%" y="1125" width="0.0161%" height="15" fill="rgb(240,209,40)" fg:x="69010" fg:w="12"/><text x="92.7964%" y="1135.50"></text></g><g><title>core::sync::atomic::atomic_load (12 samples, 0.02%)</title><rect x="92.5464%" y="1109" width="0.0161%" height="15" fill="rgb(234,195,5)" fg:x="69010" fg:w="12"/><text x="92.7964%" y="1119.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (175 samples, 0.23%)</title><rect x="92.4338%" y="1205" width="0.2347%" height="15" fill="rgb(238,213,1)" fg:x="68926" fg:w="175"/><text x="92.6838%" y="1215.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_task::{{closure}} (174 samples, 0.23%)</title><rect x="92.4351%" y="1189" width="0.2333%" height="15" fill="rgb(235,182,54)" fg:x="68927" fg:w="174"/><text x="92.6851%" y="1199.50"></text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::pop (170 samples, 0.23%)</title><rect x="92.4405%" y="1173" width="0.2280%" height="15" fill="rgb(229,50,46)" fg:x="68931" fg:w="170"/><text x="92.6905%" y="1183.50"></text></g><g><title>tokio::runtime::task::inject::get_next (79 samples, 0.11%)</title><rect x="92.5625%" y="1157" width="0.1059%" height="15" fill="rgb(219,145,13)" fg:x="69022" fg:w="79"/><text x="92.8125%" y="1167.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (21 samples, 0.03%)</title><rect x="92.6832%" y="1141" width="0.0282%" height="15" fill="rgb(220,226,10)" fg:x="69112" fg:w="21"/><text x="92.9332%" y="1151.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (21 samples, 0.03%)</title><rect x="92.6832%" y="1125" width="0.0282%" height="15" fill="rgb(248,47,30)" fg:x="69112" fg:w="21"/><text x="92.9332%" y="1135.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (21 samples, 0.03%)</title><rect x="92.6832%" y="1109" width="0.0282%" height="15" fill="rgb(231,209,44)" fg:x="69112" fg:w="21"/><text x="92.9332%" y="1119.50"></text></g><g><title>core::sync::atomic::AtomicU64::compare_exchange (23 samples, 0.03%)</title><rect x="92.7127%" y="1141" width="0.0308%" height="15" fill="rgb(209,80,30)" fg:x="69134" fg:w="23"/><text x="92.9627%" y="1151.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (23 samples, 0.03%)</title><rect x="92.7127%" y="1125" width="0.0308%" height="15" fill="rgb(232,9,14)" fg:x="69134" fg:w="23"/><text x="92.9627%" y="1135.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_local_task (64 samples, 0.09%)</title><rect x="92.6684%" y="1205" width="0.0858%" height="15" fill="rgb(243,91,43)" fg:x="69101" fg:w="64"/><text x="92.9184%" y="1215.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (64 samples, 0.09%)</title><rect x="92.6684%" y="1189" width="0.0858%" height="15" fill="rgb(231,90,52)" fg:x="69101" fg:w="64"/><text x="92.9184%" y="1199.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_local_task::{{closure}} (63 samples, 0.08%)</title><rect x="92.6698%" y="1173" width="0.0845%" height="15" fill="rgb(253,192,44)" fg:x="69102" fg:w="63"/><text x="92.9198%" y="1183.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::pop (63 samples, 0.08%)</title><rect x="92.6698%" y="1157" width="0.0845%" height="15" fill="rgb(241,66,31)" fg:x="69102" fg:w="63"/><text x="92.9198%" y="1167.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_task (298 samples, 0.40%)</title><rect x="92.3627%" y="1221" width="0.3996%" height="15" fill="rgb(235,81,37)" fg:x="68873" fg:w="298"/><text x="92.6127%" y="1231.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (18 samples, 0.02%)</title><rect x="93.3336%" y="1205" width="0.0241%" height="15" fill="rgb(223,221,9)" fg:x="69597" fg:w="18"/><text x="93.5836%" y="1215.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (18 samples, 0.02%)</title><rect x="93.3336%" y="1189" width="0.0241%" height="15" fill="rgb(242,180,7)" fg:x="69597" fg:w="18"/><text x="93.5836%" y="1199.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (18 samples, 0.02%)</title><rect x="93.3336%" y="1173" width="0.0241%" height="15" fill="rgb(243,78,19)" fg:x="69597" fg:w="18"/><text x="93.5836%" y="1183.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (13 samples, 0.02%)</title><rect x="93.3577%" y="1205" width="0.0174%" height="15" fill="rgb(233,23,17)" fg:x="69615" fg:w="13"/><text x="93.6077%" y="1215.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (13 samples, 0.02%)</title><rect x="93.3577%" y="1189" width="0.0174%" height="15" fill="rgb(252,122,45)" fg:x="69615" fg:w="13"/><text x="93.6077%" y="1199.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (41 samples, 0.05%)</title><rect x="93.4020%" y="1189" width="0.0550%" height="15" fill="rgb(247,108,20)" fg:x="69648" fg:w="41"/><text x="93.6520%" y="1199.50"></text></g><g><title>core::sync::atomic::AtomicU64::load (8 samples, 0.01%)</title><rect x="93.4570%" y="1189" width="0.0107%" height="15" fill="rgb(235,84,21)" fg:x="69689" fg:w="8"/><text x="93.7070%" y="1199.50"></text></g><g><title>core::sync::atomic::atomic_load (8 samples, 0.01%)</title><rect x="93.4570%" y="1173" width="0.0107%" height="15" fill="rgb(247,129,10)" fg:x="69689" fg:w="8"/><text x="93.7070%" y="1183.50"></text></g><g><title>tokio::loom::std::atomic_u32::AtomicU32::unsync_load (44 samples, 0.06%)</title><rect x="93.4677%" y="1189" width="0.0590%" height="15" fill="rgb(208,173,14)" fg:x="69697" fg:w="44"/><text x="93.7177%" y="1199.50"></text></g><g><title>core::ptr::read (44 samples, 0.06%)</title><rect x="93.4677%" y="1173" width="0.0590%" height="15" fill="rgb(236,31,38)" fg:x="69697" fg:w="44"/><text x="93.7177%" y="1183.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (94 samples, 0.13%)</title><rect x="93.6434%" y="1173" width="0.1261%" height="15" fill="rgb(232,65,17)" fg:x="69828" fg:w="94"/><text x="93.8934%" y="1183.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (94 samples, 0.13%)</title><rect x="93.6434%" y="1157" width="0.1261%" height="15" fill="rgb(224,45,49)" fg:x="69828" fg:w="94"/><text x="93.8934%" y="1167.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (94 samples, 0.13%)</title><rect x="93.6434%" y="1141" width="0.1261%" height="15" fill="rgb(225,2,53)" fg:x="69828" fg:w="94"/><text x="93.8934%" y="1151.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (18 samples, 0.02%)</title><rect x="93.7735%" y="1173" width="0.0241%" height="15" fill="rgb(248,210,53)" fg:x="69925" fg:w="18"/><text x="94.0235%" y="1183.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (93 samples, 0.12%)</title><rect x="93.7976%" y="1173" width="0.1247%" height="15" fill="rgb(211,1,30)" fg:x="69943" fg:w="93"/><text x="94.0476%" y="1183.50"></text></g><g><title>core::sync::atomic::atomic_load (93 samples, 0.12%)</title><rect x="93.7976%" y="1157" width="0.1247%" height="15" fill="rgb(224,96,15)" fg:x="69943" fg:w="93"/><text x="94.0476%" y="1167.50"></text></g><g><title>core::sync::atomic::AtomicU64::compare_exchange (9 samples, 0.01%)</title><rect x="93.9223%" y="1173" width="0.0121%" height="15" fill="rgb(252,45,11)" fg:x="70036" fg:w="9"/><text x="94.1723%" y="1183.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (9 samples, 0.01%)</title><rect x="93.9223%" y="1157" width="0.0121%" height="15" fill="rgb(220,125,38)" fg:x="70036" fg:w="9"/><text x="94.1723%" y="1167.50"></text></g><g><title>core::sync::atomic::AtomicU64::load (718 samples, 0.96%)</title><rect x="93.9344%" y="1173" width="0.9629%" height="15" fill="rgb(243,161,33)" fg:x="70045" fg:w="718"/><text x="94.1844%" y="1183.50"></text></g><g><title>core::sync::atomic::atomic_load (718 samples, 0.96%)</title><rect x="93.9344%" y="1157" width="0.9629%" height="15" fill="rgb(248,197,34)" fg:x="70045" fg:w="718"/><text x="94.1844%" y="1167.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (1,174 samples, 1.57%)</title><rect x="93.3752%" y="1205" width="1.5744%" height="15" fill="rgb(228,165,23)" fg:x="69628" fg:w="1174"/><text x="93.6252%" y="1215.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into2 (1,061 samples, 1.42%)</title><rect x="93.5267%" y="1189" width="1.4229%" height="15" fill="rgb(236,94,38)" fg:x="69741" fg:w="1061"/><text x="93.7767%" y="1199.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::unpack (39 samples, 0.05%)</title><rect x="94.8973%" y="1173" width="0.0523%" height="15" fill="rgb(220,13,23)" fg:x="70763" fg:w="39"/><text x="95.1473%" y="1183.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::State::inc_num_searching (16 samples, 0.02%)</title><rect x="94.9643%" y="1173" width="0.0215%" height="15" fill="rgb(234,26,39)" fg:x="70813" fg:w="16"/><text x="95.2143%" y="1183.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (16 samples, 0.02%)</title><rect x="94.9643%" y="1157" width="0.0215%" height="15" fill="rgb(205,117,44)" fg:x="70813" fg:w="16"/><text x="95.2143%" y="1167.50"></text></g><g><title>core::sync::atomic::atomic_add (16 samples, 0.02%)</title><rect x="94.9643%" y="1141" width="0.0215%" height="15" fill="rgb(250,42,2)" fg:x="70813" fg:w="16"/><text x="95.2143%" y="1151.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_to_searching (38 samples, 0.05%)</title><rect x="94.9496%" y="1205" width="0.0510%" height="15" fill="rgb(223,83,14)" fg:x="70802" fg:w="38"/><text x="95.1996%" y="1215.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_searching (33 samples, 0.04%)</title><rect x="94.9563%" y="1189" width="0.0443%" height="15" fill="rgb(241,147,50)" fg:x="70807" fg:w="33"/><text x="95.2063%" y="1199.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::State::load (11 samples, 0.01%)</title><rect x="94.9858%" y="1173" width="0.0148%" height="15" fill="rgb(218,90,6)" fg:x="70829" fg:w="11"/><text x="95.2358%" y="1183.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (11 samples, 0.01%)</title><rect x="94.9858%" y="1157" width="0.0148%" height="15" fill="rgb(210,191,5)" fg:x="70829" fg:w="11"/><text x="95.2358%" y="1167.50"></text></g><g><title>core::sync::atomic::atomic_load (11 samples, 0.01%)</title><rect x="94.9858%" y="1141" width="0.0148%" height="15" fill="rgb(225,139,19)" fg:x="70829" fg:w="11"/><text x="95.2358%" y="1151.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::steal_work (1,682 samples, 2.26%)</title><rect x="92.7623%" y="1221" width="2.2557%" height="15" fill="rgb(210,1,33)" fg:x="69171" fg:w="1682"/><text x="93.0123%" y="1231.50">t..</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (34,689 samples, 46.52%)</title><rect x="48.5195%" y="1269" width="46.5200%" height="15" fill="rgb(213,50,3)" fg:x="36180" fg:w="34689"/><text x="48.7695%" y="1279.50">tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}} (34,688 samples, 46.52%)</title><rect x="48.5208%" y="1253" width="46.5186%" height="15" fill="rgb(234,227,4)" fg:x="36181" fg:w="34688"/><text x="48.7708%" y="1263.50">tokio::runtime::scheduler::multi_thread::worker::run::{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (34,688 samples, 46.52%)</title><rect x="48.5208%" y="1237" width="46.5186%" height="15" fill="rgb(246,63,5)" fg:x="36181" fg:w="34688"/><text x="48.7708%" y="1247.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::did_defer_tasks (12 samples, 0.02%)</title><rect x="95.0233%" y="1221" width="0.0161%" height="15" fill="rgb(245,136,27)" fg:x="70857" fg:w="12"/><text x="95.2733%" y="1231.50"></text></g><g><title>tokio::runtime::context::with_defer (11 samples, 0.01%)</title><rect x="95.0247%" y="1205" width="0.0148%" height="15" fill="rgb(247,199,27)" fg:x="70858" fg:w="11"/><text x="95.2747%" y="1215.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (11 samples, 0.01%)</title><rect x="95.0247%" y="1189" width="0.0148%" height="15" fill="rgb(252,158,49)" fg:x="70858" fg:w="11"/><text x="95.2747%" y="1199.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (11 samples, 0.01%)</title><rect x="95.0247%" y="1173" width="0.0148%" height="15" fill="rgb(254,73,1)" fg:x="70858" fg:w="11"/><text x="95.2747%" y="1183.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (34,692 samples, 46.52%)</title><rect x="48.5168%" y="1365" width="46.5240%" height="15" fill="rgb(248,93,19)" fg:x="36178" fg:w="34692"/><text x="48.7668%" y="1375.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (34,692 samples, 46.52%)</title><rect x="48.5168%" y="1349" width="46.5240%" height="15" fill="rgb(206,67,5)" fg:x="36178" fg:w="34692"/><text x="48.7668%" y="1359.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (34,692 samples, 46.52%)</title><rect x="48.5168%" y="1333" width="46.5240%" height="15" fill="rgb(209,210,4)" fg:x="36178" fg:w="34692"/><text x="48.7668%" y="1343.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}}</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (34,692 samples, 46.52%)</title><rect x="48.5168%" y="1317" width="46.5240%" height="15" fill="rgb(214,185,36)" fg:x="36178" fg:w="34692"/><text x="48.7668%" y="1327.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Fu..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}} (34,692 samples, 46.52%)</title><rect x="48.5168%" y="1301" width="46.5240%" height="15" fill="rgb(233,191,26)" fg:x="36178" fg:w="34692"/><text x="48.7668%" y="1311.50">tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (34,692 samples, 46.52%)</title><rect x="48.5168%" y="1285" width="46.5240%" height="15" fill="rgb(248,94,17)" fg:x="36178" fg:w="34692"/><text x="48.7668%" y="1295.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>std::panic::catch_unwind (34,705 samples, 46.54%)</title><rect x="48.5007%" y="1669" width="46.5414%" height="15" fill="rgb(250,64,4)" fg:x="36166" fg:w="34705"/><text x="48.7507%" y="1679.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (34,705 samples, 46.54%)</title><rect x="48.5007%" y="1653" width="46.5414%" height="15" fill="rgb(218,41,53)" fg:x="36166" fg:w="34705"/><text x="48.7507%" y="1663.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (34,705 samples, 46.54%)</title><rect x="48.5007%" y="1637" width="46.5414%" height="15" fill="rgb(251,176,28)" fg:x="36166" fg:w="34705"/><text x="48.7507%" y="1647.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (34,705 samples, 46.54%)</title><rect x="48.5007%" y="1621" width="46.5414%" height="15" fill="rgb(247,22,9)" fg:x="36166" fg:w="34705"/><text x="48.7507%" y="1631.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnc..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (34,705 samples, 46.54%)</title><rect x="48.5007%" y="1605" width="46.5414%" height="15" fill="rgb(218,201,14)" fg:x="36166" fg:w="34705"/><text x="48.7507%" y="1615.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (34,705 samples, 46.54%)</title><rect x="48.5007%" y="1589" width="46.5414%" height="15" fill="rgb(218,94,10)" fg:x="36166" fg:w="34705"/><text x="48.7507%" y="1599.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (34,704 samples, 46.54%)</title><rect x="48.5020%" y="1573" width="46.5401%" height="15" fill="rgb(222,183,52)" fg:x="36167" fg:w="34704"/><text x="48.7520%" y="1583.50">tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}}</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (34,704 samples, 46.54%)</title><rect x="48.5020%" y="1557" width="46.5401%" height="15" fill="rgb(242,140,25)" fg:x="36167" fg:w="34704"/><text x="48.7520%" y="1567.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::blocking::pool::Task::run (34,697 samples, 46.53%)</title><rect x="48.5114%" y="1541" width="46.5307%" height="15" fill="rgb(235,197,38)" fg:x="36174" fg:w="34697"/><text x="48.7614%" y="1551.50">tokio::runtime::blocking::pool::Task::run</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (34,697 samples, 46.53%)</title><rect x="48.5114%" y="1525" width="46.5307%" height="15" fill="rgb(237,136,15)" fg:x="36174" fg:w="34697"/><text x="48.7614%" y="1535.50">tokio::runtime::task::UnownedTask&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (34,696 samples, 46.53%)</title><rect x="48.5128%" y="1509" width="46.5293%" height="15" fill="rgb(223,44,49)" fg:x="36175" fg:w="34696"/><text x="48.7628%" y="1519.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (34,695 samples, 46.53%)</title><rect x="48.5141%" y="1493" width="46.5280%" height="15" fill="rgb(227,71,15)" fg:x="36176" fg:w="34695"/><text x="48.7641%" y="1503.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (34,693 samples, 46.53%)</title><rect x="48.5168%" y="1477" width="46.5253%" height="15" fill="rgb(225,153,20)" fg:x="36178" fg:w="34693"/><text x="48.7668%" y="1487.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>tokio::runtime::task::harness::poll_future (34,693 samples, 46.53%)</title><rect x="48.5168%" y="1461" width="46.5253%" height="15" fill="rgb(210,190,26)" fg:x="36178" fg:w="34693"/><text x="48.7668%" y="1471.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (34,693 samples, 46.53%)</title><rect x="48.5168%" y="1445" width="46.5253%" height="15" fill="rgb(223,147,5)" fg:x="36178" fg:w="34693"/><text x="48.7668%" y="1455.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (34,693 samples, 46.53%)</title><rect x="48.5168%" y="1429" width="46.5253%" height="15" fill="rgb(207,14,23)" fg:x="36178" fg:w="34693"/><text x="48.7668%" y="1439.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (34,693 samples, 46.53%)</title><rect x="48.5168%" y="1413" width="46.5253%" height="15" fill="rgb(211,195,53)" fg:x="36178" fg:w="34693"/><text x="48.7668%" y="1423.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (34,693 samples, 46.53%)</title><rect x="48.5168%" y="1397" width="46.5253%" height="15" fill="rgb(237,75,46)" fg:x="36178" fg:w="34693"/><text x="48.7668%" y="1407.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnc..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (34,693 samples, 46.53%)</title><rect x="48.5168%" y="1381" width="46.5253%" height="15" fill="rgb(254,55,14)" fg:x="36178" fg:w="34693"/><text x="48.7668%" y="1391.50">tokio::runtime::task::harness::poll_future::{{closure}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (34,717 samples, 46.56%)</title><rect x="48.5007%" y="1733" width="46.5575%" height="15" fill="rgb(230,185,30)" fg:x="36166" fg:w="34717"/><text x="48.7507%" y="1743.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (34,717 samples, 46.56%)</title><rect x="48.5007%" y="1717" width="46.5575%" height="15" fill="rgb(220,14,11)" fg:x="36166" fg:w="34717"/><text x="48.7507%" y="1727.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (34,717 samples, 46.56%)</title><rect x="48.5007%" y="1701" width="46.5575%" height="15" fill="rgb(215,169,44)" fg:x="36166" fg:w="34717"/><text x="48.7507%" y="1711.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (34,717 samples, 46.56%)</title><rect x="48.5007%" y="1685" width="46.5575%" height="15" fill="rgb(253,203,20)" fg:x="36166" fg:w="34717"/><text x="48.7507%" y="1695.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>[libc.so.6] (34,758 samples, 46.61%)</title><rect x="48.4685%" y="1781" width="46.6125%" height="15" fill="rgb(229,225,17)" fg:x="36142" fg:w="34758"/><text x="48.7185%" y="1791.50">[libc.so.6]</text></g><g><title>[libc.so.6] (34,750 samples, 46.60%)</title><rect x="48.4792%" y="1765" width="46.6018%" height="15" fill="rgb(236,76,26)" fg:x="36150" fg:w="34750"/><text x="48.7292%" y="1775.50">[libc.so.6]</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (34,734 samples, 46.58%)</title><rect x="48.5007%" y="1749" width="46.5803%" height="15" fill="rgb(234,15,30)" fg:x="36166" fg:w="34734"/><text x="48.7507%" y="1759.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::stack_overflow::Handler&gt; (17 samples, 0.02%)</title><rect x="95.0582%" y="1733" width="0.0228%" height="15" fill="rgb(211,113,48)" fg:x="70883" fg:w="17"/><text x="95.3082%" y="1743.50"></text></g><g><title>&lt;std::sys::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (17 samples, 0.02%)</title><rect x="95.0582%" y="1717" width="0.0228%" height="15" fill="rgb(221,31,36)" fg:x="70883" fg:w="17"/><text x="95.3082%" y="1727.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::drop_handler (17 samples, 0.02%)</title><rect x="95.0582%" y="1701" width="0.0228%" height="15" fill="rgb(215,118,52)" fg:x="70883" fg:w="17"/><text x="95.3082%" y="1711.50"></text></g><g><title>__munmap (17 samples, 0.02%)</title><rect x="95.0582%" y="1685" width="0.0228%" height="15" fill="rgb(241,151,27)" fg:x="70883" fg:w="17"/><text x="95.3082%" y="1695.50"></text></g><g><title>&lt;bincode::config::DefaultOptions as core::default::Default&gt;::default (16 samples, 0.02%)</title><rect x="95.1078%" y="1765" width="0.0215%" height="15" fill="rgb(253,51,3)" fg:x="70920" fg:w="16"/><text x="95.3578%" y="1775.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (38 samples, 0.05%)</title><rect x="95.1293%" y="1765" width="0.0510%" height="15" fill="rgb(216,201,24)" fg:x="70936" fg:w="38"/><text x="95.3793%" y="1775.50"></text></g><g><title>&lt;core::time::Duration as core::ops::arith::Add&gt;::add (32 samples, 0.04%)</title><rect x="95.1829%" y="1765" width="0.0429%" height="15" fill="rgb(231,107,4)" fg:x="70976" fg:w="32"/><text x="95.4329%" y="1775.50"></text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (19 samples, 0.03%)</title><rect x="95.2258%" y="1765" width="0.0255%" height="15" fill="rgb(243,97,54)" fg:x="71008" fg:w="19"/><text x="95.4758%" y="1775.50"></text></g><g><title>&lt;remoc::chmux::credit::AssignedCredits as core::ops::drop::Drop&gt;::drop (10 samples, 0.01%)</title><rect x="95.2513%" y="1765" width="0.0134%" height="15" fill="rgb(221,32,51)" fg:x="71027" fg:w="10"/><text x="95.5013%" y="1775.50"></text></g><g><title>&lt;remoc::chmux::receiver::DataBuf as bytes::buf::buf_impl::Buf&gt;::remaining (8 samples, 0.01%)</title><rect x="95.2781%" y="1765" width="0.0107%" height="15" fill="rgb(218,171,35)" fg:x="71047" fg:w="8"/><text x="95.5281%" y="1775.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (36 samples, 0.05%)</title><rect x="95.2902%" y="1765" width="0.0483%" height="15" fill="rgb(214,20,53)" fg:x="71056" fg:w="36"/><text x="95.5402%" y="1775.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (18 samples, 0.02%)</title><rect x="95.3385%" y="1765" width="0.0241%" height="15" fill="rgb(239,9,52)" fg:x="71092" fg:w="18"/><text x="95.5885%" y="1775.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (18 samples, 0.02%)</title><rect x="95.3385%" y="1749" width="0.0241%" height="15" fill="rgb(215,114,45)" fg:x="71092" fg:w="18"/><text x="95.5885%" y="1759.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (18 samples, 0.02%)</title><rect x="95.3385%" y="1733" width="0.0241%" height="15" fill="rgb(208,118,9)" fg:x="71092" fg:w="18"/><text x="95.5885%" y="1743.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (8 samples, 0.01%)</title><rect x="95.3626%" y="1765" width="0.0107%" height="15" fill="rgb(235,7,39)" fg:x="71110" fg:w="8"/><text x="95.6126%" y="1775.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (16 samples, 0.02%)</title><rect x="95.3734%" y="1765" width="0.0215%" height="15" fill="rgb(243,225,15)" fg:x="71118" fg:w="16"/><text x="95.6234%" y="1775.50"></text></g><g><title>&lt;tokio::loom::std::atomic_usize::AtomicUsize as core::ops::deref::Deref&gt;::deref (27 samples, 0.04%)</title><rect x="95.4082%" y="1765" width="0.0362%" height="15" fill="rgb(225,216,18)" fg:x="71144" fg:w="27"/><text x="95.6582%" y="1775.50"></text></g><g><title>&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (138 samples, 0.19%)</title><rect x="95.4458%" y="1765" width="0.1851%" height="15" fill="rgb(233,36,38)" fg:x="71172" fg:w="138"/><text x="95.6958%" y="1775.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (23 samples, 0.03%)</title><rect x="95.6308%" y="1765" width="0.0308%" height="15" fill="rgb(239,88,23)" fg:x="71310" fg:w="23"/><text x="95.8808%" y="1775.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="95.6697%" y="1765" width="0.0121%" height="15" fill="rgb(219,181,35)" fg:x="71339" fg:w="9"/><text x="95.9197%" y="1775.50"></text></g><g><title>&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,R&gt; as futures_core::stream::Stream&gt;::poll_next::CALLSITE (10 samples, 0.01%)</title><rect x="95.6831%" y="1765" width="0.0134%" height="15" fill="rgb(215,18,46)" fg:x="71349" fg:w="10"/><text x="95.9331%" y="1775.50"></text></g><g><title>&lt;tokio::io::util::buf_writer::BufWriter&lt;W&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (10 samples, 0.01%)</title><rect x="95.6831%" y="1749" width="0.0134%" height="15" fill="rgb(241,38,11)" fg:x="71349" fg:w="10"/><text x="95.9331%" y="1759.50"></text></g><g><title>&lt;mpc_channel::util::TrackingWriter&lt;AW&gt; as tokio::io::async_write::AsyncWrite&gt;::is_write_vectored (8 samples, 0.01%)</title><rect x="95.6858%" y="1733" width="0.0107%" height="15" fill="rgb(248,169,45)" fg:x="71351" fg:w="8"/><text x="95.9358%" y="1743.50"></text></g><g><title>bytes::buf::buf_mut::BufMut::put_uint_le (10 samples, 0.01%)</title><rect x="95.7274%" y="1749" width="0.0134%" height="15" fill="rgb(239,50,49)" fg:x="71382" fg:w="10"/><text x="95.9774%" y="1759.50"></text></g><g><title>&lt;tokio_util::codec::length_delimited::LengthDelimitedCodec as tokio_util::codec::encoder::Encoder&lt;bytes::bytes::Bytes&gt;&gt;::encode (44 samples, 0.06%)</title><rect x="95.7006%" y="1765" width="0.0590%" height="15" fill="rgb(231,96,31)" fg:x="71362" fg:w="44"/><text x="95.9506%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (14 samples, 0.02%)</title><rect x="95.7408%" y="1749" width="0.0188%" height="15" fill="rgb(224,193,37)" fg:x="71392" fg:w="14"/><text x="95.9908%" y="1759.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (14 samples, 0.02%)</title><rect x="95.7408%" y="1733" width="0.0188%" height="15" fill="rgb(227,153,50)" fg:x="71392" fg:w="14"/><text x="95.9908%" y="1743.50"></text></g><g><title>[aes_cbc] (27 samples, 0.04%)</title><rect x="95.7596%" y="1765" width="0.0362%" height="15" fill="rgb(249,228,3)" fg:x="71406" fg:w="27"/><text x="96.0096%" y="1775.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::CURRENT::FOO::__getit (25 samples, 0.03%)</title><rect x="95.7623%" y="1749" width="0.0335%" height="15" fill="rgb(219,164,43)" fg:x="71408" fg:w="25"/><text x="96.0123%" y="1759.50"></text></g><g><title>[libc.so.6] (43 samples, 0.06%)</title><rect x="95.7958%" y="1765" width="0.0577%" height="15" fill="rgb(216,45,41)" fg:x="71433" fg:w="43"/><text x="96.0458%" y="1775.50"></text></g><g><title>__rdl_alloc (32 samples, 0.04%)</title><rect x="95.8534%" y="1765" width="0.0429%" height="15" fill="rgb(210,226,51)" fg:x="71476" fg:w="32"/><text x="96.1034%" y="1775.50"></text></g><g><title>__send (12 samples, 0.02%)</title><rect x="95.9058%" y="1765" width="0.0161%" height="15" fill="rgb(209,117,49)" fg:x="71515" fg:w="12"/><text x="96.1558%" y="1775.50"></text></g><g><title>__vdso_clock_gettime (18 samples, 0.02%)</title><rect x="95.9218%" y="1765" width="0.0241%" height="15" fill="rgb(206,196,24)" fg:x="71527" fg:w="18"/><text x="96.1718%" y="1775.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (28 samples, 0.04%)</title><rect x="95.9460%" y="1765" width="0.0375%" height="15" fill="rgb(253,218,3)" fg:x="71545" fg:w="28"/><text x="96.1960%" y="1775.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (30 samples, 0.04%)</title><rect x="95.9876%" y="1765" width="0.0402%" height="15" fill="rgb(252,166,2)" fg:x="71576" fg:w="30"/><text x="96.2376%" y="1775.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (30 samples, 0.04%)</title><rect x="95.9876%" y="1749" width="0.0402%" height="15" fill="rgb(236,218,26)" fg:x="71576" fg:w="30"/><text x="96.2376%" y="1759.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (30 samples, 0.04%)</title><rect x="95.9876%" y="1733" width="0.0402%" height="15" fill="rgb(254,84,19)" fg:x="71576" fg:w="30"/><text x="96.2376%" y="1743.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (30 samples, 0.04%)</title><rect x="95.9876%" y="1717" width="0.0402%" height="15" fill="rgb(219,137,29)" fg:x="71576" fg:w="30"/><text x="96.2376%" y="1727.50"></text></g><g><title>alloc::raw_vec::finish_grow (14 samples, 0.02%)</title><rect x="96.0278%" y="1765" width="0.0188%" height="15" fill="rgb(227,47,52)" fg:x="71606" fg:w="14"/><text x="96.2778%" y="1775.50"></text></g><g><title>anon.7b2c9b8df3582b58c39c146a69fabf98.166.llvm.1210232436355180338 (19 samples, 0.03%)</title><rect x="96.0466%" y="1765" width="0.0255%" height="15" fill="rgb(229,167,24)" fg:x="71620" fg:w="19"/><text x="96.2966%" y="1775.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (19 samples, 0.03%)</title><rect x="96.0466%" y="1749" width="0.0255%" height="15" fill="rgb(233,164,1)" fg:x="71620" fg:w="19"/><text x="96.2966%" y="1759.50"></text></g><g><title>bincode::config::int::VarintEncoding::deserialize_varint (11 samples, 0.01%)</title><rect x="96.0720%" y="1765" width="0.0148%" height="15" fill="rgb(218,88,48)" fg:x="71639" fg:w="11"/><text x="96.3220%" y="1775.50"></text></g><g><title>bincode::config::int::VarintEncoding::serialize_varint (18 samples, 0.02%)</title><rect x="96.0868%" y="1765" width="0.0241%" height="15" fill="rgb(226,214,24)" fg:x="71650" fg:w="18"/><text x="96.3368%" y="1775.50"></text></g><g><title>bincode::config::int::cast_u64_to_u32 (11 samples, 0.01%)</title><rect x="96.1109%" y="1765" width="0.0148%" height="15" fill="rgb(233,29,12)" fg:x="71668" fg:w="11"/><text x="96.3609%" y="1775.50"></text></g><g><title>bytes::bytes::shared_drop (23 samples, 0.03%)</title><rect x="96.1257%" y="1765" width="0.0308%" height="15" fill="rgb(219,120,34)" fg:x="71679" fg:w="23"/><text x="96.3757%" y="1775.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (23 samples, 0.03%)</title><rect x="96.1257%" y="1749" width="0.0308%" height="15" fill="rgb(226,78,44)" fg:x="71679" fg:w="23"/><text x="96.3757%" y="1759.50"></text></g><g><title>bytes::bytes::static_drop (11 samples, 0.01%)</title><rect x="96.1565%" y="1765" width="0.0148%" height="15" fill="rgb(240,15,48)" fg:x="71702" fg:w="11"/><text x="96.4065%" y="1775.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (10 samples, 0.01%)</title><rect x="96.1713%" y="1765" width="0.0134%" height="15" fill="rgb(253,176,7)" fg:x="71713" fg:w="10"/><text x="96.4213%" y="1775.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (11 samples, 0.01%)</title><rect x="96.1914%" y="1765" width="0.0148%" height="15" fill="rgb(206,166,28)" fg:x="71728" fg:w="11"/><text x="96.4414%" y="1775.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (11 samples, 0.01%)</title><rect x="96.1914%" y="1749" width="0.0148%" height="15" fill="rgb(241,53,51)" fg:x="71728" fg:w="11"/><text x="96.4414%" y="1759.50"></text></g><g><title>cfree (11 samples, 0.01%)</title><rect x="96.2061%" y="1765" width="0.0148%" height="15" fill="rgb(249,112,30)" fg:x="71739" fg:w="11"/><text x="96.4561%" y="1775.50"></text></g><g><title>core::hash::BuildHasher::hash_one (24 samples, 0.03%)</title><rect x="96.2249%" y="1765" width="0.0322%" height="15" fill="rgb(217,85,30)" fg:x="71753" fg:w="24"/><text x="96.4749%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;remoc::rch::base::receiver::PortDeserializer&gt;&gt; (16 samples, 0.02%)</title><rect x="96.2625%" y="1765" width="0.0215%" height="15" fill="rgb(233,49,7)" fg:x="71781" fg:w="16"/><text x="96.5125%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;remoc::chmux::mux::ChMux&lt;tokio_util::codec::framed_write::FramedWrite&lt;tokio::io::util::buf_writer::BufWriter&lt;mpc_channel::util::TrackingWriter&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;,tokio_util::codec::length_delimited::LengthDelimitedCodec&gt;,futures_util::stream::try_stream::MapOk&lt;tokio_util::codec::framed_read::FramedRead&lt;tokio::io::util::buf_reader::BufReader&lt;mpc_channel::util::TrackingReader&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;,tokio_util::codec::length_delimited::LengthDelimitedCodec&gt;,remoc::connect::Connect&lt;std::io::error::Error,std::io::error::Error&gt;::io&lt;tokio::io::util::buf_reader::BufReader&lt;mpc_channel::util::TrackingReader&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;,tokio::io::util::buf_writer::BufWriter&lt;mpc_channel::util::TrackingWriter&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;,aes_cbc::execute::{{closure}}::__mpc_channel_macros__internal_Receivers&lt;aes_cbc::Msg,gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt;,aes_cbc::execute::{{closure}}::__mpc_channel_macros__internal_Receivers&lt;aes_cbc::Msg,gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt;,remoc::codec::bincode::Bincode&gt;::{{closure}}::{{closure}}&gt;&gt;::feed_msg::{{closure}}&gt; (35 samples, 0.05%)</title><rect x="96.2893%" y="1765" width="0.0469%" height="15" fill="rgb(234,109,9)" fg:x="71801" fg:w="35"/><text x="96.5393%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;remoc::chmux::mux::ChMux&lt;tokio_util::codec::framed_write::FramedWrite&lt;tokio::io::util::buf_writer::BufWriter&lt;mpc_channel::util::TrackingWriter&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;,tokio_util::codec::length_delimited::LengthDelimitedCodec&gt;,futures_util::stream::try_stream::MapOk&lt;tokio_util::codec::framed_read::FramedRead&lt;tokio::io::util::buf_reader::BufReader&lt;mpc_channel::util::TrackingReader&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;,tokio_util::codec::length_delimited::LengthDelimitedCodec&gt;,remoc::connect::Connect&lt;std::io::error::Error,std::io::error::Error&gt;::io&lt;tokio::io::util::buf_reader::BufReader&lt;mpc_channel::util::TrackingReader&lt;tokio::net::tcp::split_owned::OwnedReadHalf&gt;&gt;,tokio::io::util::buf_writer::BufWriter&lt;mpc_channel::util::TrackingWriter&lt;tokio::net::tcp::split_owned::OwnedWriteHalf&gt;&gt;,aes_cbc::execute::{{closure}}::__mpc_channel_macros__internal_Receivers&lt;aes_cbc::Msg,gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt;,aes_cbc::execute::{{closure}}::__mpc_channel_macros__internal_Receivers&lt;aes_cbc::Msg,gmw::executor::ExecutorMsg&lt;gmw::protocols::boolean_gmw::Msg,gmw::protocols::boolean_gmw::SimdMsg&gt;&gt;,remoc::codec::bincode::Bincode&gt;::{{closure}}::{{closure}}&gt;&gt;::handle_received_msg::{{closure}}&gt; (9 samples, 0.01%)</title><rect x="96.3389%" y="1765" width="0.0121%" height="15" fill="rgb(253,95,22)" fg:x="71838" fg:w="9"/><text x="96.5889%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;remoc::rch::base::receiver::DataSource&lt;core::result::Result&lt;aes_cbc::Msg,remoc::rch::mpsc::receiver::RecvError&gt;&gt;&gt; (39 samples, 0.05%)</title><rect x="96.3644%" y="1765" width="0.0523%" height="15" fill="rgb(233,176,25)" fg:x="71857" fg:w="39"/><text x="96.6144%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::time::sleep::Sleep&gt; (46 samples, 0.06%)</title><rect x="96.4261%" y="1765" width="0.0617%" height="15" fill="rgb(236,33,39)" fg:x="71903" fg:w="46"/><text x="96.6761%" y="1775.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::time::entry::TimerEntry&gt; (19 samples, 0.03%)</title><rect x="96.4623%" y="1749" width="0.0255%" height="15" fill="rgb(223,226,42)" fg:x="71930" fg:w="19"/><text x="96.7123%" y="1759.50"></text></g><g><title>core::task::poll::Poll&lt;core::result::Result&lt;T,E&gt;&gt;::map_err (15 samples, 0.02%)</title><rect x="96.4905%" y="1765" width="0.0201%" height="15" fill="rgb(216,99,33)" fg:x="71951" fg:w="15"/><text x="96.7405%" y="1775.50"></text></g><g><title>epoll_wait (9 samples, 0.01%)</title><rect x="96.5106%" y="1765" width="0.0121%" height="15" fill="rgb(235,84,23)" fg:x="71966" fg:w="9"/><text x="96.7606%" y="1775.50"></text></g><g><title>gmw::protocols::boolean_gmw::_::&lt;impl serde::ser::Serialize for gmw::protocols::boolean_gmw::SimdMsg&gt;::serialize (8 samples, 0.01%)</title><rect x="96.5253%" y="1765" width="0.0107%" height="15" fill="rgb(232,2,27)" fg:x="71977" fg:w="8"/><text x="96.7753%" y="1775.50"></text></g><g><title>&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.01%)</title><rect x="96.5253%" y="1749" width="0.0107%" height="15" fill="rgb(241,23,22)" fg:x="71977" fg:w="8"/><text x="96.7753%" y="1759.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (8 samples, 0.01%)</title><rect x="96.5253%" y="1733" width="0.0107%" height="15" fill="rgb(211,73,27)" fg:x="71977" fg:w="8"/><text x="96.7753%" y="1743.50"></text></g><g><title>malloc (12 samples, 0.02%)</title><rect x="96.5414%" y="1765" width="0.0161%" height="15" fill="rgb(235,109,49)" fg:x="71989" fg:w="12"/><text x="96.7914%" y="1775.50"></text></g><g><title>mio::poll::Poll::poll (55 samples, 0.07%)</title><rect x="96.5588%" y="1765" width="0.0738%" height="15" fill="rgb(230,99,29)" fg:x="72002" fg:w="55"/><text x="96.8088%" y="1775.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (14 samples, 0.02%)</title><rect x="96.6138%" y="1749" width="0.0188%" height="15" fill="rgb(245,199,7)" fg:x="72043" fg:w="14"/><text x="96.8638%" y="1759.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (10 samples, 0.01%)</title><rect x="96.6192%" y="1733" width="0.0134%" height="15" fill="rgb(217,179,10)" fg:x="72047" fg:w="10"/><text x="96.8692%" y="1743.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select::{{closure}} (10 samples, 0.01%)</title><rect x="96.6192%" y="1717" width="0.0134%" height="15" fill="rgb(254,99,47)" fg:x="72047" fg:w="10"/><text x="96.8692%" y="1727.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (16 samples, 0.02%)</title><rect x="96.6326%" y="1765" width="0.0215%" height="15" fill="rgb(251,121,7)" fg:x="72057" fg:w="16"/><text x="96.8826%" y="1775.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (10 samples, 0.01%)</title><rect x="96.6554%" y="1765" width="0.0134%" height="15" fill="rgb(250,177,26)" fg:x="72074" fg:w="10"/><text x="96.9054%" y="1775.50"></text></g><g><title>realloc (15 samples, 0.02%)</title><rect x="96.6702%" y="1765" width="0.0201%" height="15" fill="rgb(232,88,15)" fg:x="72085" fg:w="15"/><text x="96.9202%" y="1775.50"></text></g><g><title>remoc::chmux::credit::ChannelCreditReturner::start_return (42 samples, 0.06%)</title><rect x="96.7117%" y="1765" width="0.0563%" height="15" fill="rgb(251,54,54)" fg:x="72116" fg:w="42"/><text x="96.9617%" y="1775.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (40 samples, 0.05%)</title><rect x="96.7144%" y="1749" width="0.0536%" height="15" fill="rgb(208,177,15)" fg:x="72118" fg:w="40"/><text x="96.9644%" y="1759.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (40 samples, 0.05%)</title><rect x="96.7144%" y="1733" width="0.0536%" height="15" fill="rgb(205,97,32)" fg:x="72118" fg:w="40"/><text x="96.9644%" y="1743.50"></text></g><g><title>remoc::chmux::msg::MultiplexMsg::to_vec (33 samples, 0.04%)</title><rect x="96.7694%" y="1765" width="0.0443%" height="15" fill="rgb(217,192,13)" fg:x="72159" fg:w="33"/><text x="97.0194%" y="1775.50"></text></g><g><title>remoc::chmux::mux::ChMux&lt;TransportSink,TransportStream&gt;::run::{{closure}}::{{closure}} (20 samples, 0.03%)</title><rect x="96.8204%" y="1765" width="0.0268%" height="15" fill="rgb(215,163,41)" fg:x="72197" fg:w="20"/><text x="97.0704%" y="1775.50"></text></g><g><title>remoc::chmux::receiver::Receiver::recv_any::{{closure}} (18 samples, 0.02%)</title><rect x="96.8606%" y="1765" width="0.0241%" height="15" fill="rgb(246,83,29)" fg:x="72227" fg:w="18"/><text x="97.1106%" y="1775.50"></text></g><g><title>remoc::rch::base::io::LimitedBytesWriter::into_inner (10 samples, 0.01%)</title><rect x="96.8847%" y="1765" width="0.0134%" height="15" fill="rgb(219,2,45)" fg:x="72245" fg:w="10"/><text x="97.1347%" y="1775.50"></text></g><g><title>serde::ser::Serializer::collect_seq (12 samples, 0.02%)</title><rect x="96.9048%" y="1765" width="0.0161%" height="15" fill="rgb(242,215,33)" fg:x="72260" fg:w="12"/><text x="97.1548%" y="1775.50"></text></g><g><title>std::io::Write::write_all (32 samples, 0.04%)</title><rect x="96.9209%" y="1765" width="0.0429%" height="15" fill="rgb(217,1,6)" fg:x="72272" fg:w="32"/><text x="97.1709%" y="1775.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::copy_to_slice (10 samples, 0.01%)</title><rect x="96.9799%" y="1733" width="0.0134%" height="15" fill="rgb(207,85,52)" fg:x="72316" fg:w="10"/><text x="97.2299%" y="1743.50"></text></g><g><title>bytes::buf::buf_impl::Buf::copy_to_slice (10 samples, 0.01%)</title><rect x="96.9799%" y="1717" width="0.0134%" height="15" fill="rgb(231,171,19)" fg:x="72316" fg:w="10"/><text x="97.2299%" y="1727.50"></text></g><g><title>&lt;bytes::buf::reader::Reader&lt;B&gt; as std::io::Read&gt;::read (12 samples, 0.02%)</title><rect x="96.9799%" y="1749" width="0.0161%" height="15" fill="rgb(207,128,4)" fg:x="72316" fg:w="12"/><text x="97.2299%" y="1759.50"></text></g><g><title>std::io::default_read_exact (44 samples, 0.06%)</title><rect x="96.9638%" y="1765" width="0.0590%" height="15" fill="rgb(219,208,4)" fg:x="72304" fg:w="44"/><text x="97.2138%" y="1775.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (20 samples, 0.03%)</title><rect x="96.9960%" y="1749" width="0.0268%" height="15" fill="rgb(235,161,42)" fg:x="72328" fg:w="20"/><text x="97.2460%" y="1759.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (36 samples, 0.05%)</title><rect x="97.0269%" y="1765" width="0.0483%" height="15" fill="rgb(247,218,18)" fg:x="72351" fg:w="36"/><text x="97.2769%" y="1775.50"></text></g><g><title>std::time::Instant::checked_duration_since (15 samples, 0.02%)</title><rect x="97.0752%" y="1765" width="0.0201%" height="15" fill="rgb(232,114,51)" fg:x="72387" fg:w="15"/><text x="97.3252%" y="1775.50"></text></g><g><title>std::time::SystemTime::checked_add (23 samples, 0.03%)</title><rect x="97.0953%" y="1765" width="0.0308%" height="15" fill="rgb(222,95,3)" fg:x="72402" fg:w="23"/><text x="97.3453%" y="1775.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (61 samples, 0.08%)</title><rect x="97.1503%" y="1765" width="0.0818%" height="15" fill="rgb(240,65,29)" fg:x="72443" fg:w="61"/><text x="97.4003%" y="1775.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv::{{closure}} (12 samples, 0.02%)</title><rect x="97.2160%" y="1749" width="0.0161%" height="15" fill="rgb(249,209,20)" fg:x="72492" fg:w="12"/><text x="97.4660%" y="1759.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (102 samples, 0.14%)</title><rect x="97.2388%" y="1717" width="0.1368%" height="15" fill="rgb(241,48,37)" fg:x="72509" fg:w="102"/><text x="97.4888%" y="1727.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (102 samples, 0.14%)</title><rect x="97.2388%" y="1701" width="0.1368%" height="15" fill="rgb(230,140,42)" fg:x="72509" fg:w="102"/><text x="97.4888%" y="1711.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (102 samples, 0.14%)</title><rect x="97.2388%" y="1685" width="0.1368%" height="15" fill="rgb(230,176,45)" fg:x="72509" fg:w="102"/><text x="97.4888%" y="1695.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (102 samples, 0.14%)</title><rect x="97.2388%" y="1669" width="0.1368%" height="15" fill="rgb(245,112,21)" fg:x="72509" fg:w="102"/><text x="97.4888%" y="1679.50"></text></g><g><title>tokio::runtime::context::with_defer (106 samples, 0.14%)</title><rect x="97.2388%" y="1765" width="0.1422%" height="15" fill="rgb(207,183,35)" fg:x="72509" fg:w="106"/><text x="97.4888%" y="1775.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (106 samples, 0.14%)</title><rect x="97.2388%" y="1749" width="0.1422%" height="15" fill="rgb(227,44,33)" fg:x="72509" fg:w="106"/><text x="97.4888%" y="1759.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (106 samples, 0.14%)</title><rect x="97.2388%" y="1733" width="0.1422%" height="15" fill="rgb(246,120,21)" fg:x="72509" fg:w="106"/><text x="97.4888%" y="1743.50"></text></g><g><title>tokio::runtime::coop::Budget::unconstrained (23 samples, 0.03%)</title><rect x="97.3863%" y="1765" width="0.0308%" height="15" fill="rgb(235,57,52)" fg:x="72619" fg:w="23"/><text x="97.6363%" y="1775.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (78 samples, 0.10%)</title><rect x="97.4198%" y="1765" width="0.1046%" height="15" fill="rgb(238,84,10)" fg:x="72644" fg:w="78"/><text x="97.6698%" y="1775.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (39 samples, 0.05%)</title><rect x="97.5405%" y="1765" width="0.0523%" height="15" fill="rgb(251,200,32)" fg:x="72734" fg:w="39"/><text x="97.7905%" y="1775.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (39 samples, 0.05%)</title><rect x="97.5405%" y="1749" width="0.0523%" height="15" fill="rgb(247,159,13)" fg:x="72734" fg:w="39"/><text x="97.7905%" y="1759.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (39 samples, 0.05%)</title><rect x="97.5405%" y="1733" width="0.0523%" height="15" fill="rgb(238,64,4)" fg:x="72734" fg:w="39"/><text x="97.7905%" y="1743.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (39 samples, 0.05%)</title><rect x="97.5405%" y="1717" width="0.0523%" height="15" fill="rgb(221,131,51)" fg:x="72734" fg:w="39"/><text x="97.7905%" y="1727.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (238 samples, 0.32%)</title><rect x="97.5928%" y="1765" width="0.3192%" height="15" fill="rgb(242,5,29)" fg:x="72773" fg:w="238"/><text x="97.8428%" y="1775.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (139 samples, 0.19%)</title><rect x="97.7256%" y="1749" width="0.1864%" height="15" fill="rgb(214,130,32)" fg:x="72872" fg:w="139"/><text x="97.9756%" y="1759.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (139 samples, 0.19%)</title><rect x="97.7256%" y="1733" width="0.1864%" height="15" fill="rgb(244,210,16)" fg:x="72872" fg:w="139"/><text x="97.9756%" y="1743.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (139 samples, 0.19%)</title><rect x="97.7256%" y="1717" width="0.1864%" height="15" fill="rgb(234,48,26)" fg:x="72872" fg:w="139"/><text x="97.9756%" y="1727.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_if_work_pending (17 samples, 0.02%)</title><rect x="97.9120%" y="1765" width="0.0228%" height="15" fill="rgb(231,82,38)" fg:x="73011" fg:w="17"/><text x="98.1620%" y="1775.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (24 samples, 0.03%)</title><rect x="97.9348%" y="1765" width="0.0322%" height="15" fill="rgb(254,128,41)" fg:x="73028" fg:w="24"/><text x="98.1848%" y="1775.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (11 samples, 0.01%)</title><rect x="97.9670%" y="1765" width="0.0148%" height="15" fill="rgb(212,73,49)" fg:x="73052" fg:w="11"/><text x="98.2170%" y="1775.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (47 samples, 0.06%)</title><rect x="97.9911%" y="1765" width="0.0630%" height="15" fill="rgb(205,62,54)" fg:x="73070" fg:w="47"/><text x="98.2411%" y="1775.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (14 samples, 0.02%)</title><rect x="98.0541%" y="1765" width="0.0188%" height="15" fill="rgb(228,0,8)" fg:x="73117" fg:w="14"/><text x="98.3041%" y="1775.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (14 samples, 0.02%)</title><rect x="98.0930%" y="1765" width="0.0188%" height="15" fill="rgb(251,28,17)" fg:x="73146" fg:w="14"/><text x="98.3430%" y="1775.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (123 samples, 0.16%)</title><rect x="98.1346%" y="1765" width="0.1650%" height="15" fill="rgb(238,105,27)" fg:x="73177" fg:w="123"/><text x="98.3846%" y="1775.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (62 samples, 0.08%)</title><rect x="98.2164%" y="1749" width="0.0831%" height="15" fill="rgb(237,216,33)" fg:x="73238" fg:w="62"/><text x="98.4664%" y="1759.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (61 samples, 0.08%)</title><rect x="98.2177%" y="1733" width="0.0818%" height="15" fill="rgb(229,228,25)" fg:x="73239" fg:w="61"/><text x="98.4677%" y="1743.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::clear_entry (18 samples, 0.02%)</title><rect x="98.2995%" y="1765" width="0.0241%" height="15" fill="rgb(233,75,23)" fg:x="73300" fg:w="18"/><text x="98.5495%" y="1775.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (8 samples, 0.01%)</title><rect x="98.3237%" y="1765" width="0.0107%" height="15" fill="rgb(231,207,16)" fg:x="73318" fg:w="8"/><text x="98.5737%" y="1775.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::reset (8 samples, 0.01%)</title><rect x="98.3344%" y="1765" width="0.0107%" height="15" fill="rgb(231,191,45)" fg:x="73326" fg:w="8"/><text x="98.5844%" y="1775.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (34 samples, 0.05%)</title><rect x="98.3451%" y="1765" width="0.0456%" height="15" fill="rgb(224,133,17)" fg:x="73334" fg:w="34"/><text x="98.5951%" y="1775.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (60 samples, 0.08%)</title><rect x="98.3907%" y="1765" width="0.0805%" height="15" fill="rgb(209,178,27)" fg:x="73368" fg:w="60"/><text x="98.6407%" y="1775.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (26 samples, 0.03%)</title><rect x="98.4712%" y="1765" width="0.0349%" height="15" fill="rgb(218,37,11)" fg:x="73428" fg:w="26"/><text x="98.7212%" y="1775.50"></text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::send::{{closure}} (54 samples, 0.07%)</title><rect x="98.5356%" y="1765" width="0.0724%" height="15" fill="rgb(251,226,25)" fg:x="73476" fg:w="54"/><text x="98.7856%" y="1775.50"></text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::reserve::{{closure}} (8 samples, 0.01%)</title><rect x="98.5973%" y="1749" width="0.0107%" height="15" fill="rgb(209,222,27)" fg:x="73522" fg:w="8"/><text x="98.8473%" y="1759.50"></text></g><g><title>tokio::sync::mpsc::bounded::Sender&lt;T&gt;::reserve_inner::{{closure}} (8 samples, 0.01%)</title><rect x="98.5973%" y="1733" width="0.0107%" height="15" fill="rgb(238,22,21)" fg:x="73522" fg:w="8"/><text x="98.8473%" y="1743.50"></text></g><g><title>tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (14 samples, 0.02%)</title><rect x="98.6080%" y="1765" width="0.0188%" height="15" fill="rgb(233,161,25)" fg:x="73530" fg:w="14"/><text x="98.8580%" y="1775.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (412 samples, 0.55%)</title><rect x="98.6268%" y="1765" width="0.5525%" height="15" fill="rgb(226,122,53)" fg:x="73544" fg:w="412"/><text x="98.8768%" y="1775.50"></text></g><g><title>tokio::sync::mpsc::block::Block&lt;T&gt;::read (152 samples, 0.20%)</title><rect x="98.9754%" y="1749" width="0.2038%" height="15" fill="rgb(220,123,17)" fg:x="73804" fg:w="152"/><text x="99.2254%" y="1759.50"></text></g><g><title>tokio::sync::mpsc::list::Tx&lt;T&gt;::find_block (28 samples, 0.04%)</title><rect x="99.1793%" y="1765" width="0.0375%" height="15" fill="rgb(230,224,35)" fg:x="73956" fg:w="28"/><text x="99.4293%" y="1775.50"></text></g><g><title>tokio::sync::mpsc::block::start_index (20 samples, 0.03%)</title><rect x="99.1900%" y="1749" width="0.0268%" height="15" fill="rgb(246,83,8)" fg:x="73964" fg:w="20"/><text x="99.4400%" y="1759.50"></text></g><g><title>tokio::sync::mpsc::unbounded::UnboundedSender&lt;T&gt;::send (15 samples, 0.02%)</title><rect x="99.2168%" y="1765" width="0.0201%" height="15" fill="rgb(230,214,17)" fg:x="73984" fg:w="15"/><text x="99.4668%" y="1775.50"></text></g><g><title>tokio::sync::notify::Notified::poll_notified (16 samples, 0.02%)</title><rect x="99.2369%" y="1765" width="0.0215%" height="15" fill="rgb(222,97,18)" fg:x="73999" fg:w="16"/><text x="99.4869%" y="1775.50"></text></g><g><title>&lt;&amp;core::task::wake::Waker as tokio::sync::task::atomic_waker::WakerRef&gt;::into_waker (24 samples, 0.03%)</title><rect x="99.4005%" y="1637" width="0.0322%" height="15" fill="rgb(206,79,1)" fg:x="74121" fg:w="24"/><text x="99.6505%" y="1647.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (24 samples, 0.03%)</title><rect x="99.4005%" y="1621" width="0.0322%" height="15" fill="rgb(214,121,34)" fg:x="74121" fg:w="24"/><text x="99.6505%" y="1631.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (137 samples, 0.18%)</title><rect x="99.2584%" y="1765" width="0.1837%" height="15" fill="rgb(249,199,46)" fg:x="74015" fg:w="137"/><text x="99.5084%" y="1775.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register (31 samples, 0.04%)</title><rect x="99.4005%" y="1749" width="0.0416%" height="15" fill="rgb(214,222,46)" fg:x="74121" fg:w="31"/><text x="99.6505%" y="1759.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::catch_unwind (31 samples, 0.04%)</title><rect x="99.4005%" y="1733" width="0.0416%" height="15" fill="rgb(248,168,30)" fg:x="74121" fg:w="31"/><text x="99.6505%" y="1743.50"></text></g><g><title>std::panic::catch_unwind (31 samples, 0.04%)</title><rect x="99.4005%" y="1717" width="0.0416%" height="15" fill="rgb(226,14,28)" fg:x="74121" fg:w="31"/><text x="99.6505%" y="1727.50"></text></g><g><title>std::panicking::try (31 samples, 0.04%)</title><rect x="99.4005%" y="1701" width="0.0416%" height="15" fill="rgb(253,123,1)" fg:x="74121" fg:w="31"/><text x="99.6505%" y="1711.50"></text></g><g><title>std::panicking::try::do_call (31 samples, 0.04%)</title><rect x="99.4005%" y="1685" width="0.0416%" height="15" fill="rgb(225,24,42)" fg:x="74121" fg:w="31"/><text x="99.6505%" y="1695.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (31 samples, 0.04%)</title><rect x="99.4005%" y="1669" width="0.0416%" height="15" fill="rgb(216,161,37)" fg:x="74121" fg:w="31"/><text x="99.6505%" y="1679.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::{{closure}} (31 samples, 0.04%)</title><rect x="99.4005%" y="1653" width="0.0416%" height="15" fill="rgb(251,164,26)" fg:x="74121" fg:w="31"/><text x="99.6505%" y="1663.50"></text></g><g><title>tokio::time::sleep::Sleep::new_timeout (14 samples, 0.02%)</title><rect x="99.4596%" y="1765" width="0.0188%" height="15" fill="rgb(219,177,3)" fg:x="74165" fg:w="14"/><text x="99.7096%" y="1775.50"></text></g><g><title>[unknown] (3,292 samples, 4.41%)</title><rect x="95.0810%" y="1781" width="4.4148%" height="15" fill="rgb(222,65,0)" fg:x="70900" fg:w="3292"/><text x="95.3310%" y="1791.50">[unkn..</text></g><g><title>__vdso_clock_gettime (16 samples, 0.02%)</title><rect x="99.4958%" y="1781" width="0.0215%" height="15" fill="rgb(223,69,54)" fg:x="74192" fg:w="16"/><text x="99.7458%" y="1791.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (32 samples, 0.04%)</title><rect x="99.5172%" y="1781" width="0.0429%" height="15" fill="rgb(235,30,27)" fg:x="74208" fg:w="32"/><text x="99.7672%" y="1791.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (32 samples, 0.04%)</title><rect x="99.5172%" y="1765" width="0.0429%" height="15" fill="rgb(220,183,50)" fg:x="74208" fg:w="32"/><text x="99.7672%" y="1775.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (31 samples, 0.04%)</title><rect x="99.5186%" y="1749" width="0.0416%" height="15" fill="rgb(248,198,15)" fg:x="74209" fg:w="31"/><text x="99.7686%" y="1759.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (31 samples, 0.04%)</title><rect x="99.5186%" y="1733" width="0.0416%" height="15" fill="rgb(222,211,4)" fg:x="74209" fg:w="31"/><text x="99.7686%" y="1743.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (46 samples, 0.06%)</title><rect x="99.5668%" y="1765" width="0.0617%" height="15" fill="rgb(214,102,34)" fg:x="74245" fg:w="46"/><text x="99.8168%" y="1775.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (12 samples, 0.02%)</title><rect x="99.6285%" y="1765" width="0.0161%" height="15" fill="rgb(245,92,5)" fg:x="74291" fg:w="12"/><text x="99.8785%" y="1775.50"></text></g><g><title>anon.7b2c9b8df3582b58c39c146a69fabf98.166.llvm.1210232436355180338 (65 samples, 0.09%)</title><rect x="99.5601%" y="1781" width="0.0872%" height="15" fill="rgb(252,72,51)" fg:x="74240" fg:w="65"/><text x="99.8101%" y="1791.50"></text></g><g><title>anon.ad36f6761088a7a3800235890a21115e.104.llvm.16567249849613869786 (35 samples, 0.05%)</title><rect x="99.6513%" y="1781" width="0.0469%" height="15" fill="rgb(252,208,19)" fg:x="74308" fg:w="35"/><text x="99.9013%" y="1791.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running (35 samples, 0.05%)</title><rect x="99.6513%" y="1765" width="0.0469%" height="15" fill="rgb(211,69,7)" fg:x="74308" fg:w="35"/><text x="99.9013%" y="1775.50"></text></g><g><title>anon.ad36f6761088a7a3800235890a21115e.90.llvm.16567249849613869786 (35 samples, 0.05%)</title><rect x="99.6983%" y="1781" width="0.0469%" height="15" fill="rgb(211,27,16)" fg:x="74343" fg:w="35"/><text x="99.9483%" y="1791.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running (35 samples, 0.05%)</title><rect x="99.6983%" y="1765" width="0.0469%" height="15" fill="rgb(219,216,14)" fg:x="74343" fg:w="35"/><text x="99.9483%" y="1775.50"></text></g><g><title>bincode::config::int::VarintEncoding::deserialize_varint (13 samples, 0.02%)</title><rect x="99.7452%" y="1781" width="0.0174%" height="15" fill="rgb(219,71,8)" fg:x="74378" fg:w="13"/><text x="99.9952%" y="1791.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (58 samples, 0.08%)</title><rect x="99.7841%" y="1781" width="0.0778%" height="15" fill="rgb(223,170,53)" fg:x="74407" fg:w="58"/><text x="100.0341%" y="1791.50"></text></g><g><title>std::time::Instant::checked_duration_since (14 samples, 0.02%)</title><rect x="99.8646%" y="1781" width="0.0188%" height="15" fill="rgb(246,21,26)" fg:x="74467" fg:w="14"/><text x="100.1146%" y="1791.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (28 samples, 0.04%)</title><rect x="99.9021%" y="1781" width="0.0375%" height="15" fill="rgb(248,20,46)" fg:x="74495" fg:w="28"/><text x="100.1521%" y="1791.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (11 samples, 0.01%)</title><rect x="99.9423%" y="1781" width="0.0148%" height="15" fill="rgb(252,94,11)" fg:x="74525" fg:w="11"/><text x="100.1923%" y="1791.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (16 samples, 0.02%)</title><rect x="99.9571%" y="1781" width="0.0215%" height="15" fill="rgb(236,163,8)" fg:x="74536" fg:w="16"/><text x="100.2071%" y="1791.50"></text></g><g><title>all (74,568 samples, 100%)</title><rect x="0.0000%" y="1813" width="100.0000%" height="15" fill="rgb(217,221,45)" fg:x="0" fg:w="74568"/><text x="0.2500%" y="1823.50"></text></g><g><title>tokio-runtime-w (47,904 samples, 64.24%)</title><rect x="35.7580%" y="1797" width="64.2420%" height="15" fill="rgb(238,38,17)" fg:x="26664" fg:w="47904"/><text x="36.0080%" y="1807.50">tokio-runtime-w</text></g></svg></svg>